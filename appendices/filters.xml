<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: takagi Status: ready -->
<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>利用できるフィルタのリスト</title>
 <para>
  以下は、<function>stream_filter_append</function> で利用できる
  組み込みフィルタのリストです。PHP のバージョンによっては
  このリスト以外のフィルタがあったり、このリストにあるフィルタが存在
  しなかったりするかもしれません。
 </para>

 <para>
  <function>stream_filter_append</function>
  と <function>stream_filter_prepend</function> のちょっとした違いに
  ついて説明します。
  すべての PHP ストリームはその内部に小さな<emphasis>読み込みバッファ</emphasis>
  を持っており、ファイルシステムもしくは他のリソースから読み込まれた
  データはこのバッファに格納されます。このことで、データをより効率的に
  扱うことができるのです。リソースがストリームの内部バッファに
  取り込まれたら、アプリケーション側で準備ができているかどうかに
  かかわらずすぐにフィルタ処理が行われます。フィルタが
  <emphasis>append</emphasis> されていた場合、読み込みバッファに
  はいってきたデータはすぐにフィルタ処理されます。つまり、バッファの
  存在をまったく意識せずに扱えるということです。しかし、もしフィルタが
  <emphasis>prepend</emphasis> されていた場合、読み込みバッファにデータが
  入ってきた段階ではフィルタ処理<emphasis>されません</emphasis>。
  リソースから次のデータブロックが読み込まれるまで、フィルタ処理を
  待機するのです。
 </para>

 <para>
  あなたが使っている PHP にどのようなフィルタが登録されているかを
  知るには、<function>stream_get_filters</function> を利用します。
 </para>

 <section xml:id="filters.string">
  <title>文字列フィルタ</title>

  <simpara>
   これらのフィルタは、まさしくその名が示すとおりの働きをし、PHP 組み込み
   の文字列処理関数と同じように動作します。これらのフィルタについての
   より詳しい情報は、対応する関数のマニュアルを参照してください。
  </simpara>

  <simpara>
   <literal>string.rot13</literal>
   (PHP 4.3.0 以降)
   このフィルタは、すべてのストリームデータに対して
   <function>str_rot13</function> 関数を適用するのと同じ動作をします。
  </simpara>
  <example>
   <title>string.rot13</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "This is a test.\n");
/* 出力:     Guvf vf n grfg.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.toupper</literal>
   (PHP 5.0.0 以降)
   このフィルタは、すべてのストリームデータに対して
   <function>strtoupper</function> 関数を適用するのと同じ動作をします。
  </simpara>
  <example>
   <title>string.toupper</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "This is a test.\n");
/* Outputs:  THIS IS A TEST.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.tolower</literal>
   (PHP 5.0.0 以降)
   このフィルタは、すべてのストリームデータに対して
   <function>strtolower</function> 関数を適用するのと同じ動作をします。
  </simpara>
  <example>
   <title>string.tolower</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "This is a test.\n");
/* 出力:     this is a test.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.strip_tags</literal>
   (PHP 5.0.0 以降)
   このフィルタは、すべてのストリームデータに対して
   <function>strip_tags</function> 関数を適用するのと同じ動作をします。
   以下の２つのうちどちらかの形式でパラメータを渡すことができます。
   ひとつは、<function>strip_tags</function> 関数の第２パラメータと同じ
   形式でタグを並べた文字列、もうひとつはタグ名の配列です。
  </simpara>
  <example>
   <title>string.strip_tags</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* 出力:     <b>bolded text</b> enlarged to a level 1 heading   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* 出力:     <b>bolded text</b> enlarged to a level 1 heading   */
?>
]]>
   </programlisting>
  </example>
   
 </section>

 <section xml:id="filters.convert">
  <title>変換フィルタ</title>

  <simpara>
   string.* フィルタと同様、convert.* フィルタもその名前と同じような
   動作をします。変換フィルタは、PHP 5.0.0 で追加されました。
   これらのフィルタについてのより詳しい情報は、対応する関数のマニュアルを
   参照してください。
  </simpara>

  <simpara>
   <literal>convert.base64-encode</literal> と
   <literal>convert.base64-decode</literal>
   このフィルタは、すべてのストリームデータに対してそれぞれ
   <function>base64_encode</function> または <function>base64_decode</function>
   関数を適用するのと同じ動作をします。
   <literal>convert.base64-encode</literal> は、パラメータを連想配列形式で
   受け取ることができます。<parameter>line-length</parameter> が与えられた
   場合、base64 出力は <parameter>line-length</parameter> 文字単位に
   分割されます。分割されたデータは、<parameter>line-break-chars</parameter>
   で指定された文字列で区切って出力されます。
   これらのパラメータは、<function>base64_encode</function> を
   <function>chunk_split</function> とともに利用した場合と同じ動作をします。
  </simpara>
  <example>
   <title>
    convert.base64-encode と
    convert.base64-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* 出力:     VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* 出力:     VGhpcyBp
       :     cyBhIHRl
       :     c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* 出力:     This is a test.  */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>convert.quoted-printable-encode</literal> と
   <literal>convert.quoted-printable-decode</literal>
   これらのフィルタのうち、デコードフィルタはすべてのストリームデータに
   対して <function>quoted_printable_decode</function> 関数を適用するのと
   同じ動作をします。 <literal>convert.quoted-printable-encode</literal>
   に対応する関数は存在しません。
   <literal>convert.quoted-printable-encode</literal> は、パラメータを
   連想配列形式で受け取ることができます。<literal>convert.base64-encode</literal>
   でサポートされているパラメータに加え、<literal>convert.quoted-printable-encode</literal>
   は <parameter>binary</parameter> と <parameter>force-encode-first</parameter>
   という２つの論理型パラメータをサポートしています。
   <literal>convert.base64-decode</literal> は
   <parameter>line-break-chars</parameter> パラメータのみをサポートしており、
   これは符号化されたデータを分割する際に用いられます。
  </simpara>
  <example>
   <title>
    convert.quoted-printable-encode と
    convert.quoted-printable-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* 出力:    =This is a test.=0A  */
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="filters.compression">
  <title>圧縮フィルタ</title>

  <simpara>
   <link linkend="wrappers.compression">圧縮ストリーム</link> を用いれば
   ローカルファイルシステム上に gzip や bz2 と互換性のある圧縮ファイルを
   作成することができます。しかし、これはネットワーク越しの圧縮機能を
   持っておらず、また非圧縮ストリームを圧縮されたストリームに変換することも
   できません。その点、圧縮フィルタはどんなストリームリソースでもどんな場合
   でも適用可能です。
  </simpara>

  <note>
   <simpara>
    圧縮フィルタは、<literal>gzip</literal> のようなコマンドライン
    ユーティリティで使われるヘッダを<emphasis>生成しません</emphasis>。
    これらのフィルタは、（ヘッダ部を除いた）データストリームの本体のみを
    圧縮・展開するものです。
   </simpara>
  </note>

  <simpara>
   <literal>zlib.deflate</literal> (圧縮) と
   <literal>zlib.inflate</literal> (展開) は、
   <link xlink:href="&url.rfc;1951">RFC 1951</link> で述べられている圧縮方法を
   実装したものです。<literal>deflate</literal> フィルタには、次の 3 つの
   パラメータを連想配列形式で渡すことができます:

   <parameter>level</parameter> は、圧縮の度合いを 1から9 までで表した
   ものです。数字が大きいほど圧縮後のサイズが小さくなりますが、そのぶん
   処理時間が長くかかります。次の2つの値は特別な意味を持ちます。
   0 (一切圧縮しない)、そして -1 (zlib のデフォルト設定 -- 現在は 6)。

   <parameter>window</parameter> は、圧縮用ループバックウィンドウのサイズを
   （2 を底とする）対数で指定します。大きな値 (15 -- つまり 32768 バイトまで
   引き上げる) を指定するとメモリをふんだんに利用してより小さく圧縮されます。
   一方、小さな値 (9 -- つまり 512 バイトまで絞り込む) を指定すると、圧縮の
   効率は落ちますがメモリの消費量を抑えられます。値を指定しなかった際の
   <parameter>window</parameter> の初期値は、現在 <constant>15</constant> です。

   <parameter>memory</parameter> は、作業用の一時メモリをどの程度割り当てるかを
   指定します。1 (最小限) から 9 (最大限) の間で指定できます。この値は
   圧縮の速度のみに影響し、圧縮後のデータのサイズには影響しません。
  </simpara>

  <note>
   <simpara>
    level は一番よく使われるパラメータなので、このパラメータについては
    （配列形式ではなく）直接整数値として設定することも可能にしています。
   </simpara>
  </note>

  <simpara>
    zlib.* 圧縮フィルタが有効になるのは、PHP バージョン <literal>5.1.0</literal>
    で <link linkend="ref.zlib">zlib</link> サポートが有効な場合です。
    また、<link xlink:href="&url.pecl;">PECL</link> から
    <link xlink:href="&url.pecl.package;zlib_filter">zlib_filter</link>
    パッケージをインストールすることで、バージョン <literal>5.0.x</literal>
    でも利用可能になります。これらのフィルタは、PHP 4 では利用<emphasis>できません</emphasis>。
  </simpara>

  <example>
   <title>
    <literal>zlib.deflate</literal> と
    <literal>zlib.inflate</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "もとのテキストの長さは " . strlen($original_text) . " 文字です。\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "圧縮後のファイルの大きさは " . filesize('test.deflated') . " バイトです。\n";
echo "もとのテキストは:\n";
/* readfile と zlib.inflate を利用し、メモリ上で展開します */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* 出力:

もとのテキストの長さは 70 文字です。
圧縮後のファイルの大きさは 56 バイトです。
もとのテキストは:
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>
    <literal>zlib.deflate</literal> のシンプルな例
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "もとのテキストの長さは " . strlen($original_text) . " 文字です。\n";

$fp = fopen('test.deflated', 'w');
/* この "6" は、パラメータ "level" が 6 であるということ */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "圧縮後のファイルの大きさは " . filesize('test.deflated') . " バイトです。\n";

/* 出力:

もとのテキストの長さは 70 文字です。
圧縮後のファイルの大きさは 56 バイトです。

 */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>bzip2.compress</literal> と
   <literal>bzip2.decompress</literal>
   は、上で示した zlib フィルタと同じような動作をします。

   <literal>bzip2.compress</literal>  フィルタには、次の 2 つの
   パラメータを連想配列形式で渡すことができます:

   <parameter>blocks</parameter> は 1 から 9 までの整数値を設定します。
   これは一時領域として割り当てるメモリのサイズを 100kバイトブロックの
   数で示したものです。
   <parameter>work</parameter> も整数値で、0 から 250 までの値を設定します。
   これは、通常の圧縮方法がうまくいかなかった際に、どのくらい再試行した後で
   速度の遅い（ただしより確実な）方法に切りかえるかを示します。
   このパラメータは圧縮の速度のみに影響します。圧縮後のデータのサイズや
   圧縮時のメモリ使用量は変わりません。0 を指定した場合は、bzip ライブラリの
   初期設定値が利用されます。

   <literal>bzip2.decompress</literal> フィルタには 1 つのパラメータを
   渡すことができます。このパラメータは普通に論理型の値として渡すことも
   できますし、連想配列形式で <parameter>small</parameter> という名前の
   要素として渡すこともできます。

   <parameter>small</parameter> を &true; に設定した場合、bzip ライブラリは
   メモリ使用量をできるだけ抑えるようになり、その分、処理速度は遅くなります。
  </simpara>

  <simpara>
    bzip2.* 圧縮フィルタが有効になるのは、PHP バージョン <literal>5.1.0</literal>
    で <link linkend="ref.bzip2">bz2</link> サポートが有効な場合です。
    また、<link xlink:href="&url.pecl;">PECL</link> から
    <link xlink:href="&url.pecl.package;bz2_filter">bz2_filter</link>
    パッケージをインストールすることで、バージョン <literal>5.0.x</literal>
    でも利用可能になります。これらのフィルタは、PHP 4 では利用<emphasis>できません</emphasis>。
  </simpara>

  <example>
   <title>
    <literal>bzip2.compress</literal> と
    <literal>bzip2.decompress</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "もとのファイルの大きさは " . filesize('LICENSE') . " バイトです。\n";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "圧縮後のファイルの大きさは " . filesize('LICENSE.compressed') . " バイトです。\n";

/* 出力:

もとのファイルの大きさは 3288 バイトです。
圧縮後のファイルの大きさは 1488 バイトです。

 */
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="filters.encryption">
  <title>暗号化フィルタ</title>

  <simpara>
   <literal>mcrypt.*</literal> と <literal>mdecrypt.*</literal>
   は、libmcrypt を用いた暗号化・復号化を行います。これらのフィルタは、
   <link linkend="ref.mcrypt">mcrypt 暗号化関数</link> で利用可能な
   アルゴリズムをサポートしており、<literal>mcrypt.ciphername</literal>
   という名前で利用できます。<parameter>ciphername</parameter> の部分は、
   <function>mcrypt_module_open</function> に渡すのと同じアルゴリズム名
   です。また、以下の 5 つのパラメータが利用できます。
  </simpara>

  <para>
   <table>
    <title>mcrypt フィルタのパラメータ</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>パラメータ名</entry>
       <entry>必須？</entry>
       <entry>初期値</entry>
       <entry>値の例</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>mode</entry>
       <entry>任意</entry>
       <entry>cbc</entry>
       <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
      </row>
      <row>
       <entry>algorithms_dir</entry>
       <entry>任意</entry>
       <entry>ini_get('mcrypt.algorithms_dir')</entry>
       <entry>アルゴリズムモジュールのある場所</entry>
      </row>
      <row>
       <entry>modes_dir</entry>
       <entry>任意</entry>
       <entry>ini_get('mcrypt.modes_dir')</entry>
       <entry>モードモジュールのある場所</entry>
      </row>
      <row>
       <entry>iv</entry>
       <entry>必須</entry>
       <entry>N/A</entry>
       <entry>通常は 8, 16, あるいは 32 バイトのバイナリデータ。暗号の形式に依存する</entry>
      </row>
      <row>
       <entry>key</entry>
       <entry>必須</entry>
       <entry>N/A</entry>
       <entry>通常は 8, 16, あるいは 32 バイトのバイナリデータ。暗号の形式に依存する</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <example>
   <title>3DES を用い、ファイルへの出力を暗号化する</title>
   <programlisting role="php">
<![CDATA[
<?php
$passphrase = 'My secret';

/* 可読形式のパスフレーズを、再現可能な
 * iv/key のペアに変換する
 */
$iv = substr(md5('iv'.$passphrase, true), 0, 8);
$key = substr(md5('pass1'.$passphrase, true) . 
               md5('pass2'.$passphrase, true), 0, 24);
$opts = array('iv'=>$iv, 'key'=>$key);

$fp = fopen('secert-file.enc', 'wb');
stream_filter_append($fp, 'mcrypt.tripledes', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'Secret secret secret data');
fclose($fp);
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>暗号化されたファイルを読み込む</title>
   <programlisting role="php">
<![CDATA[
<?php
$passphrase = 'My secret';

/* 可読形式のパスフレーズを、再現可能な
 * iv/key のペアに変換する
 */
$iv = substr(md5('iv'.$passphrase, true), 0, 8);
$key = substr(md5('pass1'.$passphrase, true) . 
               md5('pass2'.$passphrase, true), 0, 24);
$opts = array('iv'=>$iv, 'key'=>$key);

$fp = fopen('secert-file.enc', 'rb');
stream_filter_append($fp, 'mdecrypt.tripledes', STREAM_FILTER_WRITE, $opts);
$data = rtrim(stream_get_contents($fp));
fclose($fp);

echo $data;
?>
]]>
   </programlisting>
  </example>

 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
