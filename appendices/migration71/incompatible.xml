<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341552 Maintainer: takagi Status: working -->

<sect1 xml:id="migration71.incompatible">
 <title>下位互換性のない変更点</title>

 <sect2 xml:id="migration71.incompatible.too-few-arguments-exception">
  <title>関数に渡す引数が少ない場合の挙動</title>

  <para>
   これまでのバージョンでは、ユーザー定義の関数に渡す引数が足りない場合は
   warning が発生していました。PHP 7.1 以降では、warning ではなく
   Error 例外が発生するようになります。
   この変更はユーザー定義の関数に対してだけのもので、
   内部関数には影響を及ぼしません。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test($param){}
test();
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions">
  <title>スコープを調べる関数の動的呼び出しの禁止</title>

  <para>
   ある種の関数について、動的な呼び出し
   (<literal>$func()</literal> や <literal>array_map('extract', ...)</literal> のような形式)
   が使えなくなりました。対象になるのは、別のスコープを調べたり変更したり、
   あいまいな挙動になってしまったりするような関数です。
   この変更の影響を受ける関数は、以下のとおりです。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>assert</function> - 最初の引数に文字列を渡した場合
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>compact</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>extract</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_arg</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_num_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>get_defined_vars</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>mb_parse_str</function> - 引数が一つだけの場合
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>parse_str</function> - 引数が一つだけの場合
    </simpara>
   </listitem>
  </itemizedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
(function () {
    $func = 'func_num_args';
    $func();
})();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: Cannot call func_num_args() dynamically in %s on line %d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.invalid-class-names">
  <title>クラス、インターフェイス、トレイトに使えない名前</title>

  <para>
   これらのキーワードが、クラスやインターフェイスやトレイトの名前として使えなくなりました。
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>void</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>iterable</type></simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.numerical-strings-scientific-notation">
  <title>数値形式文字列の変換が科学記法に対応</title>

  <para>
   数値形式の文字列の演算や型変換が、科学記法に対応するようになりました。
   <literal>(int)</literal> によるキャストや、
   <function>intval</function> (基数が10の場合)、
   <function>settype</function>、<function>decbin</function>、
   <function>decoct</function>、<function>dechex</function> といった関数もその対象です。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fixes-to-mt_rand-algorithm">
  <title><function>mt_rand</function> のアルゴリズムの修正</title>

  <para>
   <function>mt_rand</function> のデフォルトが、修正版のメルセンヌ・ツイスタ
   アルゴリズムを使うようになりました。<function>mt_srand</function>
   の結果に依存するコードを書いていた場合は、<function>mt_srand</function>
   のオプションの第二引数に <constant>MT_RAND_PHP</constant>
   を指定すると、これまでの挙動 (間違った実装) を維持できます。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.rand-srand-aliases">
  <title>
   <function>rand</function> と <function>srand</function> が、
   それぞれ <function>mt_rand</function> と <function>mt_srand</function> のエイリアスとなる
  </title>

  <para>
   <function>rand</function> と <function>srand</function> は、それぞれ
   <function>mt_rand</function> と <function>mt_srand</function>
   のエイリアスになりました。つまり、
   <function>rand</function>、<function>shuffle</function>、
   <function>str_shuffle</function>、<function>array_rand</function>
   の出力がこれまでのバージョンとは変わるということです。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.delete-control-character-in-identifiers">
  <title>ASCII 制御文字 delete は識別子として使えない</title>

  <para>
   ASCII 制御文字 delete (<literal>0x7F</literal>) は、
   クォートしない限りは識別子として使えなくなりました。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.error_log-syslog">
  <title>
   <parameter>error_log</parameter> に <literal>syslog</literal> を指定した場合の変更
  </title>

  <para>
   INI 項目 <parameter>error_log</parameter> の設定値を
   <literal>syslog</literal> にした場合に、PHP のエラーレベルが syslog
   のエラーレベルにマッピングされるようになりました。
   これまでのバージョンではすべてのエラーが notice レベルで記録されていましたが、
   この変更によって、今までよりも細やかな区別ができるようになります。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.dont-call-destructors">
  <title>未完成のオブジェクトのデストラクタは呼び出されない</title>

  <para>
   オブジェクトのコンストラクタの実行中に例外がスローされた場合に、
   そのオブジェクトのデストラクタが呼ばれることはなくなりました。
   以前のバージョンでは、場合によっては
   (例: そのオブジェクトが例外バックトレースなどで外部から参照される場合)
   デストラクタが呼ばれることもありました。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.call_user_func-with-ref-args">
  <title>
   参照渡しの引数の <function>call_user_func</function> での扱い
  </title>

  <para>
   引数を参照渡しで受け取る関数を <function>call_user_func</function>
   から呼んだときに、例外が発生するようになりました。
   以前のバージョンでは、完全修飾形式の呼び出しであるか否かによってこの場合の挙動が異なっていました。
  </para>
  <para>
   さらにこの場合、<function>call_user_func</function> や
   <function>call_user_func_array</function> は関数呼び出しを中断しなくなりました。
   "expected reference" という警告は出すものの、処理自体はそのまま続行します。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-index-operator">
  <title>
   文字列における空のインデックス演算子はサポートしない
  </title>

  <para>
   文字列に空のインデックス演算子を適用する (例: <literal>$str[] = $x</literal>)
   と、fatal エラーが発生します。これまでのバージョンではエラーにならず、
   ただ配列に変換されるだけでした。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.removed-ini-directives">
  <title>削除された INI 項目</title>

  <para>
   以下の INI 項目は、削除されました。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>session.entropy_file</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.entropy_length</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_function</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_bits_per_character</parameter>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.array-order">
  <title>
   参照による代入で自動的に作られる配列の要素の並び順の変更
  </title>

  <para>
   参照による代入で配列の要素が自動的に作られる場合に、その並び順が変更されました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.70;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.71;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.sort-order">
  <title>同値な要素の並び順</title>
  <para>
   内部的なソートアルゴリズムが改良されたことに伴って、
   比較したときに等しいとみなされる要素の並び順が以前とは変わるかもしれません。
  </para>
  <note>
   <para>
    同値な要素の並び順に依存するコードは書かないようにしましょう。
    その並び順がいつまでも同じであるとは限りません。
   </para>
  </note>
 </sect2>

 <sect2 xml:id="migration71.incompatible.e-recoverable">
  <title>Error message for E_RECOVERABLE errors</title>
  <para>
   The error message for E_RECOVERABLE errors has been changed from "Catchable
   fatal error" to "Recoverable fatal error".
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.unserialize">
  <title>$options parameter of unserialize()</title>
  <para>
   The <literal>allowed_classes</literal> element of the $options parameter of
   <function>unserialize</function> is now strictly typed, i.e. if anything
   other than an <type>array</type> or a <type>boolean</type> is given,
   unserialize() returns &false; and issues an <constant>E_WARNING</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.datetime-microseconds">
  <title>DateTime constructor incorporates microseconds</title>
  <para>
   <classname>DateTime</classname> and <classname>DateTimeImmutable</classname>
   now properly incorporate microseconds when constructed from the current time,
   either explicitly or with a relative string (e.g. <literal>"first day of next
   month"</literal>). This means that naive comparisons of two newly created
   instances will now more likely return &false; instead of &true;:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new DateTime() == new DateTime();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fatal-errors-to-error-exceptions">
  <title>Fatal errors to <classname>Error</classname> exceptions conversions</title>
  <para>
   In the Date extension, invalid serialization data for
   <classname>DateTime</classname> or <classname>DatePeriod</classname> classes,
   or timezone initialization failure from serialized data, will now throw an
   <classname>Error</classname> exception from the
   <methodname>__wakeup</methodname> or <methodname>__set_state</methodname>
   methods, instead of resulting in a fatal error.
  </para>

  <para>
   In the DBA extension, data modification functions (such as
   <function>dba_insert</function>) will now throw an
   <classname>Error</classname> exception instead of triggering a catchable
   fatal error if the key does not contain exactly two elements.
  </para>

  <para>
   In the DOM extension, invalid schema or RelaxNG validation contexts will now
   throw an <classname>Error</classname> exception instead of resulting in a
   fatal error. Similarly, attempting to register a node class that does not
   extend the appropriate base class, or attempting to read an invalid property
   or write to a readonly property, will also now throw an
   <classname>Error</classname> exception.
  </para>

  <para>
   In the IMAP extension, email addresses longer than 16385 bytes will throw an
   <classname>Error</classname> exception instead of resulting in a fatal error.
  </para>

  <para>
   In the Intl extension, failing to call the parent constructor in a class
   extending <classname>Collator</classname> before invoking the parent methods
   will now throw an <classname>Error</classname> instead of resulting in a
   recoverable fatal error. Also, cloning a
   <classname>Transliterator</classname> object will now throw an
   <classname>Error</classname> exception on failure to clone the internal
   transliterator instead of resulting in a fatal error.
  </para>

  <para>
   In the LDAP extension, providing an unknown modification type to
   <function>ldap_batch_modify</function> will now throw an
   <classname>Error</classname> exception instead of resulting in a fatal error.
  </para>

  <para>
   In the mbstring extension, the <function>mb_ereg</function> and
   <function>mb_eregi</function> functions will now throw a
   <classname>ParseError</classname> exception if an invalid PHP expression is
   provided and the 'e' option is used.
  </para>

  <para>
   In the Mcrypt extension, the <function>mcrypt_encrypt</function> and
   <function>mcrypt_decrypt</function> will now throw an
   <classname>Error</classname> exception instead of resulting in a fatal error
   if mcrypt cannot be initialized.
  </para>

  <para>
   In the mysqli extension, attempting to read an invalid property or write to
   a readonly property will now throw an <classname>Error</classname> exception
   instead of resulting in a fatal error.
  </para>

  <para>
   In the Reflection extension, failing to retrieve a reflection object or
   retrieve an object property will now throw an <classname>Error</classname>
   exception instead of resulting in a fatal error.
  </para>

  <para>
   In the Session extension, custom session handlers that do not return strings
   for session IDs will now throw an <classname>Error</classname> exception
   instead of resulting in a fatal error when a function is called that must
   generate a session ID.
  </para>

  <para>
   In the SimpleXML extension, creating an unnamed or duplicate attribute will
   now throw an <classname>Error</classname> exception instead of resulting in
   a fatal error.
  </para>

  <para>
   In the SPL extension, attempting to clone an
   <classname>SplDirectory</classname> object will now throw an
   <classname>Error</classname> exception instead of resulting in a fatal
   error. Similarly, calling <methodname>ArrayIterator::append</methodname> when
   iterating over an object will also now throw an <classname>Error</classname>
   exception.
  </para>

  <para>
   In the standard extension, the <function>assert</function> function, when
   provided with a string argument as its first parameter, will now throw a
   <classname>ParseError</classname> exception instead of resulting in a
   catchable fatal error if the PHP code is invalid. Similarly, calling
   <function>forward_static_call</function> outside of a class scope will now
   throw an <classname>Error</classname> exception.
  </para>

  <para>
   In the Tidy extension, creating a <classname>tidyNode</classname> manually
   will now throw an <classname>Error</classname> exception instead of
   resulting in a fatal error.
  </para>

  <para>
   In the WDDX extension, a circular reference when serializing will now throw
   an <classname>Error</classname> exception instead of resulting in a fatal
   error.
  </para>

  <para>
   In the XML-RPC extension, a circular reference when serializing will now
   throw an instance of <classname>Error</classname> exception instead of
   resulting in a fatal error.
  </para>

  <para>
   In the Zip extension, the <methodname>ZipArchive::addGlob</methodname>
   method will now throw an <classname>Error</classname> exception instead of
   resulting in a fatal error if glob support is not available.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.lexical-names">
  <title>Lexically bound variables cannot reuse names</title>

  <para>
   Variables bound to a <link linkend="functions.anonymous">closure</link> via
   the <literal>use</literal> construct cannot use the same name as any
   &link.superglobals;, <varname>$this</varname>, or any parameter. For
   example, all of these function definition will result in a fatal error:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$f = function () use ($_SERVER) {};
$f = function () use ($this) {};
$f = function ($param) use ($param) {};
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.json">
  <title>JSON encoding and decoding</title>
  <para>
   The <parameter>serialize_precision</parameter> ini setting now controls the
   serialization precision when encoding doubles.
  </para>
  <para>
   Decoding an empty key now results in an empty property name, rather than 
   <literal>_empty_</literal> as a property name.

   <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(json_decode(json_encode(['' => 1])));
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  [""]=>
  int(1)
}
]]>
   </screen>
  </informalexample>
  </para>
  <para>
   When supplying the <constant>JSON_UNESCAPED_UNICODE</constant> flag to
   <function>json_encode</function>, the sequences U+2028 and U+2029 are now
   escaped.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.mbstring">
  <title>
   Changes to <function>mb_ereg</function> and <function>mb_eregi</function>
   parameter semantics
  </title>
  <para>
   The third paramter to the <function>mb_ereg</function> and
   <function>mb_eregi</function> functions (<parameter>regs</parameter>) will now be
   set to an empty array if nothing was matched. Formely, the parameter would
   not have been modified.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.openssl">
  <title>Drop support for the sslv2 stream</title>
  <para>
   The sslv2 stream has now been dropped in OpenSSL.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
