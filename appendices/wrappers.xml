<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
 <appendix id="wrappers">
  <title>サポートされるプロトコル/ラッパー</title>
  <para>
   <function>fopen</function> and <function>copy</function>のようなファ
   イルシステム関数で使用するためにPHPに組み込まれたURL型式のプロトコ
   ルの一覧を示します。これらのラッパーに加えて、PHP 4.3以降では、PHP
   スクリプトと<function>stream_register_wrapper</function>により、ユー
   ザ独自のラッパーを書くことができます。
  </para>

  <section id="wrappers.http">
   <title>HTTPおよびHTTPS</title>
   <simpara>PHP 3, PHP 4。PHP 4.3以降では <filename>https://</filename></simpara>
   
   <itemizedlist>
    <listitem><simpara><filename>http://example.com</filename></simpara></listitem>
    <listitem><simpara><filename>http://user:password@example.com</filename></simpara></listitem>
    <listitem><simpara><filename>https://example.com</filename></simpara></listitem>
    <listitem><simpara><filename>https://user:password@example.com</filename></simpara></listitem>
   </itemizedlist>

   <simpara>
    HTTP 1.0によりHTTP GETメソッドを用いてファイル/リソースに読み込み
    のみのアクセスが可能です。仮想ホストにホスト名でアクセスするために、
    <literal>Host:</literal> ヘッダが送信されます。
    iniファイルまたはストリームコンテキストにより、
    <link linkend="ini.user-agent">user_agent</link>文字列を設定してい
    る場合、リクエストの中にも含まれます。
   </simpara>
   <simpara>
    PHP 4.0.5以降、リダイレクトがサポートされています。これ以前のバー
    ジョンを使用している場合、URLの末尾にスラッシュを付ける必要があり
    ます。
   </simpara>
   <simpara>
    ストリームにより、リソースの<emphasis>本体</emphasis> にアクセスで
    きるようになります。ヘッダは、
    <varname>$http_response_header</varname>変数に保存されます。
    PHP 4.3以降、ヘッダは、<function>stream_get_meta_data</function>に
    よりアクセス可能です。
   </simpara>
   <simpara>
    HTTP 接続は、読み込みのみ可です。HTTPリソースにデータを書き込んだ
    り、ファイルをコピーすることはできません。
   </simpara>
   <note>
    <simpara>
     HTTPSは、PHP 4.3以降でサポートされており、OpenSSLのサポートを有効
     にした場合のみ使用できます。
    </simpara>
   </note>
  </section>
  
 <section id="wrappers.ftp">
  <title>FTPとFTPS</title>
   <simpara>PHP 3, PHP 4.  <filename>ftps://</filename> since PHP 4.3</simpara>
   
   <itemizedlist>
    <listitem><simpara><filename>ftp://example.com/pub/file.txt</filename></simpara></listitem>
    <listitem><simpara><filename>ftp://user:password@example.com/pub/file.txt</filename></simpara></listitem>
    <listitem><simpara><filename>ftps://example.com/pub/file.txt</filename></simpara></listitem>
    <listitem><simpara><filename>ftps://user:password@example.com/pub/file.txt</filename></simpara></listitem>
   </itemizedlist>
   
   <simpara>
    FTPにより既存のファイルに読み込みアクセスをしたり、新規にファイル
    を作成することができます。サーバがパッシブモードftpをサポートしな
    い場合、接続は失敗します。
   </simpara>
   <simpara>
    読み込み用または書き込み用でファイルをオープンすることが可能ですが、
    読み書き両用でオープンすることはできません。
    ftpサーバにあるファイルが既に存在する場合、そのファイルを書き込み
    用にオープンしようとした場合には、接続は失敗します。
    既存のファイルをftpにより更新する必要がある場合には、
    <function>ftp_connect</function>を使用して下さい。
   </simpara>
   <simpara>
    <filename>ftps://</filename> は PHP 4.3で導入されました。
    これは、<filename>ftp://</filename>と同じですが、ftpサーバについて
    セキュアな接続の確立を試みます。
    サーバがSSLをサポートしない場合、接続は通常の暗号化されないftp接続
    で代用されます。
   </simpara>
   <note>
    <simpara>
     FTPSは、PHP 4.3以降でサポートされており、OpenSSLのサポートを有効
     にしていることが必要です。
    </simpara>
   </note>
   
  </section>
  
  <section id="wrappers.php">
   <title>PHP 入出力 ストリーム</title>
   <simpara>
    PHP 3.0.13以降、<filename>php://output</filename> 、そして、
    PHP 4.3以降、<filename>php://input</filename>
   </simpara>
   
   <itemizedlist>
    <listitem><simpara><filename>php://stdin</filename></simpara></listitem>
    <listitem><simpara><filename>php://stdout</filename></simpara></listitem>
    <listitem><simpara><filename>php://stderr</filename></simpara></listitem>
    <listitem><simpara><filename>php://output</filename></simpara></listitem>
    <listitem><simpara><filename>php://input</filename></simpara></listitem>
   </itemizedlist>
   
   <simpara>
    <filename>php://stdin</filename>、 <filename>php://stdout</filename> 
    と<filename>php://stderr</filename> により、対応するPHPプロセスの
    入力または出力ストリームにアクセスできるようになります。
   </simpara>
   <simpara>
    <filename>php://output</filename> により、
    <function>print</function> および<function>echo</function>と同様の
    手法により、出力バッファに書き込むことができるようになります。
   </simpara>
   <simpara>
    <filename>php://input</filename> により、raw POSTデータを読み込む
    ことができるようになります。これは、
    <varname>$HTTP_RAW_POST_DATA</varname>よりメモリ消費量が少なく、
    代わりとなるものです。また、特別な&php.ini;ディレクティブを全く必
    要としません。
   </simpara>
   <simpara>
    <filename>php://stdin</filename> および
    <filename>php://input</filename> は読み込みのみ可です。一方、
    <filename>php://stdout</filename>,
    <filename>php://stderr</filename> および
    <filename>php://output</filename> は、書き込みのみ可です。
   </simpara>
  </section>
  
  <section id="wrappers.compression">
   <title>圧縮ストリーム</title>
   <simpara><filename>zlib:</filename> PHP 4.0.4 - PHP 4.2.3
   (fopencookieを有するシステムのみ)</simpara>
   <simpara><filename>compress.zlib://</filename>および
   <filename>compress.bzip2://</filename> PHP 4.3以降</simpara>
   
   <itemizedlist>
    <listitem><simpara><filename>zlib:</filename></simpara></listitem>
    <listitem><simpara><filename>compress.zlib://</filename></simpara></listitem>
    <listitem><simpara><filename>compress.bzip2://</filename></simpara></listitem>
   </itemizedlist>
   
   <simpara> 
    <filename>zlib:</filename> は、<function>gzopen</function>と同様に
    動作しますが、このストリームは<function>fread</function> および他
    のファイルシステム関数と組み合わせて使用することができるところが異
    なります。この機能ではファイル名に':'文字が含まれる曖昧さがあるた
    め、PHP 4.3以降では古い機能となっています。代わりに
    <filename>compress.zlib://</filename> を使用して下さい。
   </simpara>
   
   <simpara>
    <filename>compress.zlib://</filename>および
    <filename>compress.bzip2://</filename>は、それぞれ
    <function>gzopen</function> および <function>bzopen</function>と等
    価で、fopencookieをサポートしないシステムの上でも動作します。
   </simpara>
  </section>
 </appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
