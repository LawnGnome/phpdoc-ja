<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->

 <appendix id="reserved">
  <title>予約語の一覧</title>
  <para>
  以下にPHPで定義済みのIDの一覧を示します。ここに示すIDはいずれもスク
  リプトの中でIDとして使用することはできません。これらの一覧には、キー
  ワード、定義済みの変数、定数、クラス名が含まれています。これらの一覧
  は、全てを網羅しているわけではありません。
  </para>

  <sect1 id="reserved.keywords">
  <title>キーワードのリスト</title>
   <simpara>
   これらのキーワードは、PHPでは特別な意味があります。これらのいくつか
   は、関数のようなものを表し、いくつかは定数のようなものを表す、といっ
   たようになっていますが、実際にはそうではありません。実際には、これ
   らは言語を構成するものです。以下のキーワードはいずれも定数、クラス
   名、関数名として使用することはできません。これらを変数名として使用
   することは一般的には可能ですが、混乱を生じる可能性があります。
   </simpara>

   <table>
    <title>PHPのキーワード</title>
    <tgroup cols="4">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        __FILE__
       </entry>
      </row>
      <row>
       <entry>
        __LINE__
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="functions.old-syntax">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="functions.old-syntax">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>定義済の変数</title>

   <sect2 id="reserved.variables.server">
    <title>サーバ変数: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      4.1.0で導入されました。これ以前のバージョンでは、
      <varname>$HTTP_SERVER_VARS</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> は、ヘッダ、パス、スクリプトの位置の
     ような情報を有する配列です。この配列のエントリは、Webサーバにより
     生成されます。全てのWebサーバがこれら全てを提供する保障はありませ
     ん。サーバは、これらのいくつかを省略したり、この一覧にない他のも
     のを定義する可能性があります。これらの変数の多くは、
     <ulink url="&url.cgispec;">CGI 1.1 specification</ulink>で定義さ
     れています。したがって、これらについては定義されていることを期待
     することができます。
    </simpara>

    <simpara>
    これは、'スーパーグローバル(superglobal)'、または自動グローバル
     (automatic global)、変数です。これは、スクリプトの全てのスコープ
     で利用可能であることを意味します。関数やメソッドの中からこの変数
     にアクセスする際に <varname>$HTTP_SERVER_VARS</varname> のように
     <command>global $_SERVER;</command> とする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> の最初の情報は同じですが、
     autoglobalではありません。(<varname>HTTP_SERVER_VARS</varname> と
     <varname>$_SERVER</varname>は異なる変数であり、PHPは異なる変数と
     して処理を行うことに注意して下さい)
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> ディ
     レクティブを設定した場合、これらの変数は、スクリプトのグローバル
     スコープ、つまり、配列 <varname>$_SERVER</varname> 及び
     <varname>$HTTP_SERVER_VARS</varname> 以外のグローバル変数として
     利用可能となります。関連情報については、
     <link linkend="security.registerglobals">register_globalsの使用法
     </link>という名前のセキュリティに関する章を参照下さい。
     これらの各グローバル変数は、autoglobalではありません。
    </simpara>

    <simpara>
    以下の各要素のいくつかは $_SERVER に現れない可能性があります。PHP
    をコマンドラインで実行している場合には、使用できるものは僅かである
    ことに注意して下さい。
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         The filename of the currently executing script, relative to
         the document root. For instance,
         <varname>$_SERVER['PHP_SELF']</varname> in a script at the
         address <filename>http://example.com/test.php/foo.bar</filename>
         would be <filename>/test.php/foo.bar</filename>.
        </simpara>
        <simpara>
         If PHP is running as a command-line processor, this variable
         is not available.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Array of arguments passed to the script. When the script is
         run on the command line, this gives C-style access to the
         command line parameters. When called via the GET method, this
         will contain the query string.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contains the number of command line parameters passed to the
         script (if run on the command line).
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         What revision of the CGI specification the server is using;
         i.e. '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         The name of the server host under which the current script is
         executing. If the script is running on a virtual host, this
         will be the value defined for that virtual host.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Server identification string, given in the headers when
         responding to requests.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Name and revision of the information protocol via which the
         page was requested; i.e. '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Which request method was used to access the page; i.e. '<literal>GET</literal>',
         '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         The query string, if any, via which the page was accessed.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         The document root directory under which the current script is
         executing, as defined in the server's configuration file.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept:</literal> header from the
         current request, if there is one.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept-Charset:</literal> header
         from the current request, if there is one. Example:
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept-Encoding:</literal> header
         from the current request, if there is one. Example: '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept-Language:</literal> header
         from the current request, if there is one. Example: '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Connection:</literal> header from
         the current request, if there is one. Example: '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Host:</literal> header from the
         current request, if there is one.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         The address of the page (if any) which referred the user
         agent to the current page. This is set by the user agent. Not
         all user agents will set this, and some provide the ability
         to modify <varname>HTTP_REFERER</varname> as a feature. In
         short, it cannot really be trusted.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>User_Agent:</literal> header from
         the current request, if there is one. This is a string
         denoting the user agent being which is accessing the page. A
         typical example is: <computeroutput>Mozilla/4.5 [en] (X11; U;
         Linux 2.2.9 i586)</computeroutput>. Among other things, you
         can use this value with <function>get_browser</function> to
         tailor your page's output to the capabilities of the user
         agent.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         The IP address from which the user is viewing the current
         page.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         The port being used on the user's machine to communicate with
         the web server.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <simpara>
         The absolute pathname of the currently executing script.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         The value given to the SERVER_ADMIN (for Apache) directive in
         the web server configuration file. If the script is running
         on a virtual host, this will be the value defined for that
         virtual host.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         The port on the server machine being used by the web server
         for communication. For default setups, this will be '<literal>80</literal>';
         using SSL, for instance, will change this to whatever your
         defined secure HTTP port is.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         String containing the server version and virtual host name
         which are added to server-generated pages, if enabled.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Filesystem- (not document root-) based path to the current
         script, after the server has done any virtual-to-real
         mapping.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contains the current script's path. This is useful for pages
         which need to point to themselves.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         The URI which was given in order to access this page; for
         instance, '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>環境変数: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      4.1.0で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_ENV_VARS</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     These variables are imported into PHP's global namespace from the
     environment under which the PHP parser is running. Many are
     provided by the shell under which PHP is running and different
     systems are likely running different kinds of shells, a
     definitive list is impossible. Please see your shell's
     documentation for a list of defined environment variables.
    </simpara>

    <simpara>
     Other environment variables include the CGI variables, placed
     there regardless of whether PHP is running as a server module or
     CGI processor.
    </simpara>
	
    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_ENV;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_ENV_VARS</varname> and <varname>$_ENV</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_ENV</varname> and <varname>$HTTP_ENV_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTPクッキー: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      4.1.0で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_COOKIE_VARS</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via HTTP cookies.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_COOKIE;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_COOKIE_VARS</varname> and <varname>$_COOKIE</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_COOKIE</varname> and <varname>$HTTP_COOKIE_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET 変数: <varname>$_GET</varname></title>

    <note>
     <simpara>
      4.1.0で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_GET_VARS</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via the HTTP GET method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_GET;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_GET_VARS</varname> and <varname>$_GET</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_GET</varname> and <varname>$HTTP_GET_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST 変数: <varname>$_POST</varname></title>

    <note>
     <simpara>
      4.1.0で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_POST_VARS</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via the HTTP POST method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_POST;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_POST_VARS</varname> and <varname>$_POST</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_POST</varname> and <varname>$HTTP_POST_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>HTTPファイルアップロード変数: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      4.1.0で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_POST_FILES</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     An associative array of items uploaded to the current script
     via the HTTP POST method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_FILES;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contains the same
     information, but is not an autoglobal.
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_FILES</varname> and <varname>$HTTP_POST_FILES</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>リクエスト変数: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
     4.1.0で導入されました。以前のバージョンには、同等な配列はありませ
     ん。
     </simpara>
    </note>
    
    <simpara>
     An associative array consisting of the contents of
     <varname>$_GET</varname>, <varname>$_POST</varname>,
     <varname>$_COOKIE</varname>, and <varname>$_FILES</varname>.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_REQUEST;</command> to access it within functions or methods.
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_REQUEST</varname> array.  For related information, see
     the security chapter titled <link
     linkend="security.registerglobals">Using Register
     Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>セッション変数: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
     4.1.0で導入されました。これ以前のバージョンでは、
      <varname>$HTTP_SESSION_VARS</varname>を使用して下さい。
     </simpara>
    </note>
    
    <simpara>
     An associative array containing session variables available to
     the current script. See the <link linkend="ref.session">Session
      functions</link> documentation for more information on how this
     is used.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_SESSION;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contains the same
     information, but is not an autoglobal. 
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_SESSION</varname> and <varname>$HTTP_SESSION_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>グローバル変数: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname>は、PHP 3.0.0以降で利用可能です。
     </simpara>
    </note>
    
    <simpara>
     An associative array containing references to all variables which
     are currently defined in the global scope of the script. The
     variable names are the keys of the array.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $GLOBALS;</command> to access it within functions or methods.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>The previous error message: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> is a variable containing the
     text of the last error message generated by PHP. This variable
     will only be available within the scope in which the error
     occurred, and only if the <link
     linkend="ini.track-errors">track_errors</link> configuration
     option is turned on (it defaults to off).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>定義済のクラス</title>

   <sect2 id="reserved.classes.standard">
    <title>標準で定義されているクラス</title>

    <simpara>
     These classes are defined in the standard set of functions included
     in the PHP build.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        The class from which <function>dir</function> is instantiated.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.ming">
    <title><link linkend="ref.ming">Ming</link>で定義されるクラス</title>

    <simpara>
     These classes are defined in the 
     <link linkend="ref.ming">Ming</link> 
     extension, and will only be available when that extension has either 
     been compiled into PHP or dynamically loaded at runtime.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title><link linkend="ref.oci8">Oracle 8</link>で定義されるクラス</title>

    <simpara>
     These classes are defined in the <link
     linkend="ref.oci8">Oracle 8</link> extension, and will only be
     available when that extension has either been compiled into PHP
     or dynamically loaded at runtime.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title><link linkend="ref.qtdom">qtdom</link>で定義されるクラス</title>

    <simpara>
     These classes are defined in the 
     <link linkend="ref.qtdom">qtdom</link> 
     extension, and will only be available when that extension has either 
     been compiled into PHP or dynamically loaded at runtime.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>

   </sect1>
  
  &appendices.reserved.constants;

  </appendix>
 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
