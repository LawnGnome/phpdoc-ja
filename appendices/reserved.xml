<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.31 $ -->
<!-- EN-Revision: 1.71 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
 <appendix xml:id="reserved" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>予約語の一覧</title>
  <para>
  以下に PHP で定義済みの ID の一覧を示します。ここに示す ID はいずれも
  スクリプトの中で ID として使用することはできません。これらの一覧には
  キーワード、定義済みの変数、定数、クラス名が含まれています。これらの一覧は、
  全てを網羅しているわけではありません。
  </para>

  <sect1 xml:id="reserved.keywords">
   <title>キーワードのリスト</title>
   <simpara>
    これらのキーワードは、PHP では特別な意味があります。これらのいくつかは
    関数やメソッドのようなものを表し、いくつかは定数のようなものを表す、
    といったようになっていますが、実際にはそうではありません。実際には、
    これらは言語を構成するものです。以下のキーワードはいずれも定数、クラス名、
    関数名として使用することはできません。
    これらを変数名として使用することは一般的には可能ですが、
    混乱を生じる可能性があります。
   </simpara>

   <table>
    <title>PHP のキーワード</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        <link linkend="language.oop5.constants">const</link>
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <function>eval</function>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        <link linkend="language.namespaces">use</link>
       </entry>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
       <entry>
        <link linkend="language.oop5.final">final</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link> (PHP 5 以降)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.interfaces">interface</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.oop5.interfaces">implements</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.operators.type">instanceof</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">public</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">private</link> (PHP 5 以降)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.visibility">protected</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.oop5.abstract">abstract</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.oop5.cloning">clone</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.exceptions">try</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.exceptions">catch</link> (PHP 5 以降)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.exceptions">throw</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="migration.old-function">cfunction</link> (PHP 4 のみ)
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link> (PHP 4 のみ)
       </entry>
       <entry>
        <link linkend="keyword.class">this</link> (PHP 5 以降)
       </entry>
       <entry>
        <link linkend="language.oop5.final">final</link> (PHP 5 以降)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.namespaces">__NAMESPACE__</link> (PHP 5.3 以降)
       </entry>
       <entry>
        <link linkend="language.namespaces">namespace</link> (PHP 5.3 以降)
       </entry>
       <entry>
        goto (PHP 6 only)
       </entry>
       <entry> 
        <link linkend="language.constants.predefined">__DIR__</link> (PHP 5.3 以降)
       </entry>
       <entry>        
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 xml:id="reserved.variables">
   <title>定義済の変数</title>

   <para>
    PHP 4.1.0 以降、
    <link linkend="language.variables.external">外部から来る変数</link>
    を取得するのに推奨される方法は以下に述べるスーパーグローバルを
    用いることです。それまでは、
    <link linkend="ini.register-globals">register_globals</link>
    または定義済みの PHP 配列(<varname>$HTTP_*_VARS</varname>)に
    依存していました。
    &avail.register-long-arrays;
   </para>

   <sect2 xml:id="reserved.variables.server">
    <title>サーバ変数: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      4.1.0 で導入されました。これ以前のバージョンでは、
      <varname>$HTTP_SERVER_VARS</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> は、ヘッダ、パス、スクリプトの位置のような
     情報を有する配列です。この配列のエントリは、Web サーバにより
     生成されます。全ての Web サーバがこれら全てを提供する保障はありません。
     サーバは、これらのいくつかを省略したり、この一覧にない他のものを
     定義する可能性があります。これらの変数の多くは、
     <link xlink:href="&url.cgispec;">CGI 1.1 specification</link>
     で定義されています。したがって、これらについては定義されていることを
     期待することができます。
    </simpara>

    <simpara>
    これは、'スーパーグローバル(superglobal)'、または自動グローバル
     (automatic global)、変数です。これは、スクリプトの全てのスコープで
     利用可能であることを意味します。関数やメソッドの中からこの変数に
     アクセスする際に <varname>$HTTP_SERVER_VARS</varname> のように
     <command>global $_SERVER;</command> とする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> の最初の情報は同じですが、
     スーパーグローバルではありません (<varname>HTTP_SERVER_VARS</varname> と
     <varname>$_SERVER</varname> は異なる変数であり、
     PHP は異なる変数として処理を行うことに注意してください)。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link>
     ディレクティブを設定した場合、これらの変数は、スクリプトの
     グローバルスコープ、つまり配列 <varname>$_SERVER</varname> 及び
     <varname>$HTTP_SERVER_VARS</varname> 以外のグローバル変数として
     利用可能となります。関連情報については、
     <link linkend="security.globals">register_globals の使用法
     </link>という名前のセキュリティに関する章を参照ください。
     これらの各グローバル変数は、スーパーグローバルではありません。
    </simpara>

    <simpara>
    以下の各要素のいくつかは $_SERVER に現れない可能性があります。PHP
    をコマンドラインで実行している場合には、
    使用できるものは僅かであることに注意してください。
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         現在実行しているスクリプトのファイル名です。
         ドキュメントルートから取得されます。
         例えば、<filename>http://example.com/test.php/foo.bar</filename>
         というアドレス上にあるスクリプトでは <varname>$_SERVER['PHP_SELF']</varname>
         は <filename>/test.php/foo.bar</filename> となります。
         <link linkend="language.constants.predefined">__FILE__</link> 定数
         には、カレント(すなわち読み込まれた)ファイルのパスとファイル名が含まれます。
        </simpara>
        <simpara>
         PHP がコマンドラインから実行される場合、PHP 4.3.0 以降、
         この変数にはスクリプト名が含まれます。これより前のバージョンでは、
         この変数は使用できません。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         スクリプトに渡された引数の配列です。スクリプトがコマンドラインから
         実行された場合、C 言語スタイルでコマンドライン引数に
         アクセスすることができます。GET メソッドを通してコールされた場合には
         検索引数が格納されます。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         スクリプトに渡された引数の数が格納されます
         （コマンドライン上で実行された場合）。
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         サーバが使用している CGI のバージョンです。
         例 '<literal>CGI/1.1</literal>'
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADDR</varname>'</term>
       <listitem>
        <simpara>
         現在のスクリプトが実行されているサーバの IP アドレスです。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         現在のスクリプトが実行されているサーバのホスト名です。
         スクリプトがバーチャルホスト上で実行されている場合は
         そのバーチャルホスト名となります。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         レスポンスヘッダ上に書かれている、
         サーバの認識文字列です。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         ページがリクエストされた際のプロトコル名とバージョンです。
         例.'<literal>HTTP/1.0</literal>'
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         ページにアクセスする際に使用されたリクエストのメソッド名です。
         '<literal>GET</literal>', '<literal>HEAD</literal>', 
         '<literal>POST</literal>', '<literal>PUT</literal>' など。
        </simpara>
        <note>
         <para>
          リクエストのメソッドが <literal>HEAD</literal> だった場合、
          PHP スクリプトはヘッダを送信した後（言い換えれば、
          出力バッファリングを行わずに全出力を処理した後）に終了します。
         </para>
        </note>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_TIME</varname>'</term>
       <listitem>
        <simpara>
         リクエストの開始時のタイムスタンプ。PHP 5.1.0 以降で利用可能。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         ページがアクセスされた際にもし検索引数があればそれが格納されます。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         現在実行されているスクリプトが存在するドキュメントルート
         ディレクトリです。サーバのコンフィグレーションファイルで
         定義されています。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストの <literal>Accept:</literal> ヘッダがもしあれば
         その内容。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストの <literal>Accept-Charset:</literal> ヘッダが
         もしあればその内容。例: '<literal>iso-8859-1,*,utf-8</literal>'
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストに <literal>Accept-Encoding:</literal> ヘッダが
         もしあればその内容。例: '<literal>gzip</literal>'
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストに <literal>Accept-Language:</literal> ヘッダが
         もしあればその内容。例: '<literal>en</literal>'
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストに <literal>Connection:</literal> ヘッダが
         もしあればその内容。例: '<literal>Keep-Alive</literal>'
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストに <literal>Host:</literal> ヘッダが
         もしあればその内容。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         現在のページに遷移する前にユーザエージェントが参照していた
         ページのアドレス（もしあれば）。これはユーザエージェントに
         よってセットされます。全てのユーザエージェントが
         これをセットしているわけではなく、また、<varname>HTTP_REFERER</varname>
         を変更する機能を持つものもああります。
         要するに、信頼するべきものではありません。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         現在のリクエストに <literal>User-Agent:</literal> ヘッダが
         もしあればその内容。ページにアクセスしてきているユーザエージェント
         のしるしの文字列です。典型的な例は、
         <computeroutput>Mozilla/4.5 [en] (X11; U;
         Linux 2.2.9 i586)</computeroutput>。たとえば、
         <function>get_browser</function> でこの値を使って
         ページの出力をそのブラウザにあわせたものにすることも
         できるでしょう。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTPS</varname>'</term>
       <listitem>
        <simpara>
         スクリプトが HTTPS プロトコルを通じて実行されている場合に
         空でない値が設定されます。
        </simpara>
        <simpara>
         ISAPI を IIS で使用している場合は、HTTPS プロトコルを通さないでリクエストが行われたときの値は
         <literal>off</literal> となることに注意しましょう。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         現在ページをみているユーザの IP アドレス。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         現在のページにアクセスしているホスト名。DNS の逆引き検索は
         ユーザの <varname>REMOTE_ADDR</varname> に基づいています。
        </simpara>
        <note>
         <simpara>
          Web サーバがこの値を生成できるように設定されている必要があります。
          例えば Apache の場合 <literal>HostnameLookups On</literal> が
          &httpd.conf; に設定されていなければこの値は生成されません。
          <function>gethostbyaddr</function> もご覧ください。
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         ユーザのマシンから Web サーバへの通信に使用されているポート番号
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <para>
         現在実行されているスクリプトの絶対パス
         <note>
          <para>
           <filename>file.php</filename> あるいは
           <filename>../file.php</filename> のような相対パスを指定して
           CLI でスクリプトが実行されている場合、
           <varname>$_SERVER['SCRIPT_FILENAME']</varname> には
           ユーザが指定した相対パスが含まれます。
          </para>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         Web サーバの設定ファイルの SERVER_ADMIN (Apache の場合)ディレクティブ
         にセットされている値。スクリプトがバーチャルホスト上で
         実行されている場合、バーチャルホストに対して値が定義されます。
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         Web サーバの通信ポートとして使用されているポート番号。デフォルトでは
         '<literal>80</literal>' ですが、例えば SSL を使用している場合は
         セキュア HTTP ポートとして設定されている値に変わります。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         サーバ上で生成されたページに追加される、
         サーバのバージョン名とバーチャルホスト名の文字列。
         Web サーバの設定で有効になっていることが必要です。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         バーチャルからリアルへのマッピングがなされた後の、
         現在のスクリプトのファイルシステム上（ドキュメントルートではなく）
         でのパス。
        </simpara>
        <note>
         <simpara>
          PHP 4.3.2 以降、<envar>PATH_TRANSLATED</envar> は、
          Apache 2 <acronym>SAPI</acronym> において暗黙のうちに設定されなく
          なりました。一方、Apache 1 では、この値が Apache により設定されない場合、
          <envar>SCRIPT_FILENAME</envar> と同じ値に設定されます。
          この変更は、<envar>PATH_TRANSLATED</envar> は
          <envar>PATH_INFO</envar> が定義されている場合のみ
          存在するべきであるという <acronym>CGI</acronym> の規約を満たすために
          行われました。
         </simpara>
         <simpara>
          Apache 2 ユーザは、<envar>PATH_INFO</envar> を定義するために
          <filename>httpd.conf</filename> の中で
          <literal>AcceptPathInfo = On</literal> 
          を使用することが可能です。
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         現在のスクリプトのパス。
         スクリプト自身のページを指定するのに有用です。
         <link linkend="language.constants.predefined">__FILE__</link>
         定数には、カレント(すなわち読み込まれた)ファイルのパスとファイル名が
         含まれます。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         ページにアクセスするために指定された URI。例えば、
         '<literal>/index.html</literal>'
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_DIGEST</varname>'</term>
       <listitem>
        <simpara>
         PHP を Apache のモジュールとして実行し、HTTP ダイジェスト認証を
         行っている場合、クライアントから送られた 'Authorization' ヘッダの
         内容が設定されます（適切な認証処理を行うために利用します）。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         PHP を Apache または IIS（PHP 5 での ISAPI）のモジュールとして
         実行している場合に、HTTP 認証しているときにそのユーザ名がセットされます。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         PHP を Apache または IIS（PHP 5 での ISAPI）のモジュールとして
         実行している場合に、HTTP 認証しているときにそのユーザの
         パスワードがセットされます。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         PHP を Apache のモジュールとして実行している場合に、
         HTTP 認証しているときにその認証形式がセットされます。
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 xml:id="reserved.variables.environment">
    <title>環境変数: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      4.1.0 で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_ENV_VARS</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     これらの変数は PHP パーサが実行されている環境から
     PHP のグローバル名前空間に取り込まれます。
     その多くは、PHP が実行されているシェルに由来するものであり、
     システムが違えばシェルも違ってくるため、確定的なリストを
     得ることは不可能です。定義されている環境変数のリストについては
     使用しているシェルのドキュメントをご覧ください。
    </simpara>

    <simpara>
     PHP がサーバモジュールとして実行されているか CGI プロセッサとして
     実行されているかに関わらず、その他の環境変数は CGI 変数を含みます。
    </simpara>
    
    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     <varname>$HTTP_ENV_VARS</varname> を使うときそうするように、
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_ENV;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> は同じ情報を持っていますが、
     これはスーパーグローバルではありません（<varname>$HTTP_ENV_VARS</varname> と
     <varname>$_ENV</varname> は違う変数であり、PHP はそれぞれ別に扱います）。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープ
     で有効となります。例えば、<varname>$_ENV</varname> と
     <varname>$HTTP_ENV_VARS</varname> 配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.cookies">
    <title>HTTPクッキー: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      4.1.0 で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_COOKIE_VARS</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     カレントのスクリプトから渡された HTTP クッキーの情報が
     格納された連想配列。
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     <varname>$HTTP_COOKIE_VARS</varname> を使うときにそうするように、
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_COOKIE;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> は同じ情報を持っていますが、
     これはスーパーグローバルではありません
     （<varname>$HTTP_COOKIE_VARS</varname> と <varname>$_COOKIE</varname>
     は違う変数であり、PHP はそれぞれ別に扱います）。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープで
     有効となります。例えば、<varname>$_COOKIE</varname> と
     <varname>$HTTP_COOKIE_VARS</varname> 配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.get">
    <title>HTTP GET 変数: <varname>$_GET</varname></title>

    <note>
     <simpara>
      4.1.0 で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_GET_VARS</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     カレントのスクリプトから HTTP GET を通して渡された情報が
     格納された連想配列。自動的にどのスコープでもグローバルとなります。
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     <varname>$HTTP_GET_VARS</varname> を使うときにそうするように、
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_GET;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> は同じ情報を持っていますが、
     これはスーパーグローバルではありません
     （<varname>HTTP_GET_VARS</varname> と <varname>$_GET</varname>
     は違う変数であり、PHPはそれぞれ別に扱います）。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープで
     有効となります。例えば、<varname>$_GET</varname> と
     <varname>$HTTP_GET_VARS</varname> 配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.post">
    <title>HTTP POST 変数: <varname>$_POST</varname></title>

    <note>
     <simpara>
      4.1.0 で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_POST_VARS</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     カレントのスクリプトから HTTP POST を通して渡された情報が
     格納された連想配列。自動的にどのスコープでもグローバルとなる。
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     <varname>$HTTP_POST_VARS</varname> を使うときにそうするように、
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_POST;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> は同じ情報を持っていますが、
     これはスーパーグローバルではありません
     （<varname>HTTP_POST_VARS</varname> と <varname>$_POST</varname>
     は違う変数であり、PHPはそれぞれ別に扱います）。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープで
     有効となります。例えば、<varname>$_POST</varname> と
     <varname>$HTTP_POST_VARS</varname> 配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.files">
    <title>HTTP ファイルアップロード変数: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      4.1.0 で導入されました。これ以前のバージョンの場合は、
      <varname>$HTTP_POST_FILES</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     カレントのスクリプトから HTTP POST メソッドを通してアップロードされた
     情報が格納された連想配列。自動的にどのスコープでもグローバルとなります。
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     <varname>$HTTP_POST_FILES</varname> を使うときにそうするように、
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_FILES;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> は同じ情報を持っていますが、
     これはスーパーグローバルではありません
     (<varname>$HTTP_POST_FILES</varname> と <varname>$_FILES</varname>
     は異なる変数であり、PHP はこれらを異なる変数として扱うことに注意してください)。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープで
     有効となります。例えば、<varname>$_FILES</varname> と
     <varname>$HTTP_POST_FILES</varname> 配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.request">
    <title>リクエスト変数: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
     4.1.0 で導入されました。以前のバージョンには、同等な配列はありません。
     </simpara>
    </note>
    
    <simpara>
     <varname>$_GET</varname>, <varname>$_POST</varname>,
     <varname>$_COOKIE</varname>, <varname>$_FILES</varname>
     の内容を格納した連想配列
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_FILES;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープでn
     有効となります。例えば、<varname>$_REQUEST</varname>
     配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.session">
    <title>セッション変数: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
     4.1.0 で導入されました。これ以前のバージョンでは、
      <varname>$HTTP_SESSION_VARS</varname> を使用してください。
     </simpara>
    </note>
    
    <simpara>
     現在のスクリプトで有効なセッション情報が格納された配列です。
     使用法の詳細については
     <link linkend="ref.session">セッション処理関数</link>を
     ご覧ください。
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     <varname>$HTTP_SESSION_VARS</varname> を使うときにそうするように、
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_SESSION;</command> のようにする必要はありません。
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> は同じ情報を格納していますが、
     スーパーグローバルではありません
     (<varname>$HTTP_SESSION_VARS</varname> と <varname>$_SESSION</varname>
     は異なる変数であり、PHP はこれらを異なる変数として扱うことに注意してください)。
    </simpara>

    <simpara>
     <link linkend="ini.register-globals">register_globals</link> が
     オンにセットされている場合、これらの変数はグローバルスコープで
     有効となります。例えば、<varname>$_SESSION</varname>
     と <varname>$HTTP_SESSION_VARS</varname> 配列は分けられます。
     関連する情報として、
     <link linkend="security.globals">Using Register Globals
     </link> というセキュリティの章をご覧ください。
     個々のグローバルはスーパーグローバルではありません。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.globals">
    <title>グローバル変数: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> は、PHP 3.0.0 以降で利用可能です。
     </simpara>
    </note>
    
    <simpara>
     カレントのスクリプト上でグローバルスコープで定義されている全ての
     変数を格納した連想配列。変数の名前は配列のキー。
    </simpara>

    <simpara>
     これは'スーパーグローバル'又は自動グローバルな変数です。
     つまり、スクリプトの全てのスコープで有効な変数であるということです。
     この変数に関数やメソッドの中からアクセスする際に
     <command>global $_GLOBALS;</command> のようにする必要はありません。
    </simpara>

   </sect2>

   <sect2 xml:id="reserved.variables.phperrormsg">
    <title>直近のエラーメッセージ: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> は、PHP によって発せられた
     最後のエラーメッセージのテキストを格納する変数です。
     エラーが発生したスコープ内、かつ <link
     linkend="ini.track-errors">track_errors</link> 設定オプションが
     オン（デフォルトはオフ）にセットされている場合にのみ有効です。
    </simpara>
   </sect2>

   <sect2 xml:id="reserved.variables.httprawpostdata">
    <title>生の POST データ: <varname>$HTTP_RAW_POST_DATA</varname></title>
    <para>
     <varname>$HTTP_RAW_POST_DATA</varname> には生の POST データが格納されます。
     <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>
     を参照ください。
    </para>
   </sect2>

   <sect2 xml:id="reserved.variables.httpresponseheader">
    <title>HTTP レスポンスヘッダ: <varname>$http_response_header</varname></title>
    <para>
     配列 <varname>$http_response_header</varname> は
     <function>get_headers</function> 関数の結果と同等です。
     <link linkend="wrappers.http">HTTP ラッパー</link> を使用する時には、
     <varname>$http_response_header</varname> に HTTP レスポンスヘッダが格納されます。
    </para>
   </sect2>

  </sect1>
  <sect1 xml:id="reserved.classes">
   <title>定義済のクラス</title>
   <para>
    ここでは、標準で定義されているクラスをとりあげます。
    さまざまな拡張モジュールで定義されるその他のクラスについては、
    個々の拡張モジュールのリファレンスで述べられています。
   </para>

   <sect2 xml:id="reserved.classes.standard">
    <title>標準で定義されているクラス</title>

    <simpara>
     以下のクラスは、PHP ビルドに含まれる標準関数セットで定義されています。
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        このクラスから、
        <link linkend="class.dir">dir</link> のインスタンスが生成される。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 xml:id="reserved.classes.php5">
    <title>PHP 5 以降で定義済みのクラス</title>
    
    <simpara>
     以下に PHP 5.0.0 で導入されたその他の定義済みのクラスを示します。
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>

   </sect1>
  
  &appendices.reserved.constants;

  </appendix>
 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
