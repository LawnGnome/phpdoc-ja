<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- 
   TODO:
   
     The command line options not in the
     list, but in the -h output below:
   
       -e, -z
    
     It would be best to document these, and
     collect more info about -c and -d!
-->
 <appendix id="commandline">
  <title>コマンドラインからPHPを使う</title>
  <para>
   PHPコマンドライン版は、デバッグ時やPHPの設定をテストしたいような場
   合には便利であるばかりでなく、Webスクリプト作成以外の用途にPHPを使
   用したい場合には、便利な選択肢です。
  </para>
  <para>
   PHP実行ファイルの出力を外部ファイルに&gt;文字で常にリダイレクトでき、
   このため、<literal>php -q test.php > test.html</literal>は、
   <filename>test.php</filename>の出力をHTTPヘッダを付加せずに同じディ
   レクトリの<filename>test.html</filename>ファイルに出力します。
  </para>
  <para>
   コマンドライン版は、PHP実行ファイルがある場合にのみ使用可能です。サー
   バモジュール版を構築し、CGI版が使用するマシンで利用可能でない場合、
   使用することはできません。Windowsユーザの場合、PHP実行ファイルとサー
   バモジュールが共にバイナリパッケージに入っています。実行ファイルの
   名前は、<filename>php.exe</filename>です。
  </para>
  <para>
   以下にPHP 4.0.6に関するコマンドラインオプションを示します。
   <literal>-h</literal> オプションを使用することにより、実際のリスト
   とその簡単な説明を得ることが可能です。<literal>php -h</literal> の
   出力は、以下のようになります。
   <screen>
<![CDATA[
Usage: php [-q] [-h] [-s [-v] [-i] [-f <file>] |  {<file> [args...]}
  -q             Quiet-mode.  Suppress HTTP Header output.
  -s             Display colour syntax highlighted source.
  -f <file>      Parse <file>.  Implies `-q'
  -v             Version number
  -C             Do not chdir to the script's directory
  -c <path>      Look for php.ini file in this directory
  -d foo[=bar]   Define INI entry foo with value 'bar'
  -e             Generate extended information for debugger/profiler
  -z <file>      Load Zend extension <file>.
  -l             Syntax check only (lint)
  -m             Show compiled in modules
  -i             PHP information
  -h             This help
]]>
   </screen>  
  </para>
  <para>
   以下に最も重要なコマンドラインオプションのいくつかについて詳細な解
   説を行います。
  </para>
  <para>
   <table>
    <title>コマンドラインオプション</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>オプション</entry>
       <entry>説明</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>-q</entry>
       <entry>
	HTTPヘッダ出力を抑制します。通常、PHPはコールするプログラム(す
	なわちWebサーバ)がブラウザに出力するようにHTTPヘッダを出力しま
	す。コマンドラインアプリケーションを作成する場合には、これらの
	ヘッダは意味がありません。
       </entry>
      </row>
      <row>
       <entry>-s</entry>
       <entry>
	ファイル名で指定されたファイルをカラーハイライト表示にして出力
	します。これは、PHPスクリプトでソースコードを
	<function>highlight_file</function>により出力するのと同じです。
       </entry>
      </row>
      <row>
       <entry>-f</entry>
       <entry>
        与えられたファイルを解析し、文法上のミスや致命的なエラー
        を探します。このオプションが指定されると自動的に -q が
        指定されたものと見なされます。デバッグに使用してください。
       </entry>
      </row>
      <row>
       <entry>-v</entry>
       <entry>
	このオプションを付けてPHPをコールすると、バージョン番号、すな
	わち、4.0.6を知ることができます。
       </entry>
      </row>
      <row>
       <entry>-C</entry>
       <entry>
	通常、PHPは作業ディレクトリをスクリプトがあるディレクトリに変
	更します。これにより、例えばファイル名を指定するだけで同じディ
	レクトリにあるファイルをオープンすることが可能となります。
	このディレクトリ変更を無効にしたい場合はこのオプションを使用し
	て下さい。
       </entry>
      </row>
      <row>
       <entry>-c</entry>
       <entry>
	このオプションを使用すると、別の<filename>php.ini</filename>
	のパスを指定することが可能です。この場合、PHPは、デフォルトの
	パスの代わりに指定したパスで設定ファイルを探します。
       </entry>
      </row>
      <row>
       <entry>-d</entry>
       <entry>
	このオプションを付けることにより、スクリプト実行時に、個々の
	<filename>php.ini</filename>設定を設定することが可能です。
       </entry>
      </row>
      <row>
       <entry>-l</entry>
       <entry>
        与えられたファイルの文法をチェックします。このオプションが
        指定されると自動的に -q も指定されたものと見なされます。
        デバッグに使用してください。このオプションでは(定義されて
        いない関数といった)致命的なエラーを探し出すことはしません。
        致命的なエラーも探し出したい場合は -f を使用してください。
       </entry>
      </row>
      <row>
       <entry>-m</entry>
       <entry>
	このオプションにより、組み込まれた(そしてロードされた)PHPモジュー
	ルおよびZendモジュール、PHPおよびZendのバージョン番号、Zendの
	著作権の簡略版を出力します。
      </entry>
      </row>
      <row>
       <entry>-i</entry>
       <entry>
	このコマンドラインオプションは、<function>phpinfo</function>を
	コールし、結果を出力します。PHPが正しく動作しない場合、
	<literal>php -i</literal>を実行し、情報テーブルの前または中に
	出力されているエラーメッセージを確認して下さい。
       </entry>
      </row>
      <row>
       <entry>-h</entry>
       <entry>
	このオプションを付けると、実際のコマンドラインオプション及びそ
	の簡単な説明を得ることができます。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   PHPの実行形式を使えばPHPをスクリプトをウェブサーバから完全に
   独立させて実行することが出来ます。Unixシステム上では、PHP
   スクリプトの先頭に特別な1行を追加することで、そのスクリプトを
   実行するのに必要なプログラムをシステムに知らせることができるので
   そのスクリプト自体を実行可能形式とすることが出来ます。Windows
   システム上では、<literal>php.exe -q</literal>を<literal>.php
   </literal>ファイルに関連付けるか、PHPを使ってスクリプトを実行する
   バッチファイルを書くことが出来ます。Unixでの実行のために付加された
   最初の1行はWindows上での実行時にも問題となることはありませんので
   クロスプラットフォームなスクリプトを書くことが出来ます。コマンド
   ライン用PHPプログラムの単純な例は以下のようなものです。
  </para>
  <example>
   <title>コマンドライン実行用に作成されたスクリプト(script.php)</title>
   <programlisting role="php">
<![CDATA[
#!/usr/bin/php -q
<?php

if ($argc != 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
?>

これは、オプションが１つあるコマンドライン版のPHPスクリプトです。

  使用法:
  <?php echo $argv[0]; ?> <option>

  <option> に出力したい何らかの単語を指定できます。
  --help, -help, -h, -? オプションを指定するとこのヘルプが表示されます。

<?php
} else {
    echo $argv[1];
}
?>
]]>
   </programlisting>
  </example>
  <para>
   上記のスクリプトではファイルがPHPによって実行され、またHTTPヘッダを
   出力しないことを示す特別な1行目を使用しています。PHPのコマンドライン版
   アプリケーションを書くとき、以下の2つの変数を使用することが出来ます：
   <varname>$argc</varname>と<varname>$argv</varname>です。1番目の変数は
   引数の数に1を足した数(実行中のスクリプト名)です。2番目の変数は引数を
   格納した配列です。配列はスクリプト名を格納した0(<varname>$argv[0]
   </varname>)から始まります。
  </para>
  <para>
   上記のプログラムは、引数の数が1未満か1より多いかどうかをチェック
   しています。また、もし引数が<literal>--help</literal>, <literal>-help
   </literal>, <literal>-h</literal>もしくは<literal>--help</literal>
   だったら動的にスクリプト名を表示し、ヘルプを出力します。もし他の
   引数を受け取ったらそれを表示します。
  </para>
  <para>
   もし上記のスクリプトをUnixで実行するなら、ファイルに実行権限を与え、
   単純に
   <literal>script.php echothis</literal>もしくは<literal>script.php -h
   </literal>というように実行します。Windowsでは、バッチファイルを書く
   ことで同様のことが行えます：
  </para>
  <example>
   <title>
    コマンドライン版PHPスクリプトを実行するバッチファイル(script.bat)
   </title>
   <programlisting role="winbat">
@c:\php\php.exe -q script.php %1 %2 %3 %4
  </programlisting>
 </example>
 <para>
  上記のプログラムを<filename>script.php</filename>という名前にしたとして、
  また<filename>php.exe</filename>が<filename>c:\php\php.exe</filename>に
  あるとするとこのバッチファイルは<literal>script.bat echothis</literal>
  もしくは<literal>script.bat -h</literal>といったオプションを追加して
  実行することが出来ます。
 </para>
 <para>
 コマンドラインで動作するPHPアプリケーションを書く際に有用となる関数に
 ついては<link linkend="ref.readline">Readline</link>拡張モジュールの
 ドキュメントを参照してください。
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
