<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297617 Maintainer: takagi Status: ready -->
 <chapter xml:id="internals2.variables" xmlns="http://docbook.org/ns/docbook">
  <title>変数の作成</title>
  <section xml:id="internals2.variables.intro">
   <title>導入</title>
   <para>
    PHP コアで変数を扱うには、PHP で使われるさまざまな基本概念を身につける必要があります。
    まず最初に、PHP は動的で弱い型付けの言語です。
    次に、PHP は copy on write 方式と参照カウントを使ってメモリを管理しています。
    参照カウント方式と参照の挙動についての詳細は <xref
     linkend="features.gc.refcounting-basics"/> の章を参照ください。
   </para>
   <para>
    PHP の変数は、二つの部分で構成されています。
    シンボルテーブル内でのエントリとして用いられる「ラベル」と、
    実際の値を格納する「変数コンテナ」です。ここでは、主に変数コンテナについて扱います。
   </para>
   <para>
    変数コンテナは実際のコードの中では <code>zval</code> と呼ばれ、
    変数を処理するために必要なすべてのデータを保持しています。
    値そのもののほかにも、現在の型、そのコンテナを指すラベルのカウンタ、
    ラベルを参照として扱うかコピーとして扱うかを示すフラグなどが含まれます。
    PHP 5.3 では、それに関連する構造体が
    <code>Zend/zend.h</code> で次のように定義されています。
   </para>
   <screen>
<![CDATA[
typedef struct _zval_struct zval;

typedef union _zvalue_value {
    long lval;                 /* long value */
    double dval;               /* double value */
    struct {                   /* string type */
        char *val;
        int len;
    } str;
    HashTable *ht;             /* hash table value */
    zend_object_value obj;
} zvalue_value;
 
struct _zval_struct {
    /* Variable information */
    zvalue_value value;        /* value */
    zend_uint refcount__gc;
    zend_uchar type;           /* active type */
    zend_uchar is_ref__gc;
};

]]>
   </screen>
   <para>
    <code>zvalue_value</code> を見れば、
    内部的に使う型やフィールドがその名前とコメントから読み取れるでしょう。
    PHP の配列が実際のところはハッシュテーブルであることなどもわかります。
    とはいえ、PHP の型のなかでここに登場していないものもあります。
    <code>NULL</code> や <code>boolean</code>、そして <code>resources</code> です。
    <code>NULL</code> については値は不要です。<code>NULL</code> がこの型の値となるからです。
    <code>boolean</code> と <code>resource</code> については、PHP が
    value フィールドを再利用します。
    <code>boolean</code> 型の場合、<code>false</code> なら
    <code>0</code>、<code>true</code> なら <code>1</code> を保持します。
    <code>resource</code> 型の場合は、リソース id を保持します。
   </para>
   <para>
    良いお知らせです。このあたりの事情についての詳しい知識は不要です。
    というのも、アクセス用のマクロがきちんと用意されているからです
    (PHP にはよくあることでず)。
    悪いお知らせです。マクロは膨大な数にのぼります。
    <code>zval</code> をいろいろな方面から使うマクロだけでなく
    <code>zval</code> へのポインタを扱うマクロもあり、さらには
    <code>zval</code> のポインタへのポインタを扱うためのマクロや
    ポインタの参照先を操作するためのショートカットまで存在します。
    これらのマクロが定義されているのは <code>Zend/zend.h</code>、
    <code>Zend/zend_operators.h</code> そして <code>Zend/zend_API.h</code>
    です。
   </para>
  </section>
  <section xml:id="internals2.variables.creating">
   <title>変数の作成と値の設定</title>
   <para>
    <!-- ... -->
   </para>
  </section>

 </chapter>
 
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
