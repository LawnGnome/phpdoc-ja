<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: takagi Status: ready -->
 <sect1 xml:id="internals2.structure.modstruct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>zend_module 構造体</title>
  <para>
   PHP 拡張モジュールのソースファイルの中には、
   C プログラマにとって目新しいものがいくつか含まれています。
   これらの中でも最も重要であり、
   拡張モジュールを開発するにあたって最初にさわることになるのが
   <literal>zend_module</literal> 構造体です。
   この構造体には豊富な情報が格納されており、
   その拡張モジュールの依存性やバージョン、コールバック、
   その他重要なデータを Zend Engine に伝える役割を果たします。
   この構造体の中身は、何度も大幅に変更されています。
   ここでは、PHP 5.0 の時点の情報をもとにして説明します。
   PHP 5.1 や 5.2 では、少々変更されている点もあります。
  </para>
  
  <para>
   <filename>example.c</filename> での <literal>zend_module</literal>
   の宣言は、次のようになります (これは、
   <command>ext_skel --extname=example</command>
   で生成したものに何も手を加えていない状態です)。
  </para>
  
  <example xml:id="internals2.structure.modstruct.example-decl">
   <title>example 拡張モジュールにおける zend_module の宣言部</title>
   <programlisting role="c">
<![CDATA[
/* {{{ example_module_entry
 */
zend_module_entry example_module_entry = {
#if ZEND_MODULE_API_NO >= 20010901
    STANDARD_MODULE_HEADER,
#endif
    "example",
    example_functions,
    PHP_MINIT(example),
    PHP_MSHUTDOWN(example),
    PHP_RINIT(example),        /* Replace with NULL if there's nothing to do at request start */
    PHP_RSHUTDOWN(example),    /* Replace with NULL if there's nothing to do at request end */
    PHP_MINFO(example),
#if ZEND_MODULE_API_NO >= 20010901
    "0.1", /* Replace with version number for your extension */
#endif
    STANDARD_MODULE_PROPERTIES
};
/* }}} */
]]>
   </programlisting>
  </example>
  
  <para>
   最初はちょっとひるむかも知れませんが、
   大半の部分はよく見れば非常に単純です。
   次に示すのは、PHP 5.2 の <filename>zend_modules.h</filename>
   における <literal>zend_module</literal> の宣言部です。
   関連する定数の定義も含めています。
  </para>
  
  <example xml:id="internals2.structure.modstruct.struct-defn">
   <title>PHP 5.2 における zend_module の定義</title>
   <programlisting role="c">
<![CDATA[
#define ZEND_MODULE_API_NO 20060613
struct _zend_module_entry {
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;
    struct _zend_ini_entry *ini_entry;
    struct _zend_module_dep *deps;
    char *name;
    struct _zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    char *version;
    size_t globals_size;
#ifdef ZTS
    ts_rsrc_id* globals_id_ptr;
#else
    void* globals_ptr;
#endif
    void (*globals_ctor)(void *global TSRMLS_DC);
    void (*globals_dtor)(void *global TSRMLS_DC);
    int (*post_deactivate_func)(void);
    int module_started;
    unsigned char type;
    void *handle;
    int module_number;
};
#define STANDARD_MODULE_HEADER_EX sizeof(zend_module_entry), ZEND_MODULE_API_NO, ZEND_DEBUG, USING_ZTS
#define STANDARD_MODULE_HEADER \
    STANDARD_MODULE_HEADER_EX, NULL, NULL
#define NO_VERSION_YET NULL

#define STANDARD_MODULE_PROPERTIES_EX 0, 0, NULL, 0
#define STANDARD_MODULE_PROPERTIES \
	NO_MODULE_GLOBALS, NULL, STANDARD_MODULE_PROPERTIES_EX
#define NO_MODULE_GLOBALS 0, NULL, NULL, NULL
]]>
   </programlisting>
  </example>

  <variablelist>

   <varlistentry>
    <term><literal>size</literal></term>
    <listitem>
     <para>
      構造体のサイズをバイト数で表したもの。常に
      <literal>sizeof(zend_module_entry)</literal> となります。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>zend_api</literal></term>
    <listitem>
     <para>
      モジュールをコンパイルした Zend API のバージョン。常に定数
      <constant>ZEND_MODULE_API_NO</constant> となります。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>zend_debug</literal></term>
    <term><literal>zts</literal></term>
    <listitem>
     <para>
      モジュールがデバッグモードでコンパイルされている、
      あるいは ZTS (TSRM) を有効にしてコンパイルされていることを示すフラグ。
      常に定数
      <constant>ZEND_DEBUG</constant> および <constant>USING_ZTS</constant>
      となります。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>ini_entry</literal></term>
    <listitem>
     <para>
      このポインタは Zend の内部で用い、
      モジュールで宣言した非ローカルの INI エントリへの参照を保持します。
      これは Zend によって管理され、常に初期値 &null; となります。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>deps</literal></term>
    <listitem>
     <para>
      モジュールの依存性一覧へのポインタ。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>name</literal></term>
    <listitem>
     <para>
      モジュールの名前。これは
      &quot;spl&quot; あるいは &quot;standard&quot;
      のような短い名前です。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>functions</literal></term>
    <listitem>
     <para>
      モジュールの関数テーブルへのポインタ。
      Zend は、これを使用してモジュール内の関数をユーザ空間に公開します。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>module_startup_func</literal></term>
    <term><literal>module_shutdown_func</literal></term>
    <term><literal>request_startup_func</literal></term>
    <term><literal>request_shutdown_func</literal></term>
    <listitem>
     <para>
      これらはコールバック関数で、Zend は PHP の処理時に特定の箇所でこれらをコールします。
      具体的に言うと、最初の初期化時や終了処理時、
      各リクエストの開始時や終了時などです。
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>info_func</literal></term>
    <listitem>
     <para>
      これもコールバック関数で、スクリプトが
      invokes <function>phpinfo</function>
      を実行したときに Zend がコールします。
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>version</literal></term>
    <listitem>
     <para>
      モジュールのバージョンを表す文字列。モジュールの作者が指定したものです。
      バージョン番号の形式は、
      <function>version_compare</function> に対応したものか
      CVS や SVN のリビジョン番号 (つまり &quot;$Rev$&quot;)
      にあわせたものにしておくことを
      <emphasis>強く</emphasis> 推奨します。
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>globals_size</literal></term>
    <listitem>
     <para>
      このモジュール用のグローバル構造体が存在する場合のサイズ。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>globals_id_ptr</literal></term>
    <term><literal>globals_ptr</literal></term>
    <listitem>
     <para>
      定数 <constant>USING_ZTS</constant> が &true; かどうかによって、
      これらふたつのフィールドのうちのいずれかひとつだけが存在します。
      最初のほうはモジュールのグローバル用の TSRM アロケーションテーブルへのインデックス、
      後のほうはグローバルへの直接のポインタとなります。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>globals_ctor</literal></term>
    <term><literal>globals_dtor</literal></term>
    <listitem>
     <para>
      これらの関数は、モジュールのグローバルを作成したり破棄したりするときに
      Zend からコールされます。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>post_deactivate_func</literal></term>
    <listitem>
     <para>
      この関数は、リクエストの終了処理時に Zend からコールされます。
      めったに使われることはありません。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>module_started</literal></term>
    <term><literal>type</literal></term>
    <term><literal>handle</literal></term>
    <term><literal>module_number</literal></term>
    <listitem>
     <para>
      これらのフィールドは、Zend の内部管理用の情報を扱うために使用します。
      すべて予約済みです。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_HEADER_EX</constant></term>
    <listitem>
     <para>
      このマクロはモジュールの作者が使用するもので、
      モジュールが INI エントリや依存性を定義する際の
      <varname>zend_module</varname> 構造体の初期化に使用します。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_HEADER</constant></term>
    <listitem>
     <para>
      このマクロは <varname>zend_module</varname>
      構造体を開始するためのものです。
      開発者が INI エントリや依存性を使用しないときに用います。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>NO_VERSION_YET</constant></term>
    <listitem>
     <para>
      このマクロはモジュールの作者が使用するもので、
      まだこのモジュールにはバージョンがないことを表します。
      これは使わないことをお勧めします。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_PROPERTIES_EX</constant></term>
    <listitem>
     <para>
      このマクロはモジュールの作者が使用するもので、
      <varname>zend_module</varname> を終了させるためのものです。
      モジュールが自動グローバルや終了時コールバックなどを使用するときに用います。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_PROPERTIES</constant></term>
    <listitem>
     <para>
      このマクロはモジュールの作者が使用するもので、
      <varname>zend_module</varname> を終了させるためのものです。
      モジュールが自動グローバルや終了時コールバックなどを使用しないときに用います。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><constant>NO_MODULE_GLOBALS</constant></term>
    <listitem>
     <para>
      このマクロはモジュールの作者が使用するもので、
      モジュールがグローバル変数を使用しないことを Zend に伝えます。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
  
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
