<?xml version="1.0" encoding="utf-8"?>
<!-- $Revison$ -->
 <chapter id="features.file-upload">
  <title>ファイルアップロードの処理</title>
  
  <sect1 id="features.file-upload.post-method">
   <title>POST メソッドによるアップロード</title>
   
   <simpara>
    PHP は、全てのRFC-1867対応ブラウザ(Netscape Navigator 3 以上、
    MicrosoftからのパッチをあてたMicrosoft Internet Explorer 3または
    パッチ無しのそれ以降の版を含みます)からファイルのアップロードを
    受けることができます。
    この機能では、テキストとバイナリファイルの両方のアップロードが可能です。
    PHPの認証機構およびファイル操作関数を用いて、アップロードを許可する
    ユーザーとアップロード後にそのファイルを使用して行う動作を完全に制御する
    ことが可能です。
   </simpara>
   <para>
    PHPはNetscape ComposerおよびW3CのAmayaクライアントにより使用される
    PUTメソッドによるファイルアップロードもサポートしていることに注意
    して下さい。詳細は、<link
    linkend="features.file-upload.put-method">PUTメソッドのサポート
    </link>を参照下さい。
   </para>
   <para>
    ファイルアップロード画面は、次のような特別なフォームを作成すること
    により、作成することができます。
    <example>
     <title>ファイルアップロード用のフォーム</title>
     <programlisting role="html">
<![CDATA[
<form enctype="multipart/form-data" action="_URL_" method="post">
<input type="hidden" name="MAX_FILE_SIZE" value="1000">
Send this file: <input name="userfile" type="file">
<input type="submit" value="Send File">
</form>
]]>
     </programlisting>
    </example>
    _URL_ はPHPファイルを指す必要があります。hidden フィールド
    MAX_FILE_SIZEは、input フィールド file の前に置く必要があります。
    この値は、取得可能なファイルの最大サイズを規定します。この値はバイ
    ト数で指定します。
    <warning>
     <para>
      MAX_FILE_SIZEはブラウザへの勧告に過ぎません。この最大値を
      出し抜くのは簡単なことなので信頼してはいけません。しかし、
      PHP側の最大サイズの設定を欺くことはできません。
     </para>
    </warning>
   </para>

   <para>
    ファイルのアップロードに際して定義さっる変数はPHPのバージョン及び
    設定により異なります。以下の変数は、アップロードが行われた際に実行
    されるスクリプト側で定義されます。
    <link linkend="ini.track-vars">track_vars</link>が有効な場合、
    配列$HTTP_POST_FILES/$_FILESが初期化されます。
    最後に、<link
    linkend="ini.register-globals">register_globals</link>が有効な場合
    には、関連する変数がグローバル変数として定義することができます。
    しかし、グローバル変数の使用はもはや推奨されていません。
   </para>
   <note>
    <para>
     PHP 4.0.3以降、<link linkend="ini.track-vars">track_vars</link>は
    常にonです。PHP 4.1.0以降では、$_FILESを
    <varname>$HTTP_POST_FILES</varname>の代わりに使用することができま
    す。. <varname>$_FILES</varname> は常にグローバルです。このため、
     $_FILESを関数スコープの中で使用する場合でも
    <literal>global</literal>は不要です。
    </para>
   </note>
   <para>
    <varname>$HTTP_POST_FILES</varname>/<varname>$_FILES</varname>には、
    アップロードされたファイルに関する情報が含まれています。
   </para>

   <para>
    <varname>$_FILES</varname>の内容は次のようになります。ここでは、
    上の例のスクリプトで使われたように、アップロードファイルの名前とし
    て'userfile'を使用することを仮定していることに注意して下さい。
    <variablelist>
     <varlistentry>
      <term><varname>$_FILES['userfile']['name']</varname></term>
      <listitem>
       <para>
        クライアントマシンの元のファイル名。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['type']</varname></term>
      <listitem>
       <para>
        ファイルのMIME型。ただし、ブラウザがこの情報を提供する場合。
        例えば、<literal>"image/gif"</literal>のようになります。
        </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['size']</varname></term>
      <listitem>
       <para>
        アップロードされたファイルのバイト単位のサイズ。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><varname>$_FILES['userfile']['tmp_name']</varname></term>
      <listitem>
       <para>
        アップロードされたファイルがサーバー上で保存されているテンポラ
        リファイルの名前。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <note>
    <para>
     4.1.0より前のバージョンのPHPでは、この変数は
     <varname>$HTTP_POST_FILES</varname>で、自動グローバル(autoglobal)
     変数ではありませんでした。PHP 3は、
     <varname>$HTTP_POST_FILES</varname>をサポートしていません。
    </para>
   </note>

   <para>
    &php.ini;で <link
    linkend="ini.register-globals">register_globals</link>がonとなって
    いる場合、以下の変数が利用可能となります。
    以下の変数名は、上の例で使用されているようにアップロードされたファ
    イルの名前として'userfile'を使用していることを仮定していることに注
    意して下さい。

    <itemizedlist>
     <listitem>
      <simpara>
       <varname>$userfile</varname> - サーバーマシンにアップロードされ
       たファイルが保存されているテンポラリファイルの名前
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      <varname>$userfile_name</varname> - 送信元のシステムにおける元の
      ファイルの名前またはパス。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <varname>$userfile_size</varname> - アップロードされたファイルの
       サイズ(バイト数)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <varname>$userfile_type</varname> - ファイルの MIME 型。ただし、
       ブラウザがこの情報を提供した場合のみ。例えば、
       &quot;image/gif&quot;のようになります。
      </simpara>
     </listitem>
    </itemizedlist>
    上記の変数のうち、"<varname>$userfile</varname>" は、アップロードフォームの
    type="file"を有する&lt;input&gt; フィールドのnameの値と関連すること
    に注意して下さい。上のアップロード用フォームの例においては、その値
    を"userfile" としています。
   </para>
   <note>
    <para>
     <literal>register_globals = On</literal>は、セキュリティ及び性能
     上の理由により推奨されません。
    </para>
   </note>
   <para>
    <filename>php.ini</filename>の <link
    linkend="ini.upload-tmp-dir">upload_tmp_dir</link>ディレクティブで
    他の場所を指定しない限り、ファイルはサーバーにおけるデフォルトのテ
    ンポラリディレクトリに保存されます。サーバーのデフォルトディレクト
    リは、PHP を実行する環境において環境変数 <envar>TMPDIR</envar>を設
    定することにより変更することができます。しかし、PHP スクリプトの内
    部から<function>putenv</function> 関数により設定しても上手くいきま
    せん。この環境変数は、アップロードされたファイルに他の処理を行う際
    にも同様に使用することが可能です。
    <example>
     <title>ファイルのアップロードを検証する</title>
     <para>
      以下の例は、4.0.2 より後のバージョンの PHP 4 用です。
      <function>is_uploaded_file</function>
      および<function>move_uploaded_file</function>の関数のエントリを
      参照下さい。
     </para>
     <programlisting role="php">
<![CDATA[
<?php 
// 4.1.0より前のPHPでは$FILESの代わりに$HTTP_POST_FILESを使用する必要
// があります。
if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {
    copy($_FILES['userfile']['tmp_name'], "/place/to/put/uploaded/file");
} else {
    echo "ファイルアップロード攻撃をされた可能性があります。ファイル名: " . $_FILES['userfile']['name'];
}
/* ...または... */
move_uploaded_file($_FILES['userfile']['tmp_name'], "/place/to/put/uploaded/file");
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    アップロードされたファイルを受け取る PHP スクリプトは、アップロー
    ドされたファイルを用いて何をするべきかを決めるために必要なロジック
    を全て実装する必要があります。例えば、変数
    <varname>$_FILES['userfile']['size']</varname>を使用して、小さすぎ
    たり、大きすぎたりするファイルを捨てることができます。指定した型以
    外のファイルを全て捨てるために変数
    <varname>$_FILES['userfile']['type']</varname>を用いることができま
    す。何らかの方法により、テンポラリディレクトリからファイルを削除し
    たり、他の場所に移動したりする必要があります。
   </simpara>
   <simpara>
    移動または名前の変更が行われていない場合、リクエストの終了時にその
    ファイルはテンポラリディレクトリから削除されます。
   </simpara>
  </sect1>
 
  <sect1 id="features.file-upload.common-pitfalls">
   <title>陥りやすい落とし穴</title>
   <simpara>
    <literal>MAX_FILE_SIZE</literal>に<link
    linkend="ini.upload-max-filesize">upload_max_filesize</link>
    で指定されたファイルサイズより大きなファイルサイズを指定する
    ことはできません。デフォルトは、2メガバイトです。
   </simpara>
   <simpara>
    メモリ制限が有効な場合、<link
    linkend="ini.memory-limit">memory_limit</link>により大きな値を設定
    することが必要となる可能性があります。
    <link linkend="ini.memory-limit">memory_limit</link>に充分大きな値
    を設定するようにして下さい。
   </simpara>
<!-- FIXME: max_execution_time INI -->
   <simpara>
    <link linkend="ini.max-execution-time">max_execution_time</link>
    に設定した値が小さすぎた場合、スクリプトの実行時間がこの値を越える
    可能性を生じます。
    <literal>max_execution_time</literal>に充分大きな値を設定するよう
    にして下さい。
   </simpara>
   <simpara>
    <link linkend="ini.post-max-size">post_max_size</link>の設定値が小
    さすぎた場合、大きなファイルをアップロードすることができなくなりま
    す。<literal>post_max_size</literal>に充分大きな値を設定するように
    して下さい。
   </simpara>
   <simpara>
    処理するファイルを検証しない場合、ユーザーが他のディレクトリにある
    非公開情報にアクセスできる可能性を生じます。
   </simpara>
   <simpara>
    CERN httpd は、クライアントから得た content-type MIME ヘッダにおい
    て最初が空白文字で始まるものを切り捨てるようですので注意して下さい。
    このような動作をする限り、CERN httpd は、ファイルアップロード機能を
    サポートしないでしょう。
   </simpara>
  </sect1>

  <sect1 id="feature-fileupload.multiple">
   <title>複数ファイルのアップロード</title>
   <simpara>
    <literal>input</literal>で異なった<literal>name</literal>を使用す
    ることにより、複数のファイルをアップロードすることができます。
   </simpara>
   <simpara>
    複数のファイルを一度にアップロードし、自動的にまとめられた情報を
    配列で取得することが可能です。これを行うには、HTMLフォームで複数選
    択可能なセレクトやチェックボックスを指定する際と同様に配列を用いた
    投稿用の構文を使用する必要があります。
   </simpara>
   <note>
    <para>
     複数ファイルのアップロード機能は 3.0.10以降サポートされました。
    </para>
   </note>
   <para>
    <example>
     <title>複数ファイルのアップロード</title>
     <programlisting role="html">
<![CDATA[
<form action="file-upload.php" method="post" enctype="multipart/form-data">
  Send these files:<br>
  <input name="userfile[]" type="file"><br>
  <input name="userfile[]" type="file"><br>
  <input type="submit" value="Send files">
</form>
]]>
     </programlisting>
    </example>
   </para>


   <simpara>
    上記のフォームで投稿された場合、配列
    <varname>$_FILES['userfile']</varname>,
    <varname>$_FILES['userfile']['name']</varname>, 
    <varname>$_FILES['userfile']['size']</varname>
    (4.1.0より前のバージョンのPHPの場合は$HTTP_POST_FILES)が設定されま
    す。
    <literal>register_globals</literal>がonの場合、アップロードファイ
    ルに関してグローバル変数も設定されます。
    これらの各々は、投稿されたファイ
    ルに関する適当な値を有する数値を添字とする配列となります。
   </simpara>
   <simpara>
    例えば、ファイル名が<filename>/home/test/review.html</filename> お
    よび<filename>/home/test/xwp.out</filename>のファイルが投稿された
    としましょう。この場合、
    <varname>$_FILES['userfile']['name'][0]</varname>の値が
    <filename>review.html</filename>となり、
    <varname>$_FILES['userfile']['name'][1]</varname>の値が
    <filename>xwp.out</filename>となります。
    同様に、<varname>$_FILES['userfile']['size'][0]</varname>の値が
    <filename>review.html</filename>のファイルサイズといったようになり
    ます。
   </simpara>
   <simpara>
    <varname>$_FILES['userfile']['name'][0]</varname>,
    <varname>$_FILES['userfile']['tmp_name'][0]</varname>,
    <varname>$_FILES['userfile']['size'][0]</varname>, 
    <varname>$_FILES['userfile']['type'][0]</varname>も設定されます。
   </simpara>
  </sect1>

  <sect1 id="features.file-upload.put-method">
   <title>PUT メソッドのサポート</title>

   <para>
    PHP は、Netscape Composer や W3C Amaya のようなクライアントで
    サポートされる HTTP PUT メソッドをサポートします。
    PUT リクエストは、ファイルアップロードよりもかなり簡単であり、
    次のようなものになります。

    <informalexample>
     <programlisting>
PUT /path/filename.html HTTP/1.1
     </programlisting>
    </informalexample>
   </para>
   <para>
    これは、通常、リモートクライアントが /path/filename.html が指す内
    容を Web ツリーに保存したいことを意味します。 Apache または PHP に
    おいて全ての人がWebツリー上の任意のファイルを自動的に上書きできる
    ようにするというのは明らかに良い発想ではありません。よって、このよ
    うなりクエストを処理する際には、まずそのリクエストを処理する特定の
    PHPスクリプトが必要なことをwebサーバーに通知する必要があります。
    Apacheにおいては、<emphasis>Script</emphasis> ディレクティブにより
    これを行うことができます。これは、Apache設定ファイルのほぼ任意の場
    所に置くことができます。一般的なのは、&lt;Directory&gt; ブロックま
    たは &lt;Virtualhost&gt; ブロックの中です。次のように指定します。
    <informalexample>
     <programlisting>
Script PUT /put.php
    </programlisting>
    </informalexample>
   </para>
   <simpara>
    これにより、この行を指定したコンテキストにマッチするURIを有する全
    てのPUTリクエストが put.php スクリプトに送られるよう Apache に指
    定します。 もちろん、拡張子 .php により PHP が実行されるよう設定
    され、PHP がアクティブであることが必要です。
   </simpara>
   <simpara>
    put.php ファイルの中で次のように処理を行う必要があります。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php copy($PHP_UPLOADED_FILE_NAME,$DOCUMENT_ROOT.$REQUEST_URI); ?>
]]>
    </programlisting>
    </informalexample>
   </para>
   <simpara>
    これは、リモートクライアントによりリクエストされた位置にファイルを
    コピーします。このファイルコピーを実行する前に何らかの確認やユーザー
    の認証を実行することが望ましいでしょう。上記のスクリプトでは、PHP
    がPUTメソッドのリクエストを受けた際に <link
    linkend="features.file-upload.post-method">POSTメソッド</link>
    と全く同様にテンポラリファイルにアップロードされたファイルを保存す
    るということを利用しています。リクエストが終了した際に、テンポラリ
    ファイルは削除されます。よって、PUTを処理するPHPスクリプトは、この
    ファイルをどこかにコピーする必要があります。このテンポラリファイル
    のファイル名は $PHP_PUT_FILENAME 変数に保持されており、
    $REQUEST_URI (Apache以外のWebサーバーでは変わる可能性があります)
    で指定された送信先ファイル名を得ることができます。送信先ファイル名
    は、リモートクライアントが指定したものです。このクライアントの指定
    を必ずしも受ける必要はありません。例えば、アップロードされた全ての
    ファイルを特別なアップロード用ディレクトリにコピーすることも可能で
    す。
   </simpara>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
