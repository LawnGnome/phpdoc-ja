<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
 <chapter id="features.error-handling">
  <title>エラー処理</title>
  
  <para>
   PHP には、複数のエラーと警告があります。これらを以下に示します。
 
   <table>
    <title>PHPエラーの型</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>値</entry>
       <entry>記号</entry>
       <entry>説明</entry>
       <entry>note</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1</entry>
       <entry>E_ERROR</entry>
       <entry>致命的なランタイムエラー</entry>
       <entry></entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>E_WARNING</entry>
       <entry>ランタイム警告(致命的でないエラー)</entry>
       <entry></entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>E_PARSE</entry>
       <entry>コンパイル時のパーサエラー</entry>
       <entry></entry>
      </row>
      <row>
       <entry>8</entry>
       <entry>E_NOTICE	</entry>
       <entry>
	実行時の通知(警告よりも重要度は低い)
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry>16</entry>
       <entry>E_CORE_ERROR</entry>
       <entry>
	PHPの初期スタートアップ時に生じた致命的なエラー
       </entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry>32</entry>
       <entry>E_CORE_WARNING</entry>
       <entry>
	PHPの初期スタートアップ時に生じた警告(致命的でないエラー)
       </entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry>64</entry>
       <entry>E_COMPILE_ERROR</entry>
       <entry>致命的なコンパイルエラー</entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry>128</entry>
       <entry>E_COMPILE_WARNING</entry>
       <entry>コンパイル時の警告(致命的ではないエラー)</entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry>256</entry>
       <entry>E_USER_ERROR</entry>
       <entry>ユーザが生成したエラーメッセージ</entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry>512</entry>
       <entry>E_USER_WARNING</entry>
       <entry>ユーザが生成した警告メッセージ</entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry>1024</entry>
       <entry>E_USER_NOTICE	</entry>
       <entry>ユーザが生成した通知メッセージ</entry>
       <entry>PHP 4のみ</entry>
      </row>
      <row>
       <entry></entry>
       <entry>E_ALL</entry>
       <entry>上記のもの全て</entry>
       <entry>PHP 4のみ</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
 </para>
 <para>
   上記の値(数値または記号のどちらか)は、レポートするエラーの指定する
   ビットマスクを作成する際に使用されます。複数のエラー型を組み合わせ
   たりマスクしたりするために<link
   linkend="language.operators.bitwise">ビット演算子</link>を使用する
   ことが可能です。<filename>php.ini</filename>で使用できるのは '|',
   '~', '!', '&amp;' のみであることに注意して下さい。しかし、ビット演算子
   でないものは、<filename>php3.ini</filename>の中で使用可能です。
  </para>
  <para>
   PHP 4では、
   <link linkend="ini.error-reporting">error_reporting</link>
   のデフォルト設定値は <literal>E_ALL &amp; ~E_NOTICE</literal>であり、
   全てのエラーを表示します。PHP 3 では、デフォルトの設定は、
   <literal>(E_ERROR | E_WARNING | E_PARSE)</literal>であり、
   同じことを意味します。しかし、PHP 3 の<filename>php3.ini</filename>
   では定数がサポートされていないため、<link
   linkend="ini.error-reporting">error_reporting</link>の設定値は数値、
   つまり<literal>7</literal>とする必要があることに注意して下さい。
  </para>   
  <para>
   この初期設定値は、設定ファイルの 
   <link linkend="ini.error-reporting">error_reporting</link>命令で変
   更可能です。また、Apacheの<filename>httpd.conf</filename>ファイルの
   php_error_reporting命令(PHP3ではphp3_error_reporting)で設定すること
   も可能です。また、実行時にスクリプト内で関数
   <function>error_reporting</function>を使用して設定することも可能です。
  </para>
  <warning>
   <para>
    PHP 3からPHP 4にコードまたはサーバーを更新する場合、これらの設定および
    <function>error_reporting</function>のコールを確認する必要がありま
    す。新しいエラー型、特にE_COMPILE_ERRORの出力を無効にしたいと思う
    という人もいると思われます。これを無効にすると空の文書が出力される
    可能性があり、この場合には、生じた現象や問題の発見に関するフィード
    バックは全く得られません。
   </para>
  </warning>
  <para>	
   全ての <link linkend="language.expressions">PHP 式</link> は、先頭に
   "@" を付けてコールすることも可能です。
   この場合、その式に関するエラーメッセージの出力がオフにされます。
   そのような式においてエラーが発生し、
   <link linkend="ini.track-errors">track_errors</link> 機能が有効の
   場合、グローバル変数 <literal>$php_errormsg</literal> からエラー
   メッセージを得ることができます。 
  </para>

  <note>
   <para>
    接頭辞 <link linkend="language.operators.errorcontrol">@
    エラー制御演算子</link> は、パースエラーの結果のメッセージ出力は抑
    制しません。
   </para>
  </note>

  <warning>
   <para>
    現在、<link linkend="language.operators.errorcontrol">@
    エラー制御演算子</link> 前置子は、スクリプトの実行を終了するような
    致命的なエラーの通知さえも無効にします。他方、これは、ある関数から
    のエラーを抑制するために 
    <link linkend="language.operators.errorcontrol">@</link>を使用した
    場合、この関数が利用可能でなかったり、ミスタイプされている場合でも、
    スクリプトはエラーの原因を示さずにそこで終了してしまいます。
   </para>
  </warning>
  <para>
   以下に、PHPのエラー処理機能の使用例を示します。ファイルに(XMLフォー
   マットで)情報を記録するエラー処理関数を定義し、致命的なエラーの場合
   は開発者にメールを送信します。
   <example>
    <title>スクリプトでのエラー処理の使用法</title>
    <programlisting role="php">
<![CDATA[
<?php
// 独自のエラー処理を行う
error_reporting(0);

// ユーザ定義のエラー処理関数
function userErrorHandler ($errno, $errmsg, $filename, $linenum, $vars) {
    // エラーエントリ用タイムスタンプ
    $dt = date("Y-m-d H:i:s (T)");

    // エラー文字列の連想を定義
    // 実際に考慮するエントリは 2,8,256,512,1024のみ
    $errortype = array (
                1   =>  "Error",
                2   =>  "Warning",
                4   =>  "Parsing Error",
                8   =>  "Notice",
                16  =>  "Core Error",
                32  =>  "Core Warning",
                64  =>  "Compile Error",
                128 =>  "Compile Warning",
                256 =>  "User Error",
                512 =>  "User Warning",
                1024=>  "User Notice"
                );
    // モニタするエラーの種類を設定
    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err = "<errorentry>\n";
    $err .= "\t<datetime>".$dt."</datetime>\n";
    $err .= "\t<errornum>".$errno."</errornum>\n";
    $err .= "\t<errortype>".$errortype[$errno]."</errortype>\n";
    $err .= "\t<errormsg>".$errmsg."</errormsg>\n";
    $err .= "\t<scriptname>".$filename."</scriptname>\n";
    $err .= "\t<scriptlinenum>".$linenum."</scriptlinenum>\n";

    if (in_array($errno, $user_errors))
        $err .= "\t<vartrace>".wddx_serialize_value($vars,"Variables")."</vartrace>\n";
    $err .= "</errorentry>\n\n";
    
    // テスト用
    // echo $err;

    // エラーログに保存し、致命的なエラーの場合はメールを送信する
    error_log($err, 3, "/usr/local/php4/error.log");
    if ($errno == E_USER_ERROR)
        mail("phpdev@mydomain.com","Critical User Error",$err);
}


function distance ($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error("Incorrect parameters, arrays expected", E_USER_ERROR);
        return NULL;
    }

    if (count($vect1) != count($vect2)) {
        trigger_error("Vectors need to be of the same size", E_USER_ERROR);
        return NULL;
    }

    for ($i=0; $i<count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error("Coordinate $i in vector 1 is not a number, using zero", 
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error("Coordinate $i in vector 2 is not a number, using zero", 
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$old_error_handler = set_error_handler("userErrorHandler");

// 未定義の定数、警告を生成
$t = I_AM_NOT_DEFINED;

// いくつかの "vectors" を定義
$a = array(2,3,"foo");
$b = array(5.5, 4.3, -1.6);
$c = array (1,-3);

// ユーザエラーを生成
$t1 = distance($c,$b)."\n";

// 別のユーザエラーを生成
$t2 = distance($b,"i am not an array")."\n";

// 警告を生成
$t3 = distance($a,$b)."\n";

?>
]]>
    </programlisting>
   </example>
   上記のコードは、<link linkend="ref.errorfunc">エラー処理とログ関数
   </link>の使用法を示す簡単な例です。
  </para>

  <para>
   <function>error_reporting</function>,
   <function>error_log</function>,
   <function>set_error_handler</function>,
   <function>restore_error_handler</function>, 
   <function>trigger_error</function>,
   <function>user_error</function>も参照下さい。
  </para>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
