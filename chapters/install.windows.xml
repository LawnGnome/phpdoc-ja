<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- sync: 1.36 -->
  <sect1 id="install.windows">
   <title>Windowsシステムへのインストール</title>
   <para>
    本節は、Windows 95/98/Me及びWindows NT/2000/XPに適用します。PHPが
    Windows 3.1のような16ビットのプラットフォームで動作することは期待
    できません。サポートされるWindowsプラットフォームをWin32と呼ぶこと
    があります。Windows95はPHP4.3.0以降サポートされません。
   </para>
   <para>
    PHPをWindowsにインストールするには、<link
    linkend="install.windows.manual">マニュアルインストール</link>とイ
    ンストーラ<link
    linkend="install.windows.installer">InstallShield</link>による方法
    の2種類があります。
   </para>
   <para>
    Microsoft Visual Studioを持っている場合、オリジナルのソースコード
    からPHPを <link linkend="install.windows.build">構築</link>するこ
    とも可能です。
   </para>
   <para>
    WindowsシステムにPHPをインストールした後、機能を追加するために
    <link linkend="install.windows.extensions">様々な拡張モジュールの
    ロード</link>を行う可能性があります。
   </para>
   
   <sect2 id="install.windows.installer">
    <title>Windows InstallShield</title>
    
    <para>
     CGIバージョンのPHPをインストールする Windows 用 PHPインストーラが、
     <ulink url="&url.php;">&url.php;</ulink>から取得可能で、IIS、PWS、
     Xitamiの場合、Webサーバーの設定も同時に行われます。
    </para>
    <note>
     <para>
      InstallShieldインストーラはPHPを動作させるための簡便な方法ですが、
      例えば、拡張モジュールの自動設定ができないといった制約が
      いくつかあることに注意して下さい。サポートされる全ての拡張モジュールを
      有効にするにはzipバイナリをダウンロードするしかありません。
     </para>
    </note>
    
    <simpara>
     使用する<acronym>HTTP</acronym>サーバーをシステムにインストールし、
     完全に動作するようにして下さい。
    </simpara>
    
    <simpara>
     インストーラを実行し、インストールウイザードの指示に従って下さい。
     2種類のインストール方法がサポートされています。一つ目は standard
     で、設定の選択肢についてデフォルト値が示されます。もう一つは
     advanced で、選択肢について質問が行われます。
    </simpara>
    
    <simpara>
     インストールウイザードは、&php.ini; ファイルを
     設定し、Web サーバーでPHPを使用するように設定するに必要な情報を集
     めます。IIS と NTワークステーションにおける PWS の場合、スクリプ
     トマップ設定を有するサーバーの全ノードのリストが表示され、PHPスク
     リプト用マッピングを追加したいと思う場所のノードを選択することが
     可能です。
    </simpara>

    <simpara>
     インストールが一旦完了すると、インストーラはシステムを再起動する
     か、または、単にPHPの使用を開始するかを聞いてきます。
    </simpara>
    
    <warning>
     <para>
      このPHPの設定は安全ではないことに注意して下さい。安全にPHPを設定
      したい場合、マニュアルでインストールし、オプションを注意深く設定
      する方が良いでしょう。この自動設定はPHPのインストールを瞬時に行
      うことを可能としますが、オンラインのサーバで使用するためのもので
      はありません。
     </para>
    </warning>
    </sect2>
   
   <sect2 id="install.windows.manual">
    <title>マニュアルのインストール手順</title>
    <simpara>
     このインストール手順は、Windows上のWebサーバにPHPを手動でインストー
     ル、設定する際の手助けとなるものです。このガイドのオリジナルは
     &link.bob;によってコンパイルされており、
     <ulink url="&url.win32install;">&url.win32install;</ulink>にあります。
     <ulink url="&url.php.downloads;">&url.php.downloads;</ulink>にある
     ダウンロードページからzipバイナリアーカイブを
     ダウンロードする必要があります。
    </simpara>

    <para>
     PHP4のWindows版は、CGI版(php.exe), 
     CLI版(sapi/php.exe), その他のSAPIモジュールの3種類があります。
     <simplelist>
      <member>
       <filename>php4apache.dll</filename> - Apache 1.3.x モジュール
      </member>
      <member>
       <filename>php4apache2.dll</filename> - Apache 2.0.x モジュール
      </member>
      <member>
       <filename>php4isapi.dll</filename> - 
       IIS 4.0/PWS 4.0 以上のようなISAPI互換のWEBサーバ用のISAPIモジュール
      </member>
      <member>
       <filename>php4nsapi.dll</filename> - Netscape/iPlanet モジュール
      </member>
     </simplelist>
     後者の形式はPHP 4で新たにサポートされたもので、性能の著しい改善と
     いくつかの新機能が提供されます。CLIはPHPをコマンドラインスクリプトとして
     使用するために設計されました。CLIに関する詳細は
     <link linkend="features.commandline">PHPをコマンドラインから使用する</link>
     をご覧ください。
    </para>
    <warning>
     <simpara>
      SAPIモジュールは4.1リリース以降で著しく進化しました。しかし、
      より古いシステムでは、サーバーエラーの発生や、ASPのような
      サーバモジュールにおけるエラーが発生するかもしれません。
     </simpara>
    </warning>
    <note>
     <title>DCOM と MDAC の要件</title>
      <para>
       SAPIモジュールのどれかを選択し、Windows 95で使用する場合には、
       必ずDCOMアップデートを<ulink url="&url.dcom.update;">Microsoft
       DCOM ページ</ulink>からダウンロードして下さい。
       <emphasis>Windows 9x/NT4</emphasis>を使用している場合には
       プラットフォームに合う Microsoft Data Access Components (MDAC)
       の最新版をダウンロードしてください。MDACは
       <ulink url="&url.mdac;">&url.mdac;</ulink>からダウンロードできます。
      </para>
    </note>    
    <para>
     以下の手順は、個々のサーバーに関する手順の前に行う全てのインストー
     ルに共通する必須のものです。
     <itemizedlist>
      <listitem>
       <simpara>
        配布ファイルを好きなディレクトリに展開して下さい。
        <filename>c:\</filename>が適当でしょう。
        zipパッケージは<filename>php-4.3.1-Win32</filename>のようなフォルダ名
        で展開されます。これは後で<filename>php</filename>に変更することを
        前提にしています。利便性のために、そして以下の手順の互換性のために、
        展開したPHPパッケージが<filename>c:\php</filename>にあるものとします。
        他の位置にすることもできますが、空白を含むパス
        (例:<filename>c:\program files\php</filename>)にすることは良いとは
        言えません。Webサーバによってはクラッシュを引き起こします。
        展開されたディレクトリ構造は以下のようになります:
       </simpara>
      </listitem>
     </itemizedlist>
     <informalexample>
      <programlisting>
<![CDATA[

c:\php
   |
   +--cli
   |  |
   |  |-php.exe           -- CLI 実行ファイル - コマンドラインスクリプトにのみ使用
   |
   |
   +--dlls                -- support dlls for extensions --> Windows system directory
   |  |
   |  |-expat.dll
   |  |
   |  |-fdftk.dll
   |  |
   |  |-...
   |
   +--extensions          -- extension dlls for PHP
   |  |
   |  |-php_bz2.dll
   |  |
   |  |-php_cpdf.dll
   |  |
   |  |-..
   |
   +--mibs                -- support files for SNMP
   |
   |
   +--openssl             -- support files for Openssl
   |
   |
   +--pdf-related         -- support files for PDF
   |
   |
   +--sapi                -- SAPI dlls
   |  |
   |  |-php4apache.dll
   |  |
   |  |-php4apache2.dll
   |  |
   |  |-php4isapi.dll
   |  |
   |  |-..
   |
   |-install.txt
   |
   |-..
   |
   |-php.exe              -- CGI 実行ファイル
   |
   |-..
   |
   |-php.ini-dist
   |
   |-php.ini-recommended
   | 
   |-php4ts.dll           -- main dll --> Windows system directory
   | 
   |-...


]]>
      </programlisting>
     </informalexample> 
    </para>
    <para>
     CGIバイナリ - <filename>C:/php/php.exe</filename> -, CLIバイナリ
     - <filename>c:\php\cli\php.exe</filename> -, SAPIモジュール
     - <filename>c:\php\sapi\*.dll</filename> -  は、メインDLLである
     <filename>c:\php\php4ts.dll</filename>に依存しています。
     PHPのインストールによってこれらのDLLが配置されます。
     DLLの検索順序は以下のとおりです:
     <simplelist>
      <member>
       コールされた<filename>php.exe</filename>と同じディレクトリ。
       SAPIモジュールを使用している場合には、WebサーバがロードしたDLL
       (e.g. <filename>php4apache.dll</filename>)と同じディレクトリ。
      </member>
      <member>
       WindwosのPATH環境変数上のディレクトリ
      </member>
     </simplelist>
     <itemizedlist>
      <listitem> 
       <para>
        CGIまたはSAPIモジュールのどちらのインターフェースを使おう場合であっても、
        ベストな方策は<filename>php4ts.dll</filename>を有効にすることです。
        そのためには、このDLLをWindowsパス上にコピーしなければなりません。
        ベストなのはWINDOWSのsystemディレクトリです:
        <simplelist>
         <member>
          <filename>c:\windows\system</filename> for Windows 9x/ME
         </member>
         <member>
          <filename>c:\winnt\system32</filename> for Windows NT/2000 or
          <filename>c:\winnt40\system32</filename> for NT/2000 server
         </member>
         <member>
          <filename>c:\windows\system32</filename> for Windows XP
         </member>
        </simplelist>
        SAPIモジュール(<filename>c:\php\sapi</filename>内の)を使用する場合で、
        WindowsのシステムディレクトリにDLLをコピーしたくはない場合には、
        別な方法として、<filename>php4ts.dll</filename>を解凍したzipパッケージの
        sapiフォルダにコピーするという方法もあります。
       </para>
      </listitem>
      <listitem>
       <para>
        次の手順は&php.ini;PHP設定ファイルを正しくセットすることです。
        配布されるzipファイルには<filename>php.ini-dist</filename>と
        <filename>php.ini-recommended</filename>の二つのiniファイルが
        含まれています。パフォーマンスとセキュリティの観点から
        最適化されたデフォルト設定がなされている<filename>php.ini-recommended</filename>
        のほうを使うことが推奨されます。
        <link linkend="configuration.file">ini settings</link>をよく読んで
        全ての要素を自分で設定してください。
        ベストなセキュリティレベルを達成するには最善の方法です。PHPはこの
        iniファイルのデフォルト設定できちんと動作します。
        PHPがアクセスできるディレクトリにiniファイルをコピーして&php.ini;に
        リネームしてください。デフォルトではPHPはWindowsディレクトリ配下で
        &php.ini;ファイルを探します。
        <simplelist>
         <member>
          Windows 9x/ME/XPではiniファイルを
         <filename> %WINDIR%</filename>, つまり
         <filename>c:\windows</filename>にコピーしてください。
         </member>
         <member>
          Windows NT/2000ではiniファイルを
          <filename>%WINDIR%</filename>または<filename>%SYSTEMROOT%</filename>
          にコピーしてください。通常は<filename>c:\winnt</filename>または
         <filename>c:\winnt40</filename>です。
         </member>
        </simplelist>   
       </para>
      </listitem>
      <listitem>
       <simpara>
        Windows NT, 2000, XP上でNTFSを使用している場合には、Webサーバーを
        実行しているユーザーが&php.ini;に対するアクセス権を持っている
        ことを確認してください。(例えば誰でも読み込みできるようにする、等)
       </simpara>
      </listitem>     
     </itemizedlist>
    </para>
    <para>
     以下の手順は任意です。
     <itemizedlist>      
      <listitem>
       <para>
        &php.ini;を編集します。
        <link linkend="install.omnihttpd">OmniHTTPd</link>を使用している場合、
        次の手順には従わないで下さい。
        <link linkend="ini.doc-root">doc_root</link> に 
        Web サーバーのドキュメントルートを設定して下さい。例えば:
        <informalexample>
          <programlisting role="ini">
<![CDATA[
doc_root = c:\inetpub        // for IIS/PWS

doc_root = c:\apache\htdocs // for Apache
]]>
         </programlisting>
        </informalexample>
       </para>
      </listitem>
      <listitem>
       <simpara>
        PHPの起動時にロードしたい拡張モジュールを選択してください。
        セットアップの方法や、どのモジュールがビルトインされているかについては
        <link linkend="install.windows.extensions">Windows extensions</link>
        をご覧ください。最初のインストールでPHPが拡張モジュールなしで正常に
        動作することを確認してから、&php.ini;を直して拡張モジュールを有効
        にするほうが賢明です。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        PWS と IIS においては、<link linkend="ini.browscap">browscap</link>を
        次のように指定することができます。:
        <filename>c:\windows\system\inetsrv\browscap.ini</filename> on
        Windows 9x/Me,
        <filename>c:\winnt\system32\inetsrv\browscap.ini</filename> on
        NT/2000, and
        <filename>c:\windows\system32\inetsrv\browscap.ini</filename>
        on XP.
       </simpara>
      </listitem>
     </itemizedlist>
    </para> 
    <para>
     以上がWindows上でPHPをセットアップする基本的な手順です。
     次のステップではWebサーバーを選択しPHPを実行できるようにします。
     以下のWebサーバーについてのインストール手順があります:
     <itemizedlist>
      <listitem>
       <simpara>
        Personal Web Server(PWS)3,4以上、Insernet Information Server(IIS)3,4以上
        の<link linkend="install.iis">Windows server family</link>。
       </simpara> 
      </listitem>
      <listitem>
       <simpara>
        Apache サーバー。
        <link linkend="install.apache.windows">Apache 1.3.x</link>, と
        <link linkend="install.apache2.windows">Apache 2.x</link>.        
       </simpara>
      </listitem>
      
      <listitem>
       <simpara>
        <link linkend="install.netscape.windows">Netscape/iPlanet</link>サーバー
       </simpara>
      </listitem>
      
      <listitem>
       <simpara>
        .. the <link linkend="install.omnihttpd">OmniHTTPd</link> server.
       </simpara>
      </listitem>

      <listitem>
       <simpara>
        .. the <link linkend="install.oreilly">Oreilly Website Pro</link> server.
       </simpara>
      </listitem>
      
      <listitem>
       <simpara>
        .. the <link linkend="install.sambar">Sambar</link> server.
       </simpara>
      </listitem>
      
      <listitem>
       <simpara>
        .. the <link linkend="install.xitami">Xitami</link> server.
       </simpara>
      </listitem>     
     </itemizedlist>
   </para>
   </sect2>

   <sect2 id="install.windows.build">
    <title>Building from source</title>
    <para>
     説明する前に、次の質問に答えておきましょう。
     "なぜ、Windows上の構築作業はこんなに面倒なのか?" 考えられる理由と
     しては、二つあります。
    </para>
    <orderedlist>
     <listitem>
      <simpara>
       Windows では、まだソースを自由に共有することを好む開発者の大規
       模なコミュニティが広まっていません。結果として、そのような開発
       をサポートするために必要な基盤を構築する作業が行われていません。
       利用可能な大部分のものは、UNIXから必要なユーティリティを移植し
       たものです。この経緯のいくつかが時々でてきますが、驚かないで下
       さい。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ほとんど全ての手順は、"実行し、忘れる"形式で記述されています。
       このため、端末の前に座り、以下の手順にできるだけそのまま従って試
       して見て下さい。
      </simpara>
     </listitem>
    </orderedlist>

    <sect3 id="install.windows.build.requirement">
     &reftitle.required;
     <para>
      コンパイルとビルドにはマイクロソフトの開発環境が必要です。
      Microsoft Visual C++ 6.0が推奨です。ダウンロードしたファイルの解凍には
      解凍ユーティリティ(例えばWinZip)が必要です。unzipユーティリティが
      手元に無いのなら<ulink url="&url.infozip;">InfoZip</ulink>から無料の
      バージョンを取得できます。
     </para>
     <para>
      始める前に、ダウンロードしなければならないものが大量にあります...
     </para>
      <itemizedlist>
       <listitem>
        <simpara>
        <ulink url="&url.win32.buildtools;">&url.win32.buildtools;</ulink>上の
        win32ビルドツール
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>PHP</literal>が使用するDNSネームリゾルバのソースを
        <ulink url="&url.win32.dnsresolver;">&url.win32.dnsresolver;</ulink>
        からダウンロードします。これは<filename>win32build.zip</filename>
        に含まれる<filename>resolv.lib</filename>の代用です。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>PHP</literal>をApacheモジュールとしてコンパイルする場合には
        <ulink url="&url.apache.source;">Apacheのソース</ulink>も
        必要です。
       </simpara>
      </listitem>
     </itemizedlist>
     <simpara>
      最後に、PHP 4自体のソースが必要となります。最新の開発版を
      <ulink url="&url.php.anoncvs;">anonymous CVS</ulink>から、または
      <ulink url="&url.php.snapshots;">snapshot</ulink>、あるいは
      最新のリリース版<ulink url="&url.php.downloads;">source</ulink>tarballを
      ダウンロードします。
     </simpara>
    </sect3>

    <sect3 id="install.windows.build.install">
     <title>Putting it all together</title>
     <para>
      必要なパッケージを全てダウンロードしたら、
      適切な位置に展開しなければなりません。
      <itemizedlist>
       <listitem>
        <simpara>
         全てのファイルを最終的に展開する作業用ディレクトリを作成します。
         例えば<filename>c:\work</filename>
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         作業ディレクトリ(<filename>c:\work</filename>)配下に
         <filename>win32build</filename>ディレクトリを作成し、そこで
         <filename>win32build.zip</filename>を解凍します。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         作業ディレクトリ(<filename>c:\work</filename>)配下に
         <filename>bindlib_w32</filename>ディレクトリを作成し、そこで
         <filename>bindlib_w32.zip</filename>を解凍します。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         作業ディレクトリ(<filename>c:\work</filename>)配下に
         PHPのソースコードを解凍します。
        </simpara>
       </listitem>
      </itemizedlist>
      Following this steps your directory structure looks like this:
      以上の手順により、ディレクトリ構造は次のようになります:
      <informalexample>
       <programlisting>
<![CDATA[

+--c:\work
|  |
|  +--bindlib_w32
|  |  |
|  |  +--arpa
|  |  |
|  |  +--conf
|  |  |
|  |  +--...
|  |
|  +--php-4.x.x
|  |  |
|  |  +--build
|  |  |
|  |  +--...
|  |  |
|  |  +--win32
|  |  |
|  |  +--...
|  |
|  +--win32build
|  |  |
|  |  +--bin
|  |  |
|  |  +--include
|  |  |
|  |  +--lib

]]>
       </programlisting>
      </informalexample>
      <filename>c:\usr\local\lib</filename>ディレクトリを作成します。
      <filename>bison.simple</filename>を<filename>c:\work\win32build\bin</filename>から
      <filename>c:\usr\local\lib</filename>にコピーします。
     </para>
     <note>
      <simpara>
       <ulink url="&url.cygwin;">Cygwin</ulink>ユーザーは最後の手順は省略しても
       かまいません。適切にインストールされているCygwin環境は
       <filename>bison.simple</filename>と<filename>bison.exe</filename>
       を持っています。
      </simpara>
     </note>
    </sect3>

    <sect3 id="install.windows.build.configure">
     <title>Configure MVC ++</title>
      <para>
       次のステップはMVC++でコンパイルする準備です。
       Microsoft Visual C++を起動し、ディレクトリタブを選択します。
       実行形式、include、ライブラリのファイルが順次変更されます。
       以下のようになります:
       <itemizedlist>
        <listitem>
         <simpara>
          実行形式ファイル: <filename>c:\work\win32build\bin</filename>,
          Cygwinユーザー: <filename>cygwin\bin</filename>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          Include files: <filename>c:\work\win32build\include</filename>
         </simpara>
        </listitem>
         <listitem>
          <simpara>
          Library files: <filename>c:\work\win32build\lib</filename>
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
    </sect3>

    <sect3 id="install.windows.build.resolvlib">
     <title>resolv.libのビルド</title>
      <para>
       <filename>resolv.lib</filename>ライブラリをビルドしなければなりません。
       デバッグシンボルを有効にする(bindlib - Win32 Debug)か
       否かを(bindlib - Win32 Release)決定してください。
       適切な設定をビルドします。
       <itemizedlist>
        <listitem>
         <simpara>
          GUIユーザーの場合、VC++を起動し、File =&gt; Open Workspace
          で<filename>c:\work\bindlib_w32</filename>で<filename>bindlib.dsw</filename>
          を選択します。そしてBuild=&gt;Set Active Configurationを選択し
          お望みの設定を施してください。最後にBuild=&gt;Rebuild All します。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          コマンドラインユーザーの場合、C++環境変数が設定されているかあるいは
          <command>vcvars.bat</command>を既に実行したか、確認してください。
          そして、以下のコマンドを実行します。
         </simpara>
         <itemizedlist>
          <listitem>
           <simpara>
            <userinput>msdev bindlib.dsp /MAKE "bindlib - Win32 Debug"</userinput>
           </simpara>
          </listitem>
          <listitem>
           <simpara>
            <userinput>msdev bindlib.dsp /MAKE "bindlib - Win32 Release"</userinput>
           </simpara>
          </listitem>
         </itemizedlist>
        </listitem>
       </itemizedlist>
       この時点で、使用可能な<filename>resolv.lib</filename>が
       <filename>c:\work\bindlib_w32\Debug</filename>または
       <filename>Release</filename>サブディレクトリのどちらかに存在します。
       このファイルを<filename>c:\work\win32build\lib</filename>ディレクトリの
       同名のファイルに上書きコピーしてください。
      </para>
    </sect3>

    <sect3 id="install.windows.build.compile">
     <title>コンパイル</title>
     <simpara>
      最良の方法は、標準的なCGIバージョンをビルドすることです。
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        GUIユーザの場合、VC++を起動し、ファイル =&gt; ワークスペースを
        開くを選択し、<filename>c:\work\php-4.x.x\win32\php4ts.dsw</filename>
        を選びます。続いて、構築=&gt;アクティブな
        構成を設定を選び、<literal>php4ts - Win32 Debug_TS</literal>
        <literal>php4ts - Win32 Release_TS</literal>から好きなほうを
        選択します。最後に構築=&gt;全て構築を選択します。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        コマンドライン版ユーザの場合、C++ 用の環境変数が定義されている
        かどうか、もしくは、<command>vcvars.bat</command>を実行しているか
        どうか確認してください。そして<filename>c:\work\php-4.x.x\win32</filename>
        ディレクトリから続いて次のうちのどれかを実行して下さい。
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara>
          <userinput>msdev php4ts.dsp /MAKE "php4ts - Win32 Debug_TS"</userinput>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <userinput>msdev php4ts.dsp /MAKE "php4ts - Win32 Release_TS"</userinput>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          ここまでの手順で、サブディレクトリ
          <filename>c:\work\php-4.x.x.\Debug_TS</filename> または
          <filename>Release_TS</filename> に利用可能な
          <filename>php.exe</filename> が作成されているはずです。
         </simpara>
        </listitem>
       </itemizedlist>
      </listitem>
     </itemizedlist>
     <simpara>
      <filename>main/config.win32.h</filename>ファイルを編集することで
      ビルドプロセスでの細かい設定をすることが可能です。
      例えば、&php.ini;のデフォルトの位置を変えたり、ビルトインの拡張モジュールや
      拡張モジュールのデフォルトの位置を変えることができます。
     </simpara>
     <simpara>
      次に、<link linkend="features.commandline">PHPをコマンドラインから使用する</link>
      ためのCLIバージョンを構築します。
      <literal>php4ts_cli - Win32 Debug_TS</literal>または
      <literal>php4ts_cli - Win32 Release_TS</literal>を選択すること以外は
      CGIバージョンのビルド手順と同様です。コンパイルが成功すると
      <filename>Release_TS\cli\</filename>または
      <filename>Debug_TS\cli\</filename>ディレクトリのどちらかに
      <filename>php.exe</filename>が作成されます。
     </simpara>
     <note>
      <simpara>
       PEARとその快適なコマンドラインインストーラを使用するには、
       CLI-SAPIが必要です。PEARとそのインストーラに関する詳細は
       <ulink url="&url.php.pear;manual/">PEAR</ulink>をご覧ください。
      </simpara>
     </note>
     <simpara>
      Microsoft IIS上でPHPアプリを構築するためのSAPIモジュール
      (<filename>php4isapi.dll</filename>)をビルドするには、
      アクティブコンフィグレーションを<filename>php4isapi-whatever-config</filename>
      にセットし、お望みのDLLをビルドしてください。
     </simpara>
    </sect3>
   </sect2>
   
   <sect2 id="install.windows.extensions">
    <title>Windows 用拡張モジュールのインストール</title>
    <para>
     PHPおよびWebサーバをWindowsにインストールした後、特定のモジュール
     を使用したくなる場合もあるでしょう。&php.ini;によって
     PHPが起動する際にロードする拡張モジュールを選択することができます。
     スクリプトの中で<function>dl</function>を使用することにより、モ
     ジュールを動的にロードすることも可能です。
    </para>
    <para>
     PHP拡張モジュールのDLLには、PHP 4の場合、前に'php_'(PHP 3の場合は、'
     php3_')が付いています。これにより、PHP拡張モジュールを他のサポー
     ト用ライブラリと混同することが防止できます。
    </para>
    <note>
     <para>
      PHP 4.3.1では、BCMath, Calendar, COM, FTP, MySQL, ODBC, PCRE, 
      Session, WDDX, XML サポートが<emphasis>組み込まれています</emphasis>。
      これらの関数を使用する際に、拡張モジュールをロードする必要はありません。
      組込済モジュールのリストについては、配布ファイルの
      <filename>README.txt</filename>、<filename>install.txt</filename>または
      <link linkend ="install.extensions.overview">this table</link>を
      参照下さい。
     </para>
    </note>

    <para>
     <literal>PHP</literal>が拡張モジュールを探すデフォルトのディレクトリは
     <filename>c:\php4\extensions</filename>です。変更するには&php.ini;ファイル
     を編集してください:
     <itemizedlist>
      <listitem>
       <para>
        <link linkend ="ini.extension-dir">extension_dir</link>を拡張モジュール
        があるディレクトリに変更する必要があります。あるいは、
        <filename>php_*.dll</filename>ファイルをここに置いてください。
        最後のバックスラッシュを忘れないでください。例えば:
        <informalexample>
         <programlisting role="ini">
<![CDATA[
extension_dir = c:/php/extensions/
]]>
         </programlisting>
        </informalexample>
       </para>
      </listitem>
     <listitem>
      <para>
       &php.ini;に書かれている拡張モジュールを有効にするには、
       &php.ini;上の<literal>extension=php_*.dll</literal>の行をアンコメントして
       ください。有効にしたい拡張モジュールの行の ; を削除することでできます。
       <example>
        <title>PHP-Windowsで<link linkend="ref.bzip2">Bzip2</link>拡張モジュールを有効にする</title>
         <programlisting role="ini">
<![CDATA[
// change the following line from ...
;extension=php_bz2.dll

// ... to
extension=php_bz2.dll
]]>
         </programlisting>
        </example>      
       </para>
     </listitem>
      <listitem>
       <para>
        いくつかの拡張モジュールでは、動作するのに外部のDLLを必要とします。
        配布パッケージの<filename>c:\php\dlls\</filename>ディレクトリに
        あるものもありますが、いくつかは、例えばOracle(<filename>php_oci8.dll</filename>)
        は配布パッケージにバンドルされていない外部DLLを必要とします。
        バンドルされているDLLを<filename>c:\php\dlls</filename>から
        Windowsのパスにコピーしてください。安全な位置は:
        <simplelist>
         <member>c:\windows\system for Windows 9x/Me</member>
         <member>c:\winnt\system32 for Windows NT/2000</member>
         <member>c:\windows\system32 for Windows XP</member>
        </simplelist>       
        既にシステム上にそれらのファイルがある場合には、
        うまく動かない場合にのみ上書きしてください(上書きする前に
        それらのバックアップをとっておいたり、他のフォルダに移動しておくことは
        ことはいいアイデアです。何か間違いがあったときのために。)
       </para>
     </listitem>
    </itemizedlist>
   <note>
    <simpara>
     PHPをサーバーモジュールとして実行する場合に、&php.ini;の設定を
     反映するためにWebサーバーを再起動することを忘れないでください。
    </simpara>
   </note>
   </para>

   <para>
    以下の表は、有効な拡張モジュールと
    それに必要な追加DLLのリストです。
    <table id="install.extensions.overview">
     <title>PHP 拡張モジュール</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Extension</entry>
        <entry>Description</entry>
        <entry>Notes</entry>
       </row>
      </thead>
      <tbody>
  <row>
   <entry>php_bz2.dll</entry>
   <entry><link linkend="ref.bzip2">bzip2</link>圧縮関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_calendar.dll</entry>
   <entry><link linkend="ref.calendar">Calendar</link>変換関数</entry>
   <entry>PHP 4.0.3以降でビルトイン</entry>
  </row>
  <row>
   <entry>php_cpdf.dll</entry>
   <entry><link linkend="ref.cpdf">ClibPDF</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_crack.dll</entry>
   <entry><link linkend="ref.crack">Crack</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php3_crypt.dll</entry>
   <entry>Crypt 関数</entry>
   <entry>unknown</entry>
  </row>
  <row>
   <entry>php_ctype.dll</entry>
   <entry><link linkend="ref.ctype">ctype</link> family 関数</entry>
   <entry>PHP 4.3.0以降でビルトイン</entry>
  </row>
  <row>
   <entry>php_curl.dll</entry>
   <entry><link linkend="ref.curl">CURL</link>, Client URL library 関数</entry>
   <entry>Requires: <filename>libeay32.dll</filename> 
   <filename>ssleay32.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_cybercash.dll</entry>
   <entry><link linkend="ref.cybercash">Cybercash</link> payment 関数</entry>
   <entry>PHP &lt;= 4.2.0</entry>
  </row>
  <row>
   <entry>php_db.dll</entry>
   <entry><link linkend="ref.dbm">DBM</link> 関数</entry>
   <entry>非推奨。 DBAを代わりに使用してください (<filename>php_dba.dll</filename>)</entry>
  </row>
  <row>
   <entry>php_dba.dll</entry>
   <entry><link linkend="ref.dba">DBA</link>: DataBase (dbm-style) 
   Abstraction layer 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_dbase.dll</entry>
   <entry><link linkend="ref.dbase">dBase</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php3_dbm.dll</entry>
   <entry>Berkeley DB2 library</entry>
   <entry>unknown</entry>
  </row>
  <row>
   <entry>php_dbx.dll</entry>
   <entry><link linkend="ref.dbx">dbx</link> 関数</entry>
   <entry></entry>
  </row>
  <row>
   <entry>php_domxml.dll</entry>
   <entry><link linkend="ref.domxml">DOM XML</link> 関数</entry>
   <entry>
    PHP &lt;= 4.2.0 requires: <filename>libxml2.dll</filename> (バンドル)
    PHP &gt;= 4.3.0 requires: <filename>iconv.dll</filename> (バンドル)
   </entry>
  </row>
  <row>
   <entry>php_dotnet.dll</entry>
   <entry><link linkend="ref.dotnet">.NET</link> 関数</entry>
   <entry>PHP &lt;= 4.1.1</entry>
  </row>
  <row>
   <entry>php_exif.dll</entry>
   <entry><link linkend="function.read-exif-data">Read EXIF</link> headers from JPEG</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_fbsql.dll</entry>
   <entry><link linkend="ref.fbsql">FrontBase</link> 関数</entry>
   <entry>PHP &lt;= 4.2.0</entry>
  </row>
  <row>
   <entry>php_fdf.dll</entry>
   <entry><link linkend="ref.fdf">FDF</link>: Forms Data Format 関数.</entry>
   <entry>Requires: <filename>fdftk.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_filepro.dll</entry>
   <entry><link linkend="ref.filepro">filePro</link> 関数</entry>
   <entry>Read-only access</entry>
  </row>
  <row>
   <entry>php_ftp.dll</entry>
   <entry><link linkend="ref.ftp">FTP</link> 関数</entry>
   <entry>Built-in since PHP 4.0.3</entry>
  </row>
  <row>
   <entry>php_gd.dll</entry>
   <entry><link linkend="ref.image">GD</link> library image 関数</entry>
   <entry>
    PHP 4.3.2以降で削除.  GD1では使用できないことに注意。
    変わりに <filename>php_gd2.dll</filename>を使用してください。
   </entry> 
  </row>
  <row>
   <entry>php_gd2.dll</entry>
   <entry><link linkend="ref.image">GD</link> library image 関数</entry>
   <entry>GD2</entry>
  </row>
  <row>
   <entry>php_gettext.dll</entry>
   <entry><link linkend="ref.gettext">Gettext</link> 関数</entry>
   <entry>
    PHP &lt;= 4.2.0 requires <filename>gnu_gettext.dll</filename> (バンドル), 
    PHP &gt;= 4.2.3 requires <filename>libintl-1.dll</filename>,
    <filename>iconv.dll</filename> (バンドル).
   </entry>
  </row>
  <row>
   <entry>php_hyperwave.dll</entry>
   <entry><link linkend="ref.hyperwave">HyperWave</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_iconv.dll</entry>
   <entry><link linkend="ref.iconv">ICONV</link> characterset 変換</entry>
   <entry>Requires: <filename>iconv-1.3.dll</filename> (バンドル), 
   PHP &gt;=4.2.1 <filename>iconv.dll</filename></entry>
  </row>
  <row>
   <entry>php_ifx.dll</entry>
   <entry><link linkend="ref.ifx">Informix</link> 関数</entry>
   <entry>Requires: Informix libraries</entry>
  </row>
  <row>
   <entry>php_iisfunc.dll</entry>
   <entry>IIS management 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_imap.dll</entry>
   <entry><link linkend="ref.imap">IMAP</link> POP3 and NNTP 関数</entry>
   <entry>PHP 3: <filename>php3_imap4r1.dll</filename></entry>
  </row>
  <row>
   <entry>php_ingres.dll</entry>
   <entry><link linkend="ref.ingres">Ingres II</link> 関数</entry>
   <entry>Requires: Ingres II libraries</entry>
  </row>
  <row>
   <entry>php_interbase.dll</entry>
   <entry><link linkend="ref.ibase">InterBase</link> 関数</entry>
   <entry>Requires: <filename>gds32.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_java.dll</entry>
   <entry><link linkend="ref.java">Java</link> 関数</entry>
   <entry>PHP &lt;= 4.0.6 requires: <filename>jvm.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_ldap.dll</entry>
   <entry><link linkend="ref.ldap">LDAP</link> 関数</entry>
   <entry>
    PHP &lt;= 4.2.0 requires <filename>libsasl.dll</filename> (バンドル), 
    PHP &gt;= 4.3.0 requires <filename>libeay32.dll</filename>, 
    <filename>ssleay32.dll</filename> (バンドル)
   </entry>
  </row>
  <row>
   <entry>php_mbstring.dll</entry>
   <entry><link linkend="ref.mbstring">マルチバイト文字列</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_mcrypt.dll</entry>
   <entry><link linkend="ref.mcrypt">Mcrypt Encryption</link> 関数</entry>
   <entry>Requires: <filename>libmcrypt.dll</filename></entry>
  </row>
  <row>
   <entry>php_mhash.dll</entry>
   <entry><link linkend="ref.mhash">Mhash</link> 関数</entry>
   <entry>PHP &gt;= 4.3.0 requires: <filename>libmhash.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_mime_magic.dll</entry>
   <entry><link linkend="ref.mime-magic">Mimetype</link> 関数</entry>
   <entry>Requires: <filename>magic.mime</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_ming.dll</entry>
   <entry><link linkend="ref.ming">Ming</link> 関数 for Flash</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_msql.dll</entry>
   <entry><link linkend="ref.msql">mSQL</link> 関数</entry>
   <entry>Requires: <filename>msql.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php3_msql1.dll</entry>
   <entry>mSQL 1 client</entry>
   <entry>unknown</entry>
  </row>
  <row>
   <entry>php3_msql2.dll</entry>
   <entry>mSQL 2 client</entry>
   <entry>unknown</entry>
  </row>
  <row>
   <entry>php_mssql.dll</entry>
   <entry><link linkend="ref.mssql">MSSQL</link> 関数</entry>
   <entry>Requires: <filename>ntwdblib.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php3_mysql.dll</entry>
   <entry><link linkend="ref.mysql">MySQL</link> 関数</entry>
   <entry>Built-in in PHP 4</entry>
  </row>
  <row>
   <entry>php3_nsmail.dll</entry>
   <entry>Netscape mail 関数</entry>
   <entry>unknown</entry>
  </row>
  <row>
   <entry>php3_oci73.dll</entry>
   <entry>Oracle 関数</entry>
   <entry>unknown</entry>
  </row>
  <row>
   <entry>php_oci8.dll</entry>
   <entry><link linkend="ref.oci8">Oracle 8</link> 関数</entry>
   <entry>Requires: Oracle 8.1+ client libraries</entry>
  </row>
  <row>
   <entry>php_openssl.dll</entry>
   <entry><link linkend="ref.openssl">OpenSSL</link> 関数</entry>
   <entry>Requires: <filename>libeay32.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_oracle.dll</entry>
   <entry><link linkend="ref.oracle">Oracle</link> 関数</entry>
   <entry>Requires: Oracle 7 client libraries</entry>
  </row>
  <row>
   <entry>php_overload.dll</entry>
   <entry><link linkend="ref.overload">Object overloading</link> 関数</entry>
   <entry>PHP 4.3.0以降でビルトイン</entry>
  </row>
  <row>
   <entry>php_pdf.dll</entry>
   <entry><link linkend="ref.pdf">PDF</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_pgsql.dll</entry>
   <entry><link linkend="ref.pgsql">PostgreSQL</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_printer.dll</entry>
   <entry><link linkend="ref.printer">Printer</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_shmop.dll</entry>
   <entry><link linkend="ref.shmop">Shared Memory</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_snmp.dll</entry>
   <entry><link linkend="ref.snmp">SNMP</link> get and walk 関数</entry>
   <entry>NT only!</entry>
  </row>
  <row>
   <entry>php_sockets.dll</entry>
   <entry><link linkend="ref.sockets">Socket</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_sybase_ct.dll</entry>
   <entry><link linkend="ref.sybase">Sybase</link> 関数</entry>
   <entry>Requires: Sybase client libraries</entry>
  </row>
  <row>
   <entry>php_tokenizer.dll</entry>
   <entry><link linkend="ref.tokenizer">Tokenizer</link> 関数</entry>
   <entry>PHP 4.3.0以降でビルトイン</entry>
  </row>
  <row>
   <entry>php_w32api.dll</entry>
   <entry><link linkend="ref.w32api">W32api</link> 関数</entry>
   <entry>None</entry>
  </row>
  <row>
   <entry>php_xmlrpc.dll</entry>
   <entry><link linkend="ref.xmlrpc">XML-RPC</link> 関数</entry>
   <entry>PHP &gt;= 4.2.1 requires: <filename>iconv.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_xslt.dll</entry>
   <entry><link linkend="ref.xslt">XSLT</link> 関数</entry>
   <entry>
    PHP &lt;= 4.2.0 requires <filename>sablot.dll</filename>,
    <filename>expat.dll</filename> (バンドル). PHP &gt;= 4.2.1 requires
    <filename>sablot.dll</filename>, <filename>expat.dll</filename>,
    <filename>iconv.dll</filename> (バンドル).
   </entry>
  </row>
  <row>
   <entry>php_yaz.dll</entry>
   <entry><link linkend="ref.yaz">YAZ</link> 関数</entry>
   <entry>Requires: <filename>yaz.dll</filename> (バンドル)</entry>
  </row>
  <row>
   <entry>php_zib.dll</entry>
   <entry><link linkend="ref.zip">Zip File</link> 関数</entry>
   <entry>読み込みのみ</entry>
  </row>
  <row>
   <entry>php_zlib.dll</entry>
   <entry><link linkend="ref.zlib">ZLib</link> compression 関数</entry>
   <entry>PHP 4.3.0以降でビルトイン</entry>
  </row>
       </tbody>
      </tgroup>
     </table>
    </para>
   </sect2>
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
