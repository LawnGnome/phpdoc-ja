 <chapter id="security">
  <title>セキュリティ</title>

  <simpara>
   PHP は強力な言語そしてインタプリタであり、
   モジュールとして Web サーバーに組み込んだ場合でも、
   独立した <acronym>CGI</acronym> バイナリとして実行される場合でも、
   ファイルをアクセスしたり、コマンドを実行したり、サーバーへの
   ネットワーク接続を開くことができます。
   デフォルトでは、これらの機能を実行した場合、Webサーバー上で
   セキュリティ上の問題を生じる可能性があります。
   PHP は、特に CGI プログラムを書く場合、Perl や C より安全な言語と
   なるように設計されています。
   コンパイル時または実行時の設定オプションを正しく選ぶことにより、
   必要な自由度とセキュリティの組み合わせを確実に提供することができます。</simpara>

  <simpara>
   PHP の使用法に多くの異なった手段があるように、
   PHP の動作を制御する多くの設定オプションがあります。
   オプションの選択肢が広いため、PHP を様々な用途に使用することが
   できます。
   しかし、このことは、これらのオプションとサーバー設定の組み合わせに
   よっては、安全でない設定となることを意味します。
   本章は、異なった設定オプションの組み合わせと安全に使用可能な
   状況について説明します。</simpara>

  <sect1 id="security.cgi">
   <title>CGI バイナリ</title>

   <sect2>
    <title>有りうる攻撃</title>

     <simpara>
      PHP を <acronym>CGI</acronym> バイナリとして使用する
      のは、
      PHP をモジュールとして(Apache のような)サーバーソフトウエアに
      組み込みたくない何らかの理由がある場合や
      安全な chroot と setuid 環境をスクリプトに提供する
      他の CGI ラッパーと組み合わせて PHP を使用する場合の
      設定オプションです。
      セットアップ時には、通常、PHP 実行バイナリを Web サーバーの cgi-bin
      ディレクトリにインストールします。
      CERT 勧告 <ulink
      url="http://www.cert.org/advisories/CA-96.11.interpreters_in_cgi_bin_dir.html">CA-96.11</ulink>
      は、いかなるインタプリタを cgi-bin に置くことにも反対しています。
      PHP バイナリをスタンドアロンのインタプリタとして使用することが
      できる場合でも、PHP は、セットアップにより生じる可能性がある
      次のような攻撃を防ぐように設計されています。</simpara>

     <itemizedlist>
      <listitem><simpara>システムファイルへのアクセス:
        <filename role="url">http://my.host/cgi-bin/php?/etc/passwd</filename></simpara>

       <simpara>
       URL において疑問符 (?) の後のクエリー情報は、CGI インターフェースに
       より、インタプリタにコマンドライン引数として渡されます。
       通常、インタプリタは、コマンドライン上の最初の引数に
       指定されたファイルを開き、実行します。</simpara>

       <simpara>
       CGI バイナリとして実行された場合、PHP は、コマンドライン引数の
       解釈を拒否します。
       </simpara></listitem>
      <listitem><simpara>サーバー上の Web ドキュメントへのアクセス:
	<filename role="url">http://my.host/cgi-bin/php/secret/doc.html</filename></simpara>

       <simpara>
       URL の PHP バイナリ名の後のパス情報の部分、つまり
	<filename role="uri">/secret/doc.html</filename> は、
	<acronym>CGI</acronym> プログラムにより
	オープンされて実行されるファイルの名前を指定するために従来より
	使用されています。
	<filename role="url">http://my.host/secret/script.php3</filename>
	のようなドキュメントへの要求を PHP インタプリタにリダイレクト
	するために、通常、何らかの Web サーバー設定用命令(Apache では Action)
	が使用されます。
	この設定により、Web サーバーは、まずディレクトリ 
	<filename role="uri">/secret</filename> へのアクセス権をチェックし、
	リダイレクト要求 <filename
	role="url">http://my.host/cgi-bin/php/secret/script.php3</filename>
	を生成します。
	残念なことに、リクエストが最初からこの形式で与えられた場合、
	Web サーバーによるアクセスチェックは、
	<filename role="uri">/secret/script.php3</filename> ファイル
	ではなく、<filename role="uri">/cgi-bin/php</filename> ファイル
	に対して行われます。
	この手法により、<filename role="uri">/cgi-bin/php</filename> に
	アクセス可能なユーザーは、Web サーバー上の全ての保護された
	ドキュメントにアクセスできてしまいます。</simpara>
       <simpara>
       PHP では、
       	 サーバードキュメントツリーにアクセス制限付きのディレクトリが
	 ある場合、
	 コンパイル時の設定オプション <link
	 linkend="enable-force-cgi-redirect">--enable-force-cgi-redirect</link>
	および実行時の設定命令 <link
	 linkend="ini.doc-root">doc_root</link> と<link
	 linkend="ini.user-dir">user_dir</link> を
	 この攻撃を防止するために使用することができます。
	 これらを組み合わせたいくつかの手法について
	 以下に詳細な説明を示します。

       </simpara></listitem>
     </itemizedlist></sect2>

    <sect2 id="security.cgi.default">
     <title>ケース 1: 公開ファイルのみを配布</title>
     <simpara>
     サーバー上にパスワードまたは IP アドレスを元にしたアクセス制限
     による制約を受けるコンテンツがない場合、
     この設定オプションを使用する必要はありません。
     使用する Web サーバーがリダイレクトを許可しない場合や
     サーバーがリダイレクト要求を安全に処理しつつ
     PHP バイナリと通信できる手段を有していない場合、
     オプション <link
      linkend="enable-force-cgi-redirect">--disable-force-cgi-redirect</link>
      を configure スクリプトに指定することができます。
      この場合でも、直接的な方法 <filename
      role="php">http://my.host/cgi-bin/php/dir/script.php3</filename>
      でもなくリダイレクション <filename
      role="php">http://my.host/dir/script.php3</filename>
      でもない他のやり方で PHP スクリプトを呼び出せるようになっていないか
      どうか確認する必要があります。</simpara>
     <simpara>
     リダイレクションは、例えば Apache では命令 AddHandler および
     Action で設定することができます。(以下を参照してください。)</simpara></sect2>
      
    <sect2 id="security.cgi.force-redirect">
     <title>ケース 2: --enable-force-cgi-redirect を使用</title>
     <simpara>
     このコンパイル時のオプションは、
      <filename role="php">http://my.host/cgi-bin/php/secretdir/script.php3
      </filename> のように URL から直接 PHP を呼び出すことを禁止します。
      代わりに、
      Web サーバーのリダイレクションにより処理された場合は、
      PHP はこのモードでのみ処理を行います。</simpara>
     <simpara>
     通常、Apache 用設定でのリダイレクションは、
     次の命令を使用して行います。</simpara>
     <programlisting role="apache-conf">
Action php3-script /cgi-bin/php
AddHandler php3-script .php3
</programlisting>

     <simpara>
     このオプションは、Apache Web サーバーでのみテストされており、
     リクエストのリダイレクト時に Apache が
     非標準の CGI 環境変数 <envar>REDIRECT_STATUS</envar> をセットすることを
     前提にしています。
     リクエストが直接のものであるか間接のものであるかを示す手段をWeb サーバーが
     全くサポートしていない場合は、このオプションを使用することはできません。
     この場合、ここで記した CGI 版を実行する他の方法の内の一つを使用する必要があります。</simpara></sect2>
      
    <sect2 id="security.cgi.doc-root">
     <title>ケース 3: doc_root または user_dir を設定</title>
     <simpara>
     Web サーバー上のドキュメントディレクトリに
     スクリプトや実行ファイルのようなアクティブな内容を読み込むのは、
     往々にして危険な行為であるとみなされることがあります。
     何らかの設定ミスによりスクリプトが実行されず、通常の HTML ドキュメント
     として表示されてしまう場合には、知的著作物またはパスワードのような
     セキュリティ情報が漏洩する可能性があります。
     このため、多くのシステム管理者は、スクリプトを PHP CGI を通じてのみ
     アクセス可能な他のディレクトリ構造にセットアップしたいと思うこと
     でしょう。
     この場合、常にインタープリタに処理されるため、上記のように表示されること
     はありません。</simpara>
     <simpara>
     前節で記したようなリクエストがリダイレクトされたものでないことを
     確かめる方法が利用可能でない場合、
     スクリプト用の doc_root を Web ドキュメント用ルートとは別に
     セットアップする必要があります。</simpara>
     <simpara>
     設定用命令 <link linkend="ini.doc-root">doc_root</link> により
      <link linkend="configuration.file">設定ファイル</link> ファイル中で
     PHP スクリプト用ドキュメントルートを設定することができます。
     または、環境変数 <envar>PHP_DOCUMENT_ROOT</envar> でも設定する
     ことができます。
     これを設定した場合、CGI 版の PHP は、     
     常に開くファイルの名前をこの <parameter>doc_root</parameter> 
     リクエストのパス情報を用いて作成し、
     (以下の <parameter>user_dir</parameter> を除き、)確実に
     このディレクトリの外側でスクリプトが実行されないようにします。</simpara>
      
     <simpara>
     ここで利用可能な別のオプションは、<link linkend="ini.user-dir">
     user_dir</link> です。user_dir が設定されていない場合、
     開かれるファイル名を制御するのは、<parameter>doc_root</parameter>
     のみです。
     <filename role="url">http://my.host/~user/doc.php3</filename> のような
     URL は、ユーザーホームディレクトリ以下のファイルを開かず、
     doc_root 以下の <filename role="uri">~user/doc.php3</filename> 
     というファイルを開くことになります。
     (ディレクトリ名がチルダ [<literal>~</literal>] で始まっている
     ということになります)</simpara>
      
     <simpara>
     user_dir が例えば、<filename role="dir">public_php</filename>に
     設定されていた場合、<filename
      role="url">http://my.host/~user/doc.php3</filename> のようなリクエストは、
      そのユーザー user のホームディレクトリにある
      <filename role="dir">public_php</filename> 以下の
      <filename>doc.php3</filename> という名前のファイルを
      オープンします。
      ユーザーのホームディレクトリが、
      <filename role="dir">/home/user</filename> である場合、
      実行されるファイルは、
      <filename>/home/user/public_php/doc.php3</filename>
      となります。</simpara>
      
     <simpara>
      <parameter>user_dir</parameter> の展開は、
      <parameter>doc_root</parameter> の設定によらず行われます。
      このため、ドキュメントルートおよびユーザーディレクトリへの
      アクセスを別々に制御することができます。</simpara></sect2>
      
    <sect2 id="security.cgi.shell">
     <title>ケース 4: web ツリーの外に PHP パーサを置く</title>
     <para>
     非常に安全性の高いオプションとして
     PHP パーサのバイナリをファイル用 Web ツリーの外側、
     例えば <filename role="dir">/usr/local/bin</filename>に
     置くことが考えられます。
     このオプションの唯一の欠点は、
     PHP タグを有する全てのファイルの先頭行に次のような一行を
     加える必要があることです。
      
      <informalexample>
       <programlisting>
#!/usr/local/bin/php
       </programlisting>
      </informalexample>
	
      また、ファイルを実行可能にしておく必要があります。
      この場合、実行時にシェルエスケープ機能 <literal>#!</literal> 
      を使用する Perl や sh や他のスクリプト言語で書かれた CGI スクリプトを
      処理するのと全く同様に処理を行います。</para>
     <para>
     この設定で <envar>PATH_INFO</envar> および
      <envar>PATH_TRANSLATED</envar> 情報を正しく処理するためには、
      PHP パーサを設定オプション
      <link linkend="enable-discard-path">--enable-discard-path</link>
      を付けてコンパイルする必要があります。</para></sect2></sect1>
   
   <sect1 id="security.apache">
    <title>Apache モジュール</title>
    <simpara>
    PHP が Apache モジュールとして使用された場合、PHP は、
    Apache ユーザーの許可属性(通常はユーザー "nobody" の許可属性)
    を継承します。</simpara></sect1>
    
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

