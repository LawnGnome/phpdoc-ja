<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.37 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
 <chapter id="tutorial">
  <title>簡易チュートリアル</title>

  <para>
   ここで、PHPの基礎の基礎について簡単なチュートリアルで説明したいと
   思います。ここでは、PHPはWebページを作成する機能だけを有している
   わけではありませんが、PHPで動的なWebページを作成することのみを
   扱います。詳細は、
   <link linkend="intro-whatcando">PHPでできること</link>と題する
   セクションを参照してください。
  </para>
  <para>
   PHPを使用できるWebページは、通常のHTMLページと全く同様に扱われ、
   通常のHTMLページを作成するのと同様の方法で編集することができます。
  </para>

  <sect1 id="tutorial.requirements">
   <title>必要なものは?</title>
   <para>
    本チュートリアルでは、使用するサーバでPHPが使用可能であり、
    <filename>.php</filename>で終わる全てのファイルがPHPで処理
    されることを仮定します。多くのサーバーでは、PHPファイルに
    関してこれがデフォルトの拡張子ですが、確実なのはサーバの
    管理者にきいてみることです。サーバがPHPをサポートする場合、
    何もする必要はありません。<filename>.php</filename> ファイルを
    作成し、Webディレクトリに置くだけで、サーバがこれを自動的に
    パースしてくれます。何もコンパイルする必要はなく、他のツール
    をインストールする必要もありません。PHPのファイルは、通常の
    HTMLファイルに、あなたが行なう全ての処理を実装した特殊なタグを
    追加したものと考えると良いでしょう。
    ほとんどのWebホストは、PHPサポートを提供していますが、
    使用しているホストがサポートしていない場合、
    <ulink url="&url.php.links;">PHPリンク集</ulink>のセクションの
    PHPが利用可能なWebホストを探すためのリソースを読んでみてください。
   </para>
   <para>
    ここでは、貴重なネットワーク帯域を節約するために、ローカルに開発を
    行うことにしましょう。この場合、
    <ulink url="&url.apache;">Apache</ulink>のようなWebサーバと、
    当然、<ulink url="&url.php.downloads;">PHP</ulink>をインストールす
    ることになります。また、多くの場合には、
    <ulink url="&url.mysql.docs;">MySQL</ulink>のようなデータベースも
    インストールすることになるでしょう。
   </para>
   <para>
    これらは、個別にインストールすることもできますし、より簡単な方法で
    インストールすることも可能です。
    このマニュアルには、
    <link linkend="install">PHPのインストール手順</link>
    (Webサーバーが設定済みであると仮定しています)があります。
    PHP自体をインストールする際に問題が発生した場合、.
    <ulink url="&url.php.mailing-lists;">インストールに関する
     メーリングリスト</ulink>で質問することをお薦めします。
    より簡単にインストールを行いたい場合には、使用するオペレーティング
    システム用の
    <ulink url="&url.installkits;">設定済みのパッケージ</ulink>
    を利用することもできます。
    これにより、数回のマウスクリックで自動的にこれらをインストールする
    ことができます。
    MacOSX, LinuxやWindowsを含む、あらゆるオペレーティングシステムに
    おいてWebサーバでPHPを使用できるように設定することは簡単です。
    Linuxの場合、RPMの場所を知るために<ulink
    url="&url.rpmfind;">rpmfind</ulink>と
    <ulink url="&url.rpmfind.pbone;">PBone</ulink>が有用でしょう。
    Debian用パッケージをみつけるには、<ulink
     url="&url.apt-get;">apt-get</ulink> にアクセスするとよいでしょう。
   </para>
  </sect1>

  <sect1 id="tutorial.firstpage">
   <title>PHPを使用する初めてのページ</title>
   <para>
    以下の内容で<filename>hello.php</filename>という名前のファイルを
    作成し、Webサーバのルートディレクトリ
    (<varname>DOCUMENT_ROOT</varname>)に置いてください。
   </para>
   <para>
    <example>
     <title>初めてのPHPスクリプト: <filename>hello.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <?php echo "<p>Hello World</p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      ブラウザを使用して、"/hello.php"で終わるWebアクセス用URLを指定し、
      このファイルにアクセスしてください。
      ローカルに開発を行っている場合、このURLは
      <literal>http://localhost/hello.php</literal> または
      <literal>http://127.0.0.1/hello.php</literal> のようになります。
      しかし、これはWebサーバーの設定に依存します。
      全てが正しく設定されている場合、
      このファイルはPHPによりパースされ、以下の出力がブラウザに送信されます。
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 Hello World<p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    このプログラムは非常に簡単なので、実際には、このようなページを
    作成するためにPHPを使用する必要はありません。
    <literal>Hello World</literal> をPHPの<function>echo</function>命令に
    より出力しているだけです。
    このファイルは、実行ファイルまたは特殊なファイルとする必要がないことに注意してください。
    このファイルが拡張子".php"を有し、このファイルがPHPに渡される
    必要があると設定されているため、サーバーはPHPにより解釈されるファイルを見付ける
    ことができます。このファイルは、多くの面白いことを可能にする特別なタグを
    利用できる通常のHTMLファイルと考えることができます。
   </para>
   <para>
    この例を試した際に、何も出力されない場合、または、ダウンロード用の
    プロンプトが表示されるか、テキストとしてファイル全体が表示された場合、
    利用指定サーバでPHPが利用できない可能性があります。本マニュアルの
    <link linkend="install">インストール</link> の章により
    PHPを利用できるようにするよう管理者にきいてみてください。
    ローカルに開発を行っている場合もインストールの章を読んで
    設定が全て正しく行われていることを確認してください。
    解決しない問題がある場合は、多くの
    <ulink url="&url.php.support;">PHPサポート</ulink>の選択肢のどれか
    を利用してみてください。
   </para>
   <para>
    この例の目的は、特殊なPHPタグ形式を示すことです。
    この例では、<literal>&lt;?php</literal> がPHPタグの開始を
    示しています。この後、PHP命令を置き、終了タグ<literal>?&gt;</literal>
    を記述することにより、PHPモードを抜けています。
    このように任意の場所でPHPモードを抜けてHTMLファイルに移ることがで
    きます。詳細は、<link linkend="language.basic-syntax">
    基本的な構文</link>のセクションを参照ください。
   </para>

   <note>
    <title>テキストエディタに関する注意</title>
    <para>
     PHPファイルを作成、編集、監理する際に使用できる、多くのテキストエディ
     タのや統合開発環境(IDE)があります。
     これらのツールのリストの一部は、<ulink
     url="&url.phpeditorlist;">PHP エディタのリスト</ulink>で整理され
     ています。あるエディタを推薦したい場合、上記のページを訪れ、
     ページの監理者にそのエディタをリストに加えてくれないかとたずねて
     みてください。
    </para>
   </note>

   <note>
    <title>ワードプロセッサに関する注意</title>
    <para>
     StarOffice Writer, Microsoft Word およびAbiwordのようなワードプロ
     セッサは、PHPファイルの編集には不適です。
     これらのワープロ上でテストスクリプトを編集する場合、プレーンテキスト
     としてファイルを保存していることを確認してください。さもないと、PHP
     は、スクリプトを読み込んで実行できません。
    </para>
   </note>

   <note>
    <title>Windows ノートパッドに関する注意</title>
    <para>
     Windowsのメモ帳を使用してPHPスクリプトを書く場合には、ファイルに
     拡張子.phpを付けて保存したかどうかを確認する必要があります。
     (メモ帳は、以下の防止策のどらかを適用しない限り、拡張子.txtを自動
     的に付加します。)
     ファイルを保存する際に、ファイル名を入力するプロンプトで
     ファイル名を引用符で括ります。(すなわち、
     "<filename>hello.php</filename>"とします。)
     もしくは、保存ダイアログボックスにおいてドロップダウンメニュー"テ
     キスト文書"をクリックし、"すべてのファイル"に設定を変更します。こ
     れにより、引用符を付けずにファイル名を入力することができます。
    </para>
   </note>

   <para>
    さて、動作する簡単なPHPスクリプトを作成することができましたので、
    最も有名なPHPスクリプトを作成してみましょう!
    <function>phpinfo</function>関数をコールすることにより、
    <link linkend="language.variables.predefined">定義済み変数</link>、
    ロードされているPHPモジュール、<link linkend="configuration">設定
    </link>等のシステムに関する多くの有用な情報を得ることができます。
    この重要な情報を見てみてください。
   </para>

   <para>
    <example>
     <title>PHPからシステムに関する情報を取得する</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>

  </sect1>

  <sect1 id="tutorial.useful">
   <title>実用的な例</title>
   <para>
    次により実用的なことをしてみましょう。ページを見ているユーザが使用
    しているブラウザの種類を確認してみます。これを行なうには、ブラウザが
    HTTPリクエストの一部として送信したuser agent文字列を調べます。
    この情報は、<link linkend="language.variables">変数</link>に
    保存されています。PHPでは、変数名は常にドル記号で始まります。
    ここで使用する変数は、<varname>$_SERVER['HTTP_USER_AGENT']</varname>
    です。
   </para>
   <note>
    <para>
     <link linkend="reserved.variables.server">$_SERVER</link> は、
     Webサーバ関連情報を全て保持するPHPの特別な予約変数です。詳細は、
     <link linkend="language.variables.superglobals">オートグローバル</link>
     (スーパーグローバルとも呼ばれます) を参照してください。
     これらの特別な変数は、<ulink url="&url.php.release4.1.0;">4.1.0</ulink>
     で導入されました。これ以前は、
     <varname>$HTTP_SERVER_VARS</varname>のような古い配列
     <varname>$HTTP_*_VARS</varname>を代わりに使用していました。古い
     とはいえ、これらの変数はまだ存在しています。
     (<link linkend="tutorial.oldcode">古いコード</link>に関する注記も
     参照してください。)
    </para>
   </note>
   <para>
    この変数を表示するには、以下のようにします。
   </para>
   <para>
    <example>
    <title>変数を出力する (配列要素)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER["HTTP_USER_AGENT"]; ?>
]]>
    </programlisting>
    <para>
      このスクリプトの出力例は以下のようになります。
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
     </screen>
    </para>
   </example>
   </para>
   <para>
    PHPで利用可能な変数の<link linkend="language.types">型</link>
    には多くの種類があります。上の例では、
    <link linkend="language.types.array">配列</link> の要素を
    出力しています。配列は、非常に有用です。
   </para>
   <para>
    <varname>$_SERVER</varname> は、自動的にPHPで利用可能な
    変数の一つに過ぎません。マニュアルの
    <link linkend="reserved.variables">定義済の変数</link>のセクションで
    リストを参照することができます。また、以下のようなファイルを作成する
    ことにより、完全なリストを入手することができます。
   </para>
   <para>
    <example>
     <title><function>phpinfo</function>で定義済みの変数を全て表示する</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    ブラウザにこのファイルを読み込むと、利用可能な全ての変数のリストとともに
    PHPに関する全ての情報を参照することができます。
   </para>
   <para>
    PHPタグの中に複数のPHP命令を置くことができ、echo文以上のことを行なう
    コードブロックを作成することができます。
    例えば、インターネット・エクスプローラかどうかを調べたい場合は、
    以下のようにします。
   </para>
   <para>
    <example>
     <title>
      <link linkend="language.control-structures">制御構造</link> および
      <link linkend="language.functions">関数</link>の使用例
     </title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false) {
  echo 'あなたはInternet Explorerを使用しています<br />';
}
?>
]]>
     </programlisting>
     <para>
      このスクリプトの出力例は以下のようになります。
      <screen role="html">
<![CDATA[
あなたはInternet Explorerを使用しています<br />
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    ここで、新しい概念をいくつか導入します。
    <link linkend="control-structures.if">if</link> 文を使用しています。
    C言語の基本構文を知っているとしたら、理解できると思います。
    C言語や上記の構文を使用する他の言語をあまり知らない場合には、
    PHPの入門書を手にとって最初の数章を読むか、このマニュアルの
    <link linkend="langref">言語リファレンス</link>の部分を読むべきです。
    <ulink url="&url.php.books;">&url.php.books;</ulink>でPHP関連の
    本のリストを参照することができます。
   </para>
   <para>
    二番目の新しい概念は、<function>strstr</function>関数のコールです。
    <function>strstr</function> はPHPに組み込まれた関数で、
    文字列の中である文字列を探します。この場合、
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>  (いわゆる干し草の山
    【haystack】) の中で
    <literal>"MSIE"</literal> (いわゆる針【needle】) を探しています。
    この文字列が見つかった場合、
    この関数はこの関数は文字列の相対的な位置を返し、
    見つからなかった場合には &false ;を返します。
    この関数が &false; を返さなければ、
    <link linkend="control-structures.if">if</link>
    文は &true; と評価し、その{波括弧}の中のコードが実行されます。
    そうでない場合は、実行されません。
    <link linkend="control-structures.if">if</link>,
    <link linkend="control-structures.else">else</link> と
    <function>strtoupper</function> や <function>strlen</function>
    のような他の関数で、似たような例を作ってみてください。
    関連するマニュアルの各ページにも例がのっています。
    関数の使用法に自信がない場合には、マニュアルの
    <link linkend="about.prototypes">関数定義の読み方</link>および
    <link linkend="language.functions">PHP関数</link>のセクションの両方を
    読んでみると良いでしょう。
   </para>
   <para>
    この例を少し発展させて、PHPブロックの中からでもPHPモードから出たり
    入ったりすることができることを以下に示します。
   </para>
   <para>
    <example>
     <title>HTMLおよびPHPモードの両方を混在させる</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false) {
?>
<h3>strposが非falseを返しました</h3>
<center><b>あなたはInternet Explorerを使用しています</b></center>
<?php
} else {
?>
<h3>strposがfalseを返しました</h3>
<center><b>あなたはInternet Explorerを使用していません</b></center>
<?php
}
?>
]]>
     </programlisting>
     <para>
      この例の出力は以下のようになります。
      <screen role="html">
<![CDATA[
<h3>strstrが非falseを返しました</h3>
<center><b>あなたはInternet Explorerを使用しています</b></center>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    何かを出力する際にPHPのecho文を使用する代わりに、PHPモードを抜けて、
    通常のHTMLを送信しています。ここで注意すべき重要で強力な点は、
    スクリプトの論理フローが損なわれないということです。
    <function>strstr</function> が &true; または &false;のどちらを
    返すか、言い換えると<literal>MSIE</literal> が見つかったかどうかに
    基づき、HTMLブロックだけが見る側に送信されることになります。
   </para>
  </sect1>

  <sect1 id="tutorial.forms">
   <title>フォームの処理</title>
   <para>
    PHPの最も強力な機能の一つは、HTMLフォームを処理する手段です。
    理解するべき重要な基本概念は、あるフォームの中の全てのフォーム要素
    は、自動的にPHPスクリプトで利用可能になるということです。
    詳細は、マニュアルのセクション<link linkend="language.variables.external">
     PHPの外部からくる変数</link> およびPHPでフォームを使用する例を参照
    してください。以下にHTMLフォームの例を示します。
   </para>
   <para>
    <example>
     <title>簡単なHTMLフォーム</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 名前: <input type="text" name="name" />
 年齢: <input type="text" name="age" />
 <input type="submit" />
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    このフォームに関して特別なところはありません。これは通常のHTML
    フォームで特殊なタグは全く使用していません。
    ユーザがこのフォームを記入し、投稿ボタンを押した時、
    <filename>action.php</filename> ページがコールされます。
    このファイルには、以下のようなコードを記述します。
   </para>
   <para>
    <example>
     <title>フォームからのデータを出力する</title>
     <programlisting role="php">
<![CDATA[
こんにちは、<?php echo $_POST['name']; ?>さん。
あなたは、<?php echo $_POST['age']; ?> 歳です。
]]>
     </programlisting>
     <para>
      このスクリプトの出力例は次のようになります。
      <screen role="html">
<![CDATA[
こんにちは、Joe さん。
あなたは、22 歳です。
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    これら行なっていることは明らかです。他に行なっていることはありません。
    変数 <varname>$_POST['name']</varname> と
    <varname>$_POST['age']</varname>はPHPにより自動的に設定されます。
    前の部分では、オートグローバル<varname>$_SERVER</varname>を使用しま
    したが、ここでは、全てのPOSTデータを保持するオートグローバル
    <link linkend="reserved.variables.post">$_POST</link>を導入しています。
    フォームの<emphasis>メソッド</emphasis>がPOSTであることに注意してください。
    <emphasis>GET</emphasis>メソッドを使用している場合、フォームの
    情報は代わりにオートグローバル<link linkend="reserved.variables.get">
     $_GET</link>に代入されます。リクエストデータの発信源に留意しない場合
    には、オートグローバル変数
    <link linkend="reserved.variables.request">$_REQUEST</link>を使用
    することもできます。この変数は、GET, POST, COOKIE, FILEデータ
    の混ざったものが含まれます。
    <function>import_request_variables</function> 関数も参照してください。
   </para>
  </sect1>

  <sect1 id="tutorial.oldcode">
   <title>新しいバージョンのPHPで古いコードを使用する</title>
   <para>
    現在、PHPは有名なスクリプト言語まで成長しており、
    各自のスクリプトで再利用可能な多くのコードとして公開されている
    リソースが存在します。PHP言語の開発者の大部分は、過去のバージョン
    との互換製を保とうとしており、過去のバージョン用に書かれた
   スクリプトは(理想的には)より新しい バージョンのPHPで変更せずに
    動作するはずです。しかし、実際には、通常、いくつかの変更が
    必要となります。
   </para>
   <para>
    古いコードに影響を与える最近の重要な二つの変更点を以下に示します。
    <itemizedlist>
     <listitem>
      <simpara>
       <varname>$HTTP_*_VARS</varname>配列が過去のものとなったこと。
       (これは、関数またはメソッドの中で使用する際にグローバル変数として
       宣言を行なう必要がありました。)  以下の
       <link linkend="language.variables.superglobals">オートグローバル
       配列</link>が<ulink url="&url.php.release4.1.0;">4.1.0</ulink>で
       導入されました。これらを以下に示します。
       <varname>$_GET</varname>, <varname>$_POST</varname>,
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>,
       <varname>$_ENV</varname>, <varname>$_REQUEST</varname>,
       <varname>$_SESSION</varname>.
       従来の$HTTP_POST_VARSのような配列<varname>$HTTP_*_VARS</varname>
       もまだ存在し、PHP 3以来維持されています。

       &avail.register-long-arrays;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       外部変数は、もはやデフォルトでグローバルスコープに登録されません。
       言い換えると、PHP<ulink url="&url.php.release4.2.0;">4.2.0</ulink>
       以降、PHPディレクティブ
       <link linkend="ini.register-globals">register_globals</link>は、
       &php.ini;においてデフォルトで<emphasis>off</emphasis>となっています。
       これらの値にアクセスする推奨される方法は、
       上記のオートグローバル配列を使用する方法です。
       古いスクリプトや本、チュートリアルはこのディレクティブに
       依存している可能性があります。このディレクティブがonの場合、
       例えば、URL <literal>http://www.example.com/foo.php?id=42</literal>
       から<varname>$id</varname>を使用することができます。
       on、offによらず<varname>$_GET['id']</varname>は利用可能です。
      </simpara>
     </listitem>
    </itemizedlist>
    これらの変更に関する詳細は、
    <link linkend="language.variables.predefined">定義済みの変数</link>
    のセクションおよびそこにあるリンクを参照してください。
   </para>
  </sect1>

  <sect1 id="tutorial.whatsnext">
   <title>次にするべきことは?</title>
   <para>
    ここで得た知識により、マニュアルのほとんどの部分と
    サンプルのアーカイブにある多くのスクリプトの例を理解できる
    ようになったはずです。他の例をWebサイトphp.netにあるリンク
    セクション<ulink url="&url.php.links;">&url.php.links;</ulink>で
    探すこともできます。
   </para>
   <para>
    この他PHPでできる多くことを示すスライドプレゼンテーションを
    見るには、PHPカンファレンスマテリアルサイト、
    <ulink url="&url.php.conf;">&url.php.conf;</ulink>と
    <ulink url="&url.php.talks;">&url.php.talks;を参照してください。
    </ulink>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

