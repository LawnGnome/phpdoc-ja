<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<!-- EN-Revision: 324522 Maintainer: takagi Status: ready -->
<refentry xml:id="runkit.sandbox-parent" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Runkit_Sandbox_Parent</refname>
  <refpurpose>
   Runkit 反サンドボックス（Anti-Sandbox）クラス
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;

  <methodsynopsis>
   <type>void</type><methodname>Runkit_Sandbox_Parent::__construct</methodname>
   <void/>
  </methodsynopsis>

  <para>
   <classname>Runkit_Sandbox</classname> クラスが作成した
   サンドボックス環境から <classname>Runkit_Sandbox_Parent</classname>
   クラスのインスタンスを作成し、サンドボックスからその親インスタンスに
   アクセスするための（管理された）手段を提供します。
  </para>

  &note.runkit.sandbox;

  <para>
   <classname>Runkit_Sandbox_Parent</classname> の機能を有効にするには、
   親のコンテキストから各サンドボックス単位で <literal>parent_access</literal>
   フラグを有効にする必要があります。
  </para>

  <example>
   <title>サンドボックスから変数を使用する</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();
$sandbox['parent_access'] = true;
?>
]]>
   </programlisting>
  </example>

 </refsect1>

 <refsect1 role="variables">
  <title>親の変数にアクセスする</title>
  <para>
   サンドボックス内の変数へのアクセスと同様、親の変数の読み込みや
   親の変数への書き込みが可能です。これは
   <classname>Runkit_Sandbox_Parent</classname> クラスのプロパティとして
   扱われます。親の変数の読み込みは、<literal>parent_read</literal>
   設定を有効にすることで可能となります（それに加えて、基本となる
   <literal>parent_access</literal> の設定も必要です）。
   一方、書き込みについては <literal>parent_write</literal> の設定により
   可能となります。
  </para>

  <para>
   サンドボックス内の変数へのアクセスとは異なり、変数のスコープが
   グローバルに限定されることはありません。<literal>parent_scope</literal>
   を適切な整数値に設定することで、アクティブなコールスタック内で
   他のスコープが使用可能です。0（デフォルト）は、グローバルスコープで
   変数に直接アクセスします。1 は、サンドボックスのコードが実行された
   ブロック内のスコープを設定します。それより大きい値を指定した場合、
   サンドボックスのコードを実行した関数の呼び出し元を順にたどり、
   そのスコープの変数にアクセスしようと試みます。
  </para>

  <example>
   <title>親の変数にアクセスする</title>
   <programlisting role="php">
<![CDATA[
<?php
$php = new Runkit_Sandbox();
$php['parent_access'] = true;
$php['parent_read'] = true;

$test = "Global";

$php->eval('$PARENT = new Runkit_Sandbox_Parent;');

$php['parent_scope'] = 0;
one();

$php['parent_scope'] = 1;
one();

$php['parent_scope'] = 2;
one();

$php['parent_scope'] = 3;
one();

$php['parent_scope'] = 4;
one();

$php['parent_scope'] = 5;
one();

function one() {
    $test = "one()";
    two();
}

function two() {
    $test = "two()";
    three();
}

function three() {
    $test = "three()";
    $GLOBALS['php']->eval('var_dump($PARENT->test);');
}
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
string(6) "Global"
string(7) "three()"
string(5) "two()"
string(5) "one()"
string(6) "Global"
string(6) "Global"
]]>
  </screen>
 </refsect1>

 <refsect1 role="functions">
  <title>親の関数をコールする</title>
  <para>
   適切な設定を有効にすることで、サンドボックスはその親の関数に
   アクセスすることが可能となります。
   <literal>parent_call</literal> を有効にすると、サンドボックスから
   親スコープの全ての関数をコールすることが可能となります。
   言語構造については、以下のように個々の設定項目で管理されます。
   <function>print</function> および <function>echo</function> は
   <literal>parent_echo</literal> を有効にすると使用可能です。
   <function>die</function> および <function>exit</function> は
   <literal>parent_die</literal> を有効にすると使用可能です。
   <function>eval</function> は <literal>parent_eval</literal> を
   有効にすると使用可能です。また
   while <function>include</function>、<function>include_once</function>、
   <function>require</function> および <function>require_once</function> は
   <literal>parent_include</literal> を有効にすると使用可能です。
  </para>

 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
