<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<!-- EN-Revision: 329325 Maintainer: takagi Status: ready -->
<refentry xml:id="runkit.sandbox" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Runkit_Sandbox</refname>
  <refpurpose>
   Runkit Sandbox クラス -- PHP バーチャルマシン
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;

  <para>
   <classname>Runkit_Sandbox</classname> クラスをインスタンス化すると、
   独自のスコープとプログラムスタックを持つ新しいスレッドが生成されます。
   コンストラクタに渡すオプションを設定することで、この環境では
   インタプリタの機能を制限することが可能す。そのため、ユーザーから渡された
   コードを実行する場合などに、より安全な環境を提供可能です。
  </para>

  &note.runkit.sandbox;
 </refsect1>

 <refsect1 role="constructor">
  <title>コンストラクタ</title>
  <methodsynopsis>
   <type>void</type><methodname>Runkit_Sandbox::__construct</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  <para>
   <parameter>options</parameter> は連想配列で、その中に
   以下の ini オプションの組み合わせを格納します。
  </para>

  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>safe_mode</parameter></term>
     <listitem>
      <para>
       <classname>Runkit_Sandbox</classname> クラスをインスタンス化した
       外部スクリプトが <literal>safe_mode = off</literal> と設定されている
       場合、サンドボックス内の safe_mode を on にすることが可能です。
       外部スクリプトで <literal>safe_mode</literal> が有効になっている
       場合に、サンドボックス内でそれを無効にすることはできません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>safe_mode_gid</parameter></term>
     <listitem>
      <para>
       <classname>Runkit_Sandbox</classname> クラスをインスタンス化した
       外部スクリプトが <literal>safe_mode_gid = on</literal> と設定されている
       場合、サンドボックス内の safe_mode_gid を off にすることが可能です。
       外部スクリプトで <literal>safe_mode_gid</literal> が無効になっている
       場合に、サンドボックス内でそれを有効にすることはできません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>safe_mode_include_dir</parameter></term>
     <listitem>
      <para>
       <classname>Runkit_Sandbox</classname> クラスをインスタンス化した
       外部スクリプトが <literal>safe_mode_include_dir</literal> を
       組み込んで configure されていた場合、サンドボックス内の
       safe_mode_include_dir を定義されているディレクトリ以下に指定することが
       可能です。この機能を無効にすることを示すため、safe_mode_include_dir
       をクリアすることも可能です。
       外部スクリプトで safe_mode_include_dir が空白になっているが
       safe_mode は有効でない場合、任意の safe_mode_include_dir を
       指定して safe_mode を on にすることが可能です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>open_basedir</parameter></term>
     <listitem>
      <para>
       <parameter>open_basedir</parameter> は、カレントの
       <literal>open_basedir</literal> 以下の任意のパスを指定可能です。
       グローバルスコープで <literal>open_basedir</literal> 
       が指定されていない場合、それはルートディレクトリと判断され、
       どの場所でも指定可能となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>allow_url_fopen</parameter></term>
     <listitem>
      <para>
       <parameter>safe_mode</parameter> と同様、より厳しくする方向にのみ
       指定可能です。この場合は &true; と指定されている場合に &false; を
       指定することが可能となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>disable_functions</parameter></term>
     <listitem>
      <para>
       サンドボックス内のインタプリタで無効とする関数を、カンマ区切りの
       リストで指定します。現在すでに無効になっている関数名を含める必要は
       ありません。それらはリストに載っているか否かにかかわらず無効となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>disable_classes</parameter></term>
     <listitem>
      <para>
       サンドボックス内のインタプリタで無効とするクラスを、カンマ区切りの
       リストで指定します。現在すでに無効になっているクラス名を含める必要は
       ありません。それらはリストに載っているか否かにかかわらず無効となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>runkit.superglobal</parameter></term>
     <listitem>
      <para>
       サンドボックス内のインタプリタでスーパーグローバルとして扱う変数を、
       カンマ区切りのリストで指定します。これらの変数は、既に内部で
       定義されている変数やグローバルの runkit.superglobal 設定に
       追加して使用されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>runkit.internal_override</parameter></term>
     <listitem>
      <para>
       Ini オプション <literal>runkit.internal_override</literal> は、
       サンドボックス内では無効になる（そして、再度有効にはならない）
       かもしれません。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <example>
   <title>機能を制限したサンドボックスのインスタンス化</title>
   <programlisting role="php">
<![CDATA[
<?php
$options = array(
  'safe_mode'=>true,
  'open_basedir'=>'/var/www/users/jdoe/',
  'allow_url_fopen'=>'false',
  'disable_functions'=>'exec,shell_exec,passthru,system',
  'disable_classes'=>'myAppClass');
$sandbox = new Runkit_Sandbox($options);
/* 制限されていない ini 項目は、普通に設定できる */
$sandbox->ini_set('html_errors',true);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="variables">
  <title>変数へのアクセス</title>
  <para>
   サンドボックス環境内のすべてのグローバル変数は、サンドボックス
   オブジェクトのプロパティとしてアクセス可能です。しかし、
   オブジェクト変数やリソース変数はインタプリタ越しに
   利用することができないことに注意しましょう。これは、これらの
   2 つのスレッドのメモリ管理が仮想マシン上で行われていることが原因です。
   さらに、配列はすべてディープコピーされ、参照渡しのデータは
   失われます。つまり、参照渡しのデータをインタプリタ越しに使用することは
   できないということです。
  </para>

  <example>
   <title>サンドボックス内部の変数の扱い</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

$sandbox->foo = 'bar';
$sandbox->eval('echo "$foo\n"; $bar = $foo . "baz";');
echo "{$sandbox->bar}\n";
if (isset($sandbox->foo)) unset($sandbox->foo);
$sandbox->eval('var_dump(isset($foo));');
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
bar
barbaz
bool(false)
]]>
  </screen>
 </refsect1>

 <refsect1 role="functions">
  <title>PHP 関数のコール</title>
  <para>
   サンドボックス内で定義されている関数は、すべてサンドボックス
   オブジェクトのメソッドとしてコールできます。これには、擬似関数として
   扱われる以下のような言語構造も含みます。<function>eval</function>、
   <function>include</function>、<function>include_once</function>、
   <function>require</function>、<function>require_once</function>、
   <function>echo</function>、<function>print</function>、
   <function>die</function> および <function>exit</function>。
  </para>

  <example>
   <title>サンドボックス内の関数のコール</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

echo $sandbox->str_replace('a','f','abc');
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
fbc
]]>
  </screen>

  <para>
   サンドボックス内の関数への引数は、外部の PHP インスタンスから
   渡されます。もしサンドボックスのスコープから引数を渡したい場合は、
   上で示したようにサンドボックスのプロパティとしてそれにアクセスする
   ようにしてください。
  </para>

  <example>
   <title>サンドボックス内の関数に引数を渡す</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

$foo = 'bar';
$sandbox->foo = 'baz';
echo $sandbox->str_replace('a',$foo,'a');
echo $sandbox->str_replace('a',$sandbox->foo,'a');
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
bar
baz
]]>
  </screen>
 </refsect1>

 <refsect1 role="settings">
  <title>サンドボックス設定の変更</title>
  <para>
   runkit バージョン 0.5 以降では、配列へのアクセスと同じ構文で、
   実行時にサンドボックスの一部の設定を変更することが可能です。
   <parameter>active</parameter> は読み込み専用で、現在の状態に
   ついての情報を提供します。<parameter>output_handler</parameter>
   は通常の配列オフセットと同様に読み書きが可能です。
   将来的には書き込み専用の設定項目も現れるかもしれませんが、
   今のところはそのような項目はありません。
  </para>

  <para>
   <table>
    <title>サンドボックス設定 / 状態のインジケータ</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>設定</entry>
       <entry>型</entry>
       <entry>目的</entry>
       <entry>デフォルト</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>active</literal></entry>
       <entry><type>Boolean</type> (Read Only)</entry>
       <entry>
        サンドボックスが使用可能な状態である場合に &true; 、
        die() や exit() のコールもしくは致命的なエラーなどで
        リクエストから抜けた状態である場合に &false; 。
       </entry>
       <entry>&true; (Initial)</entry>
      </row>
      <row>
       <entry><literal>output_handler</literal></entry>
       <entry><type>Callback</type></entry>
       <entry>
        有効なコールバックを指定すると、サンドボックス
        インスタンスの生成するすべての出力に対してその
        関数が適用されます。
        サンドボックス出力ハンドラは、システム全体の
        出力ハンドラと同じ呼び出し規約に従います。
       </entry>
       <entry>なし</entry>
      </row>
      <row>
       <entry><literal>parent_access</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが <classname>Runkit_Sandbox_Parent</classname>
        クラスのインスタンスを使用するかどうか。使用するには、
        その他の <classname>Runkit_Sandbox_Parent</classname>
        関連の設定を有効にする必要があります。
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_read</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキストの変数を読み込むかどうか。
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_write</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキストの変数を変更するかどうか。
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_eval</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキストの任意のコードを評価する（evaluate）
        かどうか。<emphasis>危険です。</emphasis>
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_include</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキストの php ファイルを include するかどうか。
        <emphasis>危険です。</emphasis>
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_echo</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキストのデータを表示する際に、それ自身の
        出力ハンドラを回避するかどうか。
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_call</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキストの関数をコールするかどうか。
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_die</literal></entry>
       <entry><type>Boolean</type></entry>
       <entry>
        サンドボックスが親コンテキスト（そして自分自身）を終了させるかどうか。
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_scope</literal></entry>
       <entry><type>Integer</type></entry>
       <entry>
        親のプロパティに対してどのようなスコープでアクセスするか。
        0 == Global scope, 1 == Calling scope,
        2 == Scope preceding calling scope,
        3 == The scope before that, etc..., etc...
       </entry>
       <entry><literal>0</literal> (Global)</entry>
      </row>
      <row>
       <entry><literal>parent_scope</literal></entry>
       <entry><type>String</type></entry>
       <entry>
        <literal>parent_scope</literal> に文字列値が設定されている場合は、
        グローバルスコープの配列変数名を表します。アクセス時にその名前の
        変数が存在しない場合は、空の配列が作成されます。変数が存在するが
        配列ではない場合は、その変数への参照を含むダミー配列が作成されます。
       </entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
