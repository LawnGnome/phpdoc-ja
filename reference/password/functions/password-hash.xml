<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333973 Maintainer: takagi Status: ready -->

<refentry xml:id="function.password-hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>password_hash</refname>
  <refpurpose>パスワードハッシュを作る</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>password_hash</methodname>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>integer</type><parameter>algo</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>password_hash</function> は、強力な一方向ハッシュアルゴリズムを使って
   新しいパスワードハッシュを作ります。
   <function>password_hash</function> は <function>crypt</function> と互換性があるので、
   <function>crypt</function> が作ったパスワードハッシュは
   <function>password_hash</function> でも使えます。
  </para>
  <simpara>
   現在、これらのアルゴリズムに対応しています。
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> - bcrypt アルゴリズムを使います (PHP 5.5.0 の時点でのデフォルトです)。
      新しくてより強力なアルゴリズムが PHP に追加されれば、
      この定数もそれにあわせて変わっていきます。
      そのため、これを指定したときの結果の長さは、変わる可能性があります。
      したがって、結果をデータベースに格納するときにはカラム幅を
      60 文字以上にできるようなカラムを使うことをお勧めします
      (255 文字くらいが適切でしょう)。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> - <constant>CRYPT_BLOWFISH</constant>
      アルゴリズムを使ってハッシュを作ります。これは標準の <function>crypt</function>
      互換のハッシュで、識別子 "$2y$" を使った場合の結果を作ります。
      その結果は、常に 60 文字の文字列になります。&return.falseforfailure;。
     </simpara>
     <para>
      サポートするオプション
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>salt</literal> - パスワードのハッシュに使うソルトを手動で設定します。
        これは、自動生成されたソルトを上書きすることに注意しましょう。
       </para>
       <para>
        省略した場合は、パスワードをハッシュするたびに <function>password_hash</function>
        がランダムなソルトを自動生成します。これは意図したとおりの操作モードです。
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>cost</literal> - 利用するアルゴリズムのコストを表します。
        値の例については <function>crypt</function> のページを参照ください。
       </para>
       <para>
        省略した場合のデフォルトは <literal>10</literal> です。この値でもかまいませんが、
        ハードウェアの性能が許すならもう少し高くすることもできます。
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      &password.parameter.password;
     </para>
      <caution>
       <para>
        <constant>PASSWORD_BCRYPT</constant> を
        <parameter>algo</parameter> に指定すると、
        <parameter>password</parameter> が最大 72 文字までに切り詰められます。
       </para>
      </caution>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      &password.parameter.algo;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      &password.parameter.options;
     </para>
     <para>
      省略した場合は、ランダムな salt を生成してデフォルトのコストを使います。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   ハッシュしたパスワードを返します。&return.falseforfailure;。
  </para>
  <para>
   使ったアルゴリズムやコスト、そしてソフトもハッシュの一部として返されます。
   つまり、ハッシュを検証するために必要な情報は、すべてそこに含まれているということです。
   そのため、<function>password_verify</function> でハッシュを検証するときに、
   ソルトやアルゴリズムの情報を別に保存する必要はありません。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>password_hash</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * デフォルトのアルゴリズムを使ってパスワードをハッシュします。
 * 現時点でのデフォルトは BCRYPT で、その結果は 60 文字になります。
 *
 * デフォルトは、今後変わる可能性があることに注意しましょう。結果が
 * 60 文字以上になっても対応できるようにしておきましょう (255 あたりが適切です)
 */
echo password_hash("rasmuslerdorf", PASSWORD_DEFAULT)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a
]]>
    </screen>
   </example>
  </para> 
  <para>
   <example>
    <title><function>password_hash</function> で、コストを手動で設定する例</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * この例では、BCRYPT のコストをデフォルトより上げて、12 にします。
 * また、アルゴリズムを BCRYPT に変えたことにも注目しましょう。結果は常に 60 文字になります。
 */
$options = [
    'cost' => 12,
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$12$QjSH496pcT5CEbzjD/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example>
    <title><function>password_hash</function> で、ソルトを手動で設定する例</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * ここでは、ソルトをランダムに生成するようにしています。
 * 固定のソルトを使ったり、ランダムではない方法で作ったソルトを使ったりしてはいけません。
 *
 * 利用例の大半にあわせて、password_hash にランダムなソルトを生成させます。
 */
$options = [
    'cost' => 11,
    'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$11$q5MkhSBtlsJcNEVsYh64a.aCluzHnGog7TQAKVmQwO9C8xb.t89F.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>password_hash</function> で、適切なコストを探す例</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * このコードは、サーバーをベンチマークして、どの程度のコストに耐えられるかを判断します。
 * サーバーに負荷をかけすぎない範囲で、できるだけ高めのコストを設定したいものです。
 * 基準として 10 くらいからはじめ、サーバーが十分に高速なら、できるだけ上げていきましょう。
 */
$timeTarget = 0.2; 

$cost = 9;
do {
    $cost++;
    $start = microtime(true);
    password_hash("test", PASSWORD_BCRYPT, ["cost" => $cost]);
    $end = microtime(true);
} while (($end - $start) < $timeTarget);

echo "Appropriate Cost Found: " . $cost . "\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Appropriate Cost Found: 11
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    この関数で使うソルトを自前で設定するのはお勧めしません。
    ソルトを省略すれば、安全なソルトをこの関数が自動的に作ってくれます。
   </para>
  </caution>
  <note>
   <para>
    実際にサーバー上でこの関数をテストして、コストパラメータの適切な設定値を調整することをお勧めします。
    関数の実行時間が 0.1 秒から 0.5 秒くらいに収まるくらいが適切です。
    先ほどの例のスクリプトは、自分のハードウェア上での適切なコストを判断するための助けとなるでしょう。
   </para>
  </note>
  <note>
   <simpara>
    この関数がサポートするアルゴリズムの更新 (あるいはデフォルトのアルゴリズムの変更)
    は、必ず次の手順にのっとって行われます。
   </simpara>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
       新しく追加されたアルゴリズムがデフォルトになるまでには、
       少なくとも一度は PHP のフルリリースを経ること。
       つまり、たとえば、新しいアルゴリズムが 5.5.5 で追加されたとすると、
       そのアルゴリズムがデフォルトになるのは早くても 5.7 以降ということになります
       (5.6 は、最初のフルリリースだからです)。
       しかし、もし別のアルゴリズムが 5.6.0 で追加されたとすると、
       そのアルゴリズムも 5.7.0 の時点でデフォルトになる資格を得ます。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       デフォルトを変更できるのはフルリリース (5.6.0 や 6.0.0 など)
       のときだけで、リビジョンリリースでは変更できない。
       唯一の例外は、現在のデフォルトにセキュリティ上の致命的な欠陥が発覚した場合の緊急リリースです。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_verify</function></member>
    <member><function>crypt</function></member>
    <member><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="&url.password.compat;">ユーザーランドでの実装</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
