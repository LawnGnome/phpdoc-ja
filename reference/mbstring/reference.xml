<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
 <reference id="ref.mbstring">
  <title>マルチバイト文字列関数(mbstring)</title> 
  <titleabbrev>
   マルチバイト文字列
  </titleabbrev>
  <partintro>
   
  <section id="mbstring.intro">
   &reftitle.intro;
   <para>
    全ての文字をシングルバイトで表現可能な言語は数多くあります。マル
    チバイト文字コードは、多くの言語で文字を表すために使用されていま
    す。<literal>mbstring</literal> は日本語文字を処理するために開発
    されました。しかし、<literal>mbstring</literal> 関数の多くは、日
    本語以外の文字エンコーディングも処理することが可能です。
   </para>
   <para>
    マルチバイト文字エンコーディングは、バイトの並びで単一の文字を表
    現します。いくつかの文字エンコーディングでは、マルチバイト文字列
    の始まり/終わりを表すためにシフト(エスケープ)シーケンスが使用され
    ています。この場合、マルチバイト文字エンコーディングに対応した方
    法でない限り、分割または追加されるとマルチバイト文字列は壊れてし
    まう可能性があります。このモジュールは、マルチバイト文字列に対応
    した文字列関数および変換関数のようなその他のユーティリティ関数を
    提供します。
   </para>
   <para>
    PHPは、基本的にISO-8859-1用に設計されているため、いくつかのマルチ
    バイト文字エンコーディングは、PHPで正常に動作しません。このため、
    <literal>mbstring.language</literal> に適切な言語(日本語の場合は
    Japanese)、<literal>mbstring.internal_encoding</literal> にPHPで動
    作する文字エンコーディングを設定することが必要です。
   </para>
   <para>
    PHP4の文字エンコーディングに関する規約
   </para>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
       バイト毎のエンコーディングである。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       シングルバイト文字は、<literal>ASCII</literal>互換の
       <literal>00h-7fh</literal>の範囲にある。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       マルチバイト文字は、<literal>00h-7fh</literal>以外を使用する。
       </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHPの内部エンコーディングとして使用可能な文字エンコーディングと
    使用できない文字エンコーディングの例を以下に示します。
    <informalexample>
     <programlisting>
<![CDATA[
PHPで動作する文字エンコーディング: 
ISO-8859-*, EUC-JP, UTF-8

PHPで動作しない文字エンコーディング:
JIS, SJIS
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
     PHPの内部エンコーディングとして使用できない文字エンコーディングは、
     <literal>mbstring</literal>のHTTP入力/出力変換の機能/関数により変換
     することが可能です。
    </para>
    <note>
     <para>
      SJIS は、読者がパーサ/コンパイラ、文字エンコーディングと文字エン
      コーディングの問題点について精通していない限り内部エンコーディン
      グとして使用するべきではありません。
     </para>
    </note>
    <note>
     <para>
      PHPでデータベースを使用する場合、性能を向上させるためにデータベー
      スとPHPの内部エンコーディングについて同じ文字エンコーディングを使用
      することを推奨します。
     </para>
     <para>
      PostgreSQLを使用している場合、バックエンドの文字エンコーディング
      と異なる文字エンコーディングを使用することが可能です。詳細につい
      ては、PostgreSQLのマニュアルを参照下さい。
     </para>
    </note>
   </section>

   &reference.mbstring.configure;

   &reference.mbstring.ini;

   <section id="mbstring.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.mbstring.constants;

   <section id="mbstring.http">
    <title>HTTP入出力</title>
    <para>
     HTTP 入出力の文字エンコーディング変換はバイナリデータも変換して
     しまいます。HTTP入出力にバイナリデータが使用される場合、ユーザは、
     文字エンコーディング変換を制御する必要があります。
    </para>
    <note>
     <para>
      PHP 4.3.3よりも前のバージョンの場合、
      HTMLフォームの<literal>enctype</literal>が
      <literal>multipart/form-data</literal>に設定された場合、
      <literal>mbstring</literal> は、POSTデータの文字エンコーディング
      を変換しません。この場合、文字列を内部文字エンコーディングに変換
      してやる必要があります。
     </para>
    </note>
    <note>
     <para>
      PHP 4.3.3以降、HTMLフォームの<literal>enctype</literal>が
      <literal>multipart/form-data</literal>に設定され、かつ、
      &php.ini;において
      <literal>mbstring.encoding_translation</literal>にOnが指定されて
      いる場合、
      POSTデータの変数とアップロードされたファイルの名前の
      文字エンコーディングは、内部文字エンコーディングに変換されます。
      ただし、HTMLフォームのnameに指定した文字は変換されません。
     </para>
    </note>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
        HTTP入力
       </simpara>
       <para>
        PHPスクリプトでHTTP入力文字変換を制御する手段はありません。
        HTTP入力文字変換を無効にするには、&php.ini;
        で行う必要があります。
        <example>
         <title>&php.ini;でHTTP入力変換を無効にする</title>
         <programlisting role="php">
<![CDATA[
;; HTTP入力変換を無効にする
mbstring.http_input = pass
;; HTTP入力変換を無効にする (PHP 4.3.0以降)
mbstring.encoding_translation = Off
]]>
	  </programlisting>
	 </example>
	</para>
	<para>
	 PHPをApacheモジュールで使用する場合、PHP iniの設定を
	 <literal>httpd.conf</literal>により仮想ホスト単位で、または
	 <literal>.htaccess</literal>によりディレクトリ単位で上書きす
	 ることが可能です。詳細は、<link linkend="configuration">設定
	 </link>の節およびApacheマニュアルを参照下さい。
	</para>
       </listitem>
       <listitem>
	<simpara>
	 HTTP出力
	</simpara>
	<para>
	 出力の文字エンコーディング変換を有効にする方法は複数あります。
	 一つ目は <literal>php.ini</literal>、もう１つは
	 <function>ob_start</function> で <literal>ob_start</literal>
	 のコールバック関数として
	 <function>mb_output_handler</function> を指定するものです。
	</para>
	<note>
	 <para>
	  PHP3-i18nのユーザにとっては、<literal>mbstring</literal>の出
	  力変換は、PHP3-i18nとは異なっています。文字エンコーディング
	  は、出力のバッファリング機能を使用して変換されます。
	 </para>
	</note>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      <example>
       <title>&php.ini; の設定例</title>
       <programlisting>
<![CDATA[
;; 全てのPHPページで出力の文字エンコーディング変換を有効にする

;; 出力バッファリングを有効にする
output_buffering    = On

;; mb_output_handlerによる出力変換を有効にする
output_handler      = mb_output_handler
]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>スクリプトの例</title>
       <programlisting role="php">
<![CDATA[
<?php

// このページでのみ出力の文字エンコーディング変換を有効にする

// HTTP 出力文字エンコーディングをSJISに設定する
mb_http_output('SJIS');

// 出力のバッファリングを開始し、コールバック関数として"mb_output_handler"
// を指定する
ob_start('mb_output_handler');

?>
]]>
       </programlisting>
      </example>
     </para>
    </section>

    <section id="mbstring.encodings">
     <title>サポートされる文字エンコーディング</title>
     <simpara>
      現在、以下の文字エンコーディングが<literal>mbstring</literal>モ
      ジュールによりサポートされています。文字エンコーディングは、
      <literal>mbstring</literal>関数の<literal>encoding</literal>パラ
      メータで指定することが可能です。
     </simpara>
     <para>
      以下の文字エンコーディングがこのPHP拡張モジュールでサポートされ
      ています。
     </para>
     <para>
      <literal>UCS-4</literal>, <literal>UCS-4BE</literal>,
      <literal>UCS-4LE</literal>, <literal>UCS-2</literal>,
      <literal>UCS-2BE</literal>, <literal>UCS-2LE</literal>,
      <literal>UTF-32</literal>, <literal>UTF-32BE</literal>,
      <literal>UTF-32LE</literal>, <literal>UCS-2LE</literal>,
      <literal>UTF-16</literal>, <literal>UTF-16BE</literal>,
      <literal>UTF-16LE</literal>, <literal>UTF-8</literal>,
      <literal>UTF-7</literal>, <literal>ASCII</literal>,
      <literal>EUC-JP</literal>, <literal>SJIS</literal>,
      <literal>eucJP-win</literal>, <literal>SJIS-win</literal>,
      <literal>ISO-2022-JP</literal>, <literal>JIS</literal>,
      <literal>ISO-8859-1</literal>, <literal>ISO-8859-2</literal>,
      <literal>ISO-8859-3</literal>, <literal>ISO-8859-4</literal>,
      <literal>ISO-8859-5</literal>, <literal>ISO-8859-6</literal>,
      <literal>ISO-8859-7</literal>, <literal>ISO-8859-8</literal>,
      <literal>ISO-8859-9</literal>, <literal>ISO-8859-10</literal>,
      <literal>ISO-8859-13</literal>, <literal>ISO-8859-14</literal>,
      <literal>ISO-8859-15</literal>, <literal>byte2be</literal>,
      <literal>byte2le</literal>, <literal>byte4be</literal>,
      <literal>byte4le</literal>, <literal>BASE64</literal>,
      <literal>7bit</literal>, <literal>8bit</literal>,
      <literal>UTF7-IMAP</literal>
     </para>
     <para>
      PHP 4.3.0以降、以下の文字エンコーディングのサポートが実験的に
      行なわれます。
      <literal>EUC-CN</literal>, <literal>CP936</literal>, <literal>HZ</literal>, 
      <literal>EUC-TW</literal>, <literal>CP950</literal>, <literal>BIG-5</literal>, 
      <literal>EUC-KR</literal>, <literal>UHC</literal> (<literal>CP949</literal>), 
      <literal>ISO-2022-KR</literal>,
      <literal>Windows-1251</literal> (<literal>CP1251</literal>),
      <literal>Windows-1252</literal> (<literal>CP1252</literal>),
      <literal>CP866</literal>, 
      <literal>KOI8-R</literal>.
     </para>
     <para>
      エンコーディング名を指定可能な&php.ini;のエントリでは、
      &quot;<literal>auto</literal>&quot; および
      &quot;<literal>pass</literal>&quot; も指定可能です。
      <literal>mbstring</literal> 関数には、エンコーディング名と
      &quot;<literal>auto</literal>&quot; を指定可能です。
     </para>
     <para>
      &quot;<literal>pass</literal>&quot; が指定された場合、文字エンコー
      ディング変換は行われません。
     </para>
     <para>
      &quot;<literal>auto</literal>&quot; が指定された場合、この文字列
      は、&quot;<literal>ASCII,JIS,UTF-8,EUC-JP,SJIS</literal>&quot;に
      変換されます。
     </para>
     <para>
      <function>mb_detect_order</function>も参照下さい。
     </para>
     <note>
      <para>
       &quot;サポートされる文字エンコーディング&quot; は、内部文字コー
       ドとして動作するものとは異なります。
      </para>
     </note>
    </section>
    
   <section id="mbstring.overload">
    <title>マルチバイト対応版関数による既存関数のオーバーロード</title>
    <para>
     PHPアプリケーションの多くは、英語等のシングルバイトの言語用に設計
     されており、日本語を含むマルチバイト文字列を扱う場合には問題を生
     じる場合があります。<function>substr</function>等のPHPの文字列関
     数の多くはマルチバイト文字列に対応していません。
    </para>
    <para>
     マルチバイト拡張モジュール(mbstring)では、文字列を処理するPHP関数
     のマルチバイト対応版(例えば、<function>substr</function>の場合は
     <function>mb_substr</function>)をサポートしています。
    </para>
    <para>
     マルチバイト拡張モジュール(mbstring)では、PHP 4.2.0以降で既存の
     PHP関数を対応するマルチバイト文字対応版の関数でオーバーロードする
     機能をサポートします。関数のオーバーロードを行うと、例えば
     <function>substr</function>をPHPスクリプトでコールした場合に、
     <function>mb_substr</function>が代わりにコールされるようになりま
     す。これにより、マルチバイト文字に対応しないアプリケーションの移
     植が容易となります。
    </para>
    <para>
     関数オーバーロードを使用するには、設定ファイル php.iniの
     <literal>mbstring.func_overload</literal>ディレクティブに0以外の
     値を設定します。設定値によりオーバーロードされる関数の種類が異な
     ります。メール関数の場合は1、文字列関数は2、正規表現関数は4を使用
     します。論理和をとることにより複数の値を指定可能です。例えば、7を
     指定すると全てのメール、文字列、正規表現関数をオーバーロードしま
     す。オーバーロードされる関数を下表に示します。
     <table>
      <title>オーバーロードされる関数</title>
      <tgroup cols="3">
       <thead>
	<row>
	 <entry>mbstring.func_overloadの値</entry>
	 <entry>元の関数</entry>
         <entry>オーバーロードする関数</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>1</entry>
          <entry><function>mail</function></entry>
          <entry><function>mb_send_mail</function></entry>
         </row>
	<row>
          <entry>2</entry>
          <entry><function>strlen</function></entry>
          <entry><function>mb_strlen</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>strpos</function></entry>
          <entry><function>mb_strpos</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>strrpos</function></entry>
          <entry><function>mb_strrpos</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>substr</function></entry>
          <entry><function>mb_substr</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>ereg</function></entry>
          <entry><function>mb_ereg</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>eregi</function></entry>
          <entry><function>mb_eregi</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>ereg_replace</function></entry>
          <entry><function>mb_ereg_replace</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>eregi_replace</function></entry>
          <entry><function>mb_eregi_replace</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>split</function></entry>
          <entry><function>mb_split</function></entry>
	</row>
       </tbody>
      </tgroup>
     </table>
    </para>
   </section>

   <section id="mbstring.ja-basic">
    <title>日本語のマルチバイト文字に関する基本事項</title>
    <para>
     多くの日本語の文字は1文字あたり複数のバイトを必要とします。加え
     て、日本語の環境では複数の文字エンコーディング手法が使用されてい
     ます。使用されているのは、EUC-JP、Shift_JIS(SJIS)、
     ISO-2022-JP(JIS) 文字エンコーディングです。Unicodeが普及しつつあ
     り、UTF-8 も使用されています。日本語環境のWebアプリケーションを
     開発するためには、HTTP入出力、RDBMS、e-mailの処理においてそれぞ
     れに適した文字集合を使用することが重要となります。
    </para>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
        1文字は最大6バイトになる
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        マルチバイト文字は通常シングルバイト文字の2倍の幅となります。
        広い幅の文字は「全角」、狭い幅の文字は「半角」と呼ばれます。
        通常、「全角」文字は固定幅です。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        いくつかの文字エンコーディングでは、マルチバイト文字列を開始/
        終了するためのシフト(エスケープ)シーケンスが定義されています。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        SMTP/NNTPでは、ISO-2022-JP を使用する必要があります。
       </simpara>
      </listitem>
      <listitem>
       <para>
        &quot;i-mode&quot; 用Webサイトは、SJISを使用する必要がありま
        す。
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </section>
   
   <section id="mbstring.ref">
    <title>リファレンス</title>
    <para>
     マルチバイト文字エンコーディングと関連する問題は非常に複雑です。
     ここで詳細について記述することは不可能です。詳細な事項については、
     以下のURLおよび他のリソースを参照下さい。
     <itemizedlist>
      <listitem>
       <para>
        Unicode/UTF/UCS/等
       </para>
       <para>
        <literal>http://www.unicode.org/</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        日本語/韓国語/中国語文字に関する情報
       </para>
       <para>
        <literal>
	 ftp://ftp.ora.com/pub/examples/nutshell/ujip/doc/cjk.inf
        </literal>
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </section>
  </partintro>

&reference.mbstring.functions;

</reference>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

