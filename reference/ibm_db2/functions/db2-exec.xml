<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.7 Maintainer: takagi Status: ready -->
<refentry id="function.db2-exec">
 <refnamediv>
  <refname>db2_exec</refname>
  <refpurpose>
   SQL 文を直接実行する
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>db2_exec</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>


  <para>
   SQL 文の準備と実行を行います。
  </para>
  <para>
   PHP 変数の内容を SQL 文に組み込みたい場合は、この関数を使用すると
   典型的なセキュリティ上の問題を引き起こしかねないことを知っておきましょう。
   <function>db2_prepare</function> をコールして入力パラメータつきの
   SQL 文を準備することを検討してください。その後で
   <function>db2_execute</function> をコールして入力値を渡すことで、
   SQL インジェクション攻撃を避けることができます。
  </para>
  <para>
   同じ SQL 文にさまざまなパラメータを指定して何度も発行する場合は、
   <function>db2_prepare</function> および
   <function>db2_execute</function> の使用を検討してください。
   これにより、データベースサーバが実行計画を再利用することができて
   データベースアクセスの効率が向上します。
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       <function>db2_connect</function> あるいは <function>db2_pconnect</function>
       が返した有効なデータベース接続リソース。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       SQL 文。パラメータマーカを含めることはできません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       文のオプションを含む連想配列。
       データベースサーバがその機能をサポートしている場合に、
       このパラメータを使用してスクロール可能なカーソルの使用を
       要求することができます。
       <variablelist>
        <varlistentry>
         <term><parameter>cursor</parameter></term>
         <listitem>
          <para>
           <literal>DB2_FORWARD_ONLY</literal> を渡すと、
           この SQL 文で前進のみのカーソルを使用することを要求します。
           これはデフォルトのカーソル型であり、すべてのデータベースサーバで
           サポートされています。また、スクロール可能なカーソルに比べて
           非常に高速になります。
          </para>
          <para>
           <literal>DB2_SCROLLABLE</literal> を渡すと、
           この SQL 文でスクロール可能なカーソルを使用することを要求します。
           このカーソル型を使用すると、データベースサーバから
           行の並び順を気にせずにデータを取得できるようになります。
           しかし、この型は DB2 サーバでしかサポートされておらず、
           前進のみのカーソルに比べて非常に低速です。
          </para>
         </listitem>
        </varlistentry>
       </variablelist>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   SQL 文の実行に成功した場合にステートメントリソース、
   SQL 文の実行に失敗した場合に &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>db2_exec</function> でのテーブルの作成</title>
    <para>
     以下の例では、<function>db2_exec</function> を使用して
     テーブルを作成する DDL 文を発行します。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);

// テストテーブルを作成します
$create = 'CREATE TABLE animals (id INTEGER, breed VARCHAR(32),
    name CHAR(16), weight DECIMAL(7,2))';
$result = db2_exec($conn, $create);
if ($result) {
    print "テーブルの作成に成功しました。\n";
}

// テストテーブルに値を投入します
$animals = array(
    array(0, 'cat', 'Pook', 3.2),
    array(1, 'dog', 'Peaches', 12.3),
    array(2, 'horse', 'Smarty', 350.0),
    array(3, 'gold fish', 'Bubbles', 0.1),
    array(4, 'budgerigar', 'Gizmo', 0.2),
    array(5, 'goat', 'Rickety Ride', 9.7),
    array(6, 'llama', 'Sweater', 150)
);

foreach ($animals as $animal) {
    $rc = db2_exec($conn, "INSERT INTO animals (id, breed, name, weight)
      VALUES ({$animal[0]}, '{$animal[1]}', '{$animal[2]}', {$animal[3]})");
    if ($rc) {
        print "Insert... ";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
テーブルの作成に成功しました。
Insert... Insert... Insert... Insert... Insert... Insert... Insert... 
]]>
    </screen>
   </example>

   <example>
    <title>スクロール可能なカーソルでの SELECT 文の実行</title>
    <para>
     以下の例では、<function>db2_exec</function> で発行された SQL
     文にスクロール可能なカーソルを要求する方法を説明します。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);
$sql = "SELECT name FROM animals
    WHERE weight < 10.0
    ORDER BY name";
if ($conn) {
    require_once('prepare.inc');
    $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));
    while ($row = db2_fetch_array($stmt)) {
        print "$row[0]\n";
    }
} 
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Bubbles
Gizmo
Pook
Rickety Ride
]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
