<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.6 Maintainer: takagi Status: ready -->
<refentry id="function.db2-execute">
 <refnamediv>
  <refname>db2_execute</refname>
  <refpurpose>
   プリペアドステートメントを実行する
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_execute</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
  </methodsynopsis>


  <para>
   <function>db2_execute</function> は、
   <function>db2_prepare</function> で準備された SQL 文を実行します。
  </para>
  <para>
   SQL 文が結果セットを返す場合、例えば SELECT 文であったり
   結果セットを返すストアドプロシージャの CALL であったりした場合には、
   <literal>stmt</literal> から結果の行を配列として取得することができます。
   取得には <function>db2_fetch_assoc</function>、
   <function>db2_fetch_both</function> あるいは
   <function>db2_fetch_array</function> を使用します。
   あるいは、<function>db2_fetch_row</function> を使用して
   結果セットポインタを次の行に移動させ、
   <function>db2_result</function> で行の内容をその都度取得することも可能です。
  </para>
  <para>
   <function>db2_exec</function> の代わりに
   <function>db2_prepare</function> および
   <function>db2_execute</function> を使用することの利点については、
   <function>db2_prepare</function> での簡単な説明を参照ください。
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       <function>db2_prepare</function> が返すプリペアドステートメント。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       プリペアドステートメント内に含まれるパラメータマーカに対応する、
       入力パラメータの配列。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>パラメータマーカを使用した SQL 文の準備と実行</title>
    <para>
     以下の例では、4 つのパラメータマーカを含む INSERT 文を準備し、
     入力値の配列を含む配列を順に処理しながら
     <function>db2_execute</function> に値を渡します。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$pet = array(0, 'cat', 'Pook', 3.2);

$insert = 'INSERT INTO animals (id, breed, name, weight)
    VALUES (?, ?, ?, ?)';

$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    $result = db2_execute($stmt, $pet);
    if ($result) {
        print "新しいペットの追加に成功しました。";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
新しいペットの追加に成功しました。
]]>
    </screen>
   </example>
   <example>
    <title>OUT パラメータを使用したストアドプロシージャのコール</title>
    <para>
     以下の例では、まずひとつの OUT パラメータをパラメータマーカで受け取る
     CALL 文を準備し、<function>db2_bind_param</function> を使用して
     PHP 変数 <literal>$my_pets</literal> をそのパラメータにバインドし、
     <function>db2_execute</function> で CALL 文を実行します。
     ストアドプロシージャの CALL 終了後は、<literal>$num_pets</literal>
     にはストアドプロシージャの OUT パラメータに返された値が反映されています。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$num_pets = 0;
$res = db2_prepare($conn, "CALL count_my_pets(?)");
$rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
$rc = db2_execute($res);
print "私の飼っているペットの数は $num_pets です!";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
私の飼っているペットの数は 7 です!
]]>
    </screen>
   </example>


  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_exec</function></member>
    <member><function>db2_fetch_array</function></member>
    <member><function>db2_fetch_assoc</function></member>
    <member><function>db2_fetch_both</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
