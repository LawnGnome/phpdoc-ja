<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.13 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<!-- State: deprecated -->

 <reference xml:id="ref.overload" xmlns="http://docbook.org/ns/docbook">
  <title>オブジェクトプロパティとメソッドコールのオーバーロード</title>
  <titleabbrev>オブジェクトのオーバーロード</titleabbrev>

  <partintro>

   <section xml:id="overload.intro">
    &reftitle.intro;
    <para>
     この拡張モジュールの用途は、オブジェクトのプロパティへのアクセスと
     メソッドのコールのオーバーロードを可能にすることです。この
     拡張モジュールで定義されている関数は 1 つだけです。この関数、
     <function>overload</function> は、この機能を有効にするクラスの名前を
     引数とします。名前を指定されたクラスでこの機能を使用したい場合は
     以下の適当なメソッドを定義する必要があります。これらは、
     <literal>__get()</literal>、<literal>__set()</literal>、
     <literal>__call()</literal> で、それぞれプロパティを取得、
     プロパティを設定、メソッドをコールするためのものです。
     オーバーロード機能は選択可能です。これらのハンドラ関数の中で
     オーバーロードを無効とすることができ、
     この場合、オブジェクトのプロパティに普通にアクセスできます。
    </para>
    &warn.experimental;
    <warning>
     <para>
      この拡張モジュールは PHP 5 には含まれていません。PHP 5 では
      <literal>__get()</literal>、<literal>__set()</literal> および
      <literal>__call()</literal> をネイティブにサポートしています。詳細は
      <link linkend="language.oop5.overloading">PHP 5 のオーバーロード</link>
      のページを参照ください。
     </para>
    </warning>
   </section>

   <section xml:id="overload.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.overload.configure;

   <section xml:id="overload.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="overload.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section xml:id="overload.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="overload.examples">
    &reftitle.examples;
    <para>
     <function>overload</function> 関数の簡単な使用例をいくつか示します。
     <example>
      <title>PHP クラスのオーバーロード</title>
      <programlisting role="php">
<![CDATA[
<?php

class OO {
    var $a = 111;
    var $elem = array('b' => 9, 'c' => 42);

    // プロパティを取得するためのコールバックメソッド
    function __get($prop_name, &$prop_value) 
    {
        if (isset($this->elem[$prop_name])) {
            $prop_value = $this->elem[$prop_name];
            return true;
        } else {
            return false;
        }
    }

    // プロパティを設定するためのコールバックメソッド
    function __set($prop_name, $prop_value) 
    {
        $this->elem[$prop_name] = $prop_value;
        return true;
    }
}

// OO オブジェクトをオーバーロードします。
overload('OO');

$o = new OO;
echo "\$o->a: $o->a\n"; // 出力: $o->a: 111
echo "\$o->b: $o->b\n"; // 出力: $o->b: 9
echo "\$o->c: $o->c\n"; // 出力: $o->c: 42
echo "\$o->d: $o->d\n"; // 出力: $o->d:

// OO の $elem 配列に新規アイテムを追加します。
$o->x = 56; 

// (PHP 4 に組み込まれている) stdclass のインスタンスを生成します。
// $val はオーバーロードされていません!
$val = new stdclass;
$val->prop = 555;

// $val オブジェクトを有する配列として "a" を設定します。
// しかし、__set() はこれを $elem 配列に代入します。
$o->a = array($val);
var_dump($o->a[0]->prop);

?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.overload.entities.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

