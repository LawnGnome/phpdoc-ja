<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.flock">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>汎用のファイルロックを行う</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">wouldblock</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>flock</function>により、(ほとんどの Unix や Windows さえ含む)
   ほとんど全てのプラットフォームで使用可能な簡易な読み手/書き手モデルが実現されます。
  </para>
  <para>
   ロックの解放には <function>fclose</function> でを使用します
   (これは、スクリプトが終了した場合にも自動的にコールされます)。
  </para>
  <para>
   PHP は、恣意的にファイルをロックする汎用の手段を提供します
   (これは、アクセスする全プログラムが同一のロックの方法を使用する必要があり、
   そうでない場合は動作しないことを意味します)。
   デフォルトでは、要求したロックが確保されるまでこの関数はブロックします。
   (非 Windows プラットフォームでは) 以下で説明する <constant>LOCK_NB</constant>
   オプションでこの挙動を制御することができます。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>handle</parameter></term>
     <listitem>
      <para>
       オープンしたファイルへのポインタ。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter> は以下のいずれかとなります。
       <itemizedlist>
        <listitem>
         <simpara>
          共有ロック(読み手)とするには
          <constant>LOCK_SH</constant>
          をセットします。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          排他的ロック(書き手)とするには
          <constant>LOCK_EX</constant>
          をセットします。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          (共有または排他的)ロックを開放するには
          <constant>LOCK_UN</constant>
          をセットします。
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       上の操作のいずれかに <constant>LOCK_NB</constant> をビットマスクとして追加すれば、
       ロック中に <function>flock</function> でブロックを行わないことができます
       (Windows ではサポートされていません)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>wouldblock</parameter></term>
     <listitem>
      <para>
       ロックがブロックされた (errno が EWOULDBLOCK となった)
       場合に、オプションの 3 番目の引数に &true; が設定されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.1</entry>
       <entry>
        定数 <literal>LOCK_XXX</literal> が追加されました。以前のバージョンでは
        <constant>LOCK_SH</constant> のかわりに 1、
        <constant>LOCK_EX</constant> のかわりに 2、
        <constant>LOCK_UN</constant> のかわりに 3、そして
        <constant>LOCK_NB</constant> のかわりに 4 を使用しなければなりません。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>flock</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "r+");

if (flock($fp, LOCK_EX)) { // 排他ロックを行います
    ftruncate($fp, 0); // ファイルを切り詰めます
    fwrite($fp, "Write something here\n");
    flock($fp, LOCK_UN); // ロックを解放します
} else {
    echo "ファイルを取得できません!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>flock</function> で <constant>LOCK_NB</constant> オプションを使う例</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('/tmp/lock.txt', 'r+');

/* LOCK_NB オプションを LOCK_EX で有効にします */
if(!flock($fp, LOCK_EX | LOCK_NB)) {
    echo 'Unable to obtain lock';
    exit(-1);
}

/* ... */

fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>flock</function> は、Windows 環境下では必ずロックを行います。
    POSIX ベースの OS の中にも同様の動きをするものがあります。
   </para>
  </note>
  <note>
   <para>
    <function>flock</function>は、ファイルポインタを必要とするため、
    (<function>fopen</function>へ引数"w"または"w+"を指定して)書き込
    みモードでオープンすることにより丸めるファイルにアクセス保護する
    特別なロックファイルを使用する必要があるかもしれません。
   </para>
  </note>
  <note>
   <para>
    POSIX.1 準拠のシステムでは、スクリプトで <function>fclose</function>
    を使ったときにそのファイルの <function>flock</function> を解放します。
   </para>
  </note>
  <warning>
   <para>
    一連のコードで別の値を <parameter>handle</parameter> 引数に代入すると、
    ロックを解放します。
   </para>
  </warning>
  <warning>
   <para>
    いくつかのオーペレーティングシステムで<function>flock</function>
    はプロセスレベルで実装されています。ISAPIのようなマルチスレッド
    型のサーバーAPIを使用している場合、同じサーバーインスタンスの並
    列スレッドで実行されている他のPHPスクリプトに対してファイルを保
    護する際に <function>flock</function>を使用することはできません!
   </para>
   <para>
    <function>flock</function>は<literal>FAT</literal>のような
    旧式のファイルシステムではサポートされていないため、
    そのような環境の場合は常に&false;を返すことになります。
   （これは特にWindows98ユーザーにとって常に真です）
   </para>
  </warning>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
