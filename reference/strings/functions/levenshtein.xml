<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
<!-- splitted from ./ja/functions/strings.xml, last change in rev 1.1 -->
<!-- EN-Revision: 1.8 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
  <refentry id="function.levenshtein">
   <refnamediv>
    <refname>levenshtein</refname>
    <refpurpose>
     二つの文字列の Levenshtein 距離を計算する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>cost_ins</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
     </methodsynopsis>
     <!-- Callback function not yet implemented, see bug #29552
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
      <methodparam><type>callback</type><parameter>cost</parameter></methodparam>
     </methodsynopsis>
     -->
    <para>
     この関数は、引数で指定した二つの文字列の Levenshtein 距離を返します。
     引数文字列の一つが 255 文字の制限より長い場合に -1 を返します。
    </para>
    <para>
     Levenshtein 距離は、<parameter>str1</parameter> を
     <parameter>str2</parameter> に変換するために置換、挿入、削除
     しなければならない最小の文字数として定義されます。アルゴリズムの複雑さは、
     <literal>O(m*n)</literal> です。
     ただし、<literal>n</literal> および <literal>m</literal> は、
     <parameter>str1</parameter> および <parameter>str2</parameter> の長さです
     (O(max(n,m)**3) となる <function>similar_text</function> よりは良いですが、
     まだかなりの計算量です)。
    </para>
    <para>
     上記の最も簡単な形式では、この関数はパラメータとして引数を二つだけとり、
     <parameter>str1</parameter> から
     <parameter>str2</parameter> に変換する際に必要な
     挿入、置換、削除演算の数のみを計算します。
    </para>
    <para>
     2 番目の形式では、挿入、置換、削除演算のコストを定義する
     3 番目のパラメータが追加されます。この形式は 1 番目の形式より一般的で
     汎用性が高いですが、効率的ではありません。
    </para>
    <!--  Callback function not yet implemented, see bug #29552
    <para>
     3番目の形式(これは未実装です)は、最も一般的で汎用的ですが、最も遅
     い形式でもあります。この形式では各演算毎にコストを定義するために
     ユーザ定義関数をコールします。
    </para>
    <para>
     ユーザ定義関数は、次のような引数を指定してコールされます。
     <itemizedlist>
      <listitem>
       <simpara>
  適用する演算: 'I'、'R'、'D'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
  文字列1の文字の実体
       </simpara>
      </listitem>
      <listitem>
       <simpara>
  文字列2の文字の実体
       </simpara>
      </listitem>
      <listitem>
       <simpara>
  文字列1での位置
       </simpara>
      </listitem>
      <listitem>
       <simpara>
  文字列2での位置
       </simpara>
      </listitem>
      <listitem>
       <simpara>
  文字列1での残りの文字
       </simpara>
      </listitem>
      <listitem>
       <simpara>
  文字列2での残りの文字
       </simpara>
      </listitem>
     </itemizedlist>
     ユーザ定義関数は、この特定の演算に関するコストを表す正の整数を返
     す必要があります。しかし、指定された引数のいくつかだけを使用して
     コストを計算することも可能です。
    </para>
    <para>
     ユーザ定義関数を使用する形式では、挿入、置換、削除のコストを定義
     する際に特定の記号(文字)またはこれらの記号を含む句の相関や差異を
     考慮する手法をとることが可能となります。しかし、この代償として他
     の二つの形式では動作するCPUレジスタの使用に関する最適化の実行は行
     われず、キャッシュも動作しなくなります。
    -->
    <para>
     <example>
      <title><function>levenshtein</function> の例</title>
      <programlisting role="php">
<![CDATA[
<?php
// スペルミスした単語を入力する
$input = 'carrrot';

// チェックするための単語の配列
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// まだ最短距離は見つかっていない
$shortest = -1;

// 最短距離を見つけるため単語をループ
foreach ($words as $word) {

    // 入力した単語と現在の単語の距離を
    // 計算する
    $lev = levenshtein($input, $word);

    // マッチするかどうかチェックする
    if ($lev == 0) {

        // 最短な単語はこれだ (マッチした)
        $closest = $word;
        $shortest = 0;

        // ループを抜ける; マッチしたものを見つけた
        break;
    }

    // もし距離が次に見つけた最短距離よりも短い場合、
    // もしくは次の最短の単語がまだ見つかっていない場合
    if ($lev <= $shortest || $shortest < 0) {
        // 最短のマッチと最短距離をセットする
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "入力した単語: $input\n";
if ($shortest == 0) {
    echo "一致するものが見つかりました: $closest\n";
} else {
    echo "もしかして: $closest\n";
}

?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
入力した単語: carrrot
もしかして: carrot
]]>
      </screen>
     </example>
    </para>
    <para>
     <function>soundex</function>,
     <function>similar_text</function>,
     <function>metaphone</function>
     も参照ください。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
