<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./ja/functions/strings.xml, last change in rev 1.1 -->
<!-- last change to 'levenshtein' in en/ tree in rev 1.12 -->
  <refentry id="function.levenshtein">
   <refnamediv>
    <refname>levenshtein</refname> 
    <refpurpose>
     二つの文字列のLevenshtein距離を計算する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
     </methodsynopsis>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_ins</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
     </methodsynopsis>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
      <methodparam><type>function</type><parameter>cost</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、引数で指定した二つの文字列のLevenshtein距離を返します。
     引数文字列の一つが255文字の制限より長い場合に-1を返します。
     (255は名前や辞書比較に関して十分な長さであり、PHPでの通常の比較に
     関しては問題となる制約ではありません)
    </para>
    <para>
     Levenshtein距離は <parameter>str1</parameter> を
     <parameter>str2</parameter> に変換するために置換、挿入、削除しな
     ければならない最小の文字数として定義されます。アルゴリズムの複雑
     さは、 <literal>O(m*n)</literal> です。
     ただし、<literal>n</literal>および<literal>m</literal>は、
     <parameter>str1</parameter>および<parameter>str2</parameter>の長さです。
     (O(max(n,m)**3)となる<function>similar_text</function>よりは良いですが
     まだかなりの計算量です)
    </para>
    <para>
     上記の最も簡単な形式では、この関数はパラメータとして引数を二つだ
     けとり、<parameter>str1</parameter>から
     <parameter>str2</parameter>に変換する際に必要な挿入、置換、削除演
     算の数のみを計算します。
    </para>
    <para>
     2番目の形式では、挿入、置換、削除演算のコストを定義する3番目のパ
     ラメータが追加されます。この形式は1番目の形式より一般的で汎用性が
     高いですが、効率的ではありません。
    </para>
    <para>
     3番目の形式(これは未実装です)は、最も一般的で汎用的ですが、最も遅
     い形式でもあります。この形式では各演算毎にコストを定義するために
     ユーザ定義関数をコールします。
    </para>
    <para>
     ユーザ定義関数は、次のような引数を指定してコールされます。
     <itemizedlist>
      <listitem>
       <simpara>
	適用する演算: 'I'、'R'、'D'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列1の文字の実体
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列2の文字の実体
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列1での位置
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列2での位置
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列1での残りの文字
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列2での残りの文字
       </simpara>
      </listitem>
     </itemizedlist>
     ユーザ定義関数は、この特定の演算に関するコストを表す正の整数を返
     す必要があります。しかし、指定された引数のいくつかだけを使用して
     コストを計算することも可能です。
    </para>
    <para> 
     ユーザ定義関数を使用する形式では、挿入、置換、削除のコストを定義
     する際に特定の記号(文字)またはこれらの記号を含む句の相関や差異を
     考慮する手法をとることが可能となります。しかし、この代償として他
     の二つの形式では動作するCPUレジスタの使用に関する最適化の実行は行
     われず、キャッシュも動作しなくなります。
    </para>
    <para>
     <function>soundex</function>、<function>similar_text</function>、
     <function>metaphone</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
