<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- splitted from ./ja/functions/strings.xml, last change in rev 1.1 -->
<!-- EN-Revision: 1.6 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
  <refentry id="function.similar-text">
   <refnamediv>
    <refname>similar_text</refname>
    <refpurpose>二つの文字列の間の類似性を見積もる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>similar_text</methodname>
      <methodparam><type>string</type><parameter>first</parameter></methodparam>
      <methodparam><type>string</type><parameter>second</parameter></methodparam>
      <methodparam choice="opt"><type>float</type><parameter role="reference">percent</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、Oliver [1993] に記述されたように二つの文字列の間の類
     似性を見積もります。この実装は Oliver の擬似コードの様にスタック
     を使用せずプロセス全体の速度が改善されるかどうかにかかわらず再帰
     的コールを行うことに注意してください。このアルゴリズムの複雑さは、
     O(N**3) であることにも注意してください。ただし、N は最も長い文字列
     の長さです。
    </para>
    <para>
     3番目の引数としてリファレンスを渡すことにより、
     <function>similar_text</function> は類似性をパーセントで計算しま
     す。両方の文字列でマッチした文字の数を返します。
    </para>
    <simpara>
     <function>levenshtein</function>, <function>soundex</function>
     も参照ください。
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
