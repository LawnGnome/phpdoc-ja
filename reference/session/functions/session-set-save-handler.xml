<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 323466 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.session-set-save-handler">
 <refnamediv>
  <refname>session_set_save_handler</refname>
  <refpurpose>ユーザ定義のセッション保存関数を設定する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>callback</type><parameter>open</parameter></methodparam>
   <methodparam><type>callback</type><parameter>close</parameter></methodparam>
   <methodparam><type>callback</type><parameter>read</parameter></methodparam>
   <methodparam><type>callback</type><parameter>write</parameter></methodparam>
   <methodparam><type>callback</type><parameter>destroy</parameter></methodparam>
   <methodparam><type>callback</type><parameter>gc</parameter></methodparam>
  </methodsynopsis>
  <para>
   PHP 5.4 以降は次のプロトタイプでも登録できます。
  </para>
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>SessionHandlerInterface</type><parameter>sessionhandler</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>register_shutdown</parameter><initializer>true</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>session_set_save_handler</function> は、セッションに
   関連するデータを保存および取得するために使用されるユーザ定義の
   セッション保存関数を設定します。この関数は、セッションデータを
   ローカルデータベースに保存する場合のように PHP セッションにより
   提供されるもの以外の保存方法を使用したい場合に有用です。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   この関数には二種類のプロトタイプがあります。
   <variablelist>
    <varlistentry>
     <term><parameter>sessionhandler</parameter></term>
     <listitem>
      <para>
       <interfacename>SessionHandlerInterface</interfacename> を実装したクラス、たとえば
       <classname>SessionHandler</classname> のインスタンスで、
       これをセッションハンドラとして登録する。PHP 5.4 以降限定。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>register_shutdown</parameter></term>
     <listitem>
      <para>
       <function>session_register_shutdown</function> を
       <function>register_shutdown_function</function> 関数として登録するかどうか。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   あるいは

   <variablelist>
    <varlistentry>
     <term><parameter>open(string $savePath, string $sessionName)</parameter></term>
     <listitem>
      <para>
       open コールバックはクラスのコンストラクタのようなもので、セッションを開くときに実行されます。
       セッションが自動で開始したり、あるいは手動で <function>session_start</function>
       で開始させたりするときに、最初に実行されるコールバック関数がこれです。
       成功した場合は &true;、失敗した場合は &false; を返します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>close()</parameter></term>
     <listitem>
      <para>
       close コールバックはクラスのデストラクタのようなもので、write コールバックがコールされた後で実行されます。
       また、<function>session_write_close</function> がコールされたときにも実行されます。
       成功した場合は &true;、失敗した場合は &false; を返します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read(string $sessionId)</parameter></term>
     <listitem>
      <para>
       <parameter>read</parameter> コールバックは、常にセッションエンコード (シリアライズ)
       された文字列を返さなければなりません。何もデータを読み込まなかった場合は空文字列を返します。
      </para>
      <para>
       このコールバックは、セッションが開始したときや
       <function>session_start</function> がコールされたときに PHP が内部的に実行します。
       このコールバックを実行する前に、PHP は
       <parameter>open</parameter> コールバックを実行します。
      </para>
      <para>
       このコールバックが返す値は、
       <parameter>write</parameter> コールバックがストレージに渡した形式とまったく同じシリアライズ形式でなければなりません。
       返された値を PHP が自動的にアンシリアライズして、スーパーグローバル <varname>$_SESSION</varname>
       に格納します。データの形式は <function>serialize</function> したものと似ていますが、実際は違う形式であることに注意しましょう。
       シリアライズの方法は ini 設定 <link linkend="ini.session.serialize-handler">session.serialize_handler</link> で指定します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write(string $sessionId, string $data)</parameter></term>
     <listitem>
      <para>
       <parameter>write</parameter> コールバックは、セッションの保存や終了が必要となったときにコールされます。
       このコールバックが受け取るのは、現在のセッション ID とシリアライズ後のスーパーグローバル <varname>$_SESSION</varname> です。
       PHP が内部で利用するシリアライズ方法は、ini 設定
       <link linkend="ini.session.serialize-handler">session.serialize_handler</link> で指定します。
      </para>
      <para>
       このコールバックに渡されたシリアライズ後のセッションデータを、
       渡されたセッション ID に対応させて格納しなければなりません。
       このデータを取得した <parameter>read</parameter> コールバックは、
       <parameter>write</parameter> コールバックに最初に渡されたのとまったく同じ値を返さなければなりません。
      </para>
      <para>
       このコールバックが実行されるのは、PHP のスクリプトが終了するときか、あるいは明示的に <function>session_write_close</function>
       がコールされたときです。この関数の実行後には、PHP が内部的に <parameter>close</parameter>
       コールバックを実行することに注意しましょう。
       <note>
        <para>
         "write" ハンドラは、出力ストリームが閉じてから実行されます。
         したがって、"write" ハンドラ内でデバッグ出力を行っても、
         それはブラウザに表示されません。
         デバッグ出力が必要なら、それをファイルに書き出すようにしましょう。
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>destroy($sessionId)</parameter></term>
     <listitem>
      <para>
       このコールバックが実行されるのは、
       <function>session_destroy</function> あるいは
       <function>session_regenerate_id</function> (destroy パラメータを &true; にした場合)
       を実行し、セッションを破棄した場合です。
       成功した場合は &true;、失敗した場合は &false; を返します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>gc($lifetime)</parameter></term>
     <listitem>
      <para>
       ガベージコレクタコールバックは PHP が内部で定期的に実行し、古いセッションデータを破棄します。
       実行頻度は <link linkend="ini.session.gc-probability">session.gc_probability</link>
       および <link linkend="ini.session.gc-divisor">session.gc_divisor</link> で設定します。
       この関数に渡される有効期限の値は <link linkend="ini.session.gc-maxlifetime">session.gc_maxlifetime</link>
       で設定できます。
       成功した場合は &true;、失敗した場合は &false; を返します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>session_set_save_handler</function> の例</title>
    <para>
     以下の例では、デフォルトの保存 <parameter>files</parameter> に似た
     ファイルベースのセッション保存を行います。この例は、PHP がサポート
     する任意のデータベースエンジンを用いてデータベースへの保存を行う
     ように容易に拡張可能です。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function open($save_path, $session_name)
{
  global $sess_save_path;

  $sess_save_path = $save_path;
  return(true);
}

function close()
{
  return(true);
}

function read($id)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  return (string) @file_get_contents($sess_file);
}

function write($id, $sess_data)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    $return = fwrite($fp, $sess_data);
    fclose($fp);
    return $return;
  } else {
    return(false);
  }

}

function destroy($id)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

function gc($maxlifetime)
{
  global $sess_save_path;

  foreach (glob("$sess_save_path/sess_*") as $filename) {
    if (filemtime($filename) + $maxlifetime < time()) {
      @unlink($filename);
    }
  }
  return true;
}

session_set_save_handler("open", "close", "read", "write", "destroy", "gc");

session_start();

// セッションを通常通り使用します。

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>
     <function>session_set_save_handler</function> で
     <classname>SessionHandler</classname> を使う例
    </title>
    <programlisting role="php">
<![CDATA[
<?php
class MySessionHandler extends SessionHandler {
  public function open($save_path, $sessionid)
  {
    global $sess_save_path;

    $sess_save_path = $save_path;
    return(true);
  }
  public function close()
  {
    return true;
  }
  public function read($sessionid)
  {
    global $sess_save_path;

    $sess_file = "$sess_save_path/sess_$id";
    return (string) @file_get_contents($sess_file);
  }
  public function write($sessionid, $sessiondata)
  {
    global $sess_save_path;

    $sess_file = "$sess_save_path/sess_$id";
    if ($fp = @fopen($sess_file, "w")) {
      $return = fwrite($fp, $sess_data);
      fclose($fp);
      return $return;
    } else {
      return(false);
    }
  }
  public function destroy($sessionid)
  {
    global $sess_save_path;

    $sess_file = "$sess_save_path/sess_$id";
    return(@unlink($sess_file));
  }
  public function gc($maxlifetime)
  {
    global $sess_save_path;

    foreach (glob("$sess_save_path/sess_*") as $filename) {
      if (filemtime($filename) + $maxlifetime < time()) {
        @unlink($filename);
      }
    }
    return true;
  }
}

$handler = new MySessionHandler();
session_set_save_handler($handler);

session_start();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    PHP 5.0.5 以降、<parameter>write</parameter> ハンドラおよび
    <parameter>close</parameter> ハンドラはオブジェクトが破棄されたあとにコールされます。
    そのため、セッション内でデストラクタを使用可能ですが、
    ハンドラ内ではオブジェクトを使用できません。
   </para>
   <para>
    この「ニワトリが先かタマゴが先か」の問題を解決するために、
    デストラクタから <function>session_write_close</function> を
    コールすることが可能です。
   </para>
  </warning>
  <warning>
   <para>
    SAPI の種類によっては、スクリプトの終了時にセッションを閉じると
    現在の作業ディレクトリが変わってしまうことがあります。これを防ぐには、
    事前に <function>session_write_close</function> でセッションを閉じます。
   </para>
  </warning>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>5.4.0</entry>
      <entry>
       <interfacename>SessionHandlerInterface</interfacename> と
       <classname>SessionHandler</classname> を追加し、
       セッションハンドラを実装できるようになりました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     設定ディレクティブ <link linkend="ini.session.save-handler">session.save_handler</link>
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
