<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.session-set-save-handler">
 <refnamediv>
  <refname>session_set_save_handler</refname>
  <refpurpose>ユーザ定義のセッション保存関数を設定する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>callback</type><parameter>open</parameter></methodparam>
   <methodparam><type>callback</type><parameter>close</parameter></methodparam>
   <methodparam><type>callback</type><parameter>read</parameter></methodparam>
   <methodparam><type>callback</type><parameter>write</parameter></methodparam>
   <methodparam><type>callback</type><parameter>destroy</parameter></methodparam>
   <methodparam><type>callback</type><parameter>gc</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>session_set_save_handler</function> は、セッションに
   関連するデータを保存および取得するために使用されるユーザ定義の
   セッション保存関数を設定します。この関数は、セッションデータを
   ローカルデータベースに保存する場合のように PHP セッションにより
   提供されるもの以外の保存方法を使用したい場合に有用です。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>open</parameter></term>
     <listitem>
      <para>
       open 関数。これはクラスのコンストラクタのようなもので、
       セッションがオープンした際に実行されます。
       オープン関数が受け取るパラメータはふたつで、
       最初が保存パス、次がセッション名です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>close</parameter></term>
     <listitem>
      <para>
       close 関数。これはクラスのデストラクタのようなもので、
       セッションの操作が終了した際に実行されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read</parameter></term>
     <listitem>
      <para>
       save ハンドラが期待通りに動作するように read 関数は常に文字列を返す
       必要があります。データがない場合には、空の文字列を返してください。
       他のハンドラからの返り値は、論理式、すなわち成功した場合に &true;、
       失敗した場合に &false; を返します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write</parameter></term>
     <listitem>
      <para>
       <note>
        <para>
         "write" ハンドラは、出力ストリームが閉じてから実行されます。
         したがって、"write" ハンドラ内でデバッグ出力を行っても、
         それはブラウザに表示されません。
         デバッグ出力が必要なら、それをファイルに書き出すようにしましょう。
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>destroy</parameter></term>
     <listitem>
      <para>
       destroy ハンドラ。これは、セッションが
       <function>session_destroy</function>
       で破棄された際に実行されます。唯一のパラメータとしてセッション ID を受け取ります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>gc</parameter></term>
     <listitem>
      <para>
       ガベージコレクタ。これは、
       セッションのガベージコレクタが実行されたときに実行され、
       唯一のパラメータとしてセッションの最大有効期間を受け取ります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>session_set_save_handler</function> の例</title>
    <para>
     以下の例では、デフォルトの保存 <parameter>files</parameter> に似た
     ファイルベースのセッション保存を行います。この例は、PHP がサポート
     する任意のデータベースエンジンを用いてデータベースへの保存を行う
     ように容易に拡張可能です。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function open($save_path, $session_name)
{
  global $sess_save_path;

  $sess_save_path = $save_path;
  return(true);
}

function close()
{
  return(true);
}

function read($id)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  return (string) @file_get_contents($sess_file);
}

function write($id, $sess_data)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    $return = fwrite($fp, $sess_data);
    fclose($fp);
    return $return;
  } else {
    return(false);
  }

}

function destroy($id)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

function gc($maxlifetime)
{
  global $sess_save_path;

  foreach (glob("$sess_save_path/sess_*") as $filename) {
    if (filemtime($filename) + $maxlifetime < time()) {
      @unlink($filename);
    }
  }
  return true;
}

session_set_save_handler("open", "close", "read", "write", "destroy", "gc");

session_start();

// セッションを通常通り使用します。

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    PHP 5.0.5 以降、<parameter>write</parameter> ハンドラおよび
    <parameter>close</parameter> ハンドラはオブジェクトが破棄されたあとにコールされます。
    そのため、セッション内でデストラクタを使用可能ですが、
    ハンドラ内ではオブジェクトを使用できません。
   </para>
   <para>
    この「ニワトリが先かタマゴが先か」の問題を解決するために、
    デストラクタから <function>session_write_close</function> を
    コールすることが可能です。
   </para>
  </warning>
  <warning>
   <para>
    SAPI の種類によっては、スクリプトの終了時にセッションを閉じると
    現在の作業ディレクトリが変わってしまうことがあります。これを防ぐには、
    事前に <function>session_write_close</function> でセッションを閉じます。
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     設定ディレクティブ <link linkend="ini.session.save-handler">session.save_handler</link>
    </member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
