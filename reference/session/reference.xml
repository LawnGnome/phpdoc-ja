<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.4 $ -->
 <reference id="ref.session">
  <title>セッション処理関数(session)</title>
  <titleabbrev>セッション</titleabbrev>

  <partintro>
   <section id="session.intro">
    &reftitle.intro;
    <para>
     PHPのセッションサポート機能は、複数回のアクセスを通じて特定のデー
     タを保持する手段を実現するものです。これにより、よりカスタマイズさ
     れたアプリケーションを構築し、自分の Web サイトのアピール度を増加
     させることが可能となります。
    </para>
    <para>
     PHPLIB のセッション管理に精通している場合には、そのコンセプトがPHPの
     セッションサポートに似ていることに気づくことでしょう。
    </para>
    <para>
     Web サイトの訪問者にはセッションIDというユニークなIDが割りつけられ
     ます。このIDは、ユーザー側にクッキーとして保存するか、または、URL
     に埋め込みます。
    </para>
    <para>
     セッションサポート機能により、任意の数の変数をリクエスト間で受けわたせる
     ようになります。来訪者がサイトにアクセスした際、
     PHP は特定のセッションIDがリクエストとともに送信されているかどうかを
     (session.auto_start が 1 の場合は)自動的に、または
     (<function>session_start</function> により明示的な、あるいは
     <function>session_register</function> により暗黙の)
     要求を受けて確認します。
     このIDが送信されている場合には、以前保存された変数が再現されます。
    </para>
    <para>
     全ての登録された変数は、リクエストが終了した後に、シリアル化されます。
     未定義の登録変数は、未定義としてマーク付けされます。
     後でユーザーがこれらの変数を定義しない限り、以降のアクセスにおいて
     セッションモジュールにより定義されません。
    </para>
    <note>
     <para>
      セッション処理機能は、PHP 4.0 でサポートされました。
     </para>
    </note>
    <note>
     <para>
      セッションを処理している時、
      <function>session_register</function>関数を使用するか
      スーパーグローバル配列<varname>$_SESSION</varname>へ新しいキーを
      追加することにより変数が登録されるまで、セッションのレコードは作
      成されないことに注意して下さい。これは、セッションが
      <function>session_start</function>関数により開始されている場合で
      も真です。
     </para>
    </note>
   </section>
   
   <section id="session.security">
    <title>セッションとセキュリティ</title>
    <para>
     セッションの使用は、セッションデータが対応するユーザのみに見るこ
     とができることを絶対的に保証できることを意味しません。
     これは、重要な情報を保存したり表示する場合に留意すべき重要な事
     実です。データをセッションに保存する場合、
     この情報を他の誰かが見た場合に発生する損害は何かとか、
     このセッションが実際には他の誰かの場合に、自分のアプリケーション
     がどのような影響を受けるかを常に自問する必要があります。
    </para>
    <para>
     例えば、他の誰かがあるセッションを得た場合、そのユーザとして
     フォーラムにメッセージを投稿することができますが、その問題の大き
     さはどの程度でしょうか?
     または、彼は、元のユーザの買いものかごにアクセスできるため、その
     ユーザが注文しようとしていたものを見ることができるかもしれません。
     明らかに、薬局よりも花屋の方が問題は小さいでしょう。
    </para>
    <para>
     このため、重要な情報を処理する場合、有効なセッションかどうかを決
     める他の方法を常に用意する必要があります。セッションはセキュアな
     認証機構のように信頼できるものではありません。
    </para>
    <para>
     セッションはセッションIDに基づいており、これは、セッションIDを盗
     むことにより、セッションを「盗む」ことができることを意味します。
     これは、セッションCookieを使用することにより困難となりますが、
     不可能にするわけではなく、依然としてユーザが全てのブラウザウイン
     ドウを閉じて、セッションCookieを期限切れとすることに依存していま
     す。また、セッションCookieでさえもネットワークで盗聴されたり、
     プロキシサーバにより記録されたりします。
    </para>

   </section>

   <section id="session.requirements">
    &reftitle.required;
    &no.requirement;
    <note>
     <para>
      オプションで、Ralf S. Engelschallにより開発されたセッションの保
      存用の共有メモリ(mm)を使用することも可能です。
      <ulink url="&url.mm;">mm</ulink>をダウンロードし、インストールす
      ることができます。このオプションは、Windowsプラットフォームでは
      利用できません。
     </para>
    </note>
   </section>

   &reference.session.configure;

   &reference.session.ini;

   <section id="session.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.session.constants;

   <section id="session.examples">
    &reftitle.examples;
    <note>
     <para>
      PHP 4.1.0以降、<varname>$_SESSION</varname>は、
      <varname>$_POST</varname>, <varname>$_GET</varname>,
      <varname>$_REQUEST</varname>等のようにグローバル変数として利用可
      能です。<varname>$HTTP_SESSION_VARS</varname>と異なり、
      <varname>$_SESSION</varname>は常にグローバルです。そこで、
      <link
      linkend="language.variables.scope"><command>global</command></link>
      は<varname>$_SESSION</varname>の場合は不要です。
      このドキュメントでは、<varname>$_SESSION</varname> をあらゆる場
      所で使用していることに注意して下さい。もし前者を使用したい場合に
      は、<varname>$_SESSION</varname>を
      <varname>$HTTP_SESSION_VARS</varname>で置き換えることができます。
     </para>
     <para>
      連想配列<varname>$_SESSION</varname>のキーは、PHPの通常の変数名
      と同じ制限があります。すなわち、数字で始まることはできず、文字ま
      たはアンダースコアで始まる必要があります。
      詳細については、本マニュアルの
      <link linkend='language.variables'>変数</link>の節を参照して下さ
      い。
     </para>
    </note>

    <para>
     <link
     linkend="ini.register-globals"><literal>register_globals</literal></link>
     が無効の場合、グローバル連想配列<varname>$_SESSION</varname>のメ
     ンバのみをセッション変数として登録することができます。
     回復されたセッション変数は、配列<varname>$_SESSION</varname>での
     み利用可能です。
    </para>
    <para>
     セキュリティとコードの可読性のために<varname>$_SESSION</varname>
     (またはPHP 4.0.6以前は<varname>$HTTP_SESSION_VARS</varname>)の使用
     が推奨されます。<varname>$_SESSION</varname>の場合、
     <function>session_register</function>,
     <function>session_unregister</function>,
     <function>session_is_registered</function>は不要です。ユーザは、
     通常の変数と同様にセッション変数にアクセス可能
     です。
     <example>
      <title>
       $_SESSIONで変数を登録
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// PHP 4.0.6以前の場合は$HTTP_SESSION_VARSを使用して下さい
if (!isset($_SESSION['count'])) {
    $_SESSION['count'] = 0;
}
else {
    $_SESSION['count']++;
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>$_SESSIONで変数の登録を解除する</title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// PHP 4.0.6以前の場合は$HTTP_SESSION_VARSを使用して下さい
unset($_SESSION['count']);

?>
]]>
      </programlisting>
     </example>
     <example>
      <title>
       register_globalsが有効な場合に、$_SESSIONを用いて登録した後、
       変数の登録を解除する
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// PHP 4.3以降では、前の例を使用することも可能です。
session_unregister('count');
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <link
      linkend="ini.register-globals"><literal>register_globals</literal></link>
     が有効な場合、全てのグローバル変数はセッション変数として登録するこ
     とが可能で、セッション変数は対応するグローバル変数として回復されま
     す。PHPは、どのグローバル変数がセッション変数として登録されるのか
     を知る必要があるため、ユーザは、変数を
      <function>session_register</function>関数で登録する必要がありま
      す。しかし、<varname>$_SESSION</varname>の場合は、エントリを設定
      するだけでこれを行う必要はありません。
     <caution>
      <para>
       <varname>$_SESSION</varname>を使用し、<link
        linkend="ini.register-globals"><literal>register_globals</literal></link>
       を無効とする場合、自分のスクリプトをPHP 4.2より以前のバージョン
        で動作させたい場合は、
       <function>session_register</function>,
       <function>session_is_registered</function>,
       <function>session_unregister</function>を使用しないで下さい。
       PHP 4.3以降ではこれらの関数を使用することができます。
      </para>
      <para>
       <link
        linkend="ini.register-globals"><literal>register_globals</literal>
       </link>を有効にしている場合は、
       <function>session_unregister</function>を使用する必要があります。
       これは、シリアル化されたセッションデータが戻される時にセッション
       変数がグローバル変数として登録されるためです。
       セキュリティ面と性能面の双方より<link
        linkend="ini.register-globals"><literal>register_globals</literal></link>
       を無効とすることが推奨されています。
      </para>
     </caution>
    <example>
      <title>
       <link
        linkend="ini.register-globals"><literal>register_globals</literal></link>
       が有効な場合に、変数を登録する
      </title>
      <progrqamlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('count')) {
    session_register("count");
    $count = 0;
}
else {
    $count++;
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <link
      linkend="ini.register-globals"><literal>register_globals</literal></link>
     が有効な場合、グローバル変数と<varname>$_SESSION</varname>の
     エントリは、前のセッションインスタンスで登録されたセッション変数
     の同じ値を参照することになります。
    </para>
    <para>
     加えて、<function>session_register</function>により新しいセッショ
     ン変数を登録する場合、グローバルスコープのエントリと
     <varname>$_SESSION</varname>のエントリは、次の
     <function>session_start</function>まで同じ値へのリファレンスとは
     なりません。(これは、PHP 4.2より前のバージョンのみに適用されます。)
     すなわち、グローバル変数への修正は、<varname>$_SESSION</varname>
     のエントリには反映されません。これは、実際には問題にはならないと
     思われますが、PHP 4.3では修正されています。
    </para>
   </section>
    
   <section id="session.idpassing">
    <title>セッションIDの受渡し</title>
    <para>
     セッションIDの通知を行うためには次の二つの方法があります。
     <itemizedlist>
      <listitem>
       <simpara>
        Cookie
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        URLパラメータ
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     sessionモジュールは、両方の方法をサポートします。
     Cookieは最適ですが、(クライアントがCookieを受け入れない可能性が
     あるため)信頼性がなく、これに依存することができません。2番目の方
     法は、セッションIDを直接URLに埋め込みます。
    </para>
    <para>
     PHP は、<link linkend="install.configure.enable-trans-sid">
      <literal>--enable-trans-sid</literal></link>を付けてコンパイルされた
     場合にこの処理を透過的に行います。このオプションは、PHP 4.2以降常
      に有効となっています。このオプションを有効にした場合、相対 URI
      はセッションIDを有するように自動的に変更されます。
     もしくは、クライアントが適当なクッキーを送信しない場合に
     定義される定数 <literal>SID</literal> を使用することができます。
     <literal>SID</literal> は、<literal>session_name=session_id</literal> 
     の形式または空の文字列です。
     <note>
      <para>
       <link linkend="ini.arg-separator.output">arg_separator.output</link>
       &php.ini; ディレクティブにより、引数のセパレータをカスタマイズ
       することが可能です。
      </para>
     </note> 
    </para>
    <para>
     次の例は、変数の登録法および SID を用いて他のページに正しくリンク
     する方法のデモです。
     <example>
      <title>単一のユーザーに関するヒット数を数える</title>
      <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('count')) {
    session_register('count');
    $count = 1;
}
else {
    $count++;
}
?>

こんにちは、あなたがこのページに来たのは<?php echo $count; ?>回目ですね。 <p>

続けるには、<A HREF="nextpage.php?<?php echo SID?>">ここをクリック</A>して下さい。
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <literal>&lt;?php echo SID?&gt;</literal>
     (<link linkend="ini.short-open-tag">short_open_tag</link>が有効な
      場合は<literal>&lt;?=SID?&gt;</literal>を使用できます)は、
     ユーザがCookieを無効とした場合にセッションIDを保存するために必要
     です。PHPのコンパイル時に <link
     linkend="install.configure.enable-trans-sid">
      <literal>--enable-trans-sid</literal></link>を指定した場合には、
     <literal>&lt;?php echo SID?&gt;</literal>は不要です。
    </para>
    <note>
     <para>
      相対URLでないURLは、外部サイトを指していると仮定されSIDが追加
      されません。これは、SIDを異なったサーバにもらすことはセキュリティ
      上のリスクとなるためです。
     </para>
    </note>
   </section>

   <section id="session.customhandler">
    <title>カスタムセッションハンドラ</title>
    <para>
     セッション情報をデータベースに保存する機能か他の保存法を実装する
     には、一連のユーザレベルの保存関数を作成し、
     <function>session_set_save_handler</function>を使用する必要があり
     ます。
    </para>
   </section>
  </partintro>

&reference.session.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

