<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.19 $ -->
<!-- EN-Revision: 1.55 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<!-- Purpose: basic.session -->
<!-- Membership: core -->

 <reference id="ref.session">
  <title>セッション処理関数(session)</title>
  <titleabbrev>セッション</titleabbrev>

  <partintro>
   <section id="session.intro">
    &reftitle.intro;
    <para>
     PHPのセッションサポート機能は、複数回のアクセスを通じて特定のデー
     タを保持する手段を実現するものです。これにより、よりカスタマイズさ
     れたアプリケーションを構築し、自分の Web サイトのアピール度を増加
     させることが可能となります。
    </para>
    <para>
     Web サイトの訪問者にはセッションIDというセッションIDと呼ばれるユニークなIDが割りつけられ
     ます。このIDは、ユーザー側にクッキーとして保存するか、または、URL
     に埋め込みます。
    </para>
    <para>
     セッションサポート機能により、任意の数の変数をリクエスト間で受けわたせる
     ようになります。来訪者がサイトにアクセスした際、
     PHP は特定のセッションIDがリクエストとともに送信されているかどうかを
     (<link linkend="ini.session.auto-start">
      <literal>session.auto_start</literal></link>が1の場合は)自動的に、または
     (<function>session_start</function> により明示的な、あるいは
     <function>session_register</function> により暗黙の)
     要求を受けて確認します。
     このIDが送信されている場合には、以前保存された変数が再現されます。
    </para>
    <caution>
     <para>
      <link linkend="ini.session.auto-start">
       <literal>session.auto_start</literal></link>をonとした場合、
      オブジェクトをセッション変数に代入することができなくなります。
      これは、セッションにおいてオブジェクトを再現するためには、
      セッション開始前にクラス定義がロードされている必要があるためです。
     </para>
    </caution>
    <para>
     全ての登録された変数は、リクエストが終了した後に、シリアル化されます。
     未定義の登録変数は、未定義としてマーク付けされます。
     これらの変数は、後でユーザーが定義しない限り、以降のアクセスにおいて
     セッションモジュールにより定義されません。
    </para>
    <warning>
     <para>
      いくつかのデータ型はシリアライズできませんので、
      セッションにストアされません。これは <type>resource</type> 型の変数、
      もしくは循環参照しているオブジェクト (例えば、
      自分自身への参照を他のオブジェクトに渡しているオブジェクト)
      を含みます。
     </para>
    </warning>
    <note>
     <para>
      セッション処理機能は、PHP 4.0 でサポートされました。
     </para>
    </note>
    <note>
     <para>
      セッションを処理している時、
      <function>session_register</function>関数を使用するか
      スーパーグローバル配列<varname>$_SESSION</varname>へ新しいキーを
      追加することにより変数が登録されるまで、セッションのレコードは作
      成されないことに注意してください。これは、セッションが
      <function>session_start</function>関数により開始されている場合で
      も真です。
     </para>
    </note>
   </section>

   <section id="session.security">
    <title>セッションとセキュリティ</title>
    <para>
     外部リンク: <ulink url="&url.session-fixation;">Session fixation</ulink>
    </para>
    <para>
     セッションモジュールは、セッションに保存した情報を見ることができる
     のがそのセッションを作成したユーザーだけであることを保証することが
     できません。セッションの完全性を積極的に守るには、そのセッションに
     紐づく値に応じた追加措置が必要です。
    </para>
    <para>
     セッションに運ばれるデータの重要性を評価し、必要な保護策を講じて
     ください。これには通常、お金があかり、ユーザの利便性を損なうことに
     なります。例えば、簡単な社会工学的な策略からユーザを守るためには、
     <literal>session.use_only_cookies</literal>を有効にしてください。
     この場合、ユーザ側でクッキーが常に有効となっている必要があり
     ます。そうでない場合、セッションは動作しません。
    </para>
    <para>
     存在するセッションIDが第三者に洩れる手順は何種類かあります。
     洩れたセッションIDにより、第三者が特定のIDに関連する全てのリソー
     スにアクセスできるようになります。まず、セッションIDがURLにより伝
     送される場合です。外部サイトにリンクを張っている場合、外部サイト
     のreferrerログにセッションIDを含むURLが保存される可能性があります。
     第二に、よりアクティブな攻撃者がネットワークのトラフィックをモニ
     ターしている可能性があります。セッションIDが暗号化されていない場
     合、セッションIDはネットワーク上を平文テキストで伝送されます。
     解決策はサーバ上にSSLを実装し、ユーザにSSLを必ず使用させることです。
    </para>
   </section>

   <section id="session.requirements">
    &reftitle.required;
    &no.requirement;
    <note>
     <para>
      オプションで、Ralf S. Engelschallにより開発されたセッションの保
      存用の共有メモリ(mm)を使用することも可能です。
      <ulink url="&url.mm;">mm</ulink>をダウンロードし、インストールす
      ることができます。このオプションは、Windowsプラットフォームでは
      利用できません。mm用セッション保存モジュールは同一セッションのロッ
      クに問題があるため、同時アクセスを保証することはできません。
      ファイルにセッションを保存するためには、
      (Solaris/LinuxまたはBSD上の/dev/md)ファイルシステムに
      共有メモリを使用するためにより適当でしょう。
     </para>
    </note>
   </section>

   &reference.session.configure;

   &reference.session.ini;

   <section id="session.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.session.constants;

   <section id="session.examples">
    &reftitle.examples;
    <note>
     <para>
      PHP 4.1.0以降、<varname>$_SESSION</varname>は、
      <varname>$_POST</varname>, <varname>$_GET</varname>,
      <varname>$_REQUEST</varname>等のようにグローバル変数として利用可
      能です。<varname>$HTTP_SESSION_VARS</varname>と異なり、
      <varname>$_SESSION</varname>は常にグローバルです。そこで、
      <link
      linkend="language.variables.scope"><command>global</command></link>
      は<varname>$_SESSION</varname>の場合は不要です。
      このドキュメントでは、<varname>$_SESSION</varname> をあらゆる場
      所で使用していることに注意してください。もし前者を使用したい場合に
      は、<varname>$_SESSION</varname>を
      <varname>$HTTP_SESSION_VARS</varname>で置き換えることができます。
      また、<varname>$_SESSION</varname>を使用する前に
      <function>session_start</function> を用いてセッションを開始して
      おく必要があることに注意してください。
     </para>
     <para>
      連想配列<varname>$_SESSION</varname>のキーは、PHPの通常の変数名
      と同じ制限があります。すなわち、数字で始まることはできず、文字ま
      たはアンダースコアで始まる必要があります。
      詳細については、本マニュアルの
      <link linkend='language.variables'>変数</link>の節を参照して下さ
      い。
     </para>
    </note>

    <para>
     <link
     linkend="ini.register-globals"><literal>register_globals</literal></link>
     が無効の場合、グローバル連想配列<varname>$_SESSION</varname>のメ
     ンバーのみがセッション変数として登録されます。
     回復されたセッション変数は、配列<varname>$_SESSION</varname>での
     み利用可能です。
    </para>
    <para>
     セキュリティとコードの可読性のために<varname>$_SESSION</varname>
     (またはPHP 4.0.6以前は<varname>$HTTP_SESSION_VARS</varname>)の使用
     が推奨されます。<varname>$_SESSION</varname>の場合、
     <function>session_register</function>,
     <function>session_unregister</function>,
     <function>session_is_registered</function>は不要です。ユーザは、
     通常の変数と同様にセッション変数にアクセス可能
     です。
     <example>
      <title>
       <varname>$_SESSION</varname>で変数を登録
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// PHP 4.0.6以前の場合は$HTTP_SESSION_VARSを使用してください
if (!isset($_SESSION['count'])) {
    $_SESSION['count'] = 0;
} else {
    $_SESSION['count']++;
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>
       <link
        linkend="ini.register-globals"><literal>register_globals</literal></link>
       が無効な場合に、<varname>$_SESSION</varname>に登録されている変
       数の登録を解除する
       </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// PHP 4.0.6とそれ以前では$HTTP_SESSION_VARSを使用してください
unset($_SESSION['count']);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <caution>
      <para>
       <literal>unset($_SESSION)</literal>によって
       全ての<varname>$_SESSION</varname>を初期化してはいけません。
       <varname>$_SESSION</varname>スーパーグローバル変数を用いた
       セッション変数の登録ができなくなってしまうからです。
      </para>
     </caution>
    </para>
    <warning>
     <para>
      セッション変数において参照を使用することはできません。
      他の変数への参照の再現する方法がないからです。
     </para>
    </warning>
    <para>
     <link
      linkend="ini.register-globals">register_globals</link>
     が有効な場合、全てのグローバル変数はセッション変数として登録するこ
     とが可能で、セッション変数は対応するグローバル変数として回復されま
     す。PHPは、どのグローバル変数がセッション変数として登録されるのか
     を知る必要があるため、ユーザは、変数を
      <function>session_register</function>関数で登録する必要がありま
      す。しかし、<varname>$_SESSION</varname>の場合は、エントリを設定
      するだけでこれを行う必要はありません。
     <caution>
      <para>
       <varname>$_SESSION</varname>を使用し、<link
        linkend="ini.register-globals">register_globals</link>
       を無効とする場合、自分のスクリプトをPHP 4.2より以前のバージョン
        で動作させたい場合は、
       <function>session_register</function>,
       <function>session_is_registered</function>,
       <function>session_unregister</function>を使用しないでください。
       PHP 4.3以降ではこれらの関数を使用することができます。
        セキュリティ面と性能面の双方より<link
         linkend="ini.register-globals">register_globals</link>
        を無効とすることが推奨されています。
      </para>
     </caution>
    </para>
    <para>
     <link
      linkend="ini.register-globals">register_globals</link>
     が有効な場合、グローバル変数と<varname>$_SESSION</varname>の
     エントリは、前のセッションインスタンスで登録されたセッション変数
     の同じ値を参照することになります。
     しかし、変数が <varname>$_SESSION</varname> で登録された場合、
     グローバル変数が使用可能となるのは次のリクエスト以降です。
    </para>
    <para>
     PHP 4.2.3とそれ以前のバージョンのみに関係する問題があります。
     <function>session_register</function>により新しいセッショ
     ン変数を登録する場合、グローバルスコープのエントリと
     <varname>$_SESSION</varname>のエントリは、次の
     <function>session_start</function>まで同じ値へのリファレンスとは
     なりません。
     すなわち、グローバル変数への修正は、<varname>$_SESSION</varname>
     のエントリには反映されません。PHP 4.3では修正されています。
    </para>
   </section>

   <section id="session.idpassing">
    <title>セッションIDの受渡し</title>
    <para>
     セッションIDの通知を行うためには次の二つの方法があります。
     <itemizedlist>
      <listitem>
       <simpara>
        Cookie
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        URLパラメータ
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     sessionモジュールは、両方の方法をサポートします。
     Cookieは最適ですが、(クライアントがCookieを受け入れない可能性が
     あるため)信頼性がなく、これに依存することができません。2番目の方
     法は、セッションIDを直接URLに埋め込みます。
    </para>
    <para>
     PHPには、透過的にリンクを変換する機能を有しています。
     PHP 4.2以降を使用していない場合、PHP構築時にこの機能を有効にして
     おく必要があります。UNIX環境では、
     <link linkend="ini.session.use-trans-sid">
     --enable-trans-sid</link>をconfigureに指定して
     ください。この構築オプションと実行時オプション
     <literal>session.use_trans_sid</literal>が有効な場合、
     相対URIは自動的にセッションIDを含むように変換されます。
     <note>
      <para>
      <link linkend="ini.arg-separator.output">arg_separator.output</link>
      &php.ini; ディレクティブにより、引数セパレータをカスタマイズする
      ことができます。XHTMLに完全準拠するためには、ここに
       &amp;amp; を指定してください。
      </para>
     </note>
    </para>
    <para>
     もしくは、セッションが開始している場合に定義されている定数 <literal>
     SID</literal> を使用することもできます。クライアントが適当な
     セッションクッキーを送信しなかった場合、この定数は <literal>
     session_name=session_id</literal> の形式となります。
     他方、送信された場合には、この定数は空の文字列に展開されます。
     このため、この定数を無条件に URL に埋め込むことができます。
    </para>
    <para>
     次の例は、変数の登録法および SID を用いて他のページに正しくリンク
     する方法のデモです。
     <example>
      <title>単一のユーザーに関するヒット数を数える</title>
      <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('count')) {
    session_register('count');
    $count = 1;
} else {
    $count++;
}
?>

<p>
こんにちは、あなたがこのページに来たのは<?php echo $count; ?>回目ですね。
</p>

<p>
続けるには、<A HREF="nextpage.php?<?php echo strip_tags （SID）?>">ここをクリック</A>
してください。
</p>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     XSSに関係する攻撃を防止するためにSIDを出力する際に、
     <function>strip_tags</function>を使用します。
    </para>
    <para>
     PHPをコンパイルする際に
     <link linkend="ini.session.use-trans-sid">
      --enable-trans-sid</link> を使用した場合、
     上の例のように SID を出力する必要はありません。
    </para>
    <note>
     <para>
      相対URLでないURLは外部サイトを指していると仮定され、SIDが追加
      されません。これは、SIDを外部のサーバに開示することはセキュリティ
      上のリスクとなる可能性があるためです。
     </para>
    </note>
   </section>

   <section id="session.customhandler">
    <title>カスタムセッションハンドラ</title>
    <para>
     セッション情報をデータベースに保存する機能か他の保存法を実装する
     には、一連のユーザレベルの保存関数を作成し、
     <function>session_set_save_handler</function>を使用する必要があり
     ます。
    </para>
   </section>
  </partintro>

&reference.session.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

