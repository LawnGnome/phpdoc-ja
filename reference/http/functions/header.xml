<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.31 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry id="function.header">
 <refnamediv>
  <refname>header</refname>
  <refpurpose>生の HTTP ヘッダを送信する</refpurpose>
 </refnamediv>
 <refsect1>
  <title>説明</title>
     <methodsynopsis>
   <type>void</type><methodname>header</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>replace</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>http_response_code</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>header</function> 関数は、<acronym>HTML</acronym> ファイルの
   送信に先立って、生の <acronym>HTTP</acronym> ヘッダ文字列を送信するために
   使用します。<acronym>HTTP</acronym> ヘッダの詳細は、
   <ulink url="&url.rfc;2616;">HTTP 1.1 Specification</ulink> を
   参照してください。
  </para>
    <note>
     <para>
      PHP 4.4.2 および PHP 5.1.2 以降、この関数は一度に複数のヘッダを
      送信できないようになりました。これは、
      ヘッダインジェクション攻撃への対策です。
     </para>
    </note>
  <para>
   オプションのパラメータ <parameter>replace</parameter> は、ヘッダが
   前に送信された類似のヘッダを置換するか、または、同じ形式の二番目の
   ヘッダを追加するかどうかを指定します。デフォルトでは、この関数は
   置換を行ないますが、二番目の引数に &false; を指定すると、同じ型の
   複数のヘッダを強制的に生成します。例えば、
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header('WWW-Authenticate: Negotiate');
header('WWW-Authenticate: NTLM', FALSE);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   第二オプション引数 <parameter>http_response_code</parameter> は
   HTTP レスポンスコードを強制的に指定の値にします（この引数は
   PHP 4.3.0 以降で有効です）。
  </para>
  <para>
   特殊な header コールが 2 種類あります。最初のものは、
   文字列 &quot;<literal>HTTP/</literal>&quot;
   から始まる全てのヘッダ(大文字・小文字は区別されません)です。このヘッダは、
   送信する HTTP ステータスコードを示すために使用されます。
   例えば、存在しないファイルへのリクエストを処理するためにある PHP
   スクリプトを使用するよう(<literal>ErrorDocument</literal>ディレクティブ
   により)Apache を設定する場合、そのスクリプトが正しいステータスコードを
   返すようにする必要があります。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header("HTTP/1.0 404 Not Found");
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    実際に <function>header</function> が最初にコールされたか
    どうかにかかわらず、HTTP ステータスヘッダ行は
    クライアントに対し常に最初に送信されます。
    HTTP ヘッダが既に送信されていない限り、
    <function>header</function> をコールすることでステータスは
    常に上書きされます。
   </para>
  </note>
  <para>
   2番目の特別なヘッダは、&quot;Location&quot;
   ヘッダです。このヘッダがブラウザに返されるだけではなく、
   ブラウザに <literal>REDIRECT</literal> (302)ステータスコードを返します
   （<literal>3xx</literal> ステータスコードが既に送信されていない場合にのみ）。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header("Location: http://www.example.com/"); /* Redirect browser */

exit;                 /* リダイレクトを行う際に以下のコードが
                         実行されないようにする */
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    HTTP/1.1 では、スキーム、ホスト名、絶対パスを含む絶対
    <acronym>URI</acronym> が <ulink
     url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>
    の引数として必要ですが、いくつかのクライアントでは相対 URI も
    受けつけます。通常、相対 URI から絶対 URI を作成するために
    $HTTP_SERVER_VARS['HTTP_HOST'], $HTTP_SERVER_VARS['PHP_SELF'],
    <function>dirname</function> を使用することが可能です。
    <informalexample>
       <programlisting role="php">
<![CDATA[
<?php
/* カレントディレクトリの別のページにリダイレクトします */
$host  = $_SERVER['HTTP_HOST'];
$uri   = rtrim(dirname($_SERVER['PHP_SELF']), '/\\');
$extra = 'mypage.php';
header("Location: http://$host$uri/$extra");
exit;
?>
]]>
       </programlisting>
    </informalexample>
   </para>
  </note>
    <note>
     <para>
      <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
      が有効であったとしても、セッション ID が Location ヘッダとともに
      渡されることはありません。<constant>SID</constant> 定数を使用して
      手動で渡す必要があります。
     </para>
    </note>
  <para>
   PHP スクリプトはしばしば動的に HTML を生成するため、クライアント
   ブラウザやサーバおよびクライアントブラウザの間でプロキシがキャッシュを
   行ったりするべきではありません。多くのプロキシとクライアントでは、
   以下のコードにより強制的にキャッシュを無効にできます。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); // 過去の日付
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    上記のヘッダを全て出力しなかったとしてもページのキャッシュが
    行われない場合があることに気付くかもしれません。デフォルトの
    ブラウザのキャッシュの動作をユーザが変更できる手段はいくつもあります。
    上記のヘッダを送信することにより、スクリプトの出力がキャッシュされる
    可能性がある設定を上書きするべきです。
   </para>
   <para>
    加えて、<function>session_cache_limiter</function> および
    設定 <literal>session.cache_limiter</literal> をセッションが
    使用された際にキャッシュ関係のヘッダを正しく自動的に生成するために
    使用できます。
   </para>
  </note>
  <para>
   覚えておいて頂きたいのは、<function>header</function> 関数は、
   通常の HTML タグまたは PHP からの出力にかかわらず、すべての実際の
   出力の前にコールする必要があることです。
   頻出するエラーとして、<function>include</function> または
   <function>require</function> 関数、他のファイルをアクセスする関数に
   空白または空行があり、<function>header</function> の前に出力が
   行われてしまうというものがあります。同じ問題は、単一の PHP/HTML
   ファイルを使用している場合でも存在します。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<html>
<?php
/* これはエラーとなります。この上に出力があることに注目してください。
 * それはheader()のコールより前であるということになります */
header('Location: http://www.example.com/');
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    PHP 4 では、この問題に対処するために出力のバッファリングを使用する
    ことが可能です。この場合、ブラウザへの出力が送信するまでサーバに
    全てバッファリングされるオーバーヘッドがあります。出力バッファリングは、
    <function>ob_start</function> と
    <function>ob_end_flush</function> をスクリプトでコールするか
    <filename>php.ini</filename> またはサーバ設定ファイルの設定ディレクティブ
    <literal>output_buffering</literal> を設定することにより
    行うことが可能です。
   </para>
  </note>
  <para>
   PDF ファイルを生成するといったように送信するデータを保存するかどうか
   ユーザにプロンプトを表示したい場合、推奨されるファイル名を指定して
   ブラウザに保存ダイアログを表示させる<ulink
    url="&url.rfc;2183">Content-Disposition</ulink> ヘッダを使用可能です。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
// PDFを出力しようとしている
header("Content-type: application/pdf");

// それはdownloaded.pdfという名前である
header("Content-Disposition: attachment; filename=downloaded.pdf");

// オリジナルのPDFは original.pdf
readfile('original.pdf');
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    Microsoft Internet Explorer 4.01 にはこれが動作しないというバグが
    あります。この解決策はありません。Microsoft Internet Explorer
    5.5 にもこれを妨げるバグがあります。これは、サービスパック 2 以降
    とすることで修整可能です。
   </para>
  </note>
  <note>
   <simpara>
    <literal>WWW-Authenticate</literal> ヘッダ（HTTP認証に利用される）を
      使用する際、<link linkend="ini.safe-mode">safe mode</link> が
    有効になっている場合は、スクリプトの UID が
      <literal>WWW-Authenticate</literal> ヘッダ
      <literal>realm</literal> 部として送信されます。
     </simpara>
    </note>
    <para>
     <function>headers_sent</function>,
     <function>setcookie</function> および
     <link linkend="features.http-auth">HTTP 認証</link> の節も参照ください。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
