<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 327812 Maintainer: takagi Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xml:id="pdostatement.execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::execute</refname>
  <refpurpose>
   プリペアドステートメントを実行する
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>PDOStatement::execute</methodname>
   <methodparam choice="opt"><type>array</type><parameter>input_parameters</parameter></methodparam>
  </methodsynopsis>
  <para>
   プリペアドステートメントを実行します。もし、プリペアドステートメントが
   パラメータマーカを含む場合、次のいずれかを行わなければなりません。
   <itemizedlist>
    <listitem><para>パラメータマーカに PHP 変数をバインドするため
    <function>PDOStatement::bindParam</function> をコールする。
    関連づけされたパラメータマーカがあれば、バインドされた変数は入力値を渡す
    もしくは出力値を受け取ります。
    </para></listitem>
    <listitem><para>あるいは、入力専用のパラメータ値の配列を渡す</para></listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>input_parameters</parameter></term>
     <listitem>
      <para>
       実行される SQL 文の中のバインドパラメータと同数の要素からなる、
       値の配列。すべての値は <constant>PDO::PARAM_STR</constant> として扱われます。
      </para>
      <para>
       ひとつのパラメータに対して複数の値をバインドすることはできません。
       例えば、IN() 句の中のひとつのパラメータに対して
       2 つの値をバインドすることはできません。
      </para>
      <para>
       指定した数よりも多い値をバインドすることはできません。
       <parameter>input_parameters</parameter> のキーが
       <methodname>PDO::prepare</methodname> で指定した SQL にある数より多い場合は、
       ステートメントが失敗してエラーが発生します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        <parameter>input_parameters</parameter> のキーが
        SQL で宣言したものと一致しなければならないようになりました。
        PHP 5.2.0 より前のバージョンでは一致しない場合は単に無視されるだけでした。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example><title>バインド変数を伴うプリペアドステートメントの実行</title>
   <programlisting role="php">
<![CDATA[
<?php
/* バインド変数を伴うプリペアドステートメントの実行 */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindParam(':colour', $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example><title>入力値の配列を伴うプリペアドステートメントの実行 (名前つきパラメータ)</title>
   <programlisting role="php">
<![CDATA[
<?php
/* 入力値の配列を伴うプリペアドステートメントの実行 */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->execute(array(':calories' => $calories, ':colour' => $colour));
?>
]]>
   </programlisting>
  </example>

  <example><title>入力値の配列を伴うプリペアドステートメントの実行 (プレースホルダ)</title>
   <programlisting role="php">
<![CDATA[
<?php
/* 入力値の配列を伴うプリペアドステートメントの実行 */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute(array($calories, $colour));
?>
]]>
   </programlisting>
  </example>

  <example><title>疑問符プレースホルダを伴うプリペアドステートメントの実行</title>
   <programlisting role="php">
<![CDATA[
<?php
/* バインド変数を伴うプリペアドステートメントの実行 */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example><title>IN 句で配列を使うプリペアドステートメントの実行</title>
   <programlisting role="php">
<![CDATA[
<?php
/* IN 句で配列を使うプリペアドステートメントの実行 */
$params = array(1, 21, 63, 171);
/* パラメータのプレースホルダ用の文字列を、パラメータ数に合わせて作ります */
$place_holders = implode(',', array_fill(0, count($params), '?'));

/*
    これは、配列 $params のすべての値のための名前なしプレースホルダを含む
    ステートメントを準備します。配列 $params の値をそこにバインドし、それから
    ステートメントを実行します。これは PDOStatement::bindParam() を使うのとは
    違います。こちらの場合は変数への参照が必要になるからです。
    PDOStatement::execute() は、単に値だけをバインドします。
*/
$sth = $dbh->prepare("SELECT id, name FROM contacts WHERE id IN ($place_holders)");
$sth->execute($params);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    ドライバによっては、次のステートメントを実行する前に
    <link linkend="pdostatement.closecursor">カーソルを閉じ</link>
    なければならないものもあります。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::bindParam</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
