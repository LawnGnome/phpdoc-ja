<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.6 Maintainer: shimooka Status: ready -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
  <refentry id="function.PDOStatement-bindParam">
   <refnamediv>
    <refname>PDOStatement::bindParam</refname>
    <refpurpose>
     指定された変数名にパラメータをバインドする
    </refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
    <methodsynopsis>
     <type>bool</type><methodname>PDOStatement::bindParam</methodname>
     <methodparam><type>mixed</type><parameter>parameter</parameter></methodparam>
     <methodparam><type>mixed</type><parameter role="reference">variable</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>data_type</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>driver_options</parameter></methodparam>
    </methodsynopsis>
    &warn.experimental.func;
    <para>
     指定された変数名に SQL 文パラメータをバインドします。
     SQL 文パラメータは、名前付けされたプレースホルダ
     もしくは疑問符プレースホルダのいずれかが可能です。
    </para>
    <para>
     出力パラメータは、SQL 文が実行されたとき、バインドされた PHP
     変数の値にデータベースによって返される値をセットします。これにより、
     例えば機能をサポートするデータベースに対して、
     出力もしくは入出力パラメータを用いてストアドプロシージャを
     コールすることができます。
    </para>
    <para>
     NULL でない入力専用変数に対しては、代わりに
     <function>PDOStatement::execute</function>
     に入力値の配列を渡すことができます。
    </para>

   </refsect1>

   <refsect1 role="parameters">
    &reftitle.parameters;
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parameter</parameter></term>
        <listitem>
         <para>
          パラメータ ID を指定します。名前付けされたプレースホルダを使った文に
          対しては、<varname>:name</varname> 形式のパラメータ名となります。
          疑問符プレースホルダを使った文に対しては、1 から始まるパラメータの
          位置となります。
         </para>
        </listitem>
       </varlistentry>
      <varlistentry>
       <term><parameter>variable</parameter></term>
        <listitem>
         <para>
          SQL 文パラメータにバインドする PHP 変数名を指定します。
         </para>
        </listitem>
       </varlistentry>
      <varlistentry>
       <term><parameter>data_type</parameter></term>
        <listitem>
         <para>
          パラメータに対して PDO_PARAM_* 定数を使った明示的なデータ型を
          指定します。ストアドプロシージャからの INOUT パラメータの場合、
          <parameter>data_type</parameter> パラメータに PDO_PARAM_INPUT_OUTPUT
          ビットを設定するためにビット OR を使用してください。
         </para>
         <para>
          入力パラメータとして NULL 値が渡す場合、PDO_PARAM_NULL
          定数を使用してください。
         </para>
        </listitem>
       </varlistentry>
      <varlistentry>
       <term><parameter>length</parameter></term>
        <listitem>
         <para>
          データ型の長さを指定します。パラメータがストアドプロシージャからの
          OUT パラメータであることを示す場合、
          明示的に長さを設定しなければなりません。
         </para>
        </listitem>
       </varlistentry>
      <varlistentry>
       <term><parameter>driver_options</parameter></term>
       <listitem>
        <para>

        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1 role="examples">
    &reftitle.examples;
    <example><title>名前付けされたプレースホルダを用いてプリペアドステートメントを実行する</title>
     <programlisting role='php'>
<![CDATA[
<?php
/* バインドされた PHP 変数によってプリペアドステートメントを実行する */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO_PARAM_INT);
$sth->bindParam(':colour', $colour, PDO_PARAM_STR, 12);
$sth->execute();
?>
]]>
     </programlisting>
    </example>

    <example><title>
    疑問符プレースホルダを用いてプリペアドステートメントを実行する</title>
     <programlisting role='php'>
<![CDATA[
<?php
/* バインドされた PHP 変数によってプリペアドステートメントを実行する */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO_PARAM_INT);
$sth->bindParam(2, $colour, PDO_PARAM_STR, 12);
$sth->execute();
?>
]]>
     </programlisting>
    </example>

    <example><title>プリペアドステートメントに NULL 値を渡す</title>
     <programlisting role='php'>
<![CDATA[
<?php
/* バインドされた PHP 変数によってプリペアドステートメントを実行する */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO_PARAM_INT);

/* colour カラムが NULL である fruit を検索する */
$sth->bindParam(':colour', $colour, PDO_PARAM_NULL);

$sth->execute();
?>
]]>
     </programlisting>
    </example>

    <example><title>INOUT パラメータを持つストアドプロシージャをコールする</title>
     <programlisting role='php'>
<![CDATA[
<?php
/* INOUT パラメータを持つストアドプロシージャをコールする */
$colour = 'red';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $colour, PDO_PARAM_STR|PDO_PARAM_INPUT_OUTPUT, 12);
$sth->execute();
print("After pureeing fruit, the colour is: $colour");
?>
]]>
     </programlisting>
    </example>

   </refsect1>

   <refsect1 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>PDO::prepare</function></member>
      <member><function>PDOStatement::execute</function></member>
     </simplelist>
    </para>

   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
