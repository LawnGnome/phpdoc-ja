<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.18 Maintainer: hirokawa Status: ready -->
<refentry id="function.preg-match">
 <refnamediv>
  <refname>preg_match</refname>
  <refpurpose>正規表現検索を行う</refpurpose>
 </refnamediv>
 <refsect1>
  <title>説明</title>
  <methodsynopsis>
   <type>mixed</type><methodname>preg_match</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>pattern</parameter>で指定した正規表現により
   <parameter>subject</parameter>を検索します。
  </para>
  <para>
   <parameter>matches</parameter>が指定された場合、検索結果が代入されます。
   $matches[0]はパターン全体にマッチしたテキストが代入され、
   $matches[1]は最初の括弧付きのサブパターンにマッチしたテキスト
   が代入され、といったようになります。
  </para>
  <para>
   <parameter>flags</parameter>には以下のフラグを指定できます。
   <variablelist>
    <varlistentry>
     <term>PREG_OFFSET_CAPTURE</term>
       <listitem>
      <simpara>
       このフラグが設定された場合、マッチする度に付随する文字列のオフ
       セットも返されます。これにより、返り値は配列となり、その各要素
       はマッチした文字列を要素<literal>0</literal>、
       <parameter>subject</parameter>の中でのその文字列オフセットを要
       素<literal>1</literal>とする配列となることに注意してください。
       このフラグは、<literal>PHP</literal> 4.3.0 以降で利用可能です。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
   <parameter>flags</parameter>パラメータは、<literal>PHP</literal>
   4.3.0 以降で利用可能です。
  </para>

  <para>
   通常、探索は対象文字列の先頭から開始されます。
   オプションのパラメータ<parameter>offset</parameter>は、検索の開始を始める
   場所として別の位置を指定するために使用けいます。
   <parameter>offset</parameter>パラメータは、
   PHP 4.3.3以降で使用可能です。
  </para>

  <note>
   <para>
    <parameter>offset</parameter> は、
    <literal>substr($subject, $offset)</literal> を
    <function>preg_match_all</function>の対象文字列の場所に指定するのと
    等価ではありません。
    これは、<parameter>pattern</parameter> には、
    <emphasis>^</emphasis>, <emphasis>$</emphasis> または
    <emphasis>(?&lt;=x)</emphasis>のようなアサーションを含めることができる
    ためです。
    以下の比較を行ってみてください。
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
print_r($matches);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
)
]]>
    </screen>
    <para>
     一方、この例では、
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
    </programlisting>
    <para>
     出力は以下のようになります。
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
    </screen>
   </informalexample>
  </note>

  <para>
   <function>preg_match</function>は、<parameter>pattern</parameter>
   がマッチした回数を返します。これは、0回(マッチせず)または1回となり
   ます。これは、最初にマッチした時点で<function>preg_match</function>
   は検索を止めるためです。逆に<function>preg_match_all</function>は、
   <parameter>subject</parameter>の終わりまで検索を続けます。
   <function>preg_match</function>は、エラーが発生した場合に&false;を
   返します。
  </para>
  <tip>
   <para>
    Do not use <function>preg_match</function> if you only want to check if
    one string is contained in another string. Use
    <function>strpos</function> or <function>strstr</function> instead as
    they will be faster.
   </para>
  </tip>
  <para>
   <example>
    <title>文字列"php"を探す</title>
    <programlisting role="php">
<![CDATA[
<?php
// パラメータのデリミタの後の"i"は大文字小文字を区別しない検索を示します
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>単語"web"を探す</title>
    <programlisting role="php">
<![CDATA[
<?php
/* パターン内の\bは単語の境界を示します。このため、独立した単語の
 *  "web"にのみマッチし、"webbing" または "cobweb"のような単語の一部にはマッチしません */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}

if (preg_match("/\bweb\b/i", "PHP is the website scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>URLからドメイン名を得る</title>
      <programlisting role="php">
<![CDATA[
<?php
// get host name from URL
preg_match("/^(http:\/\/)?([^\/]+)/i",
    "http://www.php.net/index.html", $matches);
$host = $matches[2];

// get last two segments of host name
preg_match("/[^\.\/]+\.[^\.\/]+$/", $host, $matches);
echo "domain name is: {$matches[0]}\n";
?>
]]>
    </programlisting>
    <para>
     この例の出力は以下となります。
    </para>
    <screen>
<![CDATA[
domain name is: php.net
]]>
    </screen>
   </example>
  </para>
  <para>
   <function>preg_match_all</function>, 
   <function>preg_replace</function>,
   <function>preg_split</function>も参照ください。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
