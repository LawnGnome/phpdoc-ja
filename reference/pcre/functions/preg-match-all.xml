<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.19 Maintainer: hirokawa Status: ready -->
<!-- Credits: haruki -->
<refentry id="function.preg-match-all">
 <refnamediv>
  <refname>preg_match_all</refname>
  <refpurpose>繰返し正規表現検索を行う</refpurpose>
 </refnamediv>
 <refsect1>
  <title>説明</title>
  <methodsynopsis>
   <type>int</type><methodname>preg_match_all</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">matches</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>subject</parameter> を検索し、
   <parameter>pattern</parameter> に指定した正規表現にマッチした
   すべての文字列を、<parameter>flags</parameter> で指定した
   順番で、<parameter>matches</parameter> に代入します。
  </para>
  <para>
   正規表現にマッチすると、そのマッチした文字列の後から
   検索が続行されます。
  </para>
  <para>
   <parameter>flags</parameter>は、以下のフラグの組み合わせとなります。
   (<constant>PREG_PATTERN_ORDER</constant> を
   <constant>PREG_SET_ORDER</constant> と組み合わせて使用することは
   無意味ですので注意してください。)
   <variablelist>
    <varlistentry>
     <term>PREG_PATTERN_ORDER</term>
     <listitem>
      <para>
       $matches[0] はパターン全体にマッチした文字列の配列、
       $matches[1] は第 1 のキャプチャ用サブパターンにマッチした文字列の配列、
       といった順番となります。
      </para>
      <para>
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U", 
    "<b>example: </b><div align=left>this is a test</div>", 
    $out, PREG_PATTERN_ORDER);
echo $out[0][0] . ", " . $out[0][1] . "\n";
echo $out[1][0] . ", " . $out[1][1] . "\n";
?>
]]>
        </programlisting>
        <para>
         この例の出力は以下のようになります。
        </para>
        <screen role="html">
<![CDATA[
<b>example: </b>, <div align=left>this is a test</div>
example: , this is a test
]]>
        </screen>
        <para>
	 $out[0]は、パターン全体にマッチした文字列の配列を有しており、
	 $out[1]は、タグで囲まれた文字列の配列を有しています。
	</para>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PREG_SET_ORDER</term>
     <listitem>
      <para>
       $matches[0]は 1 回目のマッチングでキャプチャした値の配列、
       $matches[1]は 2 回目のマッチングでキャプチャした値の配列、
       といった順序となります。
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U", 
    "<b>example: </b><div align=\"left\">this is a test</div>", 
    $out, PREG_SET_ORDER);
echo $out[0][0] . ", " . $out[0][1] . "\n";
echo $out[1][0] . ", " . $out[1][1] . "\n";
?>
]]>
        </programlisting>
        <para>
         この例の出力は以下のようになります。
        </para>
        <screen role="html">
<![CDATA[
<b>example: </b>, example: 
<div align="left">this is a test</div>, this is a test
]]>
        </screen>
       </informalexample>
      </para>
      <para>
       この場合、$matches[0] は 1 回目のマッチングによるもので、
       $matches[0][0] はパターン全体にマッチしたテキスト、
       $matches[0][1] は第 1 のサブパターンにマッチしたテキスト、
       といったようになります。同様に、$matches[1]は 2 回目の
       マッチングによるものといったようになります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PREG_OFFSET_CAPTURE</term>
     <listitem>
      <para>
       このフラグを設定した場合、各マッチに対応する文字列のオフセットも返されます。
       これにより、返り値は配列となり、配列の要素 <literal>0</literal> はマッチした文字列、 
       要素 <literal>1</literal> は <parameter>subject</parameter> における
       マッチした文字列のオフセット値となることに注意してください。 
       このフラグは、<literal>PHP</literal> 4.3.0 以降で利用可能です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   <parameter>flags</parameter> を指定しない場合は、
   <constant>PREG_PATTERN_ORDER</constant> が指定されたことになります。
  </para>

  <para>
   通常、検索は対象文字列の先頭から開始されます。
   オプションのパラメータ <parameter>offset</parameter> を使用して
   検索の開始位置を指定することも可能です。
   <parameter>offset</parameter>パラメータは、PHP 4.3.3 以降で使用できます。
  </para>
  
  <note>
   <para>
    <parameter>offset</parameter> を用いるのと、
    <literal>substr($subject, $offset)</literal> を
    <function>preg_match_all</function>の対象文字列として指定するのとは
    等価ではありません。
    これは、<parameter>pattern</parameter> には、
    <emphasis>^</emphasis>, <emphasis>$</emphasis> や
    <emphasis>(?&lt;=x)</emphasis> のような言明を含めることができるためです。
    これに関する例については、
    <function>preg_match</function> を参照してください。
   </para>
  </note>
    
  <para>
   パターンがマッチした総数を返します（ゼロとなる可能性もあります）。
   または、エラーが発生した場合に &false; を返します。
  </para>
  <para>
   <example>
    <title>テキストからすべての電話番号を得る</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Call 555-1212 or 1-800-555-1212", $phones);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>HTML タグにマッチするものを見付ける（貪欲）</title>
      <programlisting role="php">
<![CDATA[
<?php
// \\2 は後方参照の例。これは、pcre に正規表現中の括弧の 2 番目の
// 組、つまりこの場合は ([\w]+)、にマッチする。文字列が二重引用符で
// 括られているため、バックスラッシュの追加が必要。
$html = "<b>bold text</b><a href=howdy.html>click me</a>";

preg_match_all("/(<([\w]+)[^>]*>)(.*)(<\/\\2>)/", $html, $matches);

for ($i=0; $i< count($matches[0]); $i++) {
  echo "matched: " . $matches[0][$i] . "\n";
  echo "part 1: " . $matches[1][$i] . "\n";
  echo "part 2: " . $matches[3][$i] . "\n";
  echo "part 3: " . $matches[4][$i] . "\n\n";
}
?>
]]>
    </programlisting>
    <para>
     この例の出力は以下となります。
    </para>
    <screen role="html">
<![CDATA[
matched: <b>bold text</b>
part 1: <b>
part 2: bold text
part 3: </b>

matched: <a href=howdy.html>click me</a>
part 1: <a href=howdy.html>
part 2: click me
part 3: </a>
]]>
    </screen>
   </example>
  </para>
  <simpara>
   <function>preg_match</function>,
   <function>preg_replace</function> および
   <function>preg_split</function> も参照してください。
  </simpara>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
