<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.16 Maintainer: hirokawa Status: ready -->
<!-- Credits: haruki -->
<refentry id="function.preg-replace">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>正規表現検索および置換を行う</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>subject</parameter> に関して
   <parameter>pattern</parameter> を用いて検索を行い、
   <parameter>replacement</parameter> に置換します。
  </para>
  <para>
   <parameter>replacement</parameter> では、
   <literal>\\<replaceable>n</replaceable></literal> 形式または
   <literal><replaceable>$n</replaceable></literal>
   形式（PHP 4.0.4 以降）で参照を指定することができます。
   後者の形式の方が好ましい形式です。各参照は、<replaceable>n</replaceable> 
   番目のキャプチャ用サブパターンにマッチしたテキストにより置換されます。
   <replaceable>n</replaceable> は 0 から 99 までとすることができ、
   <literal>\\0</literal> または <literal>$0</literal> は
   パターン全体にマッチするテキストを参照します。キャプチャ用サブパターンの番号
   については、その左括弧が左から右に（1から）カウントされます。
  </para>
  <para>
   後方参照の直後に他の数字が続くような置換 (replacement) パターンを
   使用する場合（すなわち、マッチしたパターンの直後に数字リテラルを置く
   場合）、後方参照を行うために通常の <literal>\\1</literal> 表記を
   使用することができません。例えば、<literal>\\11</literal>　は、
   後方参照 <literal>\\1</literal> の後にリテラル
   <literal>1</literal> が続くのか、後方参照 <literal>\\11</literal> で
   その後には何も続かないのかが不明のため、
   <function>preg_replace</function> を混乱させる可能性があります。
   この場合、解決策は、<literal>\${1}1</literal> を使用することです。
   こうすることで、<literal>1</literal> はリテラルとなり、後方参照
   <literal>$1</literal> を明確に作成できます。
  </para>
  <para>
   <parameter>subject</parameter> が配列の場合、検索と置換は 
   <parameter>subject</parameter>
   の各要素に対して行われ、返り値も配列となります。
  </para>
  <para>
   <literal>e</literal> 修飾子を設定すると、<function>preg_replace</function>
   は、参照先の対応する置換を行う際に <parameter>replacement</parameter> 
   引数を PHP コードであるとして取り扱います。
   <parameter>replacement</parameter> には有効な PHP コードを記述してください。
   さもないと、<function>preg_replace</function> がある行でパースエラーが
   発生してしまいます。
  </para>
</refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       検索を行うパターン。文字列もしくは配列とすることができます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       置換を行う文字列もしくは文字列の配列。
       この引数が文字列で、<parameter>pattern</parameter> 引数が配列の場合、
       すべてのパターンがこの文字列に置換されます。
       <parameter>pattern</parameter> および <parameter>replacement</parameter>
       のいずれもが配列の場合、各 <parameter>pattern</parameter> は
       対応する <parameter>replacement</parameter> に置換されます。
       もし、<parameter>replacement</parameter> 配列が <parameter>pattern</parameter> 
       配列よりも少ない場合は、余った <parameter>pattern</parameter> は
       空文字に置換されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       検索・置換対象となる文字列もしくは文字列の配列
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       <parameter>subject</parameter> 文字列において、各パターンによる
       置換を行う最大回数。デフォルトは
       <literal>-1</literal> (制限無し)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       この引数が指定されると、置換回数が渡されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function> は、
   <parameter>subject</parameter> 引数が配列の場合は配列を、
   その他の場合は文字列を返します。
  </para>
  <para>
   パターンがマッチした場合、〔置換が行われた〕新しい <parameter>subject</parameter> 
   が返されます。マッチしなかった場合、<parameter>subject</parameter> が
   そのまま返されます。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.1pl2</entry>
       <entry>
        <parameter>limit</parameter> 引数が追加されました。
       </entry>
      </row>
      <row>
       <entry>4.0.4</entry>
       <entry>
        <parameter>replacement</parameter> 引数に '$n' 形式が使用できるようになりました。
       </entry>
      </row>
      <row>
       <entry>5.1.0</entry>
       <entry>
        <parameter>count</parameter> 引数が追加されました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>HTML をテキストに変換</title>
    <programlisting role="php">
<![CDATA[
<?php
// $document は、HTML 文章である。
// そのの HTML タグおよび javascript の部分と空白文字を
// 削除する。さらに、HTML エンティティを等価なテキストに
// 変換する。
$search = array ('@<script[^>]*?>.*?</script>@si', // javascript を削除
                 '@<[\/\!]*?[^<>]*?>@si',          // html タグを削除
                 '@([\r\n])[\s]+@',                // 空白文字を削除
                 '@&(quot|#34);@i',                // HTML エンティティを置
                 '@&(amp|#38);@i',
                 '@&(lt|#60);@i',
                 '@&(gt|#62);@i',
                 '@&(nbsp|#160);@i',
                 '@&(iexcl|#161);@i',
                 '@&(cent|#162);@i',
                 '@&(pound|#163);@i',
                 '@&(copy|#169);@i',
                 '@&#(\d+);@e');                    // php として評価

$replace = array ('',
                  '',
                  '\1',
                  '"',
                  '&',
                  '<',
                  '>',
                  ' ',
                  chr(161),
                  chr(162),
                  chr(163),
                  chr(169),
                  'chr(\1)');

$text = preg_replace($search, $replace, $document);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>数字リテラルが後に続く後方参照</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>添字配列の使用</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'The quick brown fox jumped over the lazy dog.';
$patterns[0] = '/quick/';
$patterns[1] = '/brown/';
$patterns[2] = '/fox/';
$replacements[2] = 'bear';
$replacements[1] = 'black';
$replacements[0] = 'slow';
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The bear black slow jumped over the lazy dog.
]]>
    </screen>
    <para>
     pattern と replacement を ksort すると、所望のものが得られます。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($patterns);
ksort($replacements);
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The slow black bear jumped over the lazy dog.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>複数値の置換</title>
    <programlisting role="php">
<![CDATA[
<?php
$patterns = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$replace = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($patterns, $replace, '{startDate} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>'e' 修飾子の使用</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e", 
             "'\\1'.strtoupper('\\2').'\\3'", 
             $html_body);
?>
]]>
    </programlisting>
    <para>
     入力テキストのすべての HTML タグを大文字に変換します。
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>空白の削除</title>
    <para>
     この例は、文字列から余分な空白を取り除きます。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);
// This will be 'foo o' now
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>count</parameter> 引数の使用</title>
    <programlisting role="php">
<![CDATA[
<?php
$count = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $count);
echo $count; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <parameter>pattern</parameter> および <parameter>replacement</parameter>
    を使用する際、配列の並び順に処理されます。添字は整数であっても、
    その並びは値の小さい順になっているとは<emphasis>限りません</emphasis>。
    ですから、配列の添字を使って、どの <parameter>pattern</parameter> 
    が、どの <parameter>replacement</parameter> に置換されるかを指定しようとする場合は、
    <function>preg_replace</function> をコールする前に、各配列に対し
    <function>ksort</function> を実行しておくべきです。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
