<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./ja/functions/pcre.xml, last change in rev 1.20 -->
<!-- EN-Revision: 1.47 Maintainer: hirokawa Status: ready -->
<refentry id="function.preg-replace-callback">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>
   正規表現検索を行い、コールバック関数を使用して置換を行う
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>説明</title>
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
  </methodsynopsis>
  <para>
   この関数の動作は、ほぼ <function>preg_replace</function> と同じで
   すが、<parameter>replacement</parameter>の代わりに
   <parameter>callback</parameter>を指定するところが異なります。この
   コールバック関数は、subject文字列でマッチした要素の配列が指定され
   てコールされます。このコールバック関数は、置換後の文字列返す必要
   があります。
  </para>
  <example>
   <title><function>preg_replace_callback</function> の例</title>
   <programlisting role='php'>
<![CDATA[
<?php
  // this text was used in 2002
  // we want to get this up to date for 2003
  $text = "April fools day is 04/01/2002\n";  
  $text.= "Last christmas was 12/24/2001\n";  
  
  // the callback function
  function next_year($matches) {
    // as usual: $matches[0] is the complete match
    // $matches[1] the match for the first subpattern
    // enclosed in '(...)' and so on
    return $matches[1].($matches[2]+1);
  }

  echo preg_replace_callback(
              "|(\d{2}/\d{2}/)(\d{4})|", 
              "next_year",
              $text);

  // result is:
  // April fools day is 04/01/2003
  // Last christmas was 12/24/2002
?>
]]>
   </programlisting>
  </example>
  <para>
   しばしば、1カ所だけで
   <function>preg_replace_callback</function>用の
   <parameter>callback</parameter>関数が必要となることがあります。
   この場合、<function>preg_replace_callback</function>をコールする際
   に使用するコールバック関数として匿名の関数を宣言するために
   <function>create_function</function>を使用することができます。
   このようにすることにより、コールに関する全ての情報を1ヶ所に集め、
   他の場所で使用されていないコールバック関数名で関数の名前空間を汚染
   しないようにすることができます。
  </para>
  <example>
   <title>
    <function>preg_replace_callback</function>と
    <function>create_function</function>
   </title>
   <programlisting role='php'>
<![CDATA[
<?php
  // a unix-style command line filter to convert uppercase 
  // letters at the beginning of paragraphs to lowercase 

	$fp = fopen("php://stdin", "r") or die("can't read stdin");
	while (!feof($fp)) {
		$line = fgets($fp);
		$line = preg_replace_callback(
              '|<p>\s*\w|', 
              create_function(
                // single quotes are essential here,
                // or alternative escape all $ as \$
                '$matches',
                'return strtolower($matches[0]);'
              ),
              $line
            );
		echo $line;
	}
	fclose($fp);
?>
]]>
   </programlisting>
  </example>
  <para>
   <function>preg_replace</function>,
   <function>create_function</function>も参照下さい。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
