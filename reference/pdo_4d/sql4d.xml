<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 300101 Maintainer: takagi Status: ready -->

<refentry xml:id="ref.pdo-4d.sql4d" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>4D で使える SQL</refname>
  <refpurpose>PDO および SQL 4D</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>
   4D は ANSI 89 標準規格を厳密に実装しています。
   使えるコマンドについて学ぶには 4D SQL ドキュメントを読むことを推奨します。
   マニュアルの URL は <link xlink:href="&url.4d.doc;">&url.4d.doc;</link>
   です。以下に 4D SQL 独特の特徴をまとめました。
   包括的なものではありませんが、導入としては使えるでしょう。
  </para>
  <para>
   <table>
    <title>4D SQL 独特の特徴</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>特徴</entry>
        <entry>代替策</entry>
        <entry>注意</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>INTEGER</entry>
        <entry>INT を使うよう SQL を変更する</entry>
        <entry>4Dv12.0 で整数をサポートする型は INT です。</entry>
       </row>
       <row>
        <entry>CHAR</entry>
        <entry>かわりに VARCHAR を使う</entry>
        <entry>4Dv12.0 ではサポートしていません。</entry>
       </row>
       <row>
        <entry>UNION</entry>
        <entry>未サポート。クエリを分割する</entry>
        <entry>4Dv12.0 ではサポートしていません。</entry>
       </row>
       <row>
        <entry>SELECT 1 + 1;</entry>
        <entry>SELECT 1 + 1 FROM _USER_SCHEMAS;</entry>
        <entry>FROM は必須です。</entry>
       </row>
       <row>
        <entry>FLOAT</entry>
        <entry>FLOAT 値を SQL 4D 関数 (CAST, ROUND, TRUNC あるいは TRUNCATE) で FLOAT あるいは STRING にキャストする</entry>
        <entry>現在のバージョンの PDO_4D ドライバではサポートしていません。</entry>
       </row>
       <row>
        <entry>強い型付け</entry>
        <entry>SQL クエリの作成時に気をつけ、PHP のコードがきちんと期待通りの型のデータを渡すようにする</entry>
        <entry>
         正しい型を 4D に渡さなければなりません。'1' (文字列) を INTEGER のカラムに挿入することはできません。
        </entry>
       </row>
       <row>
        <entry><function>PDO::execute($row)</function> は、テーブルのすべてのカラムが TEXT 型あるいは VARCHAR 型のときのみ動作する</entry>
        <entry>プリペアドステートメントを使い、正しい型を渡す</entry>
        <entry>PDO 拡張モジュールは、execute() の実行時にすべての値を文字列へキャストします。そして SQL データベース側で値をパースさせようとします。</entry>
       </row>
       <row>
        <entry>SELECT NULL FROM TABLE</entry>
        <entry>定数 NULL を使わず、テーブルから取り出す</entry>
        <entry>select のリストに定数 NULL を使うことはできません。</entry>
       </row>
       <row>
        <entry>SELECT * FROM TABLE WHERE 1</entry>
        <entry>WHERE 1 = 1 を使う</entry>
        <entry>WHERE 句で定数を使うことはできません。</entry>
       </row>
       <row>
        <entry>SHOW TABLES</entry>
        <entry>システムテーブルを使う</entry>
        <entry>
         テーブルやスキーマ、インデックスなどの一覧は、
         <literal>_USER_TABLES</literal>,  <literal>_USER_COLUMNS</literal>,  
         <literal>_USER_INDEXES</literal>,  <literal>_USER_CONSTRAINTS</literal>,  
         <literal>_USER_IND_COLUMNS</literal>,  <literal>_USER_CONS_COLUMNS</literal>
         および <literal>_USER_SCHEMAS</literal>
         といったシステムテーブルから取得します。
        </entry>
       </row>
       <row>
        <entry>SQL 構文の区切り文字</entry>
        <entry>
         次の関数を使って SQL の要素を保護する
         function sqlEscapeElement(elem) {
            return '[' . str_replace(']',']]', $elem) . ']';
         }
        </entry>
        <entry>
         SQL の要素名 (テーブル、フィールド、ユーザ、グループ、
         スキーマ、主キーなど) をエスケープするには、
         識別子全体を角括弧で囲み、さらに閉じ角括弧
         ']' は二重にしておかなければなりません。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

