<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.5 Maintainer: takagi Status: ready -->
<!-- Credits: shimooka -->
<section id="phar.fileformat">
 <title>Phar ファイルフォーマット</title>
 <para>
  Phar ファイルは、三つあるいは四つの部分から構成されています。
  <orderedlist>
   <listitem>
    <para>スタブ</para>
   </listitem>
   <listitem>
    <para>内容を説明するマニフェスト</para>
   </listitem>
   <listitem>
    <para>ファイルの内容</para>
   </listitem>
   <listitem>
    <para>[オプション] Phar の整合性を検証するためのシグネチャ</para>
   </listitem>
  </orderedlist>
 </para>
</section>
<section>
 <title>Phar ファイルのスタブ</title>
 <para>
  Phar のスタブは、単純な PHP ファイルです。必要最小限のスタブは、次のようになります。
 </para>
 <para>
  <programlisting role="php">
   <![CDATA[<?php __HALT_COMPILER();]]>
  </programlisting>
 </para>
 <para>
  スタブには、少なくとも <literal>__HALT_COMPILER();</literal> トークンが必要です。
  典型的なスタブは、次のように読み込み機能を含んでいます。
 </para>
 <para>
  <programlisting role="php">
   <![CDATA[
<?php
Phar::mapPhar();
include 'phar://myphar.phar/index.php';
__HALT_COMPILER();
   ]]>
  </programlisting>
 </para>
 <para>
  Phar スタブの内容には特に制限はありません。唯一の制約は、最後が
  <literal>__HALT_COMPILER();</literal> でなければならないということです。
  PHP の終了タグ <literal><![CDATA[?>]]></literal> は含めても含めなくてもかまいません。
  しかし、<literal>;</literal> と終了タグ
  <literal><![CDATA[?>]]></literal> の間にはひとつ以上の空白を含めてはいけません。
  もしそうしてしまうと、phar 拡張モジュールは
  その Phar アーカイブのマニフェストを処理できなくなります。
 </para>
</section>
<section>
 <title>Phar マニフェストの書式</title>
 <para>
  Phar マニフェストは高度に最適化された書式で、
  ファイル単位で圧縮やパーミッションの情報を指定することができ、
  さらにファイルのユーザやグループなど、独自に定義したメタデータも含めることができます。
  1 バイトをこえる大きさの値はリトルエンディアン形式のバイト順で保存されます。
  ただし API バージョンだけは例外です。これは 3 ニブルのデータですが、
  歴史的な理由によりビッグエンディアン形式のバイト順で保存されます。
 </para>
 <para>
  未使用のフラグはすべて将来の使用に備えて予約されています。
  したがって、独自の情報を保存するためにそれを使用してはいけません。
  特定のファイルについて独自の情報を保存するには、
  ファイル単位のメタデータ機能を使用します。
 </para>
 <para>
  Phar アーカイブマニフェストの基本的なファイルフォーマットは、次のようになります。
 </para>
 <para>
 <table>
  <title>グローバル Phar マニフェスト書式</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>バイト数</entry>
     <entry>説明</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>4 バイト</entry>
     <entry>マニフェスト全体のバイト長 (最大 1 MB)。</entry>
    </row>
    <row>
     <entry>4 バイト</entry>
     <entry>Phar 内のファイル数。</entry>
    </row>
    <row>
     <entry>2 バイト</entry>
     <entry>Phar マニフェストの API バージョン (現在は 1.0.0)。</entry>
    </row>
    <row>
     <entry>4 バイト</entry>
     <entry>グローバルな Phar ビットマップフラグ。</entry>
    </row>
    <row>
     <entry>4 バイト</entry>
     <entry>Phar のエイリアスの長さ。</entry>
    </row>
    <row>
     <entry>??</entry>
     <entry>Phar のエイリアス (先ほどの長さに基づきます)。</entry>
    </row>
    <row>
     <entry>4 バイト</entry>
     <entry>Phar のメタデータの長さ (存在しない場合は <literal>0</literal>)。</entry>
    </row>
    <row>
     <entry>??</entry>
     <entry>シリアライズ化された Phar メタデータ。<function>serialize</function> 形式で格納される。</entry>
    </row>
    <row>
     <entry>最低でも 24 * エントリ数ぶんのバイト</entry>
     <entry>各ファイルのエントリ</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 </para>
</section>
<section>
 <title>グローバルな Phar ビットマップフラグ</title>
 <para>
  これが、Phar 拡張モジュールが現在 Phar フラットビットマップとして認識するフラグです。
 </para>
 <para>
  <table>
   <title>認識するビットマップ値</title>
   <tgroup cols="2">
   <thead>
    <row>
     <entry>値</entry>
     <entry>説明</entry>
    </row>
    </thead>
    <tbody>
    <row>
     <entry><literal>0x00010000</literal></entry>
      <entry>設定されている場合、この Phar には検証用シグネチャが含まれます。</entry>
     </row>
     <row>
      <entry><literal>0x00001000</literal></entry>
      <entry>
       設定されている場合、この Phar には
       zlib 圧縮されたファイルが少なくともひとつ含まれます。
      </entry>
     </row>
     <row>
      <entry><literal>0x00002000</literal></entry>
      <entry>
       設定されている場合、この Phar には
       bzip 圧縮されたファイルが少なくともひとつ含まれます。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</section>
<section>
 <title>Phar マニフェストのファイルエントリの定義</title>
 <para>
  マニフェスト内の各ファイルについて、次のような情報が含まれます。
 </para>
 <para>
  <table>
   <title>Phar マニフェストのファイルエントリ</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>バイト数</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>4 バイト</entry>
      <entry>ファイル名の長さを表すバイト数。</entry>
     </row>
     <row>
      <entry>??</entry>
      <entry>ファイル名 (先ほど指定した長さになります)。</entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>圧縮前のファイルサイズを表すバイト数。</entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>ファイルの Unix タイムスタンプ。</entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>圧縮後のファイルサイズを表すバイト数。</entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>圧縮前のファイルの CRC32 チェックサム。</entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>ファイル固有のビットマップフラグ。</entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>シリアライズされたファイルのメタデータの長さ (存在しない場合は <literal>0</literal>)。</entry>
     </row>
     <row>
      <entry>??</entry>
      <entry>シリアライズされたファイルのメタデータ。<function>serialize</function> の形式で格納される。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  ファイル固有のビットマップ値として認識される値は次のとおりです。
 </para>
 <para>
  <table>
   <title>認識されるビットマップ値</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>値</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>0x000001FF</literal></entry>
      <entry>
       これらのビットは、ファイルの特定のパーミッションを定義するために予約されています。
       このパーミッションは <function>fstat</function> で用いられ、
       ファイルを展開する際に特定のパーミッションを指定することができます。
      </entry>
     </row>
     <row>
      <entry><literal>0x00001000</literal></entry>
      <entry>
       設定されている場合、このファイルは
       zlib で圧縮されています。
      </entry>
     </row>
     <row>
      <entry><literal>0x00002000</literal></entry>
      <entry>
       設定されている場合、このファイルは
       bzip で圧縮されています。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</section>
<section>
 <title>Phar のシグネチャの書式</title>
 <para>
  シグネチャを含む Phar は、常にシグネチャを保持しています。
  シグネチャの場所は、
  ローダ、マニフェスト、実際のファイルの内容に続く
  Phar アーカイブの最後の部分です。
  現在サポートしているシグネチャのフォーマットは
  MD5 および SHA1 の二種類です。
 </para>
 <para>
  <table>
   <title>シグネチャのフォーマット</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>バイト長</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>16 あるいは 20 バイト</entry>
      <entry>
       実際のシグネチャ。SHA1 の場合は 20 バイト、
       MD5 の場合は 16 バイトとなります。
      </entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>
       シグネチャのフラグ。<literal>0x0001</literal> は
       MD5 シグネチャ、そして <literal>0x0002</literal> は
       SHA1 シグネチャを表します。
      </entry>
     </row>
     <row>
      <entry>4 バイト</entry>
      <entry>
       <literal>GBMB</literal> という固定値で、
       シグネチャが存在することを表します。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->