<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.2 $ -->
<!-- sync: 1.4 -->
<refentry id="function.sqlite-create-function">
 <refnamediv>
  <refname>sqlite_create_function</refname>
  <refpurpose>
   SQLステートメントで使用するために"通常の"ユーザ定義関数を登録する
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>説明</title>
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_function</methodname>
   <methodparam><type>resource</type><parameter>db</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_create_function</function> により、SQLiteにPHP関数
   を<acronym>UDF</acronym> (ユーザ定義関数)として登録することが可能で
   す。この関数は、SQLステートメントの中からコールできます。
  </para>
  <para>
   <parameter>db</parameter>には拡張したいデータベースハンドルを指定、
   <parameter>function_name</parameter> は、SQLステートメントで使用す
   る関数の名前を指定、<parameter>callback</parameter>はSQL関数を処理
   するためにコールされるPHP関数を指定する有効なPHPコールバック関数で
   す。オプションのパラメータ<parameter>num_args</parameter>は、
   SQLiteの式パーサ/評価器によりヒント情報として使用されます。この値は、
   使用する関数が一定の数のパラメータのみを指定可能で、特定の値を指定
   する場合に推奨されます。
  </para>
  <para>
   UDFは、SELECTおよびUPDATEステートメント、そして、トリガーの中のよう
   に関数をコールできる全てのSQLステートメントで使用可能です。
  </para>

  <para>
   <example>
    <title><function>sqlite_create_function</function>の例</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_and_reverse($string) {
    return strrev(md5($string));
}

sqlite_create_function($db, 'md5rev', 'md5_and_reverse', 1);

$rows = sqlite_array_query($db, 'SELECT md5rev(filename) from files');
?>]]>
    </programlisting>
   </example>
  </para>
  <para>
   この例では、文字列のMD5サムを計算し、順番を反転する関数が記述されています。
   このSQLステートメントが実行された場合、関数により変換されたファイル
   名の値を返します。
   <parameter>$rows</parameter> により返されるデータには、処理結果が含
   まれています。
  </para>
  <para>
   この技術の美しいところは、データのクエリーを実行した後で、
   foreach() ループにより結果を処理する必要がないことです。
  </para>

  <para>
   PHP は、データベースが最初にオープンされる際に
   <literal>php</literal>という名前の特別な関数を登録します。
   このphp関数は、事前に登録することなしにあらゆるPHP関数をコールする
   ために使用可能です。
  </para>
  <para>
   <example>
    <title>PHP関数の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = sqlite_array_query($db, "SELECT php('md5', filename) from files");
?>]]>
    </programlisting>
    <para>
     この例は、データベースの各 <literal>filename</literal> カラムにつ
     いて <function>md5</function> をコールし、その結果を
     <parameter>$rows</parameter>に返します。
    </para>
   </example>
  </para>
  <note>
   <para>
    性能上の理由から、PHPはUDFとの間で送受信されるバイナリデータを自動
    的にエンコード/デコードしません。この方法でバイナリデータを処理す
    る必要がある場合、パラメータを手動でエンコード/デコードし、
    値を返すようにする必要があります。
    詳細については、<function>sqlite_udf_encode_binary</function>
    および<function>sqlite_udf_decode_binary</function>を参照して下さ
    い。
   </para>
  </note>
  <tip>
   <para>
    適用するアプリケーションの主要な要求が高い性能でない限り、バイナリ
    データの処理を行うためにUDFを使用することは推奨されません。
   </para>
  </tip>
  <tip>
   <para>
    SQLiteのネーティブSQL関数をオーバーライドするために
    <function>sqlite_create_function</function>および
    <function>sqlite_create_aggregate</function>も使用可能です。
   </para>
  </tip>
  <para>
   <function>sqlite_create_aggregate</function>も参照して下さい。
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
