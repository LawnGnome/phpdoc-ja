<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.1 Maintainer: hirokawa Status: ready -->
<refentry id="function.sqlite-create-aggregate">
 <refnamediv>
  <refname>sqlite_create_aggregate</refname>
  <refpurpose>SQLステートメントで使用する集約UDFを登録する</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_aggregate</methodname>
   <methodparam><type>resource</type><parameter>db</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>step_func</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>finalize_func</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_create_aggregate</function>は、
   <function>sqlite_create_function</function>に似ていますが、
   クエリの全レコードを通じて集約された結果を計算するために使用される
   関数を登録するところが異なります。
  </para>
  <para>
   この関数と   <function>sqlite_create_function</function> の主な違い
   は、二つの関数が集約を管理するために必要であることです。
   <parameter>step_func</parameter>は、結果セットの各レコードに関して
   コールされます。PHP関数は、結果を加算し、集約コンテキストに保存する
   必要があります。
   全レコードが処理された後、
   <parameter>finalize_func</parameter>がコールされ、
   集約コンテキストからデータが取得され、結果が返されます。
  </para>
  <para>
   <example>
    <title>max_length 集約関数の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four'
   'five'
   'six',
   'seven',
   'eight',
   'nine'
   'ten'
   );
$db = sqlite_open(':memory:');
sqlite_query($db, "CREATE TABLE strings(a)");
foreach ($data as $str) {
  sqlite_query($db, "INSERT INTO strings VALUES('" .
    sqlite_escape_string($str) . "')");
}

function max_len_step(&$context, $string) {
  if (strlen($string) > $context) {
    $context = strlen($string);
  }
}

function max_len_finalize(&$context) {
  return $context;
}

sqlite_create_aggregate($db, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($db, 'SELECT max_len(a) from strings'));

?>]]>
    </programlisting>
   </example>
  </para>
  <para>
   この例では、テーブルのカラムの中で最も長い文字列の長さを計算する集
   約関数を作成しています。各レコードについて、この
   <literal>max_len_step</literal> 関数がコールされ、
   <parameter>context</parameter> パラメータが渡されます。このcontext
   パラメータは、他のPHP変数と全同じで、配列やオブジェクトを値として代
   入することが可能です。この例では、このパラメータを単にこれまでの処
   理での最大長を保持するために使用しています。つまり、
   <parameter>string</parameter> の長さがカレントの最大長よりも長かっ
   た場合、この新しい最大長を保持するためにcontextを更新します。
  </para>
  <para>
   全てのレコードが処理された後、SQLite は、集約結果を定義するために
   <literal>max_len_finalize</literal> 関数をコールします。
   ここで、<parameter>context</parameter>にあるデータに基づき何らかの
   計算を行うことができます。しかし、上の簡単な例では、クエリを行った
   際に結果は計算されているので、単にcontextの値を返しています。
  </para>
  <note>
   <para>
    上の例は、カラムにバイナリデータが含まれている場合には正しく動作し
    ません。その理由とバイナリエンコーディングへの対応方法に関しては、
    マニュアルの
    <function>sqlite_udf_decode_binary</function> のページをご覧下さい。
   </para>
  </note>
  <tip>
   <para>
    contextの中に値のコピーを保存した後、最後にこれらを処理することは
    推奨されません。これは、SQLiteがクエリ処理に多くのメモリを使用する
    ことになるからです。各レコードが32バイト長の文字列を含む百万件のレ
    コードをメモリに保存するために、どれだけのメモリが必要かを考えてみ
    て下さい。
   </para>
  </tip>
  <tip>
   <para>
    SQLiteのネーティブSQL関数をオーバーライドするために
    <function>sqlite_create_function</function>および
    <function>sqlite_create_aggregate</function>を使用することができ
    ます。
   </para>
  </tip>
  <para>
   <function>sqlite_create_function</function>、
   <function>sqlite_udf_encode_binary</function>、
   <function>sqlite_udf_decode_binary</function>も参照して下さい。
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
