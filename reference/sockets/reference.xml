<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
 <reference id="ref.sockets">
  <title>ソケット関数</title>
  <titleabbrev>ソケット</titleabbrev>

  <partintro>
   &warn.experimental;
   <simpara>
    ソケット拡張により、ソケット通信関数への低レベルなインターフェース
    が実装され、クライアントとしてだけでなく、ソケットサーバーとして動
    作することが可能となります。
   </simpara>
   <para>
    ここに既述されたソケット関数はPHP拡張モジュールの一部であり、コン
    パイル時に<command>configure</command>にオプション<option
    role="configure">--enable-sockets</option>を指定することにより使用
    可能となります。
   </para>
   <para>
    より一般的なクライアントサイドのソケットインターフェースについては、
    <function>fsockopen</function> および
    <function>pfsockopen</function>を参照下さい。
   </para>
   <para>
    ここで説明するソケット関数を使用する場合、多くの関数は、C言語に同
    じ名前の関数が存在しますが、定義が異なっていることに注意して下さい。
    混乱を避けるには、説明をよく読んで下さい。
   </para>
   <para>
    このようにソケットソケットプログラミングと異なっている点はあります
    が、それでも有用な多くのUNIX man ページを参照することができます。
    Web上にC言語のソケットプログラミングのチュートリアル情報が存在し、
    その多くは、若干の修正により、PHPにおけるソケットプログラミングに
    適当することが可能です。
   </para>
   <para>
    <example>
     <title>ソケットの例: 簡易TCP/IPサーバー</title>
     <para>
      この例は、簡単な応答サーバーです。変数<varname>address</varname>
      と<varname>port</varname>を設定と実行環境に合うように変更して下
      さい。このサーバーに次のようなコマンドで接続することが可能です。
      : <command>telnet 192.168.1.53 10000</command> (ただし、アドレス
      とポートは設定に合わせます)入力したものは、サーバー側の出力とな
      り、エコーバックされます。接続を閉じるには、'quit'を入力します。
     </para>
     <programlisting role="php">
<![CDATA[
<?php
error_reporting (E_ALL);

/* Allow the script to hang around waiting for connections. */
set_time_limit (0);

$address = '192.168.1.53';
$port = 10000;

if (($sock = socket_create (AF_INET, SOCK_STREAM, 0)) < 0) {
    echo "socket_create() failed: reason: " . socket_strerror ($sock) . "\n";
}

if (($ret = socket_bind ($sock, $address, $port)) < 0) {
    echo "socket_bind() failed: reason: " . socket_strerror ($ret) . "\n";
}

if (($ret = socket_listen ($sock, 5)) < 0) {
    echo "socket_listen() failed: reason: " . socket_strerror ($ret) . "\n";
}

do {
    if (($msgsock = socket_accept($sock)) < 0) {
        echo "socket_accept() failed: reason: " . socket_strerror ($msgsock) . "\n";
        break;
    }
    do {
        $buf = socket_read ($msgsock, 2048);
        if ($buf == FALSE) {
            echo "socket_read() failed: reason: " . socket_strerror ($ret) . "\n";
            break 2;
        }
        if (!$buf) {
            break 2;
        }
        $buf = trim ($buf);
        if ($buf == 'quit') {
            socket_close ($msgsock);
            break 2;
        }
        $talkback = "PHP: You said '$buf'.\n";
        socket_write ($msgsock, $talkback, strlen ($talkback));
        echo "$buf\n";
    } while (true);
    socket_close ($msgsock);
} while (true);

socket_close ($sock);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>ソケットの例: 簡易 TCP/IP クライアント</title>
     <para>
      この例は、簡単な一回限りのHTTPクライアントです。ここでは、あるペー
      ジに接続し、HEADリクエストを送信し、応答を出力た後、終了します。
     </para>
     <programlisting role="php">
<![CDATA[
<?php
error_reporting (E_ALL);

echo "<h2>TCP/IP Connection</h2>\n";

/* Get the port for the WWW service. */
$service_port = getservbyname ('www', 'tcp');

/* Get the IP address for the target host. */
$address = gethostbyname ('www.php.net');

/* Create a TCP/IP socket. */
$socket = socket_create (AF_INET, SOCK_STREAM, 0);
if ($socket < 0) {
    echo "socket_create() failed: reason: " . socket_strerror ($socket) . "\n";
} else {
    "socket_create() successful: " . socket_strerror ($socket) . "\n";
}

echo "Attempting to connect to '$address' on port '$service_port'...";
$result = socket_connect ($socket, $address, $service_port);
if ($result < 0) {
    echo "socket_connect() failed.\nReason: ($result) " . socket_strerror($result) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.0\r\n\r\n";
$out = '';

echo "Sending HTTP HEAD request...";
socket_write ($socket, $in, strlen ($in));
echo "OK.\n";

echo "Reading response:\n\n";
while ($out = socket_read ($socket, 2048)) {
    echo $out;
}

echo "Closing socket...";
socket_close ($socket);
echo "OK.\n\n";
?>
]]>
     </programlisting>
    </example>
   </para>
  </partintro>








































&reference.sockets.functions;

 </reference>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
 
