<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.23 Maintainer: hirokawa Status: ready -->
<!-- Purpose: remote.other -->
<!-- Membership: bundled -->

 <reference id="ref.sockets">
  <title>ソケット関数</title>
  <titleabbrev>ソケット</titleabbrev>

  <partintro>

   <section id="sockets.intro">
    &reftitle.intro;
    <para>
     ソケット拡張モジュールは、一般的な
     BSD ソケットに基づくソケット通信に関する低レベルインターフェースを実装し、
     クライアントだけでなく、
     ソケットサーバとして動作させることが可能となります。
    </para>
    <para>
     より一般的なクライアントサイドのソケットインターフェースについては、
     <function>stream_socket_client</function>、
     <function>stream_socket_server</function>、
     <function>fsockopen</function> および
     <function>pfsockopen</function> を参照ください。
    </para>
    <para>
     ここで説明するソケット関数を使用する場合、多くの関数は
     C 言語に同じ名前の関数が存在しますが、
     しばしば定義が異なっていることに注意してください。
     混乱を避けるには、説明をよく読んでください。
    </para>
    <para>
     このようにソケットプログラミングと異なっている点はありますが、
     それでも有用な多くの Unix man ページを参照することができます。
     Web 上に C 言語のソケットプログラミングのチュートリアル情報が存在し、
     その多くは、若干の修正により、
     PHP におけるソケットプログラミングに適用することが可能です。
     <ulink url="&url.socket.faq;">Unix Socket FAQ</ulink> が、
     手始めとして適しているでしょう。
    </para>
    <note>
     <para>
      &pecl.moved-ver;5.3.0.
     </para>
    </note>
   </section>

   <section id="sockets.requirements">
    &reftitle.required;
    &no.requirement;
   </section>
   
   &reference.sockets.configure;
   
   <section id="sockets.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="sockets.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.sockets.constants;

   <section id="sockets.errors">
    <title>ソケットのエラー</title>
    <para>
     ソケット拡張モジュールは、
     強力な BSD ソケットへの有用なインターフェースを提供するために作成されました。
     関数は、Win32 および Unix の実装において等しく動作するように注意が払われています。
     ソケット関数の多くは特定の条件で失敗し、エラーを記述する
     <constant>E_WARNING</constant> メッセージを出力します。
     これは、時々開発者が望まない時に発生することがあります。例えば、
     関数 <function>socket_read</function> は突然
     <constant>E_WARNING</constant> メッセージを出力する可能性があります。
     これは、予測しない接続断が発生したためです。
     <literal>@</literal> 演算子により警告出力を抑制し、
     <function>socket_last_error</function>
     関数によりアプリケーション内でエラーコードを取得することが一般に行われています。
     エラーを記述する文字列を取得するためにこのエラーコードを指定して
     <function>socket_strerror</function> 関数をコールすることが可能です。
     詳細は、この関数の説明を参照してください。
    </para>
    <note>
     <para>
      <constant>E_WARNING</constant> メッセージは、
      ソケット拡張モジュールにより英語で生成されますが、取得されるエラーメッセージは、
      現在のロケール (<constant>LC_MESSAGES</constant>) に依存します。
      <programlisting role="php">
<![CDATA[
Warning - socket_bind() unable to bind address [98]: Die Adresse wird bereits verwendet
]]>
      </programlisting>
     </para>
    </note>
   </section>
   
   <section id="sockets.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>ソケットの例: 簡易 TCP/IP サーバ</title>
      <para>
       この例は、簡単な応答サーバです。変数 <varname>address</varname>
       と <varname>port</varname> を設定と実行環境に合うように変更してください。
       このサーバに次のようなコマンドで接続することが可能です。
       : <command>telnet 192.168.1.53 10000</command> (ただし、
       アドレスとポートは設定に合わせます)入力したものは、サーバ側の出力となり、
       エコーバックされます。接続を閉じるには、'quit' を入力します。
      </para>
      <programlisting role="php">
<![CDATA[
#!/usr/local/bin/php -q
<?php
error_reporting(E_ALL);

/* Allow the script to hang around waiting for connections. */
set_time_limit(0);

/* Turn on implicit output flushing so we see what we're getting
 * as it comes in. */
ob_implicit_flush();

$address = '192.168.1.53';
$port = 10000;

if (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {
    echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
}

if (socket_bind($sock, $address, $port) === false) {
    echo "socket_bind() failed: reason: " . socket_strerror(socket_last_error($sock)) . "\n";
}

if (socket_listen($sock, 5) === false) {
    echo "socket_listen() failed: reason: " . socket_strerror(socket_last_error($sock)) . "\n";
}

do {
    if (($msgsock = socket_accept($sock)) === false {
        echo "socket_accept() failed: reason: " . socket_strerror(socket_last_error($sock)) . "\n";
        break;
    }
    /* Send instructions. */
    $msg = "\nWelcome to the PHP Test Server. \n" .
        "To quit, type 'quit'. To shut down the server type 'shutdown'.\n";
    socket_write($msgsock, $msg, strlen($msg));

    do {
        if (false === ($buf = socket_read($msgsock, 2048, PHP_NORMAL_READ))) {
            echo "socket_read() failed: reason: " . socket_strerror(socket_last_error($msgsock)) . "\n";
            break 2;
        }
        if (!$buf = trim($buf)) {
            continue;
        }
        if ($buf == 'quit') {
            break;
        }
        if ($buf == 'shutdown') {
            socket_close($msgsock);
            break 2;
        }
        $talkback = "PHP: You said '$buf'.\n";
        socket_write($msgsock, $talkback, strlen($talkback));
        echo "$buf\n";
    } while (true);
    socket_close($msgsock);
} while (true);

socket_close($sock);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>ソケットの例: 簡易 TCP/IP クライアント</title>
      <para>
       この例は、簡単な一回限りの HTTP クライアントです。ここでは、
       あるページに接続して HEAD リクエストを送信し、応答を出力た後で終了します。
      </para>
      <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);

echo "<h2>TCP/IP Connection</h2>\n";

/* Get the port for the WWW service. */
$service_port = getservbyname('www', 'tcp');

/* Get the IP address for the target host. */
$address = gethostbyname('www.example.com');

/* Create a TCP/IP socket. */
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket === false) {
    echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
} else {
    echo "OK.\n";
}

echo "Attempting to connect to '$address' on port '$service_port'...";
$result = socket_connect($socket, $address, $service_port);
if ($result === false) {
    echo "socket_connect() failed.\nReason: ($result) " . socket_strerror(socket_last_error($socket)) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.1\r\n";
$in .= "Host: www.example.com\r\n";
$in .= "Connection: Close\r\n\r\n";
$out = '';

echo "Sending HTTP HEAD request...";
socket_write($socket, $in, strlen($in));
echo "OK.\n";

echo "Reading response:\n\n";
while ($out = socket_read($socket, 2048)) {
    echo $out;
}

echo "Closing socket...";
socket_close($socket);
echo "OK.\n\n";
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.sockets.functions;

 </reference>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
 
