<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.17 Maintainer: takagi Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.socket-get-option">
 <refnamediv>
  <refname>socket_get_option</refname>
  <refpurpose>ソケットのオプションを取得する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>socket_get_option</methodname>
   <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
   <methodparam><type>int</type><parameter>level</parameter></methodparam>
   <methodparam><type>int</type><parameter>optname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_get_option</function> 関数は、ソケット
   <parameter>socket</parameter> のオプション <parameter>optname</parameter>
   の値を取得します。<function>socket_get_option</function> は、失敗した場合に
   &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       <function>socket_create</function> あるいは <function>socket_accept</function>
       で作成したソケットリソース。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>level</parameter></term>
     <listitem>
      <para>
       <parameter>level</parameter> パラメータは、オプションのプロトコルレベルを指定します。
       例えば、オプションをソケットレベルで取得するには
       <parameter>level</parameter> パラメータに <constant>SOL_SOCKET</constant> を指定します。
       <constant>TCP</constant> のようなそれ以外のレベルの場合、そのレベルのプロトコル番号を指定します。
       プロトコル番号は <function>getprotobyname</function>
       関数を使用して取得可能です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>optname</parameter></term>
     <listitem>
      <table>
       <title>使用可能なソケットオプション</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>オプション</entry>
          <entry>説明</entry>
          <entry>型</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>SO_DEBUG</constant></entry>
          <entry>
           デバッグ情報を記録するかどうかを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_BROADCAST</constant></entry>
          <entry>
           ブロードキャストメッセージの送信がサポートされているかどうかを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_REUSEADDR</constant></entry>
          <entry>
           ローカルアドレスが再使用可能するかどうかを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_KEEPALIVE</constant></entry>
          <entry>
           定期的なメッセージの送信によって接続がアクティブになっているかどうかを報告します。
           もしソケットがこれらのメッセージに応答できなかった場合、
           接続は崩壊し、ソケットへの書き込みを行うと SIGPIPE シグナルを受け取ります。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_LINGER</constant></entry>
          <entry>
           <para>
            データがまだ残っているうちに <function>socket_close</function>
            をコールした場合に、<parameter>socket</parameter> を残存させるかどうかを報告します。
            デフォルトでは、ソケットが閉じられる際には未送信のデータをすべて送信しようとします。
            接続ベースのソケットでは、
            <function>socket_close</function> は接続先がデータを認識するまで閉じるのを待ちます。
           </para>
           <para>
            <varname>l_onoff</varname> が非ゼロで
            <varname>l_linger</varname> がゼロの場合は、
            その時点で未送信のデータはすべて破棄されます。
            接続ベースのソケットの場合、接続先には RST (リセット)
            を送信します。
           </para>
           <para>
            一方 <varname>l_onoff</varname> が非ゼロで
            <varname>l_linger</varname> も非ゼロの場合は、
            <function>socket_close</function> は
            全データを送信し終えるか <varname>l_linger</varname>
            で指定した時間が経過するまで処理をブロックします。
            ソケットが非ブロックモードの場合は、
            <function>socket_close</function> は失敗してエラーを返します。
           </para>
          </entry>
          <entry>
           <type>array</type>。配列に含まれるキーは
           <varname>l_onoff</varname> および
           <varname>l_linger</varname> のふたつ。
          </entry>
         </row>
         <row>
          <entry><constant>SO_OOBINLINE</constant></entry>
          <entry>
           <parameter>socket</parameter>
           が帯域外のデータをインラインに残し続けるかを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_SNDBUF</constant></entry>
          <entry>
           送信バッファのサイズを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>          
         </row>
         <row>
          <entry><constant>SO_RCVBUF</constant></entry>
          <entry>
           受信バッファのサイズを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>         
         </row>
         <row>
          <entry><constant>SO_ERROR</constant></entry>
          <entry>
           エラーステータスに関する情報を報告し、それをクリアします。
          </entry>
          <entry>
           <type>int</type> (<function>socket_set_option</function> で設定することはできません)
          </entry>
         </row>
         <row>
          <entry><constant>SO_TYPE</constant></entry>
          <entry>
           <parameter>socket</parameter> の型 (たとえば <constant>SOCK_STREAM</constant>) を報告します。
          </entry>
          <entry>
           <type>int</type> (<function>socket_set_option</function> で設定することはできません)
          </entry>
         </row>
         <row>
          <entry><constant>SO_DONTROUTE</constant></entry>
          <entry>
           送信メッセージがルータを越えるかどうかを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_RCVLOWAT</constant></entry>
          <entry>
           <parameter>socket</parameter> の入力操作を行う際の最小バイト数を報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>SO_RCVTIMEO</constant></entry>
          <entry>
           入力操作のタイムアウト値を報告します。
          </entry>
          <entry>
           <type>array</type>。配列に含まれるキーはふたつ。
           <varname>sec</varname> はタイムアウトの秒単位の部分で、
           <varname>usec</varname> はタイムアウトのミリ秒単位の部分。
          </entry>
         </row>
         <row>
          <entry><constant>SO_SNDTIMEO</constant></entry>
          <entry>
           出力関数がフロー制御のためにブロックするタイムアウト値を報告します。
          </entry>
          <entry>
           <type>array</type>。配列に含まれるキーはふたつ。
           <varname>sec</varname> はタイムアウトの秒単位の部分で、
           <varname>usec</varname> はタイムアウトのミリ秒単位の部分。
          </entry>
         </row>
         <row>
          <entry><constant>SO_SNDLOWAT</constant></entry>
          <entry>
           <parameter>socket</parameter>
           の出力操作を行う際の最小バイト数を報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>TCP_NODELAY</constant></entry>
          <entry>
           Nagle TCP アルゴリズムが無効になっているかどうかを報告します。
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   指定したオプションの値、あるいはエラー時に &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>socket_set_option</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = socket_create_listen(1223);

$linger = array('l_linger' => 1, 'l_onoff' => 1);
socket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);

var_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.0</entry>
       <entry>
        関数の名前が変わりました。以前は
        <literal>socket_getopt()</literal> という名前でした。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
