<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: takagi Status: ready -->
  <refentry id="function.setcookie">
   <refnamediv>
    <refname>setcookie</refname>
    <refpurpose>クッキーを送信する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>setcookie</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>value</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>path</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>domain</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>secure</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>setcookie</function> は、その他のヘッダ情報と共に
     送信するクッキーを定義します。 ほかのヘッダ情報と同様に、
     クッキーは、スクリプトによる他のあらゆる出力よりも<emphasis>前に</emphasis>
     送信される必要があります（これはHTTPプロトコルの制約です）。
     <literal>&lt;html&gt;</literal> や <literal>&lt;head&gt;</literal> タグはもちろん
     空白も含め、あらゆる出力よりも前にこの関数をコールするようにしなければなりません。
     もしもこの関数をコールする前に何らかの出力がある場合には、
     <function>setcookie</function> は失敗し &false; を返します。
     <function>setcookie</function> が正常に実行されると、&true; を返します。
     この関数はユーザーがクッキーを受け入れたかどうかを示すことはしません。
    </para>
    <note>
     <para>
      PHP 4 では、この関数をコールする前でも出力できるように、
      スクリプトの全ての出力をサーバ内にバッファリングさせることができます。
      そのためには、<function>ob_start</function> や <function>ob_end_flush</function>
      を使用するか、あるいは &php.ini; の <literal>output_buffering</literal>
      設定を使用します。
     </para>
    </note>    
    <para>
     <parameter>name</parameter> 以外の全ての引数はオプションです。
     全ての引数に関して引数の指定をスキップするために空文字列
     (<emphasis>&quot;&quot;</emphasis>) とすることが可能です。
     <parameter>expire</parameter> および <parameter>secure</parameter>
     は数値なので、空文字列でスキップすることはできません。代わりにゼロ
     (<emphasis>0</emphasis>) を使用してください。
     以下の表は <function>setcookie</function> の引数の説明です。
     <function>setcookie</function> 関数の各引数が
     どのように作用するかを知るには
     <ulink url="&spec.cookies;">Netscape cookie specification</ulink>
     を、そして HTTP クッキーの動作についての詳細な情報は
     と<ulink url="&url.rfc;2965">RFC 2965</ulink> を参照ください。
    </para>
    <para>
     <table>
      <title><function>setcookie</function> 引数の説明</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>引数</entry>
         <entry>説明</entry>
         <entry>例</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><parameter>name</parameter></entry>
         <entry>
          クッキーの名前
         </entry>
         <entry>
          'cookiename' が <varname>$_COOKIE['cookiename'] としてコールされます。</varname>
         </entry>
        </row>
        <row>
         <entry><parameter>value</parameter></entry>
         <entry>
          クッキーの値。この値はクライアントのコンピュータに保存されますので、
          重要な情報は格納しないでください。
         </entry>
         <entry>
          <parameter>name</parameter> が 'cookiename' だとすると、
          その値は <varname>$_COOKIE['cookiename']</varname> で取得することができます。
         </entry>
        </row>
        <row>
         <entry><parameter>expire</parameter></entry>
         <entry>
          クッキーの有効期限。これは Unix タイムスタンプなので
          Epoch（1970 年 1 月 1 日）からの経過秒数となります。
          <function>time</function> または
          <function>mktime</function> 関数により
          返された現在のUNIX標準時に、期限としたい必要な秒数を加算したものを
          利用することができるでしょう。
         </entry>
         <entry>
          <literal>time()+60*60*24*30</literal>
          はクッキーの有効期限を 30 日後にセットします。
          もしも設定しない場合、クッキーはセッションの最後
          (つまりブラウザを閉じるとき) が有効期限となります。
         </entry>
        </row>
        <row>
         <entry><parameter>path</parameter></entry>
         <entry>
          サーバー上での、クッキーを有効としたいパス
         </entry>
         <entry>
          <literal>'/'</literal> をセットすると、クッキーは
          <parameter>domain</parameter> 配下の全てで有効となります。
          <literal>'/foo/'</literal> をセットすると、クッキーは
          <literal>/foo/</literal> ディレクトリとそのサブディレクトリ配下
          (例えば <literal>/foo/bar/</literal>) で有効となります。
          デフォルト値は、クッキーがセットされたときのカレントディレクトリです。
         </entry>
        </row>
        <row>
         <entry><parameter>domain</parameter></entry>
         <entry>
          クッキーが有効なドメイン
         </entry>
         <entry>
          exapmle.com の全てのサブドメインでクッキーを有効とするには
          <literal>'.example.com'</literal> をセットします。
          <literal>.</literal> は必須ではありませんが、
          多くのブラウザにおいて互換性があります。
          <literal>www.example.com</literal> にセットすると、
          クッキーは<literal>www</literal>
          サブドメインにおいてのみ有効となります。
          末尾のマッチングについての詳細は <ulink url="&spec.cookies;">仕様</ulink>
          をご覧ください。
         </entry>
        </row>
        <row>
         <entry><parameter>secure</parameter></entry>
         <entry>
          セキュアな HTTPS 接続の場合にのみクッキーが送信されるようにします。
          &true; を設定すると、セキュアな接続が存在する場合にのみクッキーを
          設定します。デフォルトは &false; です。
         </entry>
         <entry>
          <literal>0</literal> または <literal>1</literal>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     一度クッキーが送信されると、次のページのロードからは
     <link linkend="reserved.variables.cookies">$_COOKIE</link> や
     <varname>$HTTP_COOKIE_VARS</varname> 配列によってクッキーにアクセスできます。
     <varname>$_COOKIE</varname> のような
     <link linkend="language.variables.superglobals">autoglobals</link> は
     <ulink url="&url.php.release4.1.0;">4.1.0</ulink>
     以降で有効となることに注意してください。
     <varname>$HTTP_COOKIE_VARS</varname> は PHP 3 以降で使用できます。
     クッキーの値は <link linkend="reserved.variables.request">$_REQUEST</link>
     配列からもアクセスできます。
    </para>
    <note>
     <para>
      PHPの <link linkend="ini.register-globals">register_globals</link>
      ディレクティブが <literal>on</literal> になっている場合、
      クッキーは変数にも登録されています。
      以下の例では、<varname>$TestCookie</varname> 変数が存在します。
      <varname>$_COOKIE</varname> の使用が推奨されます。
     </para>
    </note>
    <para>
     陥りやすい失敗
     <itemizedlist>
      <listitem>
       <simpara>
        クッキーは、クッキーを有効にするために次にページをロードするまで
        アクセスすることができません。クッキーが正常にセットされたか
        テストするために、クッキーの有効期限が切れる前に次のページを
        ロードしてクッキーをチェックしてください。
        有効期限は <parameter>expire</parameter> 引数でセットされます。
        クッキーの利用についてデバッグするのに良い方法は
        <literal>print_r($_COOKIE);</literal> をコールすることです。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        クッキーは設定されたものと同じパラメータで削除する必要があります。
        値が空文字列 ("") で、その他の全ての引数が前に setcookie
        をコールした時と同じである場合に、指定された名前のクッキーが
        リモートクライアント上から削除されます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        クッキーの値として &false; を設定すると、クッキーを削除しようとします。
        そのため、boolean 値は使用できません。その代わりとして、
        &false; ではなく <emphasis>0</emphasis>、そして &true;
        ではなく <emphasis>1</emphasis> を使用します。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        クッキー名で配列を記述することにより、
        クッキーの配列を設定することも可能ですが、複数のクッキー
        がユーザーのシステム上に保存されることになります。
        <function>explode</function> を使用して
        ひとつのクッキー上に複数の名前と値をセットすることも
        考慮してください。<function>serialize</function>
        の使用はセキュリティーホールになり得るため、
        この目的のために使用することは推奨されません。
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <simpara>
     PHP 3 において同じスクリプトで <function>setcookie</function>
     を複数回コールした場合、逆の順番で実行されます。
     他のクッキーを挿入する前にあるクッキーを削除しようとする場合、
     削除する前に挿入を行う必要があります。PHP 4 では、
     <function>setcookie</function> を複数回コールした場合でもコールした順番で実行されます。
    </simpara>
    <para>
     以下はクッキーを送信する例です。
     <example>
      <title><function>setcookie</function> による送信のサンプル</title>
      <programlisting role="php">
<![CDATA[
<?php
$value = 'something from somewhere';

setcookie("TestCookie", $value);
setcookie("TestCookie", $value, time()+3600);  /* 有効期限は一時間です */
setcookie("TestCookie", $value, time()+3600, "/~rasmus/", ".example.com", 1);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     クッキーの value の部分は、クッキーの送信を行う際に自動的に
     URL エンコードされ、またクッキーを受信した際は、自動的にデコード
     されてクッキー名と同じ名前の変数に格納されることに注意してください。
     この挙動が気に入らない場合、もし PHP 5 を使用しているなら
     代わりに <function>setrawcookie</function> を使ってください。
     スクリプト内部で TestCookie の内容を見たい場合は、
     以下のいずれかの例を使用します。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// 個々のクッキーを表示します
echo $_COOKIE["TestCookie"];
echo $HTTP_COOKIE_VARS["TestCookie"];

// デバッグ／テスト用には、全てのクッキーを見る方法があります。
print_r($_COOKIE);
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     クッキーを削除する場合には、ブラウザの削除機構を起動するために
     必ず有効期限を過去に設定する必要があります。
     次に、先ほど例で送信したクッキーを削除する例を示します。
    </para>
    <para>
     <example>
      <title><function>setcookie</function> による削除の例</title>
      <programlisting role="php">
<![CDATA[
<?php
// 有効期限を一時間前に設定します
setcookie ("TestCookie", "", time() - 3600);
setcookie ("TestCookie", "", time() - 3600, "/~rasmus/", ".example.com", 1);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     クッキー名で配列を記述することにより、クッキーの配列を設定することも可能です。
     これにより配列要素と同数のクッキーを設定されますが、
     クッキーがスクリプトに受信された際に、
     値はクッキー名を有する配列に置きかえられます。
    </para>
    <para>
     <example>
      <title><function>setcookie</function> と配列</title>
      <programlisting role="php">
<![CDATA[
<?php
// クッキーを設定します
setcookie("cookie[three]", "cookiethree");
setcookie("cookie[two]", "cookietwo");
setcookie("cookie[one]", "cookieone");

// ページを再読み込みした後に、表示します
if (isset($_COOKIE['cookie'])) {
    foreach ($_COOKIE['cookie'] as $name => $value) {
        echo "$name : $value <br />\n";
    }
}
?>
]]>
      </programlisting>
      <para>
       この結果は、次のようになります。
      </para>
      <screen>
<![CDATA[
three : cookiethree
two : cookietwo
one : cookieone
]]>
      </screen>
     </example>
    </para>
    <note>
     <para>
      <ulink url="&url.rfc;2109">RFC 2109</ulink> および
      <ulink url="&url.rfc;2965">RFC 2695</ulink> も参考になるでしょう。
     </para>
     <para>
      <parameter>expire</parameter> パラメータには、<literal>Wdy, DD-Mon-YYYY
      HH:MM:SS GMT</literal> といった形式ではなく Unix
      タイムスタンプを渡していることにお気づきでしょうか。
      これは、PHP の内部で自動的に変換を行っているからです。
     </para>
     <para>
      <parameter>expire</parameter> は、クライアントの時刻と比較されます。
      サーバの時刻との比較ではありません。
     </para>
    </note>
    <note>
     <simpara>
      サービスパック 1 を適用した Microsoft Internet Explorer 4 は、
      パスに関するパラメータを設定したクッキーを正確に処理することができません。
     </simpara>
     <simpara>
      Netscape Communicator 4.05 および Microsoft Internet Explorer 3.x
      は、path と time が設定されていない場合、
      クッキーを正確に処理することができないようです。
     </simpara>
    </note>
    <para>
     <function>header</function>、<function>setrawcookie</function>
     および<link linkend="features.cookies">クッキーのセクション</link>
     も参照ください。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
