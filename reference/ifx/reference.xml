<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
 <reference id="ref.ifx">
  <title>Informix 関数</title>
  <titleabbrev>Informix</titleabbrev>

  <partintro>
   <para>
    Informix (IDS) 7.x, SE 7.x, Universal Server (IUS) 9.x ,IDS 2000 
    用のInformixドライバは、informix拡張機能用ディレクトリの"ifx.ec"
    および"php3_ifx.h"に実装されています。 
    IDS 7.xのサポートは、BYTEおよびTEXTカラムを完全にサポートしており、
    完成度はかなり高いです。
    IUS 9.xのサポートは、部分的に完成しています。つまり、
    新しいデータ型はサポートされていますが、SLOBおよびCLOBのサポートについては
    まだ作業中です。
   </para>
   <note>
    <title>設定に関する注意</title>
    <para>
     PHP Informix ドライバをコンパイルするには、何らかのバージョンのESQL/C
     が必要です。7.2x以降のバージョンに付属するESQL/Cは問題なく使用できます。
     現在では、ESQL/CはInformixクライアントSDKに含まれています。
    </para>
    <para>
     "configure" スクリプトを実行する前に、必ず"INFORMIXDIR" 変数を設定し、
     PATHに$INFORMIXDIR/bin を設定しておいてください。
    </para>
    <para> 
     "configure --with_informix=yes" を実行した場合、
     configure スクリプトは、ライブラリおよびインクルードディレクトリを
     自動検出します。
     環境変数 "IFX_LIBDIR", "IFX_LIBS", "IFX_INCDIR" を指定することにより、
     この検出結果を上書きすることが可能です。
     configure スクリプトは、Informix サーバーのバージョンを検出しようと
     もします。
     Informix のバージョンが 9.00 以上である場合、条件コンパイル用変数
     "HAVE_IFX_IUS" が設定されます。
    </para>
   </note>
   <note>
    <title>実行時に考慮すべき点</title>
    <para>
     Informix用環境変数INFORMIXDIRおよびINFORMIXSERVERがPHP ifxドライバ
     で利用可能であり、INFORMIXのバイナリがあるディレクトリにパスが
     通っていることを確認して下さい。テストを始める前に
     <function>phpinfo()</function>と書いたスクリプトを実行し、
     これを確認して下さい。
     <function>phpinfo()</function> があるスクリプトは、これらの環境変数
     の一覧を出力します。これは、CGI版のPHPおよびApache mod_phpで共に
     行われます。これらの環境変数はApacheのスタートアップスクリプトで設定
     する必要があります。
    </para>
    <para>
     また、Informix共有ライブラリがローダーで利用可能である必要があります。
     (LD_LINBRARY_PATHまたはld.so.conf/ldconfigを確認して下さい)
    </para>
   </note>
   <note>
    <title>BLOB (TEXT および BYTE カラム)の使用に関する注意</title>
    <para>
     通常、BLOB はBLOB ID により指定されます。
     select クエリーは、BYTE および TEXT カラム毎に "blob id" を返します。
     ( "ifx_blobinfile(0);" により) メモリー上で BLOB を得ることを選択した場合、
     "string_var = ifx_get_blob($blob_id);"  で内容を得ることができます。
     ファイルから BLOB カラムの内容を取得したい場合、
     "ifx_blobinfile(1);" を使用して下さい。
     "ifx_get_blob($blob_id);" によりファイル名を得ることができます。
     BLOB の内容を得る際には、通常のファイル入出力を行ってください。
    </para>
    <para>
     insert/update クエリーに関しては、
     "ifx_create_blob(..);" により自分で "blob id" を作成する必要があります。
     その後、blob id を配列に代入し、
     クエリー文字列の中の blob カラムを疑問符 (?) で置換します。
     updates/inserts の場合、ifx_update_blob(...) で blob の内容を設定する
     のが便利でしょう。
    </para>
    <para>
     BLOB カラムの動作は、設定用変数で変更することができます。
     これらの変数は、実行時にも設定可能です。
    </para>
    <para>
    </para>
    <para>
     設定変数 : ifx.textasvarchar
    </para>
    <para>
     設定変数 : ifx.byteasvarchar
    </para>
    <para>
    </para>
    <para>
     ランタイム関数 :
    </para>
    <para>
     ifx_textasvarchar(0) : TEXT カラムを有する select クエリーに blob
     id を使用する
    </para>
    <para>
     ifx_byteasvarchar(0) : BYTE カラムを有する select クエリーに blob
     id を使用する
    </para>
    <para>
     ifx_textasvarchar(1) : TEXTカラムをVARCHARカラムとして返します。
     このため、selectクエリーにおいてblob idを使用する必要はありません。
    </para>
    <para>
     ifx_byteasvarchar(1) : BYTEカラムをVARCHARカラムとして返します。
     このため、selectクエリーにおいてblob idを使用する必要はありません。
    </para>
    <para>
    </para>
    <para>
     設定変数 : ifx.blobinfile
    </para>
    <para>
     ランタイム関数 :
    </para>
    <para>
     ifx_blobinfile_mode(0) : メモリーに BYTE カラムを返す, blob id によ
     りその内容を取り出す
    </para>
    <para>
     ifx_blobinfile_mode(1) : メモリーに BYTE カラムを返す, blob id によ
     りそのファイル名を取り出す
    </para>
    <para>
     ifx_text/byteasvarchar を 1 に設定した場合、
     通常の(しかしやや長い) VARCHAR フィールドのように
     select クエリーで TEXT や BYTE カラムを使用することが可能です。
     全ての文字列は、PHP で "数えられる" ので、これにより、"バイナリ・セー
     フ"が維持されます。
     これを正しく処理するのはあなた次第です。
     返されるデータには何でも含むことができますが、その内容について
     責任を負うことになります。
    </para>
    <para>
     ifx_blobinfile を 1 に設定した場合、blob の内容を得るために
     ifx_get_blob(..) により返されたファイル名を使用して下さい。
     この場合、行を取得する際に Informix により作成されたテンポラリファイル
     を削除する責任があります。取得された新規の行は、BYTE カラム毎に新
     規のテンポラリファイルを作成します。
    </para>
    <para>
     テンポラリファイルの位置は、環境変数 "blobdir" により設定すること
     ができます。デフォルトは、"." (カレントディレクトリ)です。
     putenv(blobdir="tmpblob"); のようにすることにより、誤って残ってし
     まったテンポラリファイルを削除することが容易になります。(テンポラ
     リファイルの名前は "blb" で始まります)
   </para>
   </note>
   <note>
    <title>自動的に "char" (SQLCHAR および SQLNCHAR) データを取り去る</title>
    <para>
     これは、次の設定変数により設定することが可能です。
    </para>
    <para>
     ifx.charasvarchar : 最後尾のスペースを何らかの削除処理を行わずに
     自動的に取り去る場合に1に設定します。
    </para>
   </note>
   <note>
    <title>&null; 値</title>
    <para>
     設定変数 ifx.nullformat (およびランタイム関数
     <function>ifx_nullformat</function>) を&true;に設定した場合、文字列
     "&null;" として &null; カラムを返します。&false;に設定した場合は空文字
     列を返します。これにより、&null;カラムと空のカラムを識別することが
     可能となります。
    </para>
   </note>
  </partintro>
  
  







  





























&reference.ifx.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

