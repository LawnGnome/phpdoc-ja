<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283819 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>assertion が &false; であるかどうかを調べる</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> は、指定した
   <parameter>assertion</parameter> を調べて、結果が
   &false; の場合に適切な動作をします。
  </para>
  <para>
   <parameter>assertion</parameter> が文字列として指定された場合、
   <function>assert</function>によりPHPコードとして評価されます。
   文字列 <parameter>assertion</parameter>が優れているところは、
   assertion のチェックがオフになった場合のオーバーヘッドがより少な
   いことであり、assertionが失敗した場合のメッセージを式
   <parameter>assertion</parameter>に有しています。
   つまり、もし論理型の条件を <parameter>assertion</parameter> 
   として渡した場合、この条件が <function>assert_options</function>
   関数で指定したハンドラ関数への引数とはならないということです。
   条件はハンドラ関数をコールする前に文字列に変換され、論理型の
   &false; は空文字列に変換されます。
  </para>
  <para>
   assertion は、デバッグ目的にのみ使用するべきです。
   assertion を常に&true;となる条件を調べる不具合診断に使用し、&true;
   でない場合に何らかのプログラミングエラーを示したり、extension
   関数または特定のシステム制限や機能といった、
   特定の機能の存在をチェックするために使用することが可能です。
  </para>
  <para>
   assersion は、入力パラメータのチェックのような通常の実行動作に
   使用するべきではありません。一般的には、assertion のチェックを無効にしても
   そのコードが正常に動作しなければなりません。
  </para>
  <para>
   <function>assert</function> の動作は、
   <function>assert_options</function> またはマニュアルの関数の部分
   に記述された .ini の設定により設定することが可能です。
  </para>
  <para>
   関数 <function>assert_options</function> や
   ASSERT_CALLBACK 設定ディレクティブにより失敗した assertion
   を処理するコールバック関数を設定することが可能です。
  </para>
  <para>
   <function>assert</function> のコールバックは、assertion
   が発生した場所に関する情報と共に assertion
   に渡されたコードを容易にキャプチャーできるため、
   特に自動テストセットを構築する際に便利です。
   この情報は他の手法でもキャプチャー可能ですが、assertion
   を使用することにより、より簡単かつ容易に行なうことが可能です!
  </para>
  <para>
   コールバック関数は、3つの引数を受ける必要があります。最初の引数は、
   assertionが失敗したファイルが含まれます。2番目の引数には、
   assertionが失敗した行が含まれ、3番目の引数には失敗した式が含まれます
   (もしある場合のみ。1 または "two" のようなリテラルの値は、
   この引数に渡されません)。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       assertion。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   アサーションが false となった場合に &false;、それ以外の場合に &true; を返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>失敗した assertion をカスタムハンドラで処理する</title>
    <programlisting role="php">
<![CDATA[
<?php
// assertを有効にし、出力を抑制する
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// ハンドラ関数を作成する
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// コールバックを設定する
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// 失敗するassertionを作成
assert('mysql_query("")');
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
