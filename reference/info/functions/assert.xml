<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./ja/functions/info.xml, last change in rev 1.10 -->
<!-- last change to 'assert' in en/ tree in rev 1.51 -->
  <refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>assertion が &false; であるかどうかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>assert</methodname>
      <methodparam><type>string|bool</type><parameter>assertion</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>assert</function> は、指定した
     <parameter>assertion</parameter>を調べて、結果が
     &false;の場合に適当な動作をします。
    </para>
    <para>
     <parameter>assertion</parameter> が文字列として指定された場合、
     <function>assert</function>によりPHPコードとして評価されます。
     文字列 <parameter>assertion</parameter>が優れているところは、
     assertion のチェックがオフになった場合のオーバーヘッドがより少な
     いことであり、assertionが失敗した場合のメッセージを式
     <parameter>assertion</parameter>に有しています。
    </para>
    <para>
     assertion は、デバッグ目的にのみ使用するべきです。
     assertion を常に&true;となる条件を調べる不具合診断に使用し、&true;でな
     い場合に何らかのプログラミングエラーを示したり、extension 関数ま
     たは特定のシステム制限や機能といった特定の機能の存在をチェックす
     るために使用することが可能です。
    </para>
    <para>
     assersion は、入力パラメータのチェックのような通常の実行動作に使
     用するべきではありません。一般的には、assertion のチェックが有効
     でない場合に自分のコードを常に正常に動作することができる必要があり
     ます。
    </para>
    <para>
     <function>assert</function> の動作は、
     <function>assert_options</function> またはマニュアルの関数の部分
     に記述された .ini の設定により設定することが可能です。
    </para>
    <para>
     関数 <function>assert_options</function> かつ/または
     ASSERT_CALLBACK 設定ディレクティブにより失敗したassertionを
     処理するコールバック関数を設定することが可能です。
    </para>
    <para>
     <function>assert</function> のコールバックは、assertionが発生
     した場所に関する情報と共にassertionに渡されたコードを容易にキャ
     プチャーできるため、特に自動テストセットを構築する際に便利です。
     この情報は他の手法でもキャプチャー可能ですが、assertionを使用
     することにより、より簡単かつ容易に行なうことが可能です!
    </para>
    <para>
     コールバック関数は、3つの引数を受ける必要があります。最初の引数
     は、assertionが失敗したファイルが含まれます。2番目の引数には、
     assertionが失敗した行が含まれ、3番目の引数には失敗した式が含ま
     れます。(もしある場合のみ。1または"two"のようなリテラルの値はこ
     の引数に渡されません)
    </para>
    <para>
     <example>
      <title>カスタムハンドラで失敗したassertionを処理する</title>
      <programlisting role="php">
<![CDATA[
<?php
// assertを有効にし、出力を抑制する
assert_options (ASSERT_ACTIVE, 1);
assert_options (ASSERT_WARNING, 0);
assert_options (ASSERT_QUIET_EVAL, 1);

// ハンドラ関数を作成する
function my_assert_handler ($file, $line, $code) {
	echo "<hr>Assertion Failed:
		File '$file'<br>
		Line '$line'<br>
		Code '$code'<br><hr>";
}

// コールバックを設定する
assert_options (ASSERT_CALLBACK, 'my_assert_handler');

// 失敗するassertionを作成
assert ('mysql_query ("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
