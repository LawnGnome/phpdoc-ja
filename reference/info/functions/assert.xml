<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337862 Maintainer: hirokawa Status: working -->
<!-- CREDITS: takagi -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>assertion が &false; であるかどうかを調べる</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>PHP 5</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>PHP 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>Throwable</type><parameter>exception</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> は、指定した
   <parameter>assertion</parameter> を調べて、結果が
   &false; の場合に適切な動作をします。
  </para>
  <refsect2>
   <title>従来のアサーション (PHP 5 および 7)</title>
   <para>
    <parameter>assertion</parameter> が文字列として指定された場合、
    <function>assert</function>によりPHPコードとして評価されます。
    文字列 <parameter>assertion</parameter>が優れているところは、
    assertion のチェックがオフになった場合のオーバーヘッドがより少な
    いことであり、assertionが失敗した場合のメッセージを式
    <parameter>assertion</parameter>に有しています。
    つまり、もし論理型の条件を <parameter>assertion</parameter> 
    として渡した場合、この条件が <function>assert_options</function>
    関数で指定したハンドラ関数への引数とはならないということです。
    条件はハンドラ関数をコールする前に文字列に変換され、論理型の
    &false; は空文字列に変換されます。
   </para>
   <para>
    assertion は、デバッグ目的にのみ使用するべきです。
    assertion を常に&true;となる条件を調べる不具合診断に使用し、&true;
    でない場合に何らかのプログラミングエラーを示したり、extension
    関数または特定のシステム制限や機能といった、
    特定の機能の存在をチェックするために使用することが可能です。
   </para>
   <para>
    assersion は、入力パラメータのチェックのような通常の実行動作に
    使用するべきではありません。一般的には、assertion のチェックを無効にしても
    そのコードが正常に動作しなければなりません。
   </para>
   <para>
    <function>assert</function> の動作は、
    <function>assert_options</function> またはマニュアルの関数の部分
    に記述された .ini の設定により設定することが可能です。
   </para>
   <para>
    関数 <function>assert_options</function> や
    <constant>ASSERT_CALLBACK</constant> 設定ディレクティブにより失敗した assertion
    を処理するコールバック関数を設定することが可能です。
   </para>
   <para>
    <function>assert</function> のコールバックは、assertion
    が発生した場所に関する情報と共に assertion
    に渡されたコードを容易にキャプチャーできるため、
    特に自動テストセットを構築する際に便利です。
    この情報は他の手法でもキャプチャー可能ですが、assertion
    を使用することにより、より簡単かつ容易に行なうことが可能です!
   </para>
   <para>
    コールバック関数は、3つの引数を受ける必要があります。最初の引数は、
    assertionが失敗したファイルが含まれます。2番目の引数には、
    assertionが失敗した行が含まれ、3番目の引数には失敗した式が含まれます
    (もしある場合のみ。1 または "two" のようなリテラルの値は、
    この引数に渡されません)。
    PHP 5.4.8 以降では、オプションの4番目の引数を指定できます。これを設定すると、
    <parameter>description</parameter> を <function>assert</function>
    に渡せるようになります。
   </para>
  </refsect2>
  <refsect2 xml:id="function.assert.expectations">
   <title>Expectation (PHP 7 のみ)</title>
   <para>
    <function>assert</function> is a language construct in PHP 7, allowing for
    the definition of expectations: assertions that take effect in development
    and testing environments, but are optimised away to have zero cost in
    production.
   </para>
   <para>
    While <function>assert_options</function> can still be used to control
    behaviour as described above for backward compatibility reasons, PHP 7
    only code should use the two new configuration directives to control
    the behaviour of <function>assert</function> and not call
    <function>assert_options</function>.
   </para>
   <table>
    <title>
     PHP 7 configuration directives for <function>assert</function>
    </title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Directive</entry>
       <entry>Default value</entry>
       <entry>Possible values</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <link linkend="ini.zend.assertions">zend.assertions</link>
       </entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: generate and execute code (development mode)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: generate code but jump around it at runtime
         </member>
         <member>
          <literal>-1</literal>: do not generate code (production mode)
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="ini.assert.exception">assert.exception</link>
       </entry>
       <entry><literal>0</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: throw when the assertion fails, either by
          throwing the object provided as the <parameter>exception</parameter>
          or by throwing a new <classname>AssertionError</classname> object if
          <parameter>exception</parameter> wasn't provided
         </member>
         <member>
          <literal>0</literal>: use or generate a
          <classname>Throwable</classname> as described above, but only
          generate a warning based on that object rather than throwing it
          (compatible with PHP 5 behaviour)
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </refsect2>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       アサーション。
       In PHP 5, this must be either a <type>string</type> to
       be evaluated or a <type>boolean</type> to be tested. In PHP 7, this may
       also be any expression that returns a value, which will be executed and
       the result used to indicate whether the assertion succeeded or failed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       オプションの説明で、
       <parameter>assertion</parameter> が失敗したときのメッセージにこれを含めます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exception</parameter></term>
     <listitem>
      <para>
       In PHP 7, the second parameter can be a
       <classname>Throwable</classname> object instead of a descriptive
       <type>string</type>, in which case this is the object that will be
       thrown if the assertion fails and the
       <link linkend="ini.assert.exception">assert.exception</link>
       configuration directive is enabled.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   アサーションが false となった場合に &false;、それ以外の場合に &true; を返します。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <function>assert</function> is now a language construct and not a
        function. <function>assertion</function> can now be an expression.
        The second parameter is now interpreted either as an
        <parameter>exception</parameter> (if a
        <classname>Throwable</classname> object is given), or as the
        <parameter>description</parameter> supported from PHP 5.4.8 onwards.
       </entry>
      </row>
      <row>
       <entry>5.4.8</entry>
       <entry>
        <parameter>description</parameter> パラメータが追加されました。
        <parameter>description</parameter> はまた、
        <constant>ASSERT_CALLBACK</constant> モードのコールバック関数の4番目の引数にも指定できるようになりました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>従来のアサーション (PHP 5 および 7)</title>
   <para>
    <example>
     <title>失敗した assertion をカスタムハンドラで処理する</title>
     <programlisting role="php">
<![CDATA[
<?php
// assertを有効にし、出力を抑制する
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// ハンドラ関数を作成する
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// コールバックを設定する
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// 失敗するassertionを作成
assert('mysql_query("")');
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>カスタムハンドラを使った説明の表示</title>
     <programlisting role="php">
<![CDATA[
<?php
// assertを有効にし、出力を抑制する
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// ハンドラ関数を作成する
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Assertion failed at $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// コールバックを設定する
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// 失敗するassertionを作成
assert('2 < 1');
assert('2 < 1', 'Two is less than one');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
 <![CDATA[
 Assertion failed at test.php:21: 2 < 1
 Assertion failed at test.php:22: 2 < 1: Two is less than one
 ]]>
     </screen>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Expectations (PHP 7 only)</title>
   <example>
    <title>Expectations without a custom exception</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 1,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>Expectations with a custom exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True is not false!'));
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True is not false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 1,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True is not false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
