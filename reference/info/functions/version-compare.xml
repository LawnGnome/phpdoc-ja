<?xml version="1.0" encoding="utf-8"?>
<!-- sync: 1.6 -->
  <refentry id="function.version-compare">
   <refnamediv>
    <refname>version_compare</refname>
    <refpurpose>
     二つの"PHP標準"バージョン番号文字列を比較する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>version_compare</methodname>
      <methodparam><type>string</type><parameter>version1</parameter></methodparam>
      <methodparam><type>string</type><parameter>version2</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>
        operator
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>version_compare</function>は、二の"PHP標準"バージョン番
     号文字列を比較します。この関数は、いくつかのバージョンのPHPでのみ
     動作するプログラムを書きたい場合に有用です。
    </para>
    <para>
     <function>version_compare</function>は、最初のバージョンが2番目
     よりも小さい場合に-1、等しい場合に0、2番目が小さい場合に+1を返し
     ます。
    </para>
    <para>
     この関数はまず、バージョン文字列の
     <literal>_</literal>, <literal>-</literal>
     ,<literal>+</literal>をドット<literal>.</literal>で置き換えます。
     さらに、数値でない部分の前後にドット<literal>.</literal>を追加します。
     例えば'4.3.2RC1' は '4.3.2.RC.1'となります。
     
     Then it 
     splits the results like if you were using explode('.',$ver). Then it 
     compares the parts starting from left to right. If a part contains 
     special version strings these are handled in the following order: 
     <literal>dev</literal> &lt; <literal>alpha</literal> = 
     <literal>a</literal> &lt; <literal>beta</literal> = 
     <literal>b</literal> &lt; <literal>RC</literal> &lt; 
     <literal>pl</literal>. 
     その後、explode('.',$ver)を使うのと同様に、結果を分割し、
     左から右へパーツを比較してゆきます。
     パーツが特別なバージョン文字列を含んでいる場合には、次のような順で
     扱われます。
     <literal>dev</literal> &lt; <literal>alpha</literal> = 
     <literal>a</literal> &lt; <literal>beta</literal> = 
     <literal>b</literal> &lt; <literal>RC</literal> &lt; 
     <literal>pl</literal>。

     This way not only versions with different levels
     like '4.1' and '4.1.2' can be compared but also any PHP specific version
     containing development state.

    </para>
    <para>
     3番目のオプション引数<parameter>operator</parameter>を指定した場
     合、特定の関係を調べることが可能です。指定可能な演算子を以下に示
     します。
     <literal>&lt;</literal>,
     <literal>lt</literal>, <literal>&lt;=</literal>,
     <literal>le</literal>, <literal>&gt;</literal>,
     <literal>gt</literal>, <literal>&gt;=</literal>,
     <literal>ge</literal>, <literal>==</literal>,
     <literal>=</literal>, <literal>eq</literal>,
     <literal>!=</literal>, <literal>&lt;&gt;</literal>,
     <literal>ne</literal>
     この引数を用いると、この関数はこの演算子により指定された関係が成
     り立つ場合に1、そうでない場合に0を返します。
    </para>
    <para>
     <example>
      <title><function>version_compare</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php
// prints -1
echo version_compare("4.0.4", "4.0.6");

// these all print 1
echo version_compare("4.0.4", "4.0.6", "<");
echo version_compare("4.0.6", "4.0.6", "eq");
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
