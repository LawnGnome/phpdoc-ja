<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.17 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>複数の多次元の配列をソートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <methodsynopsis>
     <type>bool</type><methodname>array_multisort</methodname>
     <methodparam><type>array</type><parameter>ar1</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     <!-- Parameters don't need to be passed by reference -->
    </methodsynopsis> 
    <para>
     <function>array_multisort</function>は、複数の配列を一度に、また
     は、多次元の配列をその次元の一つでソートする際に使用可能です。
     この関数は、ソートの際にキーの相関を維持します。
  </para>
  <para>
   連想配列のキー(<type>string</type>)は不変ですが、数値添字は再度振り
   直されます。
  </para>
  <para>
   入力の配列は、あるテーブルのカラムで行をソートする処理が行われま
   す。これは、SQL ORDER BY構文と似ています。最初の配列はソートされ
   る最初の配列です。その配列の行が同じだった場合は、次の入力配列で
   ソートされるといったようになります。
  </para>
  <para>
   この関数の引数の構造は、やや一般的ではありませんが、柔軟なもので
   す。先頭の引数は、配列である必要があります。その後の各引数には、
   配列または次のリストにあるソート用フラグのどちらかを指定すること
   が可能です。
  </para>
  <para>
   ソート方法指定フラグ:
   <itemizedlist>
    <listitem>
     <simpara><constant>SORT_ASC</constant> - 昇順にソート</simpara>
    </listitem>
    <listitem>
     <simpara><constant>SORT_DESC</constant> - 降順にソート</simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   ソート型のフラグ:
   <itemizedlist>
    <listitem>
     <simpara><constant>SORT_REGULAR</constant> - 普通に比較</simpara>
    </listitem>
    <listitem>
     <simpara><constant>SORT_NUMERIC</constant> - 数値的に比較</simpara>
    </listitem>
    <listitem>
     <simpara><constant>SORT_STRING</constant> - 文字列として比較</simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   各配列に同じ型のソート用フラグを二つ指定することは出来ません。
   ある引数配列に適用を指定されたソート用フラグが適用されるのは、そ
   の配列のみです。新しい配列引数を処理する前にデフォルトの
   <constant>SORT_ASC</constant>
   および<constant>SORT_REGULAR</constant>にリセットします。
  </para>

  <para>
   <example>
    <title>複数の配列をソートする</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar1 = array("10", 100, 100, "a");
$ar2 = array(1, 3, "2", 1);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>
]]>
    </programlisting>
    <para>
     この例では、ソートの後で、最初の配列は、10,"a", 100, 100となりま
     す。2番目の配列は、1, 1, "2", 3を有します。最初の配列(100および
     100)の同じエントリに対応している2番目の配列のエントリは同時にソー
     トされます。
    </para>
    <screen>
<![CDATA[
array(4) {
  [0]=> string(2) "10"
  [1]=> string(1) "a"
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(1)
  [1]=> int(1)
  [2]=> string(1) "2"
  [3]=> int(3)
}
]]>     
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title>多次元の配列をソートする</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar = array(
       array("10", 11, 100, 100, "a"), 
       array(   1,  2, "2",   3,   1)
      );
array_multisort ($ar[0], SORT_ASC, SORT_STRING,
                 $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
    </programlisting>
    <para>
     この例では、ソートされた後、最初の配列は "10", 100, 100, 11, "a" (文字列
     として昇順でソートされています)に変換され、2 番目の配列は、
     1, 3, "2", 2, 1 (数値として降順にソートされています)となっています。
    </para>
    <screen>
<![CDATA[
array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title>データベースの結果をソートする</title>
    <para>
     この例では、配列 <varname>data</varname> の個々の要素が
     テーブルのひとつの行を表しています。これは、データベースの
     レコードの典型的な形式です。
    </para>
    <para>
     データの例:
    </para>
    <screen>
<![CDATA[
volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
]]>
      </screen>
      <para>
       データは <varname>data</varname> という名前の配列に格納します。
       これは、例えば <function>mysql_fetch_assoc</function> の結果を
       ループさせたりすれば得られます。
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>
]]>
      </programlisting>
      <para>
       この例では、データを <varname>volume</varname> の降順、
       <varname>edition</varname> の昇順に並べ替えます。
      </para>
      <para>
       私たちが今もっているのは行方向の配列ですが、
       <function>array_multisort</function> で必要なのは列方向の配列です。
       そこで、以下のコードで列方向の配列を得たあとでソートを行います。
      </para>
      <programlisting role="php">
<![CDATA[
<?php
// 列方向の配列を得る
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// データを volume の降順、edition の昇順にソートする。
// $data を最後のパラメータとして渡し、同じキーでソートする。
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>
]]>
    </programlisting>
    <para>
     データセットの行はソートされ、以下のようになります:
    </para>
    <screen>
<![CDATA[
volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
]]>
      </screen>
     </example>
    </para>

    <para>
     <example>
      <title>大文字・小文字を区別しないソート</title>
      <para>
       <constant>SORT_STRING</constant> と
       <constant>SORT_REGULAR</constant> はどちらも大文字・小文字を区別し、
       大文字ではじまる文字列が小文字で始まる文字列より前になります。
      </para>
      <para>
       大文字・小文字を区別しないためには、元の配列の内容をすべて小文字に
       変換した配列を用意し、それをソートの基準にします。
      </para>
      <programlisting role="php">
<![CDATA[
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)
]]>
      </screen>
     </example>
    </para>

   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
