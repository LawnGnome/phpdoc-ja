<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.14 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry id="function.array">
 <refnamediv>
  <refname>array</refname>
  <refpurpose>配列を生成する</refpurpose>
 </refnamediv>
 <refsect1>
  <title>説明</title>
  <methodsynopsis>
   <type>array</type><methodname>array</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   パラメータの配列を返します。パラメータには、
   <literal>=&gt;</literal>演算子によりインデックスを指定することもできます。
   配列に関するより詳しい情報は<link linkend="language.types.array">配列型</link>
   のセクションをご覧ください。
  </para>
  <para>
   <note>
    <para>
     <function>array</function>は、実際にはリテラル配列を表現するための
     言語構成要素であり、通常の関数ではありません。
    </para>
   </note>
  </para>
  <para>
   カンマで区切った構文 "index =&gt; values" は、インデックスと値を定義します。
   インデックスは文字列または数値とすることが可能です。
   インデックスが省略された場合、0から始まる整数インデックスが自動的に生成されます。
   インデックスが整数の場合、次に生成されるインデックスは、
   整数インデックスの最大値 + 1 となります。同じインデックスを二度定義した場合、
   後の定義により最初の定義が上書きされることに注意してください。
  </para>
  <para>
   一般的ではないですが、
   最後に定義された配列エントリの後に続くカンマがある場合、
   これは有効な構文です。
  </para>
  <para>
   以下の例では、二次元配列の生成方法、連想配列のキーの指定方法、
   および通常の配列において添字番号をスキップし、
   それに続く要素にアクセスする方法についてご紹介しています。
   <example>
    <title><function>array</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array (
    "fruits"  => array("a" => "orange", "b" => "banana", "c" => "apple"),
    "numbers" => array(1, 2, 3, 4, 5, 6),
    "holes"   => array("first", 5 => "second", "third")
);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>array</function> における自動インデックス</title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
    </screen>
   </example>
  </para>
  <para>
   インデックス '3' は二度定義されており、後の値 13 が保持されることに注意してください。
   インデックス 4 はインデックス 8 の後に定義され、
   次に生成されるインデックス (値は 19) は、最大のインデックスが 8
   であるため、9 となります。
  </para>
  <para>
   次の例は、1 から始まる配列を作成します。
   <example>
    <title><function>array</function> で 1 から始まる配列を作成</title>
    <programlisting role="php">
<![CDATA[
<?php
$firstquarter = array(1 => 'January', 'February', 'March');
print_r($firstquarter);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [1] => January
    [2] => February
    [3] => March
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Perl では、ダブルクオートで囲まれた配列の値にアクセスすることができます。
   しかしながら、PHP では配列を中括弧で囲む必要があります。
   <example>
    <title>ダブルクオートで囲まれた配列にアクセスする</title>
    <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <function>array_pad</function>、
   <function>list</function>、
   <function>count</function>、
   <link linkend="control-structures.foreach">foreach</link> および
   <function>range</function> も参照ください。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
