<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.21 Maintainer: hirokawa Status: ready -->
<refentry id="function.usort">
 <refnamediv>
  <refname>usort</refname>
  <refpurpose>
   ユーザー定義の比較関数により値で配列をソートします
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>bool</type><methodname>usort</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callback</type><parameter>cmp_function</parameter></methodparam>
  </methodsynopsis>
  <para>
   この関数は、ユーザー定義の比較関数により配列をその値でソートします。
   ソートしたい配列を複雑な基準でソートする必要がある場合、
   この関数を使用するべきです。
  </para>
  <para>
   比較関数は、最初の引数が2番目の引数より小さいか、等しいか、大きい
   場合に、それぞれゼロ未満、ゼロに等しい、ゼロより大きい整数を返す
   必要があります。
  </para>
  <para>
   <note>
    <para>
     二つのメンバーの比較結果が等しいとなった場合、
     ソートされた配列の順番は定義されません。PHP4.0.6まではユーザー定義関数は
     それらの要素の順番を維持します。しかしPHP4.1.0以降で導入された新しい
     ソートアルゴリズムではそれと同等のことを行う効果的な方法はありません。
    </para>
   </note>
  </para>
  <para>
   &return.success;
  </para>
  <para>
   <example>
    <title><function>usort</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b) 
{
    if ($a == $b) {
        return 0;
    }
    return ($a < $b) ? -1 : 1;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

while (list($key, $value) = each($a)) {
    echo "$key: $value\n";
}
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
0: 1
1: 2
2: 3
3: 5
4: 6
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>
    もちろん、このような簡単な例では<function>rsort</function>関数
    の方がより適当です。
   </para>
  </note>
  <para>
   <example>
    <title>多次元配列を使用する<function>usort</function>の例</title>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    return strcmp($a["fruit"], $b["fruit"]);
}

$fruits[0]["fruit"] = "lemons";
$fruits[1]["fruit"] = "apples";
$fruits[2]["fruit"] = "grapes";

usort($fruits, "cmp");

while (list($key, $value) = each($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
?>
]]>
    </programlisting>
    <para>
     多次元配列をソートする際には、<varname>$a</varname> と <varname>$b</varname> 
     は配列の最初のインデックスへの参照を保持していまY。
    </para>
    &example.outputs;
    <screen>
<![CDATA[
$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example>
    <title>
     <function>usort</function>でオブジェクトのメンバ関数を使用する例
    </title>
    <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    var $name;

    function TestObj($name) 
    {
        $this->name = $name;
    }

    /* 静的な比較関数: */
    function cmp_obj($a, $b) 
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) {
            return 0;
        }
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, array("TestObj", "cmp_obj"));

foreach ($a as $item) {
    print $item->name."\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
b
c
d
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <function>uasort</function>,
   <function>uksort</function>, <function>sort</function>,
   <function>asort</function>,
   <function>arsort</function>,<function>ksort</function>,
   <function>natsort</function>, <function>rsort</function>
   も参照してください。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
