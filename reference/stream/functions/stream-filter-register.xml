<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: hirokawa Status: ready -->
<refentry xml:id="function.stream-filter-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_register</refname>
  <refpurpose>ユーザ定義のストリームフィルタを登録する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>stream_filter_register</methodname>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam><type>string</type><parameter>classname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_register</function> は、<function>fopen</function>
   や <function>fread</function> などのファイルシステムの関数で利用可能な
   登録されているどの種類のストリームとも一緒に使うことのできる
   カスタムフィルタを登録します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       登録するフィルタ名。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>classname</parameter></term>
     <listitem>
      <para>
       フィルタを実装するには、まず、<literal>php_user_fitler</literal>
       を継承したクラスの下記に示されたメンバ関数を実装しなくてはなりません。
       <literal>PHP</literal> は、書き込みまたは読み出し操作を
       カスタムフィルタの付加されたストリームに対して行う際に、まず
       データをそのフィルタに(そして、付加されている他のすべてのフィルタにも)
       渡し、指示どおりストリームのデータが変更されるようにします。
       下記のメソッドは、説明の通り実装されなくてはなりません。
       さもないと、定義されていない動作をします。
      </para>
      <methodsynopsis>
       <type>int</type><methodname>filter</methodname>
       <methodparam><type>resource</type><parameter>in</parameter></methodparam>
       <methodparam><type>resource</type><parameter>out</parameter></methodparam>
       <methodparam><type>int</type><parameter role="reference">consumed</parameter></methodparam>
       <methodparam><type>bool</type><parameter>closing</parameter></methodparam>
      </methodsynopsis>
      <para>
       このメソッドは、<function>fread</function> や <function>fwrite</function>
       等の関数で、付加されたストリームからデータを読み出す時や、
       データを書き込む度に呼ばれます。
       <parameter>in</parameter> は、<literal>bucket brigade</literal> (バケツリレー隊) を指すポインタです。
       これは、フィルタの対象になるデータを含む複数の
       <literal>bucket</literal> オブジェクトから成っています。
       <parameter>out</parameter> は、変更されたバケットが渡される
       <literal>bucket brigade</literal> を示しています。
       <parameter>consumed</parameter> は、参照渡しされるパラメータで、
       ここには、フィルタが実際に処理した元のデータ長を加算します。
       ほとんどの場合、それぞれのバケットについて、そのデータ長
       <literal>$bucket->datalen</literal> を、そこに足すだけでいいはずです。
       もし、ストリームが閉じようとしている時 (すなわちフィルタ連鎖の中の
       最後の呼び出しだった時)、<parameter>closing</parameter> パラメータは、
       &true; となります。<methodname>filter</methodname> メソッドは、さらに、
       次の値のいずれかを終了時に返さなくてはなりません。
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>返り値</entry>
           <entry>意味</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PSFS_PASS_ON</constant></entry>
           <entry>
            フィルタの処理に成功し、
            <parameter>out</parameter> の <literal>バケツ隊</literal> に
            データが渡されました。
           </entry>
          </row>
          <row>
           <entry><constant>PSFS_FEED_ME</constant></entry>
           <entry>
            フィルタの処理に成功しましたが、データは返されませんでした。
            ストリームあるいは前段階のフィルタに対してさらにデータが必要です。
           </entry>
          </row>
          <row>
           <entry><constant>PSFS_ERR_FATAL</constant> (default)</entry>
           <entry>
            フィルタにおいて復旧不可能なエラーが発生し、処理を継続できません。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <methodsynopsis>
       <type>bool</type><methodname>onCreate</methodname>
       <void/>
      </methodsynopsis>
      <simpara>
       このメソッドは、フィルタクラスのオブジェクトが実体化されるときに
       呼び出されます。もし、フィルタがバッファなど他のリソースを
       確保したり初期化しなくてはならない場合、この時点で行ってください。
       このメソッドを実装する際には、失敗した場合に &false;、成功した場合に
       &true; を返すようにする必要があります。
      </simpara>
      <simpara>
       最初にフィルタのインスタンスが作成され
       <literal>yourfilter-&gt;onCreate()</literal> がコールされた際に、
       以下の表に示す多くのプロパティが使用可能となります。
      </simpara>
      <para>
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>プロパティ</entry>
           <entry>内容</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><literal>FilterClass-&gt;filtername</literal></entry>
           <entry>
            インスタンス化されたフィルタの名前を含む文字列。
            フィルタは複数の名前で登録されりワイルドカードで登録されたり
            することもありえます。どのような名前が使われたのか、
            このプロパティで調べます。
           </entry>
          </row>
          <row>
           <entry><literal>FilterClass-&gt;params</literal></entry>
           <entry>
            <function>stream_filter_append</function> あるいは
            <function>stream_filter_prepend</function>
            に渡すパラメータの内容。
           </entry>
          </row>
          <row>
           <entry><literal>FilterClass-&gt;stream</literal></entry>
           <entry>
            The stream resource being filtered. Maybe available only during
            <methodname>filter</methodname> calls when the 
            <literal>closing</literal> parameter is set to &false;.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <methodsynopsis>
       <type>void</type><methodname>onClose</methodname>
       <void/>
      </methodsynopsis>
      <para>
       このメソッドは、フィルタが遮断される時(通常、ストリームが遮断
       される時)に呼ばれます。また、同様に、<literal>flush</literal> メソッドが
       呼ばれた<emphasis>後に</emphasis>呼び出されます。
       もし、何らかのリソースが、<literal>oncreate</literal> メソッドの
       呼び出し時に確保されていた場合は、それらをここで廃棄するのが
       いいでしょう。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
  <para>
   <function>stream_filter_register</function> は、
   指定された <parameter>filtername</parameter> がすでに定義されている場合、
   &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><filename>foo-bar.txt</filename> ストリームの文字を大文字化するフィルタ</title>
    <para>
     下記の例は、読み込まれたり書き出されたりするデータに含まれるすべての英文字を
     大文字化する <literal>strtoupper</literal> ストリームを実装し、<literal>foo-bar.txt</literal>
     ストリームに適用するものです。
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* フィルタクラスを定義する */
class strtoupper_filter extends php_user_filter {
  function filter($in, $out, &$consumed, $closing)
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      $bucket->data = strtoupper($bucket->data);
      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }
}

/* PHP にフィルタを登録する */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Failed to register filter");

$fp = fopen("foo-bar.txt", "w");

/* フィルタを開いたストリームに付加する */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* ファイルを読み出し出力する
 */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LINE1
WORD - 2
EASY AS 123
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>複数のフィルタ名に対応する一般的なフィルタクラスを登録する</title>
    <programlisting role="php">
<![CDATA[
<?php

/* フィルタクラスを定義する */
class string_filter extends php_user_filter {
  var $mode;

  function filter($in, $out, &$consumed, $closing)
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      if ($this->mode == 1) {
        $bucket->data = strtoupper($bucket->data);
      } elseif ($this->mode == 0) {
        $bucket->data = strtolower($bucket->data);
      }

      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }

  function onCreate()
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* その他の str.* フィルタが問い合わせられた場合は
         失敗を報告し、PHP が検索を続けられるようにする */
      return false;
    }

    return true;
  }
}

/* PHP にフィルタを登録する */
stream_filter_register("str.*", "string_filter")
    or die("Failed to register filter");

$fp = fopen("foo-bar.txt", "w");

/* フィルタを開いたストリームに付加する
   ここで str.tolower をバインドすることも可能 */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* ファイルを読み出し出力する
 */
readfile("foo-bar.txt");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LINE1
WORD - 2
EASY AS 123
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_wrapper_register</function></member>
    <member><function>stream_filter_append</function></member>
    <member><function>stream_filter_prepend</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
