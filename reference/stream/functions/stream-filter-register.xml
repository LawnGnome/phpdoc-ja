<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.6 Maintainer: hirokawa Status: ready -->
  <refentry id="function.stream-filter-register">
   <refnamediv>
    <refname>stream_filter_register</refname>
    <refpurpose><literal>php_user_filter</literal> に由来するクラスとして実装されたストリームフィルタを登録する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <methodsynopsis>
     <type>bool</type><methodname>stream_filter_register</methodname>
     <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
     <methodparam><type>string</type><parameter>classname</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>stream_filter_register</function> は、<function>fopen</function>
     や <function>fread</function> などのファイルシステムの関数で利用可能な
     登録されているどの種類のストリームとも一緒に使うことのできる
     カスタムフィルタを登録します。
    </para>
    <para>
     フィルタを実装するには、まず、<literal>php_user_fitler</literal>
     を継承したクラスの下記に示されたメンバ関数を実装しなくてはなりません。
     <literal>PHP</literal> は、書き込みまたは読み出し操作を
     カスタムフィルタの付加されたストリームに対して行う際に、まず
     データをそのフィルタに(そして、付加されている他のすべてのフィルタにも)
     渡し、指示どおりストリームのデータが変更されるようにします。
     下記のメソッドは、説明の通り実装されなくてはなりません。
     さもないと、定義されていない動作をします。
    </para>
    <para>
     <function>stream_filter_register</function> は、
     指定された <parameter>filtername</parameter> がすでに定義されている場合、
     &false; を返します。
    </para>

    <methodsynopsis>
     <type>int</type><methodname>filter</methodname>
     <methodparam><type>resource</type><parameter>in</parameter></methodparam>
     <methodparam><type>resource</type><parameter>out</parameter></methodparam>
     <methodparam><type>int</type><parameter>&amp;consumed</parameter></methodparam>
     <methodparam><type>boolean</type><parameter>closing</parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、<function>fread</function> や <function>fwrite</function>
     等の関数で、付加されたストリームからデータを読み出す時や、
     データを書き込む度に呼ばれます。
     <parameter>in</parameter> は、<literal>bucket brigade</literal> (バケツリレー隊) を指すポインターです。
     これは、フィルタの対象になるデータを含む複数の
     <literal>bucket</literal> オブジェクトから成っています。
     <parameter>out</parameter> は、変更されたバケットが渡される
     <literal>bucket brigade</literal> を示しています。
     <parameter>consumed</parameter> は、参照渡しされるパラメータで、
     ここには、フィルタが実際に処理した元のデータ長を加算します。
     ほとんどの場合、それぞれのバケットについて、そのデータ長
     <literal>$bucket->datalen</literal> を、そこに足すだけでいいはずです。
     もし、ストリームが閉じようとしている時 (すなわちフィルタ連鎖の中の
     最後の呼び出しだった時)、<parameter>closing</parameter> パラメータは、
     &true; となります。<methodname>filter</methodname> パラメータは、さらに、
     次の値のいずれかを終了時に返さなくてはなりません。
     <constant>PSFS_PASS_ON</constant> は、処理に成功し、
     <parameter>out</parameter> の <literal>バケツ隊</literal> に
     データが渡されたことを示します。<constant>PSFS_FEED_ME</constant> は、
     その時点では返すデータがなく、ストリームからのより多くの入力データを
     必要としていることを示します。
     <constant>PSFS_ERR_FATAL</constant> は、フィルタにおいて、
     復旧不可能なエラーが発生し、処理を継続できないことを示します。
     もし、返値が返されなかった場合、 <constant>PSFS_ERR_FATAL</constant> が
     想定されます。
    </para>

    <methodsynopsis>
     <type>void</type><methodname>oncreate</methodname>
     <void/>
    </methodsynopsis>
    <para>
     このメソッドは、フィルタクラスのオブジェクトが実体化されるときに
     呼び出されます。もし、フィルタがバッファなど他のリソースを
     確保したり初期化しなくてはならない場合、この時点で行ってください。
    </para>

    <methodsynopsis>
     <type>void</type><methodname>onclose</methodname>
     <void/>
    </methodsynopsis>
    <para>
     このメソッドは、フィルタが遮断される時(通常、ストリームが遮断
     される時)に呼ばれます。また、同様に、<literal>flush</literal> メソッドが
     呼ばれた<emphasis>後に</emphasis>呼び出されます。
     もし、何らかのリソースが、<literal>oncreate</literal> メソッドの
     呼び出し時に確保されていた場合は、それらをここで廃棄するのが
     いいでしょう。
    </para>

    <para>
     下記の例は、読み込まれたり書き出されたりするデータに含まれるすべての英文字を
     大文字化する <literal>strtoupper</literal> ストリームを実装し、<literal>foo-bar.txt</literal>
     ストリームに適用するものです。

     <example> 
      <title>foo-bar.txt ストリームの文字を大文字化するフィルタ</title>
      <programlisting role="php">
<![CDATA[
<?php

/* フィルタクラスを定義する */
class strtoupper_filter extends php_user_filter {
  function filter($in, $out, &$consumed, $closing) {
    while ($bucket = stream_bucket_make_writeable($in)) {
      $bucket->data = strtoupper($bucket->data);
      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }
} 

/* PHP にフィルタを登録する */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Failed to register filter");

$fp = fopen("foo-bar.txt", "w");

/* フィルタを開いたストリームに付加する */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* ファイルを読み出し出力する。 
 */
readfile("foo-bar.txt");

/* Output
 * ------

LINE1
WORD - 2
EASY AS 123

 */
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>stream_wrapper_register</function>,
     <function>stream_filter_prepend</function>,
     <function>stream_filter_append</function> も参照ください。
    </simpara>
   </refsect1>
  </refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
