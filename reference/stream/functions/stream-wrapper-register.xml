<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.1 $ -->
<!-- sync: 1.1 -->
  <refentry id="function.stream-wrapper-register">
   <refnamediv>
    <refname>stream_wrapper_register</refname>
    <refpurpose>PHP のクラスとして実装された URL ラッパーを登録する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <methodsynopsis>
     <type>bool</type><methodname>stream_wrapper_register</methodname>
     <methodparam><type>string</type><parameter>protocol</parameter></methodparam>
     <methodparam><type>string</type><parameter>classname</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>stream_wrapper_register</function> は、自分で作った
     プロトコルハンドラとストリームを実装し、それを <function>fopen</function>
     や <function>fread</function> といったファイルシステムの関数と利用することを可能にします。
    </para>
    <para>
     ラッパを実装するには、下記のようないくつかのメンバ関数を持った
     クラスを定義しなくてはなりません。もし、誰かがあなたの作った
     ストリームを <function>fopen</function> したとき、
     <literal>PHP</literal> は <parameter>classname</parameter> のインスタンスを作り
     以後そのインスタンスと共にメソッドを呼び出そうとします。
     これらのメソッドは、下記に示したとおり、正確に実装されなければなりません。
     さもないと、定義されていない動作をします。
    </para>
    <para>
     <function>stream_wrapper_register</function> は、
     <parameter>protocol</parameter> というハンドラが既にある場合、
     &false; を返します。
    </para>

    <methodsynopsis>
     <type>bool</type><methodname>stream_open</methodname>
     <methodparam><type>string</type><parameter>path</parameter></methodparam>
     <methodparam><type>string</type><parameter>mode</parameter></methodparam>
     <methodparam><type>int</type><parameter>options</parameter></methodparam>
     <methodparam><type>string</type><parameter>opened_path</parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、ストリームオブジェクトが生成された直後に呼び出されます。
     <parameter>path</parameter> には、<function>fopen</function> に
     与えられ、データの取得元となる URL が入ります。
     <function>parse_url</function> を使えば、この URL を解釈できます。
    </para>
    <para>
     <parameter>mode</parameter> は、ファイルを開く際に使われるモードです。
     <function>fopen</function> で詳しく述べられているように、
     この関数の側で、<parameter>mode</parameter> が要求された
     <parameter>path</parameter> に適切かどうかを調べなくてはなりません。
    </para>
    <para>
     <parameter>options</parameter> は、ストリーム API によってセットされる
     付加的なフラグです。この値は次に挙げた値のいずれかか、
     それらを二つ以上 OR 演算した値となります。
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>フラグ</entry>
         <entry>説明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>STREAM_USE_PATH</entry>
         <entry>もし <parameter>path</parameter> が相対パスだった場合、
          include_path で指定されたパス内を探索します。
         </entry>
        </row>
        <row>
         <entry>STREAM_REPORT_ERRORS</entry>
         <entry>このフラグがセットされている場合は、ストリームのオープン時に
          ラッパ側で <function>trigger_error</function> 関数を使い、エラーを
          発生させる必要があります。逆に、このフラグがセットされていない場合は、
          ラッパ側でエラーを発生させてはいけません。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
    <para>
     もし <parameter>path</parameter> に対するストリームのオープンに成功し、
     STREAM_USE_PATH が <parameter>options</parameter> にセットされていた
     際には、<parameter>opened_path</parameter> に、実際に開かれた
     ファイルまたはリソースへの絶対パスをセットしなくてはなりません。
    </para>
    <para>
     もし要求されたリソースを正常に開けた場合、&true; を、そうでなければ、
     &false; を返さなくてはなりません。
    </para>

    <methodsynopsis>
     <type>void</type><methodname>stream_close</methodname>
     <methodparam><type>void</type><parameter></parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、<function>fclose</function>によってストリームが閉じられるときに呼び出されます。
     この時点で、カスタムストリームの中でロックされたか確保されたリソースを
     開放しなくてはなりません。
    </para>

    <methodsynopsis>
     <type>string</type><methodname>stream_read</methodname>
     <methodparam><type>int</type><parameter>count</parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドはカスタムストリームに対する <function>fread</function> または
     <function>fgets</function> に対応して呼び出されます。
     <parameter>count</parameter> バイトを超えない長さのデータが返される
     ようにする必要があります。
     <parameter>count</parameter> バイトよりも少ないデータしか準備できていない
     場合は、その時点にあるだけを返します。もし渡すべきデータがもうなければ、
     &false; または空文字列を返してください。
     また、正常に読み込めた分だけ、ストリームの読み込み/書き出し操作における
     内部位置を更新しなくてはなりません。
    </para>

    <methodsynopsis>
     <type>int</type><methodname>stream_write</methodname>
     <methodparam><type>string</type><parameter>data</parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、カスタムストリームに対する <function>fwrite</function> などの
     書き出し動作に対応して呼び出されます。<parameter>data</parameter> には、
     カスタムストリームで使われている下層にあるストレージに書き出されるべき
     データが入っています。渡されたデータをすべて書き出せない場合は、
     書き出せるだけ書き出します。このとき、正常にデータを書き出せた場合は、
     その書き出せたバイト数を、書き出せなかった場合は 0 を返さなくては
     なりません。
     また、正常に読み込めた分だけ、ストリームの読み込み/書き出し操作における
     内部位置を更新しなくてはなりません。
    </para>
   
    <methodsynopsis>
     <type>bool</type><methodname>stream_eof</methodname>
     <methodparam><type>void</type><parameter></parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、ストリームに対する <function>feof</function> 関数の実行に
     対応して呼び出されます。
     もし、ストリームの読み込み/書き出し操作における内部位置が、
     ストリームの終端にある場合は、あるいは、もう読み込むべきデータがない
     場合は &true; を、その他の場合には &false; をそれぞれ返さなくては
     なりません。
    </para>

    <methodsynopsis>
     <type>int</type><methodname>stream_tell</methodname>
     <methodparam><type>void</type><parameter></parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、ストリームに対する <function>ftell</function> 関数の
     実行に対応して呼び出されます。
     ストリームの読み込み/書き出し操作における内部位置を返します。
    </para>

    <methodsynopsis>
     <type>bool</type><methodname>stream_seek</methodname>
     <methodparam><type>int</type><parameter>offset</parameter></methodparam>
     <methodparam><type>int</type><parameter>whence</parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、ストリームに対する <function>fseek</function> 関数の
     実行に対応して呼び出されます。
     ストリームの読み込み/書き出し操作における内部位置を、
     <parameter>offset</parameter> パラメータと <parameter>whence</parameter>
     パラメータの値に従って更新しなければなりません。
     なお、これらの値の取り方については、<function>fseek</function> を参照下さい。
     正常に位置が更新できた場合には &true; を、失敗した場合は &false;
     を返します。
    </para>

    <methodsynopsis>
     <type>bool</type><methodname>stream_flush</methodname>
     <methodparam><type>void</type><parameter></parameter></methodparam>
    </methodsynopsis>
    <para>
     このメソッドは、ストリームに対する <function>fflush</function> 関数の
     実行に対応して呼び出されます。
     もしカスタムストリームがデータをキャッシュしていて、
     それをまだ下層にあるストレージへ記録していない場合は、
     このメソッドが呼ばれた時に、それを書き出します。
     もしキャッシュされたデータが正常に書き出された (あるいは、もう書くべきデータ
     がない) 場合は、&true; を、もしくは、データを書き出すことができなかった
     場合は &false; を返します。
    </para>

    <para>
     下記の例は、var:// プロトコルハンドラを実装し、
     <function>fread</function> などの標準のファイルシステム関数
     を利用して、指定されたグローバル変数に対するアクセスができるように
     するものです。
     var:// プロトコルは、"var://foo" として与えられた URL に対応して、
     $GLOBALS["foo"] からデータを読み込んだり、そこにデータを書き込んだり
     します。

     <example> 
      <title>A Stream for reading/writing global variables</title>
      <programlisting role="php">
<![CDATA[
class VariableStream {
    var $position;
    var $varname;
   
    function stream_open($path, $mode, $options, &$opened_path)
    {
        $url = parse_url($path);
        $this->varname = $url["host"];
        $this->position = 0;
        
        return true;
    }

    function stream_read($count)
    {
        $ret = substr($GLOBALS[$this->varname], $this->position, $count);
        $this->position += strlen($ret);
        return $ret;
    }

    function stream_write($data)
    {
        $left = substr($GLOBALS[$this->varname], 0, $this->position);
        $right = substr($GLOBALS[$this->varname], $this->position + strlen($data));
        $GLOBALS[$this->varname] = $left . $data . $right;
        $this->position += strlen($data);
        return strlen($data);
    }

    function stream_tell()
    {
        return $this->position;
    }

    function stream_eof()
    {
        return $this->position >= strlen($GLOBALS[$this->varname]);
    }

    function stream_seek($offset, $whence)
    {
        switch($whence) {
            case SEEK_SET:
                if ($offset < strlen($GLOBALS[$this->varname]) && $offset >= 0) {
                     $this->position = $offset;
                     return true;
                } else {
                     return false;
                }
                break;
                
            case SEEK_CUR:
                if ($offset >= 0) {
                     $this->position += $offset;
                     return true;
                } else {
                     return false;
                }
                break;
                
            case SEEK_END:
                if (strlen($GLOBALS[$this->varname]) + $offset >= 0) {
                     $this->position = strlen($GLOBALS[$this->varname]) + $offset;
                     return true;
                } else {
                     return false;
                }
                break;
                
            default:
                return false;
        }
    }
}

stream_wrapper_register("var", "VariableStream")
    or die("Failed to register protocol");

$myvar = "";
    
$fp = fopen("var://myvar", "r+");

fwrite($fp, "line1\n");
fwrite($fp, "line2\n");
fwrite($fp, "line3\n");

rewind($fp);
while(!feof($fp)) {
    echo fgets($fp);
}
fclose($fp);
var_dump($myvar);

]]>
      </programlisting>
     </example>
    </para>
  
   </refsect1>
  </refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
