<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.2 $ -->
<!-- sync: 1.14 -->
 <reference id="ref.stream">
  <title>ストリーム関数</title>
  <titleabbrev>ストリーム</titleabbrev>

  <partintro>

   <section id="stream.intro">
    &reftitle.intro;
    <simpara>
     ストリームは、<literal>PHP</literal> 4.3.0 に、
     ファイル、ネットワーク、データ圧縮などに関する、
     共通した一連の関数群と利用法を持つ操作の一般化の手法として
     導入されました。もっとも単純な定義では、<literal>ストリーム</literal>
     というのは、ストリーミング可能な動作を体現する <literal>resource</literal>
     オブジェクトといえます。つまり、ストリームには線的に読み出したり、
     あるいは書き込んだりすることが可能で、かつ、
     ストリーム上の任意の場所に <function>fseek</function> できる場合も
     あります。
    </simpara>
    <simpara>
     <literal>ラッパー</literal> というのは、ストリームにおいてどのように特定の
     プロトコル/エンコーディングを扱うかを扱うかを指示する付加的なコード
     です。たとえば、<literal>http</literal> ラッパーは、どのようにして
     URL を、リモートサーバのファイルに対する <literal>HTTP/1.0</literal>
     リクエストに転換するかを知っています。<literal>PHP</literal>
     には、デフォルトで組み込まれているラッパーが多数存在しますが
     (<xref linkend="wrappers"/> を参照下さい)、
     それに加え、カスタムラッパーを<function>stream_register_wrapper</function>
     を利用して PHP スクリプトの内部から、あるいはストリーム API を用いて、
     直接拡張モジュールの内部から追加できます。 (ストリーム API については
     <xref linkend="streams"/> を参照下さい)
     あらゆる種類のラッパーが <literal>PHP</literal> に追加できるので、
     特にラッパーでできることの限界はありません。
     現在登録されているラッパーの種類を知るには、
     <function>stream_get_wrappers</function> を使います。
    </simpara>
    <para>
     リソースは次のような形でストリームとして参照されます: <parameter>scheme</parameter>://<parameter>target</parameter>
     <itemizedlist>
      <listitem>
       <simpara>
        <parameter>scheme</parameter>(string) -
        使用されるラッパの名称です。例として、
        <literal>file</literal>, <literal>http</literal>, <literal>https</literal>,
        <literal>ftp</literal>, <literal>ftps</literal>,
        <literal>compress.zlib</literal>, <literal>compress.bz2</literal>,
        <literal>php</literal> などが含まれます。
        PHP 組み込みのラッパについては、<xref linkend="wrappers"/>
        を参照下さい。もしラッパが指定されていない場合は、使用している関数の
        デフォルトが利用されます(通常は <literal>file</literal>://)。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <parameter>target</parameter> - 
        使用するラッパによって解釈が異なります。
        ファイルシステムに関連したストリームの場合、
        一般的にこのパラメータは対象となるファイルの
        ファイル名とパスを表します。
        ネットワークに関連したストリームの場合、一般的に 
        このパラメータはホスト名と、(多くの場合付加されるはずの) パス名です。
        PHP 組み込みのラッパに、どのようにターゲットが解釈されるかは、
        <xref linkend="wrappers"/> を参照下さい。
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section id="stream.filters">
    <title>ストリームフィルタ</title>
    <simpara>
     <literal>フィルタ</literal> は、ストリームから読み込まれたり、
     あるいは、ストリームから書き込まれたするデータに対して何らかの
     操作を行う、最終段階にあるコードです。
     <literal>PHP</literal> スクリプトの内部で、
     <function>stream_register_filter</function> を使って、
     あるいは拡張モジュールの内部で <xref linkend="streams"/> に示された
     関連する API を使って、カスタムフィルタを作成することができます。
     現在登録されているフィルタの一覧を取得するには、
     <function>stream_get_filters</function> をお使いください。
    </simpara>
   </section>
  
   <section id="stream.contexts">
    <title>ストリームコンテキスト</title>
    <simpara>
     <literal>コンテキスト</literal> は、ストリームの挙動を変えたり、
     拡張したりすることのできる <literal>パラメータ</literal> と
     ラッパ固有の <literal>オプション</literal> の集合です。
     <literal>コンテキスト</literal> は、
     <function>stream_context_create</function> を使って生成しますが、
     これは、ほとんどのファイルシステム関連のストリーム生成関数に
     渡すことができます。(例えば <function>fopen</function>,
     <function>file</function>, <function>file_get_contents</function> など)
    </simpara>
    <simpara>
     <literal>オプション</literal> は、
     <function>stream_context_create</function> の呼び出し時に指定しますが、
     後で <function>stream_context_set_option</function> を使って
     指定することもできます。

     ラッパ固有の <literal>オプション</literal> については、
     組み込みラッパの一覧に説明があります。
     (<xref linkend="wrappers"/> を参照下さい)
    </simpara>
    <simpara>
     さらに、<function>stream_context_set_params</function> を使うことで、
     <literal>パラメータ</literal> を、<literal>コンテキスト</literal>
     に対し指定することができます。なお、現在のところ、<literal>PHP</literal>
     にサポートされている<literal>コンテキストパラメータ</literal> は、
     <literal>notification</literal> のみです。このパラメータの値は、
     ストリームに発生した何らかのイベントを通知するために呼び出される関数の
     名前でなくてはなりません。
     通知関数は次のような 6 個のパラメータを取ります:
    </simpara>
    <methodsynopsis>
     <type>void</type><methodname>my_notifier</methodname>
     <methodparam><type>int</type><parameter>notification_code</parameter></methodparam>
     <methodparam><type>int</type><parameter>severity</parameter></methodparam>
     <methodparam><type>string</type><parameter>message</parameter></methodparam>
     <methodparam><type>int</type><parameter>message_code</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_transferred</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_max</parameter></methodparam>
    </methodsynopsis>
    <simpara>
     <parameter>notification_code</parameter> と <parameter>severity</parameter>
     は、下記の <constant>STREAM_NOTIFY_*</constant> 定数に該当する数値です。

     もし、通知内容についての詳細メッセージがある場合、
     <parameter>message</parameter> と <parameter>message_code</parameter>
     に適切な値が入ります。なお、これらの値の意味するところは使われている
     ラッパによって異なります。

     <parameter>bytes_transferred</parameter> と <parameter>bytes_max</parameter>
     には、場合に応じて値が埋められます。
    </simpara>
   </section>
   
   <section id="stream.installation">
    &reftitle.install; 
    <para>
     ストリームは、バージョン 4.3.0 より、<literal>PHP</literal> の一部として
     統合されています。有効にするために特別な手順を踏む必要はありません。
    </para>
   </section>

   <section id="stream.resources">
    <title>ストリームのクラス</title>
    <simpara>
     ユーザ定義のラッパは、<function>stream_register_wrapper</function>
     で、同関数の説明ページに記載されたクラス定義を使うことで、
     登録することができます。
    </simpara>
    <simpara>
     ユーザ定義のフィルタ用に、<literal>class</literal> php_user_filter が、
     ベースとなる抽象クラスとしてあらかじめ定義されています。
     ユーザ定義のフィルタの実装に関する詳細は、
     <function>stream_register_filter</function> を参照下さい。
    </simpara>
   </section>

   &reference.stream.constants;

   <section id="stream.errors">
    <title>ストリームのエラー</title>
    <para>
     ファイルやソケット関連の関数で処理に失敗するのと同じように、
     ストリームにおける操作も様々な予測できる理由で失敗することがあります。
     (例: リモートホストに接続できない、ファイルが見つからない、等)
     また、ストリーム関連の関数呼び出しは、
     スクリプトの実行されるシステムにおいて、
     利用しようとしているストリームが登録されていないことから失敗することも
     あります。どのタイプのストリームがインストールされた
     <literal>PHP</literal> でサポートされているかは、
     <function>stream_get_wrappers</function> の返す配列の内容を参照
     してください。なお、他の <literal>PHP</literal> の内部関数と同様、
     <constant>E_WARNING</constant> メッセージがエラー時に出力され、
     エラーの原因を報告します。
    </para>
   </section>
   
   <section id="stream.examples">
    &reftitle.examples;
    <para>
     <example>
      <title><function>file_get_contents</function> を使って
      さまざまな場所からデータを取得する</title>
      <programlisting role="php">
<![CDATA[
<?php
/* /home/bar にあるローカルファイルを読み出す */
$localfile = file_get_contents("/home/bar/foo.txt");

/* 上と同一だが、明示的に FILE スキームを指定している */
$localfile = file_get_contents("file:///home/bar/foo.txt");

/* HTTP を利用し、www.example.com にあるリモートのファイルを読み出す */
$httpfile  = file_get_contents("http://www.example.com/foo.txt");

/* HTTPS を利用し、www.example.com にあるリモートのファイルを読み出す */
$httpsfile = file_get_contents("https://www.example.com/foo.txt");

/* FTP を利用し、ftp.example.com にあるリモートのファイルを読み出す */
$ftpfile   = file_get_contents("ftp://user:pass@ftp.example.com/foo.txt");

/* FTPS を利用し、ftp.example.com にあるリモートのファイルを読み出す */
$ftpsfile  = file_get_contents("ftps://user:pass@ftp.example.com/foo.txt");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>https のサーバに対して POST リクエストを行う</title>
      <programlisting role="php">
<![CDATA[
<?php
/* https://secure.example.com/form_action.php に対して POST リクエストを送信
 * ダミー値を持つ "foo" と "bar" というフォーム要素が含まれます。
 */

$sock = fsockopen("ssl://secure.example.com", 443, $errno, $errstr, 30);
if (!$sock) die("$errstr ($errno)\n");

$data = "foo=" . urlencode("Fooの値") . "&bar=" . urlencode("Barの値");

fputs($sock, "POST /form_action.php HTTP/1.0\r\n");
fputs($sock, "Host: secure.example.com\r\n");
fputs($sock, "Content-type: application/x-www-url-encoded\r\n");
fputs($sock, "Content-length: " . strlen($data) . "\r\n");
fputs($sock, "Accept: */*\r\n");
fputs($sock, "\r\n");
fputs($sock, "$data\r\n");
fputs($sock, "\r\n");

$headers = "";
while ($str = trim(fgets($sock, 4096)))
  $headers .= "$str\n";

print "\n";

$body = "";
while (!feof($sock))
  $body .= fgets($sock, 4096);

fclose($sock);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Writting data to a compressed file</title>
      <programlisting role="php">
<![CDATA[
<?php
/* 任意の文字列を含む圧縮ファイルを作成
 * ファイルは、compress.zlib ストリームを使っても、または単に
 * コマンドラインで 'gzip -d foo-bar.txt.gz' を使っても読み出せます。
 */
$fp = fopen("compress.zlib://foo-bar.txt.gz","wb");
if (!$fp) die("ファイルが作成できませぬ.");

fwrite($fp, "これはテストです.\n");

fclose($fp);
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.stream.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

