<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.16 Maintainer: takagi Status: ready -->
<section xml:id="apc.configuration" xmlns="http://docbook.org/ns/docbook">
 &reftitle.runtime;
 &extension.runtime;
 <para>
  たいていの場合はデフォルトの APC 設定でうまく動作しますが、
  きちんとチューニングをしたい場合は以下のパラメータを設定します。
 </para>
 <para>
  あなたが決めなければいけないことは、以下の 2 つです。
  まず APC にどれくらいの共有メモリを設定するかということ、そして、
  ファイルの更新チェックをリクエストのたびに APC が行うかどうかということです。
  これらに関連する ini ディレクティブが <literal>apc.shm_size</literal>
  および <literal>apc.stat</literal> です。これらのディレクティブについて、
  以下の説明を注意深くお読みください。
 </para>
 <para>
  サーバを起動したら、この拡張モジュールに含まれているスクリプト
  <literal>apc.php</literal> をドキュメントルート以下に配置し、
  ブラウザでアクセスしてください。
  キャッシュの状態についての詳細な情報がここで得られます。
  PHP で GD が使用可能になっている場合は、きれいなグラフも表示されます。
  まず最初にチェックすべきなのは、当然、
  実際にファイルがキャッシュされているかどうかでしょう。
  実際に動作していることを確認したら、次は左側にある
  <literal>Cache full count</literal> の値に注目しましょう。
  これは、キャッシュがいっぱいになったために強制削除が行われた
  (直近の <literal>apc.ttl</literal> 秒間にアクセスされなかったエントリが、
  キャッシュから削除された) 回数を表します。
  この値ができるだけ小さくなるようにキャッシュを設定しなければなりません。
  キャッシュが絶えずいっぱいになっているようだと、
  パフォーマンスに影響を及ぼします。
  この場合は、APC に割り当てるメモリの量を増やすか、
  キャッシュするスクリプトを絞り込むために
  <literal>apc.filters</literal> を使用します。
 </para>
 <para>
  <table>
   <title>APC の設定オプション</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>名前</entry>
      <entry>デフォルト</entry>
      <entry>変更の可否</entry>
      <entry>変更履歴</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>apc.enabled</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 2 で PHP_INI_SYSTEM。APC &lt;= 3.0.12 で PHP_INI_ALL。</entry>
     </row>
     <row>
      <entry>apc.shm_segments</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.shm_size</entry>
      <entry>"30"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.optimization</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.num_files_hint</entry>
      <entry>"1000"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.user_entries_hint</entry>
      <entry>"4096"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.0 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.ttl</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.0 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.user_ttl</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.0 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.gc_ttl</entry>
      <entry>"3600"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.cache_by_default</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry>APC &lt;= 3.0.12 で PHP_INI_SYSTEM。APC 3.0.0 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.filters</entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.mmap_file_mask</entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.slam_defense</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.0 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.file_update_protection</entry>
      <entry>"2"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.6 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.enable_cli</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.7 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.max_file_size</entry>
      <entry>"1M"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.7 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.stat</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.10 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.write_lock</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.11 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.report_autofilter</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.11 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.include_once_override</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.12 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.rfc1867</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.13 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.rfc1867_prefix</entry>
      <entry>"upload_"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.rfc1867_name</entry>
      <entry>"APC_UPLOAD_PROGRESS"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.rfc1867_freq</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.localcache</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.14 以降で利用可能。</entry>
     </row>
     <row>
      <entry>apc.localcache.size</entry>
      <entry>"512"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>APC 3.0.14 以降で利用可能。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  &ini.php.constants;
 </para>
 
 &ini.descriptions.title;
 
 <para>
  <variablelist>
   <varlistentry xml:id="ini.apc.enabled">
    <term>
     <parameter>apc.enabled</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      <literal>apc.enabled</literal> を 0 にすることで APC を無効にできます。
      APC が静的にコンパイルされて PHP に組み込まれており、
      他に無効にする手段がない場合などに有用です (DSO としてコンパイルされている場合は、
      単に <literal>php.ini</literal> の中の <literal>extension</literal>
      という行をコメントアウトするだけで無効にできます)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.shm-segments">
    <term>
     <parameter>apc.shm_segments</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      コンパイラキャッシュのために割り当てる共有メモリセグメントの数。
      APC が割り当て済みの共有メモリを使い切ってしまっているが、
      すでにシステムが許す限り <literal>apc.shm_size</literal>
      を拡大しているといった場合に、この値を大きくすることを試みます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.shm-size">
    <term>
     <parameter>apc.shm_size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      個々の共有メモリセグメントの大きさを MB 単位で指定します。デフォルトで、
      共有メモリセグメントの大きさが非常に小さく設定されているシステムもあります
      (大半の BSD 系システムがこれに含まれます)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.optimization">
    <term>
     <parameter>apc.optimization</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      最適化レベル。ゼロは最適化を無効にし、
      値を大きくするほど最適化のレベルが高くなります。
      わずかながら速度の向上が期待できます。この項目は実験的なものです。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.num-files-hint">
    <term>
     <parameter>apc.num_files_hint</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Web サーバで読み込まれるソースファイルの総数についての
      「ヒント」。よくわからない場合はゼロを指定するか、
      単に無視してください。
      何千ものソースファイルを扱っているようなサイトで有用です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.user-entries-hint">
    <term>
     <parameter>apc.user_entries_hint</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      <link linkend="ini.apc.num-files-hint">apc.num_files_hint</link> と同様に、
      保存するユーザキャッシュ変数の数についての「ヒント」。
      よくわからない場合は、ゼロを設定するか無視してください。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.ttl">
    <term>
     <parameter>apc.ttl</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      キャッシュされているエントリが、
      他のエントリに割り当てられるまでスロットに残っていることの可能な秒数。
      ゼロのままにしておくと、キャッシュの中身が古いエントリでいっぱいになってしまい、
      新しいエントリがキャッシュできなくなります。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.user-ttl">
    <term>
     <parameter>apc.user_ttl</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      ユーザキャッシュエントリが、
      他のエントリに割り当てられるまでスロットに残っていることの可能な秒数。
      ゼロのままにしておくと、キャッシュの中身が古いエントリでいっぱいになってしまい、
      新しいエントリがキャッシュできなくなります。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.gc-ttl">
    <term>
     <parameter>apc.gc_ttl</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      キャッシュエントリがガベージコレクションのリストに残り続ける秒数。
      ソースファイルのキャッシュ中にサーバプロセスが死んだ場合の安全装置となります。
      ソースファイルが変更された場合、メモリに割り当てられている古いバージョンは、
      この TTL に達するまで再読み込みされません。
      この機能を無効にするにはゼロを設定します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.cache-by-default">
    <term>
     <parameter>apc.cache_by_default</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      デフォルトで On です。しかし、これを Off にして
      <literal>+</literal> で始まる <literal>apc.filters</literal>
      とともに使用することで、
      フィルタに一致したファイルのみをキャッシュすることが可能です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.filters">
    <term>
     <parameter>apc.filters</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      カンマで区切られた、POSIX 拡張正規表現のリスト。
      ソースファイル名がいずれかのパターンにマッチした場合、そのファイルはキャッシュされません。
      マッチングに使用されるファイル名は include/require に渡される名前であり、
      絶対パスではないことに注意しましょう。正規表現が <literal>+</literal>
      で始まっている場合、その条件にマッチするファイルはキャッシュされます。
      また <literal>-</literal> で始まっている場合は、
      条件にマッチするファイルはキャッシュされません。
      デフォルトは <literal>-</literal> なので、これは省略可能です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.mmap-file-mask">
    <term>
     <parameter>apc.mmap_file_mask</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      <literal>--enable-mmap</literal> を用いて MMAP
      サポートつきでコンパイルされている場合、ここで
      mktemp 形式のファイルマスクを指定します。mmap モジュールは、
      mmap されたメモリ領域をファイルに置くか共有メモリに置くかを、
      これによって判断します。
      ファイルベースの mmap を使用するには、この値を
      <literal>/tmp/apc.XXXXXX</literal>
      （正確に 6 つの <literal>X</literal>）のように指定します。
      POSIX 形式の shm_open/mmap を使用するには、<literal>.shm</literal>
      をマスクのどこかで指定します。例: <literal>/apc.shm.XXXXXX</literal> 。
      また、<literal>/dev/zero</literal> を指定することで、カーネルの
      <literal>/dev/zero</literal> インターフェースを使用した anonymous mmap
      を使用することもできます。未定義の場合は、この方式が用いられます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.slam-defense">
    <term>
     <parameter>apc.slam_defense</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      非常にアクセスの多いサーバでは、
      サーバを起動したりファイルを書き換えたりするたびに
      「多くのプロセスが」「同時に」「同じファイルを」
      キャッシュしようとすることになります。このオプションを指定すると、
      ある一定のパーセンテージでファイルをキャッシュせずに利用するようにします。
      あるいは、単一のプロセスがキャッシュ処理をスキップする確率と考えることもできます。
      たとえば、<literal>apc.slam_defense</literal> を <literal>75</literal>
      に設定すると、プロセスがキャッシュされていないファイルをキャッシュする処理を 
      75% の確率で抑えられます。つまり、この値を大きく設定することで、
      キャッシュ処理の混雑を防ぐことが可能です。値を <literal>0</literal>
      に設定すると、この機能が無効になります。
     </para>
     <para>
      非推奨です。かわりに <link linkend="ini.apc.write-lock">apc.write_lock</link>
      を使用しましょう。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.file-update-protection">
    <term>
     <parameter>apc.file_update_protection</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      稼動中の Web サーバ上のファイルを書き換える場合、それを原始的（atomic）
      な手段で行うべきです。つまり、まずいったん一時ファイルに書き込み、
      準備ができた時点でそれをリネーム（<literal>mv</literal>）
      して正しい位置に移動します。多くのテキストエディタや cp、tar
      その他のプログラムはこの方式ではありません。
      ということは、ファイルの書き込み中にそのファイルがアクセスされる
      （そしてキャッシュされる）可能性があるわけです。
      <literal>apc.file_update_protection</literal> は、
      新しいファイルをキャッシュするまでの遅延を設定します。デフォルトは
      2 秒で、ファイルの更新時刻（<literal>mtime</literal>）がアクセス時刻と
      2 秒未満しか違わない場合はファイルをキャッシュしないという意味です。
      更新の最中のファイルにアクセスしてしまった不幸な人には
      変なデータが見えてしまいますが、
      少なくともその変な状態がキャッシュされてしまうことはありません。
      rsync などの原始的な更新を保証する方式を利用することがわかっている場合は、
      値を 0 に設定することでこの機能を無効にできます。
      更新処理に 2 秒以上かかるようなシステムを利用している場合は、
      この値をもう少し大きくしたくなるかもしれません。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.enable-cli">
    <term>
     <parameter>apc.enable_cli</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      たいていは、テストやデバッグ用に使用します。これを設定すると
      CLI バージョンの PHP で APC を有効にします。通常は、すべての
      CLI リクエストに対して APC キャッシュを作成/格納/削除したいとは思わないでしょう。
      しかし、CLI バージョンの APC を簡単に作成できるようにしておくことは、
      多くのテストシナリオで有用です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.max_file_size">
    <term>
     <parameter>apc.max_file_size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      この値よも大きなサイズのファイルは、キャッシュされません。
      デフォルトは 1M です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.stat">
    <term>
     <parameter>apc.stat</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      この設定を変更する場合は十分注意してください。デフォルト設定は On で、
      これは、ファイルが変更されていないかどうかを
      スクリプトの実行のたびに APC が調べ、
      もし変更されていれば、再コンパイルして新しいバージョンをキャッシュします。
      この設定を Off にすると、変更されているかどうかがチェックされません。
      つまり、変更内容を有効にするには Web サーバを再起動する必要があるということです。
      実運用環境ではコードを変更することはめったにないでしょうから、
      この設定を Off にしておくことでパフォーマンスを大きく向上させられます。
     </para>
     <para>
      included/require されたファイルについてもこのオプションは適用されますが、
      もし相対パス (Unix の場合は / で始まらないすべてのパス) の include
      を使用している場合は、ファイルを一意に識別するために APC
      がチェックする必要があります。
      絶対パスの includes を使用している場合、
      APC 絶対パスをファイルの識別子として使用し、
      チェックを飛ばすことができます。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.write-lock">
    <term>
     <parameter>apc.write_lock</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      多くの処理が実行されるサーバでは、最初にサーバを立ち上げたときや
      多くのファイルを変更した場合などに、
      すべてのプロセスが同一のファイルをコンパイルしたりキャッシュしたりしてしまうことがあります。
      write_lock を有効にすると、ひとつのプロセスのみが
      未キャッシュのスクリプトをコンパイルするようになります。
      その間、他のプロセスはロック待ちをするのではなく
      キャッシュされていない状態で実行します。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.report-autofilter">
    <term>
     <parameter>apc.report_autofilter</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      バインド時の問題によりキャッシュから自動的に除外されたスクリプトを記録します。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.include-once-override">
    <term>
     <parameter>apc.include_once_override</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      <function>include_once</function> および <function>require_once</function>
      を最適化し、コストの高いシステムコールの使用を避けるようにします。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.rfc1867">
    <term>
     <parameter>apc.rfc1867</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      RFC1867 のファイルアップロード進捗ハンドラが有効になるのは、
      PHP 5.2.0 以降で APC をコンパイルした場合のみです。
      これを有効にすると、ファイルアップロードフォームの file フィールドの前に
      <literal>APC_UPLOAD_PROGRESS</literal> というフィールドがある場合に
      APC が自動的にユーザキャッシュエントリ upload_<emphasis>key</emphasis>
      を作成します。ここで、<emphasis>key</emphasis> はフォームの
      <literal>APC_UPLOAD_PROGRESS</literal> エントリの値となります。
     </para>
     <para>
      現時点では、ファイルアップロードの追跡はスレッドセーフではないことに注意しましょう。
      前のアップロード処理が終わる前に別のアップロードを開始すると、
      前のアップロードの追跡が無効になってしまいます。
     </para>
     <para>
      <example>
       <title>apc.rfc1867 の例</title>
       <programlisting role="php">
<![CDATA[
<?php
print_r(apc_fetch("upload_$_POST[APC_UPLOAD_PROGRESS]"));
?>
]]>
       </programlisting>
       &example.outputs.similar;
       <screen>
<![CDATA[
Array
(
    [total] => 1142543
    [current] => 1142543
    [rate] => 1828068.8
    [filename] => test
    [name] => file
    [temp_filename] => /tmp/php8F
    [cancel_upload] => 0
    [done] => 1
)
]]>
       </screen>
      </example>
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.rfc1867_prefix">
    <term>
     <parameter>apc.rfc1867_prefix</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      rfc1867 のアップロード進捗処理機能で作成するユーザキャッシュエントリの
      キーにつけるプレフィックスを指定します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867_name">
    <term>
     <parameter>apc.rfc1867_name</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      APC のアップロード進捗処理機能を有効にするフォームの hidden
      項目名、そしてユーザキャッシュエントリのキーのサフィックスを指定します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867_freq">
    <term>
     <parameter>apc.rfc1867_freq</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      アップロードの進捗を記録するユーザキャッシュエントリの更新頻度を指定します。
      ファイルサイズに対するパーセンテージ、あるいはファイルサイズで指定します。
      サイズを指定する場合は、最後に 'k'、'm' あるいは 'g'
      を指定することでそれぞれキロバイト、メガバイト、ギガバイトを指定できます
      (大文字小文字は区別しません)。
      0 を指定すると、可能な限り進捗を更新するようにします。
      これは、アップロードの速度を低下させてしまいます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.localcache">
    <term>
     <parameter>apc.localcache</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      これは、ロックが不要なローカルプロセスのシャドウキャッシュを有効にします。
      これにより、キャッシュが書き込まれる際のロックの競合を軽減します。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.localcache.size">
    <term>
     <parameter>apc.localcache.size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      ローカルプロセスのシャドウキャッシュの大きさ。
      ある程度大きなな値を設定しておく必要があります。目安としては
      <link linkend="ini.apc.num-files-hint">apc.num_files_hint</link>
      の半分程度となります。
     </para>
    </listitem>
   </varlistentry>
   
  </variablelist>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
