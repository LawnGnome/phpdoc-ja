<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.10 Maintainer: hirokawa Status: working -->
<reference id="ref.com"> 
  <title>COM と .Net (Windows)</title> 
  <titleabbrev>COM</titleabbrev> 
  <partintro> 
   <section id="com.intro">
    &reftitle.intro;
    <para>
     COMはComponent Object Model; の略語であり、
     DCE RPC (オープンスタンダード) の最上位のオブジェクト指向レイヤーです。
     COMは、コール手順を共通化し、あらゆる言語でコードを記述し、
     (COMに対応した)他の言語で書かれたコードをコール、相互運用することを可能にします。
     あらゆる言語で書くことを可能にするだけではなく、
     同じ実行形式の一部となることすら不要です。
     コードは、同じマシンで実行される他のプロセスのコードであるDLLからロード可能したり、
     または、リモートマシン上の他のプロセスにあるコードをDCOM (Distributed COM) で
     利用することができます。
     この場合、コードの中では、コンポーネントの存在する場所を意識する必要はありません。
    </para>
    <para>
     OLEオートメーションと呼ばれるCOMのサブセットがあります。
     これは、COMオブジェクトに祖な結合を行うことができるCOMインターフェイスを
     提供します。これにより、コンパイル時にオブジェクトの動作を知ることなく、
     実行時にコールを行うことができるようになります。
     PHP COMエクステンションは、OLEオートメーションを使用して、
     スクリプトから互換性のあるオブジェクトを作成/コールすることができます。
     技術的に述べると、
     全てのCOMオブジェクトがOLE互換であるというわけではないため、
     実際には、このエクステンションは、"PHPのOLEオートメーション
     エクステンション"と呼ばれるべきものです。
    </para>
    <para>
     ところで、なぜ、COMを使用する必要があるのでしょう? COMは、
     Windows環境で、アプリケーションとコンポーネントを結び付ける代表的な手法の一つで、
     COMを使用してMicrosoft Wordを起動し、
     ドキュメントテンプレートを埋めて、Word文書として結果を保存し、Webサイトの
     訪問者に送信することができます。
     また、COMを使用して、ネットワークの管理タスクを処理したり、
     IISを設定することができます。これらは、最も一般的な使用法にすぎません。
     COMでできることはまだまだたくさんあります。
    </para>
    <para>
     PHP 5以降、このエクステンション(とこの文書)は、最初から書き直され、
     古い紛らわしい部分は、削除されました。さらにMicrosoftにより提供された
     COMとの相互運用レイヤーを用いて
     .Netアセンブリのインスタンス化と生成をサポートしました。
    </para>
    <para> 
     PHP 5におけるこのエクステンションの変更点の概要については、
     <ulink url="&url.zend.comdotnet;">この文章</ulink>
     を参照してください。
    </para>
   </section>

   <section id="com.requirements">
    &reftitle.required;
    <para>
     COM関数は、Windows版のPHPでのみ利用可能です。
    </para>
    <para>
     .Net サポートは、PHP 5 と .Net ランタイムを必要とします。
    </para> 
   </section>

   <section id="com.installation">
    &reftitle.install;
    &no.install;
    &windows.builtin;
    <para>
     あなたには、(MS Wordのような)使用する様々なCOMオブジェクトのインストールを正しく
     行っておく責任があります。
     PHPにこれら全てをバンドルすることはできません。
    </para>
   </section>

   <section id="com.foreach">
    <title>foreach</title>

    <para>
     PHP 5以降、標準的なCOM/OLE IEnumVariantの内容について
     PHPの<xref linkend="control-structures.foreach"/>命令を
     使用し、反復処理を行うことができます。分かりやすく言うと、
     これは、VB/ASPのコードで<literal>For Each</literal>を使用できる
     場所には、foreachを使用できるということ意味します。
    </para>

   <para>
    <example>
     <title>ASP におけるFor Each</title>
     <programlisting role="asp">
<![CDATA[
<%
Set domainObject = GetObject("WinNT://Domain")
For Each obj in domainObject
  Response.Write obj.Name & "<br />"
Next
%>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>PHP 4におけるwhile() ... Next()</title>
     <programlisting role="php">
<![CDATA[
<?php 
$domainObject = new COM("WinNT://Domain"); 
while ($obj = $domainObject->Next()) { 
   echo $obj->Name . "<br />"; 
} 
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>PHP 5におけるforeach</title>
     <programlisting role="php">
<![CDATA[
<?php 
$domainObject = new COM("WinNT://Domain"); 
foreach ($domainObject as $obj) { 
   echo $obj->Name . "<br />"; 
} 
?>
]]>
     </programlisting>
    </example>
   </para>
   </section>

   <section id="com.arrays">
    <title>配列と配列形式のCOMプロパティ</title>

    <para>
     Many COM objects expose their properties as arrays, or using array-style
     access.  In PHP 4, you may use PHP array syntax to read/write such a
     property, but only a single dimension is allowed.  If  you want to read a
     multi-dimensional property, you could instead make the property access
     into a function call, with each parameter representing each dimension of
     the array access, but there is no way to write to such a property.
    </para>

    <para>
     PHP 5 introduces the following new features to make your life easier:

     <itemizedlist>
      <listitem>
       <para>
        Access multi-dimensional arrays, or COM properties that require
        multiple parameters using PHP array syntax.  You can also write or set
        properties using this technique.
       </para>
      </listitem>

      <listitem>
       <para>
        Iterate SafeArrays ("true" arrays) using the <xref
        linkend="control-structures.foreach"/> control structure.  This works
        because SafeArrays include information about their size.  If an
        array-style property implements IEnumVariant then you can also use
        foreach for that property too; take a look at <xref
        linkend="com.foreach"/> for more information on this topic.
       </para>
      </listitem>
     </itemizedlist>
    </para>

    </section>
    
    <section id="com.exceptions">
     <title>例外 (PHP 5)</title>
     
     <para>
      この
      This extension will throw instances of the class <literal>com_exception</literal>
      whenever there is a potentially fatal error reported by COM.  All
      COM exceptions have a well-defined <literal>code</literal> property that
      corresponds to the HRESULT return value from the various COM operations.
      You may use this code to make programmatic decisions on how to handle the
      exception.
     </para>
     
    </section>
    
    &reference.com.ini;
    
    &reference.com.constants;
    
    <section id="com.seealso">
     &reftitle.seealso;
     <para>
      For further information on COM read the <ulink url="&url.comspecs;">COM
       specification</ulink> or perhaps take a look at Don Box's 
      <ulink url="&url.yacl;">Yet Another COM Library (YACL)</ulink>.
      You might find some additional useful information in our FAQ for <xref
       linkend="faq.com"/>.
      If you're thinking of using MS Office applications on the server side,
      you should read the information here: <ulink
       url="&url.msoffice.serverside;">Considerations for Server-Side Automation
       of Office</ulink>.
     </para> 
    </section>
   </partintro> 

    &reference.com.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

