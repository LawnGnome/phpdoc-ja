<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./ja/functions/funchand.xml, last change in rev 1.1 -->
<!-- last change to 'create-function' in en/ tree in rev 1.1 -->
  <refentry id="function.create-function">
   <refnamediv>
    <refname>create_function</refname>
    <refpurpose>匿名(ラムダ形式)関数を作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>create_function</methodname>
      <methodparam><type>string</type><parameter>args</parameter></methodparam>
      <methodparam><type>string</type><parameter>code</parameter></methodparam>
     </methodsynopsis>
    <para>
     指定したパラメータにより匿名関数を作成し、その関数のユニークな名
     前を返します。通常、<parameter>args</parameter> をシングルクオー
     トで括られた文字列で指定します。<parameter>code</parameter> につ
     いても同様に指定することが推奨されます。シングルクオートで括った
     文字列を使用する理由は、パース時に変数名を保護するためです。ダブ
     ルクオートを使用した場合には、<literal>\$avar</literal>のように変
     数名をエスケープする必要があります。
    </para>
    <para>
     (例えば、)実行時に取得した情報から関数を作成する際にこの関数を使
     用することが可能です。
     <example>
      <title>
       <function>create_function</function>により匿名関数を作成する
      </title>
      <programlisting role="php">
$newfunc = create_function('$a,$b','return "ln($a) + ln($b) = ".log($a * $b);');
echo "New anonymous function: $newfunc\n";
echo $newfunc(2,M_E)."\n";
// 出力
// 新規匿名関数: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
      </programlisting>
     </example>
     もしくは、一般的なハンドル関数を作成するために、パラメータのリス
     トに一連の演算子を適用することも可能です。
     <example>
      <title>
       <function>create_function</function>で一般的な処理関数を作成する
      </title>
      <programlisting role="php">
function process($var1, $var2, $farr) {
    for ($f=0; $f &lt; count($farr); $f++)
    echo $farr[$f]($var1,$var2)."\n";
}

// 一連の数学関数を作成する
$f1 = 'if ($a &gt;=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a &gt; 0 &amp;&amp; $b != 0) {return "ln(a)/b = ".log($a)/$b;} else {return false;}';
$farr = array(
    create_function('$x,$y', 'return "some trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "a hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUsing the first array of anonymous functions\n";
echo "parameters: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// 一連の文字列処理関数を作成する
$garr = array(
    create_function('$b,$a','if (strncmp($a,$b,3) == 0) return "** \"$a\" '.
    'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)";'),
    create_function('$a,$b','; return "CRCs: ".crc32($a)." , ".crc32(b);'),
    create_function('$a,$b','; return "similar(a,b) = ".similar_text($a,$b,&amp;$p)."($p%)";')
    );
echo "\nUsing the second array of anonymous functions\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
      </programlisting>
     </example>
     上のコードを実行した場合、出力は次のようになります。
     <informalexample>
      <programlisting>
Using the first array of anonymous functions
parameters: 2.3445, M_PI
some trig: -1.6291725057799
a hypotenuse: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a/b) = 0.27122299212594

Using the second array of anonymous functions
** "Twas the night" and "Twas brilling and the slithy toves"
** Look the same to me! (looking at the first 3 chars)
CRCs: -725381282 , 1908338681
similar(a,b) = 11(45.833333333333%)
      </programlisting>
     </informalexample>
     しかし、恐らくラムダ形式の(匿名)関数の最も一般的な使用法は、
    <function>array_walk</function> または <function>usort</function>
     を使用する場合にようにコールバック関数を作成する場合でしょう。
    <example>
     <title>コールバック関数として匿名関数を使用</title>
     <programlisting role="php">
$av = array("the ","a ","that ","this ");
array_walk($av, create_function('&amp;$v,$k','$v = $v."mango";'));
print_r($av);  // for PHP3 use var_dump()
// 出力:
// Array
// (
//   [0] =&gt; the mango
//   [1] =&gt; a mango
//   [2] =&gt; that mango
//   [3] =&gt; this mango
// )

// 短い順にソートされた文字列の配列
$sv = array("small","larger","a big string","it is a string thing");
print_r($sv);
// 出力:
// Array
// (
//   [0] =&gt; small
//   [1] =&gt; larger
//   [2] =&gt; a big string
//   [3] =&gt; it is a string thing
// )

// 長さ順にソートする
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
// 出力:
// Array
// (
//   [0] =&gt; it is a string thing
//   [1] =&gt; a big string
//   [2] =&gt; larger
//   [3] =&gt; small
// )
     </programlisting>
    </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
