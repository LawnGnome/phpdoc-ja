<?xml version="1.0" encoding="utf-8"?>
 <reference id="ref.sesam">
  <title>SESAM データベース関数</title>
  <titleabbrev>SESAM</titleabbrev>

  <partintro>
   <section id="sesam.intro">
    &reftitle.intro;
    <para>
     SESAM/SQL-Server は、ドイツの Fujitsu Siemens コンピュータにより開
     発されたメインフレーム上のデータベースシステムです。このデータベー
     スは、ハイエンドのメインフレーム上でオペレーティングシステム
     BS2000/OSD を使用して動作します。
    </para>
    <para>
     数多くのBS2000システムにて実運用され、SESAM/SQL-Server は以下の事
     項を実証しています。
     <itemizedlist>
     <listitem>
      <simpara>
       Java、Web ベースのクライアント/サーバ接続が簡単に可能
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       99.99% 以上の確率で有効に動作する能力
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       数万から数十万のユーザを管理する能力
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHPスクリプトによるデータベース処理を可能にする PHP3 SESAM インター
    フェースが利用可能です。
   </para>
    <note>
     <simpara>
      SESAMへのアクセスは、CVS版の<literal>PHP3</literal>でのみ可能で
      す。<literal>PHP 4</literal>は、SESAMデータベースをサポートしま
      せん。
     </simpara>
    </note>
   </section>

   &reference.sesam.ini;

   <section id="sesam.cursor-types">
    <title>カーソル型</title>
    <para>
     SQL "select 型"クエリ用に確保された結果カーソルは、"sequential"ま
     たは"scrollable"のどちらかとすることが可能です。"scrollable"カー
     ソルで必要なメモリオーバヘッドはより大きいため、デフォルトは
     "sequential" です。
    </para>
    <para>
     "scrollable"カーソルを使用した場合、カーソルは結果集合の中で自由
     に移動可能です。各"scrollable"クエリについて、スクロール型のグロー
     バルなデフォルト値(<literal>SESAM_SEEK_NEXT</literal>に初期化され
     ます)があり、スクロールオフセットは、
     <function>sesam_seek_row</function> により一回設定されるか、
     <function>sesam_fetch_row</function> によりレコードを取得する度に
     設定されるかのどちらかです。"scrollable"カーソルを使用してレコー
     ドを取得する際に、スクロール型およびスクロールオフセットのグロー
     バルデフォルト値について次のようなポスト処理行われます。
     <table>
      <title>スクロール後のカーソルに関するポスト処理</title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>スクロール型</entry>
 	<entry>動作</entry>
        </row>
       </thead>
       <tbody>
        <row>
	 <entry><literal>SESAM_SEEK_NEXT</literal></entry>
	 <entry>なし</entry>
        </row>
        <row>
	 <entry><literal>SESAM_SEEK_PRIOR</literal></entry>
	 <entry>なし</entry>
        </row>
        <row>
	 <entry><literal>SESAM_SEEK_FIRST</literal></entry>
	 <entry>
	  スクロール型を <literal>SESAM_SEEK_NEXT</literal> に設定
	 </entry>
        </row>
        <row>
	 <entry><literal>SESAM_SEEK_LAST</literal></entry>
	 <entry>
	  スクロール型を <literal>SESAM_SEEK_PRIOR</literal> に設定
	 </entry>
        </row>
        <row>
	 <entry><literal>SESAM_SEEK_ABSOLUTE</literal></entry>
	 <entry>
	  内部オフセット値を自動的に増加させる
	 </entry>
        </row>
        <row>
	 <entry><literal>SESAM_SEEK_RELATIVE</literal></entry>
	 <entry>
	  なし。(グローバルデフォルト値 <parameter>offset</parameter>
	  を保持する。これにより、例えば、10個前のレコードを取得すると
	  いったことが可能になります)
	 </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
   </section>

   <section id="sesam.porting-note">
    <title>移植上の注意</title>
    <para>
     PHPでは、配列の添字は(1よりも)0から始まるのが普通なため、いくつか
     の調整がSESAMインターフェースで行われています。ある添字配列がネー
     ティブのSESAMインターフェースで添字1から始まる際には、PHPインター
     フェースでは最初の添字として0を使用します。例えば、
     <function>sesam_fetch_row</function> でカラムを取得する際に、最初
     のカラムの添字は0であり、その後のカラム番号はカラム数
     ($array["count"])に達するまで(カラム数は含まず)増えていきます。
     SESAMアプリケーションを他の高級言語からPHPに移植する際には、この
     インターフェース上の変更に留意する必要があります。各PHP sesam 関
     数の説明の適切な場所に添字が0から始まるという注意が含まれています。
    </para>
   </section>

   <section id="sesam.security">
    <title>セキュリティの考慮</title>
    <para>
     SESAMデータベースへのアクセスが可能な場合、Webサーバのユーザは、
     可能な限り小さな権限のみを有している必要があります。多くのデータ
     ベースでは許可する必要があるのは読み込み権限のみです。使用する設
     定に応じて状況に見合ったアクセス権限を追加して下さい。決してネッ
     トからの全てのユーザに全てのデータベースへの完全な制御権を許可し
     ないで下さい! データベースを管理するPHPスクリプトへのアクセス制限
     は、パスワード制限またはSSLセキュリティにより制限して下さい。
    </para>
   </section>

   <section id="sesam.migration">
    <title>他のSQLデータベースからの移行</title>
    <para>
     SQLには方言があるため100%互換ではありません。他のデータベースイン
     ターフェースからSQLアプリケーションをSESAMに移植する際には、いく
     つかの修正が必要になる可能性があります。次のような典型的な差異に
     注意する必要があります。
     <itemizedlist>
      <listitem>
       <simpara>ベンダ固有のデータ型</simpara>
       <simpara>
	いくつかのベンダ固有のデータ型は、標準的なSQLデータ型で置換す
	る必要があります。(例えば、<literal>TEXT</literal> は
	<literal>VARCHAR(max. size)</literal>で置換可能です。)
     </simpara>
      </listitem>
      <listitem>
       <simpara>SQL IDと同じキーワード</simpara>
       <simpara>
	SESAM では(通常のSQLと同様に)このようなIDは2重引用付で括る(も
	しくは名前を変える)必要があります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>データ型の表示長</simpara>
       <simpara>
	SESAM データ型は表示長ではなく、ある精度を有しています。
	
	<literal>int(4)</literal>(意図された使用法:'9999'までの整数)の
	代わりに、SESAM は単に31ビット長の<literal>int</literal>を要求
	します。また、SESAMで利用可能な日付時刻型は次のものだけです。
	<literal>DATE</literal>、 <literal>TIME(3)</literal>、
	<literal>TIMESTAMP(3)</literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	ベンダ固有のSQL型 <literal>unsigned</literal>、
	<literal>zerofill</literal>、<literal>auto_increment</literal> 
	属性
       </simpara>
       <simpara>
	<literal>unsigned</literal> と <literal>zerofill</literal> は
        サポートされません。<literal>auto_increment</literal> は自動で
        す。(SESAMに実装された自動インクリメントの利点を活かすために、
	<literal>"... VALUES(0,...)"</literal> の代わりに
	<literal>"INSERT ... VALUES(*, ...)"</literal> を使用して下さ
        い。)
       </simpara>
      </listitem>
      <listitem>
       <simpara><command>int ... DEFAULT '0000'</command></simpara>
       <simpara>
	数値変数は、文字列定数で初期化するべきではありません。代わりに
	<command>DEFAULT 0</command> を使用して下さい。SQLデータ型
	datetime の変数を初期化する際、初期化文字列には、次のように適
	当な型キーワードを前に付加する必要があります。
	<literal> CREATE TABLE exmpl (
                xtime timestamp(3) DEFAULT TIMESTAMP '1970-01-01 00:00:00.000' NOT &null;
                ); 
	</literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara><command>$count = xxxx_num_rows();</command></simpara>
       <simpara>
	いくつかのデータベースは、返される値が著しく不正確であるとして
	も、クエリ結果のレコード数を推定または見積もろうとします。
	SESAM はクエリ結果のレコード数を実際に取得する前に知ることはあ
	りません。その数が実際に必要な場合には、
	<command>SELECT COUNT(...) WHERE ...</command> を試してみて下
	さい。このクエリは、ヒット数を取得します。2番目のクエリは(理想
	的には)結果を返します。
       </simpara>
      </listitem>
      <listitem>
       <simpara><command>DROP TABLE thename;</command></simpara>
       <simpara>
	SESAMでは、<command>DROP TABLE</command> においてテーブル名の
	後にキーワード <literal>RESTRICT</literal> または
	<literal>CASCADE</literal> のどちらかを後に付加する必要があり
	ます。<literal>RESTRICT</literal> を指定した場合、(VIEWのよう
	な)依存するオブジェクトがある場合にエラーが返されます。また、
	<literal>CASCADE</literal> を指定した場合、依存するオブジェク
	トは指定したテーブルから削除されます。
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section id="sesam.sql-types">
    <title>
     様々なSQL型を使用する場合の注意
    </title>
    <para>
     SESAM は現在BLOB型をサポートしていません。SESAMの将来のバージョン
     は、BLOBをサポートする予定です。
    </para>
    <para>
     PHP インターフェースでは、SQLフィールドを取得する際に次の型変換が
     自動的に適用されます。
     <table>
      <title>SQL から PHP への型変換</title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>SQL 型</entry>
 	<entry>PHP 型</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>SMALLINT, INTEGER</entry>
 	<entry>"integer"</entry>
        </row>
        <row>
 	<entry>NUMERIC, DECIMAL, FLOAT, REAL, DOUBLE</entry>
 	<entry>"double"</entry>
        </row>
        <row>
 	<entry>DATE, TIME, TIMESTAMP</entry>
 	<entry>"string"</entry>
        </row>
        <row>
 	<entry>VARCHAR, CHARACTER</entry>
 	<entry>"string"</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     レコード全体を取得する際、結果は配列として返されます。空のフィー
     ルドには値が入っていないため、個々のフィールド自体の存在を調べる
     必要があります(空のフィールドかどうか調べるには、
     <function>isset</function> または <function>empty</function> を使
     用して下さい) 。この手法は、(空のフィールドの表現として型の文字列
     を使用するよりも)空のフィールドの見え方をユーザが制御することが可
     能となります。
    </para>
   </section>

   <section id="sesam.multiple-fields">
    <title>SESAM の "複数フィールド" 機能のサポート</title>
    <para>
     SESAM特有の"複数フィールド"機能により複数のフィールドの配列からな
     るカラムを使用することが可能です。"複数フィールド"カラム亜は、次
     のように作成可能です。
     <example>
      <title>"複数フィールド"カラムを作成する</title>
      <programlisting role="sesam">
<![CDATA[
CREATE TABLE multi_field_test (
    pkey CHAR(20) PRIMARY KEY,
    multi(3) CHAR(12)
)
]]>
      </programlisting>
     </example>
     上のレコードに次のように代入することができます。
     <example>
      <title>"複数フィールド"カラムに代入する</title>
      <programlisting role="sesam">
<![CDATA[
INSERT INTO multi_field_test (pkey, multi(2..3) )
    VALUES ('Second', <'first_val', 'second_val'>)
]]>
      </programlisting>
     </example>
     (この場合のように)先頭の空のサブフィールドは無視され、代入された
     値は詰められることに注意して下さい。このため、上記の例の結果は、
     multi(2..3) ではなく、multi(1..2) となります。
    </para>
    <para>
     結果レコードを取得する際、"複数カラム"は"インラインの"付加カラム
     のようにアクセスされます。上のにおいて、"pkey" は添字0を有し、3つ
     の"multi(1..3)" カラムは添字1から3でアクセス可能です。
    </para>
   </section>

   <section id="sesam.seealso">
    &reftitle.seealso;
    <para>
     SESAM固有の事項について詳細は、<ulink url="&url.sesam.en;">the
      SESAM/SQL-Serverドキュメント(英語)</ulink> または
     <ulink url="&url.sesam.de;">SESAM/SQL-Server ドキュメント(ドイツ語)
     </ulink> を参照下さい。共にオンラインで参照可能です。もしくは、適
     当なマニュアルを使用して下さい。
    </para>
   </section>

  </partintro>

&reference.sesam.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

