<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.13 Maintainer: hirokawa Status: ready -->
<!-- State: deprecated -->
<!-- TODO: Delete this PHP 3 only extension -->
<!-- TRANSLATORS: Do not waste time translating it -->

 <reference xml:id="ref.sesam" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>SESAM データベース &Functions;</title>
  <titleabbrev>SESAM</titleabbrev>

  <partintro>
   <section xml:id="sesam.cursor-types">
    <title>カーソル型</title>
    <para>
     SQL "select 型"クエリ用に確保された結果カーソルは、"sequential"
     または "scrollable" のどちらかとすることが可能です。"scrollable"
     カーソルで必要なメモリオーバヘッドはより大きいため、デフォルトは
     "sequential" です。
    </para>
    <para>
     "scrollable" カーソルを使用した場合、カーソルは結果集合の中で自由に
     移動可能です。各 "scrollable" クエリについて、スクロール型の
     グローバルなデフォルト値 (<literal>SESAM_SEEK_NEXT</literal>
     に初期化されます) があり、スクロールオフセットは、
     <function>sesam_seek_row</function> により一回設定されるか、
     <function>sesam_fetch_row</function> によりレコードを取得する度に
     設定されるかのどちらかです。"scrollable" カーソルを使用して
     レコードを取得する際に、スクロール型およびスクロールオフセットの
     グローバルデフォルト値について次のような後処理が行われます。
     <table>
      <title>スクロール後のカーソルに関する後処理</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>スクロール型</entry>
         <entry>動作</entry>
        </row>
       </thead>
       <tbody>
        <row>
     <entry><literal>SESAM_SEEK_NEXT</literal></entry>
     <entry>なし</entry>
        </row>
        <row>
     <entry><literal>SESAM_SEEK_PRIOR</literal></entry>
     <entry>なし</entry>
        </row>
        <row>
     <entry><literal>SESAM_SEEK_FIRST</literal></entry>
     <entry>
      スクロール型を <literal>SESAM_SEEK_NEXT</literal> に設定
     </entry>
        </row>
        <row>
     <entry><literal>SESAM_SEEK_LAST</literal></entry>
     <entry>
      スクロール型を <literal>SESAM_SEEK_PRIOR</literal> に設定
     </entry>
        </row>
        <row>
     <entry><literal>SESAM_SEEK_ABSOLUTE</literal></entry>
     <entry>
       内部オフセット値を自動的に増加させる
     </entry>
        </row>
        <row>
     <entry><literal>SESAM_SEEK_RELATIVE</literal></entry>
     <entry>
      なし (グローバルデフォルト値 <parameter>offset</parameter>
      を保持する。これにより、例えば、10 個前のレコードを取得すると
      いったことが可能になります)。
     </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
   </section>

   <section xml:id="sesam.porting-note">
    <title>移植上の注意</title>
    <para>
     PHP では配列の添字は (1 よりも) 0 から始まるのが普通なため、
     いくつかの調整が SESAM インターフェースで行われています。
     ある添字配列がネイティブの SESAM インターフェースで添字 1 から始まる
     際には、PHP インターフェースでは最初の添字として 0 を使用します。
     例えば、<function>sesam_fetch_row</function> でカラムを取得する際に、
     最初のカラムの添字は 0 であり、その後のカラム番号はカラム数
     ($array["count"]) に達するまで (カラム数は含まず) 増えていきます。
     SESAM アプリケーションを他の高級言語から PHP に移植する際には、この
     インターフェース上の変更に留意する必要があります。各 PHP sesam
     関数の説明の適切な場所に添字が 0 から始まるという注意が含まれています。
    </para>
   </section>

   <section xml:id="sesam.security">
    <title>セキュリティの考慮</title>
    <para>
     SESAM データベースへのアクセスが可能な場合、Web サーバのユーザは、
     可能な限り小さな権限のみを有している必要があります。多くの
     データベースでは許可する必要があるのは読み込み権限のみです。
     使用する設定に応じて状況に見合ったアクセス権限を追加してください。
     決してインターネットからの全てのユーザに全てのデータベースへの
     完全な制御権を許可しないでください! データベースを管理する PHP
     スクリプトへのアクセス制限は、パスワード制限または
     SSL セキュリティにより制限してください。
    </para>
   </section>

   <section xml:id="sesam.migration">
    <title>他の SQL データベースからの移行</title>
    <para>
     SQL には方言があるため 100% 互換ではありません。他のデータベース
     インターフェースから SQL アプリケーションを SESAM に移植する際には、
     いくつかの修正が必要になる可能性があります。次のような典型的な差異に
     注意する必要があります。
     <itemizedlist>
      <listitem>
       <simpara>ベンダ固有のデータ型</simpara>
       <simpara>
        いくつかのベンダ固有のデータ型は、標準 SQL のデータ型で
        置換する必要があります (例えば、<literal>TEXT</literal> は
        <literal>VARCHAR(max. size)</literal> で置換可能です)。
       </simpara>
      </listitem>
      <listitem>
       <simpara>SQL 識別子と同じキーワード</simpara>
       <simpara>
        SESAM では (標準 SQL と同様に) このような ID は二重引用符で括る
        (もしくは名前を変える) 必要があります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>データ型の表示長</simpara>
       <simpara>
        SESAM データ型は表示長ではなく、ある精度を有しています。
        <literal>int(4)</literal> (意図された使用法: '9999' までの整数)
        の代わりに、SESAM は単に 31 ビット長の <literal>int</literal>
        を要求します。また、SESAMで利用可能な日付時刻型は次のものだけです。
        <literal>DATE</literal>、<literal>TIME(3)</literal>、
        <literal>TIMESTAMP(3)</literal>。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        ベンダ固有の SQL 型 <literal>unsigned</literal>、
        <literal>zerofill</literal>、<literal>auto_increment</literal> 
        属性
       </simpara>
       <simpara>
        <literal>unsigned</literal> と <literal>zerofill</literal> は
        サポートされません。<literal>auto_increment</literal> は自動です。
        (SESAM に実装された自動インクリメントの利点を活かすために、
        <literal>"... VALUES(0,...)"</literal> の代わりに
        <literal>"INSERT ... VALUES(*, ...)"</literal> を使用してください)。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    <command>int ... DEFAULT '0000'</command>
       </simpara>
       <simpara>
        数値変数は、文字列定数で初期化するべきではありません。代わりに
        <command>DEFAULT 0</command> を使用してください。SQL データ型
        datetime の変数を初期化する際、初期化文字列には、次のように
        適当な型キーワードを前に付加する必要があります。
    <literal> CREATE TABLE exmpl ( xtime
    timestamp(3) DEFAULT TIMESTAMP '1970-01-01 00:00:00.000' NOT
    NULL ); </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    <command>$count = xxxx_num_rows();</command>
       </simpara>
       <simpara>
        いくつかのデータベースは、返される値が著しく不正確であるとしても、
        クエリ結果のレコード数を推定または見積もろうとします。
        SESAM はクエリ結果のレコード数を実際に取得する前に知ることは
        ありません。その数が実際に必要な場合には、
        <command>SELECT COUNT(...) WHERE ...</command> を試してみて
        ください。このクエリは、ヒット数を取得します。2 番目のクエリは
        (理想的には)結果を返します。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    <command>DROP TABLE thename;</command>
       </simpara>
       <simpara>
        SESAMでは、<command>DROP TABLE</command> においてテーブル名の
        後にキーワード <literal>RESTRICT</literal> または
        <literal>CASCADE</literal> のどちらかを後に付加する必要が
        あります。<literal>RESTRICT</literal> を指定した場合、(VIEW
        のような) 依存するオブジェクトがある場合にエラーが返されます。
        また、<literal>CASCADE</literal> を指定した場合、依存する
        オブジェクトは指定したテーブルから削除されます。
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section xml:id="sesam.sql-types">
    <title>
     様々な SQL 型を使用する場合の注意
    </title>
    <para>
     SESAM は現在 BLOB 型をサポートしていません。SESAM の将来の
     バージョンは、BLOBをサポートする予定です。
    </para>
    <para>
     PHP インターフェースでは、SQL フィールドを取得する際に次の型変換が
     自動的に適用されます。
     <table>
      <title>SQL から PHP への型変換</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>SQL 型</entry>
         <entry>PHP 型</entry>
        </row>
       </thead>
       <tbody>
        <row>
     <entry>SMALLINT, INTEGER</entry>
     <entry><type>integer</type></entry>
        </row>
        <row>
     <entry>NUMERIC, DECIMAL, FLOAT, REAL, DOUBLE</entry>
     <entry><type>float</type></entry>
        </row>
        <row>
     <entry>DATE, TIME, TIMESTAMP</entry>
     <entry><type>string</type></entry>
        </row>
        <row>
     <entry>VARCHAR, CHARACTER</entry>
     <entry><type>string</type></entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     レコード全体を取得する際、結果は配列として返されます。空の
     フィールドには値が入っていないため、個々のフィールド自体の存在を調べる
     必要があります (空のフィールドかどうか調べるには、
     <function>isset</function> または <function>empty</function> を
     使用してください)。この手法は、(空のフィールドの表現として型の
     文字列を使用するよりも) 空のフィールドの見え方をユーザが
     制御することが可能となります。
    </para>
   </section>

   <section xml:id="sesam.multiple-fields">
    <title>SESAM の "複数フィールド" 機能のサポート</title>
    <para>
     SESAM 特有の"複数フィールド" 機能により、複数のフィールドの
     配列からなるカラムを使用することが可能です。"複数フィールド"
     カラムは、次のように作成可能です。
     <example>
      <title>"複数フィールド" カラムを作成する</title>
      <programlisting role="sesam">
<![CDATA[
CREATE TABLE multi_field_test (
    pkey CHAR(20) PRIMARY KEY,
    multi(3) CHAR(12)
)
]]>
      </programlisting>
     </example>
     上のレコードに次のように代入することができます。
     <example>
      <title>"複数フィールド" カラムに代入する</title>
      <programlisting role="sesam">
<![CDATA[
INSERT INTO multi_field_test (pkey, multi(2..3) )
    VALUES ('Second', <'first_val', 'second_val'>)
]]>
      </programlisting>
     </example>
     (この場合のように) 先頭の空のサブフィールドは無視され、代入された
     値は詰められることに注意してください。このため、上記の例の結果は、
     multi(2..3) ではなく、multi(1..2) となります。
    </para>
    <para>
     結果レコードを取得する際、"複数カラム" は "インラインの" 付加カラム
     のようにアクセスされます。上のにおいて、"pkey" は添字 0 を有し、3
     つの "multi(1..3)" カラムは添字 1 から 3 でアクセス可能です。
    </para>
   </section>

   <section xml:id="sesam.seealso">
   &reftitle.seealso;
    <para>
     SESAM 固有の事項について詳細は、<link xlink:href="&url.sesam.en;">the
      SESAM/SQL-Server ドキュメント(英語)</link> または
     <link xlink:href="&url.sesam.de;">SESAM/SQL-Server ドキュメント(ドイツ語)
     </link> を参照ください。共にオンラインで参照可能です。もしくは、
     適当なマニュアルを使用してください。
   </para>
   </section>

  </partintro>

&reference.sesam.entities.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
