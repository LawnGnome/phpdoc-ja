<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.26 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<!-- Purpose: database.abstract -->
<!-- Membership: bundled -->

 <reference xml:id="ref.dba" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>（dbm 型の）データベース抽象化レイヤ関数</title>
  <titleabbrev>dba</titleabbrev>

  <partintro>
   <section xml:id="dba.intro">
    &reftitle.intro;
   <para>
     これらの関数は、Berkeley DB 型データベースへのアクセス用の基本関数を
     構成します。
   </para>
   <para>
     これらの関数は、複数のファイルベースのデータベース用の抽象化レイヤです。
     その機能は、<link xlink:href="&url.sleepycat;">Sleepycat
      Software's DB2</link> でサポートされているような近代的なデータベースの
     機能のサブセットに制限されています（IBM の DB2 と混同しないでください。
     このデータベースは、<link linkend="ref.uodbc">ODBC 関数
     </link>を通じてサポートされます）。
   </para>
  </section>

   <section xml:id="dba.requirements">
    &reftitle.required;
    <para>
     各機能の動作は、使用するデータベースの実装に依存します。
     <function>dba_optimize</function> および <function>dba_sync</function>
     のような関数は、特定のデータベースでは動作しますが、他のデータベースでは
     機能しません。サポートされるdbaハンドラをダウンロードし、インストールする
     必要があります。
    <table>
     <title>DBAハンドラのリスト</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>ハンドラ</entry>
        <entry>注意</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>dbm</literal></entry>
        <entry>
         dbm は最も古い(元祖の)Berkeley DB 型データベースです。可能なら
         ば使用しない方が良いでしょう。DB2 および gdbm に組み込まれている
         互換性を保つための関数は、サポートされません。これは、実装されて
         いるのがソースレベルの互換性のみであり、元の dbm フォーマットを
         処理することができないためです。
        </entry>
       </row>

       <row>
        <entry><literal>ndbm</literal></entry>
        <entry>
         ndbm は、dbm に比べて新しく、dbm よりも柔軟です。
         dbm 固有の制約の多くをまだ有しています（そのため、
         推奨されません）。
        </entry>
       </row>

       <row>
        <entry><literal>gdbm</literal></entry>
        <entry>
         Gdbm は、<link xlink:href="&url.gdbm;">GNU データベースマネージャ
         </link>です。
        </entry>
       </row>

       <row>
        <entry><literal>db2</literal></entry>
        <entry>
         DB2 は、<link xlink:href="&url.sleepycat;">Sleepycat Software's DB2</link>
         です。これは、「スタンドアローンおよびクライアント/サーバー
         アプリケーションの両方で高性能な組込みデータベースサポートを提供する
         プログラム用ツールキット」として記述されています。
        </entry>
       </row>

       <row>
        <entry><literal>db3</literal></entry>
        <entry>
         DB3 は、<link xlink:href="&url.sleepycat;">Sleepycat Software's
         DB3</link> です。
        </entry>
       </row>

       <row>
        <entry><literal>db4</literal></entry>
        <entry>
         DB4 は、<link xlink:href="&url.sleepycat;">Sleepycat Software's
         DB4</link> です。PHP 4.3.2 以降で利用可能です。
        </entry>
       </row>

       <row>
        <entry><literal>cdb</literal></entry>
        <entry>
         cdb は「固定データベースの作成・読込み用の、高速で高信頼性の
         軽量型パッケージ」です。これは qmail の作者によるものであり、
         <link xlink:href="&url.cdb;">&url.cdb;</link> にあります。
         固定であるため、読込操作のみがサポートされます。
         PHP 4.3.0 以降、内部的な cdb ライブラリにより（更新ではなく）
         書き込みがサポートされています。
        </entry>
       </row>

       <row>
        <entry><literal>cdb_make</literal></entry>
        <entry>
         PHP 4.3.0 以降、付属する cdb ライブラリを使用する場合に cdb
         ファイルの（更新ではなく）作成をサポートします。
        </entry>
       </row>

       <row>
        <entry><literal>flatfile</literal></entry>
        <entry>
         これは、PHP 4.3.0 以降で利用可能で、古い
         <link linkend="ref.dbm">dbm</link> 拡張モジュールとの互換性の
         ためだけのものであり、使用するべきではありません。
         しかし、ファイルがこの形式で作成された場所でこれを使用する
         ことができます。これは、configure が外部ライブラリを見付ける
         ことができない場合に生じます。
        </entry>
       </row>

       <row>
        <entry><literal>inifile</literal></entry>
        <entry>
         これは PHP 4.3.3 以降で利用可能で、PHP スクリプトから php.ini
         ファイルを書き換えられるようにします。ini ファイルを扱う場合は、
         array(0=>group,1=>value_name) のような配列、あるいは
         "[group]value_name" のような文字列を渡します（group はオプションです）。
         <function>dba_firstkey</function> や <function>dba_nextkey</function>
         はキーを文字列形式で返しますが、PHP 5 以降で利用できる
         <function>dba_key_split</function> を用いるとそれを配列形式に
         変換できます。その際に &false; を失うこともありません。
        </entry>
       </row>

       <row>
        <entry><literal>qdbm</literal></entry>
        <entry>
         これは PHP 5.0.0 以降で有効です。qdbm ライブラリは
         <link xlink:href="http://qdbm.sourceforge.net">http://qdbm.sourceforge.net</link>
         にあります。
        </entry>
       </row>

      </tbody>
     </tgroup>
    </table>
    </para>
    <para>
     <function>dba_open</function> または <function>dba_popen</function>
     関数を実行する際、引数にハンドラ名の一つを指定する必要があります。
     実際に利用可能なハンドラのリストは、
     <function>phpinfo</function> または
     <function>dba_handlers</function> をコールした際に表示されます。
    </para>
   </section>

   &reference.dba.configure;

   <section xml:id="dba.runtime">
    &reftitle.runtime;
    &no.config;
   </section>
   
   <section xml:id="dba.resources">
    &reftitle.resources;
    <para>
    関数 <function>dba_open</function> および
    <function>dba_popen</function> は、指定したデータベースファイルに
    アクセスするためのハンドルを返します。このハンドルは、他の全ての
    dba 関数コールで使用されます。
    </para>
   </section>
   
   <section xml:id="dba.constants">
    &reftitle.constants;
    &no.constants;
   </section>
   
   <section xml:id="dba.examples">
    &reftitle.examples;
     <para>
      <example>
       <title>DBA の例</title>
       <programlisting role="php">
<![CDATA[
<?php

$id = dba_open("/tmp/test.db", "n", "db2");

if (!$id) {
    echo "dba_open failed\n";
    exit;
}

dba_replace("key", "This is an example!", $id);

if (dba_exists("key", $id)) {
    echo dba_fetch("key", $id);
    dba_delete("key", $id);
}

dba_close($id);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     DBA はバイナリセーフであり、いかなる制限も受けません。しかし、
     使用するデータベースの実装による全ての制約を継承します。
    </para>
    <para>
     全てのファイルベースのデータベースは、完全に使用可能なものについて
     新規に作成されたデータベースのファイルモードを設定する手段を、
     提供する必要があります。
     ファイルモードは、通常 <function>dba_open</function> または
     <function>dba_popen</function> に 4 番目の引数として渡されます。
    </para>
    <para>
     <function>dba_firstkey</function> および
     <function>dba_nextkey</function> 関数を用いて全てのエントリに
     連続的にアクセスすることができます。アクセスする際にデータベースを
     変更できない可能性があります。
    </para> 
    <para>
     <example>
      <title>データベースへのアクセス</title>
      <programlisting role="php">
<![CDATA[
<?php

// データベースをオープンする

$key = dba_firstkey($id);

while ($key != false) {
    if (true) {          // 他の操作を後で行うためにキーを記憶する
        $handle_later[] = $key;
    }
    $key = dba_nextkey($id);
}

foreach ($handle_later as $val) {
    dba_delete($val, $id);
}

?>
]]>
      </programlisting>
     </example>
    </para>
   </section>

  </partintro>

&reference.dba.entities.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

