<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- splitted from ./ja/functions/mnogosearch.xml, last change in rev 1.8 -->
<!-- EN-Revision: 1.8 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
 <refentry id="function.udm-load-ispell-data">
  <refnamediv>
   <refname>udm_load_ispell_data</refname>
   <refpurpose>ispell データを読み込む</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
    <methodsynopsis>
     <type>bool</type><methodname>udm_load_ispell_data</methodname>
     <methodparam><type>resource</type><parameter>agent</parameter></methodparam>
     <methodparam><type>int</type><parameter>var</parameter></methodparam>
     <methodparam><type>string</type><parameter>val1</parameter></methodparam>
     <methodparam><type>string</type><parameter>val2</parameter></methodparam>
     <methodparam><type>int</type><parameter>flag</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>udm_load_ispell_data</function> は、ispell データを
    読み込みます。&return.success;
   </para>
   <para>
    <parameter>agent</parameter> -
    <function>udm_alloc_agent</function> のコールにより取得した、
    エージェントのリンク ID。
   </para>
   <para>
    <parameter>var</parameter> -
    ispell データの取得元を示すパラメータ。とりうる値は以下のとおりです。
   </para>
   <para>
    この関数を使用した後に ispell データに割り当てられていたメモリを
    開放するには、<function>udm_free_ispell_data</function> を使用します。
    たとえ UDM_ISPELL_TYPE_SERVER モードを使用していたとしても同様です。
   </para>
   <para>
    いちばん高速なモードは UDM_ISPELL_TYPE_SERVER です。UDM_ISPELL_TYPE_TEXT
    はそれより遅く、UDM_ISPELL_TYPE_DB が一番遅くなります。この関係は
    mnoGoSearch 3.1.10 - 3.1.11 において成り立ちます。
    将来のバージョンでは DB モードの高速化を行い、TEXT モードより
    高速になる予定です。
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      UDM_ISPELL_TYPE_DB - ispell データを SQL によって読み込むことを
      示します。この場合、パラメータ <parameter>val1</parameter>
      および <parameter>val2</parameter> は無視されるので空白にしておきます。
      <parameter>flag</parameter> は <literal>1</literal> に設定します。
     </simpara>
     <note>
      <para>
       <parameter>flag</parameter> は、指定した場所から ispell データを
       読み込んだ後でそれを並べ替えることを示します (ispell を正常に
       機能させるために必要です)。ispell データをファイルから読み込む
       場合は <function>udm_load_ispell_data</function> を何度かコールする
       ことになりますが、並べ替えを毎回行う必要はなく、最後にコールした
       後にのみ行います。DB モードではすべてのデータが 1 度のコールで
       読み込まれるので、このパラメータは <literal>1</literal> で
       なければなりません。このモードでエラーが発生した場合 (たとえば
       ispell テーブルが存在しないなど)、この関数は &false; を返し、
       エラーコードとエラーメッセージは <function>udm_error</function>
       および <function>udm_errno</function> で取得できます。
      </para>
     </note>
     <para>
      <example>
       <title><function>udm_load_ispell_data</function> の例</title>
       <programlisting role="php">
<![CDATA[
<?php
if (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_DB, '', '', 1)) {
  printf("Error #%d: '%s'\n", udm_errno($udm), udm_error($udm));
  exit;
}
?>
]]>
       </programlisting>
      </example>
     </para>
    </listitem>
    <listitem>
     <para>
      UDM_ISPELL_TYPE_AFFIX - ispell データをファイルから読み込み、また
      接辞ファイルを読み込むことを指定します。この場合、<parameter>val1</parameter>
      はどの接辞を読み込むかを表す 2 文字の言語コードとなります。
      また <parameter>val2</parameter> はファイルのパスです。
      相対パスが指定された場合は、このモジュールは UDM_CONF_DIR でなく
      現在のパス、つまりスクリプトの実行パスからの相対パスとして検索する
      ことに注意しましょう。ファイルが存在しないなどの理由でエラーが
      発生した場合、この関数は &false; を返し、エラーメッセージが
      表示されます。エラーメッセージの内容を
      <function>udm_error</function> および <function>udm_errno</function>
      で取得することはできません。なぜなら、これらの関数は SQL に
      関連付けられたメッセージを返すものだからです。UDM_ISPELL_TYPE_DB
      における <parameter>flag</parameter> パラメータの説明を参照ください。
     </para>
     <para>
      <example>
      <title><function>udm_load_ispell_data</function> の例</title>
       <programlisting role="php">
<![CDATA[
<?php
if ((! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'en', '/opt/ispell/en.aff', 0)) ||
    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'ru', '/opt/ispell/ru.aff', 0)) ||
    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'en', '/opt/ispell/en.dict', 0)) ||
    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'ru', '/opt/ispell/ru.dict', 1))) {
    exit;
}
?>
]]>
       </programlisting>
      </example>
     </para>
     <note>
      <para>
       最後のコール時にのみ <parameter>flag</parameter> を
       <literal>1</literal> とします。
      </para>
     </note>
    </listitem>
    <listitem>
     <para>
      UDM_ISPELL_TYPE_SPELL - ispell データをファイルから読み込み、
      ispell ディレクトリファイルを読み込むことを指定します。この場合、
      <parameter>val1</parameter> はどの接辞を読み込むかを表す
      2 文字の言語コードとなります。また
      <parameter>val2</parameter> はファイルのパスです。
      相対パスが指定された場合は、このモジュールは UDM_CONF_DIR でなく
      現在のパス、つまりスクリプトの実行パスからの相対パスとして検索する
      ことに注意しましょう。ファイルが存在しないなどの理由でエラーが
      発生した場合、この関数は &false; を返し、エラーメッセージが
      表示されます。エラーメッセージの内容を
      <function>udm_error</function> および <function>udm_errno</function>
      で取得することはできません。なぜなら、これらの関数は SQL に
      関連付けられたメッセージを返すものだからです。UDM_ISPELL_TYPE_DB
      における <parameter>flag</parameter> パラメータの説明を参照ください。
     </para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
     if ((! Udm_Load_Ispell_Data($udm, UDM_ISPELL_TYPE_AFFIX, 'en', '/opt/ispell/en.aff', 0)) ||
        (! Udm_Load_Ispell_Data($udm, UDM_ISPELL_TYPE_AFFIX, 'ru', '/opt/ispell/ru.aff', 0)) ||
        (! Udm_Load_Ispell_Data($udm, UDM_ISPELL_TYPE_SPELL, 'en', '/opt/ispell/en.dict', 0)) ||
        (! Udm_Load_Ispell_Data($udm, UDM_ISPELL_TYPE_SPELL, 'ru', '/opt/ispell/ru.dict', 1))) {
      exit;
      }
?>
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       最後のコール時にのみ <parameter>flag</parameter> を
       <literal>1</literal> とします。
      </para>
     </note>
    </listitem>
    <listitem>
     <para>
      UDM_ISPELL_TYPE_SERVER - spell サーバのサポートを有効にします。
      <parameter>val1</parameter> パラメータで、spell サーバが
      稼動しているホストのアドレスを指定します。<parameter>val2</parameter>
      は現在は使われていません。しかし将来のリリースでは spell サーバの
      ポート番号を指定するようになります。<parameter>flag</parameter>
      はこの場合は必要ありません。なぜなら spell サーバに保存されている
      データは既に並べ替えられているからです。
     </para>
     <para>
      spelld サーバは、設定ファイル
      (デフォルトは /usr/local/mnogosearch/etc/spelld.conf) から
      スペルデータを読み込み、それを並び替えた上でメモリに保存します。
      クライアントとサーバの間の通信方法は 2 通りあります。
      インデクサは search.cgi サーバから (インデクサを高速に開始するため)
      全データを受け取り、それを正規化した形式でクライアント (search.cgi)
      に渡します。
      DB モードや TEXT モードに比べ、これは (全スペルデータの読み込みや
      並べ替えをしないことで) 一番高速に検索を実行します。
     </para>
     <para>
      UDM_ISPELL_TYPE_SERVER モードでは、
      <function>udm_load_ispell_data</function> 関数は実際には
      ispell データを読み込みません。単にサーバのアドレスを定義する
      だけです。実際には、<function>udm_find</function> 関数で検索を
      行う際にこのサーバが自動的に使用されます。spell サーバが
      稼動していなかったりホストの指定が間違っていたりなどの理由で
      エラーが発生した場合、メッセージは何も返されず、ispell による
      変換は動作しません。
     </para>
     <note>
      <para>
       この関数は、mnoGoSearch 3.1.12以降でのみ利用可能です。
      </para>
     </note>
     <simpara>例:</simpara>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
if (!udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SERVER, '', '', 1)) {
    echo "Error loading ispell data from server<br />\n";
    exit;
}
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </itemizedlist>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
