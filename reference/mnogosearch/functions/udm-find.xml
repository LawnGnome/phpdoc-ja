<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.udm-find">
 <refnamediv>
  <refname>udm_find</refname>
  <refpurpose>検索を実行する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>udm_find</methodname>
   <methodparam><type>resource</type><parameter>agent</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   検索を行います。
  </para>
  <para>
   検索を行います。最初の引数はセッション、次の引数はクエリ本体です。
   検索の実行は、探す単語を入力し、投稿ボタンを押すだけで可能です。
   例えば、"mysql odbc"。この例で引用符は他のテキストから区別するために
   使用されており、クエリに引用符 " を使用する必要はありません。
   mnoGoSearch は、単語 "mysql" および/または単語 "odbc" を含む全ての
   文書を見付けます。最も大きな重みを有する文書が最初に表示されます。
   検索モードに ALL を使用している場合、検索は入力した単語(とその他の
   単語)を共に含む文書を返します。モードANYを使用している場合、検索は、
   入力した単語のどれかを含む文書のリストを返します。より高度な結果を
   得たい場合には、クエリ言語を使用することも可能です。この場合は、
   検索フォームで検索モード "bool" を選択する必要があります。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>agent</parameter></term>
     <listitem>
      <para>
       <function>udm_alloc_agent</function> をコールした際に得られたエージェント ID へのリンク。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       mnoGoSearch では次の論理演算子が使用可能です。
      </para>
      <para>
       &amp; - 論理積。例えば、&quot;mysql &amp;
       odbc&quot;。 mnoGoSearch は、単語 &quot;mysql&quot; および単語
       &quot;odbc&quot; を含む全ての URL を見付けます。
      </para>
      <para>
       | - 論理和。例えば、&quot;mysql|odbc&quot;。 mnoGoSearch は、単語
       &quot;mysql&quot; または単語 &quot;odbc&quot;を含む全ての URL
       を見付けます。
      </para>
      <para>
       ~ - 論理否定。例えば、&quot;mysql &amp; ~odbc&quot;。
       mnoGoSearch は、単語 &quot;mysql&quot; を含み、同時に単語
       &quot;odbc&quot; を含まない全てのURLを探します。~ は、指定した単語を
       結果から除外するだけであることに注意してください。クエリ
       &quot;~odbc&quot; は何も見付けません!
      </para>
      <para>
       () - より複雑なクエリを作成するためのグループ化コマンド。例えば、
       &quot;(mysql | msql) &amp; ~postgres&quot;。クエリ言語は、簡単であり、
       同時に強力です。クエリは通常の論理式と同等と考えてください。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功した場合に結果リンク ID、失敗した場合に &false; を返します。
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
