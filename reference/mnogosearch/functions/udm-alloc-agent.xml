<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.udm-alloc-agent">
 <refnamediv>
  <refname>udm_alloc_agent</refname>
  <refpurpose>mnoGoSearch セッションを確保する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>udm_alloc_agent</methodname>
   <methodparam><type>string</type><parameter>dbaddr</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>dbmode</parameter></methodparam>
  </methodsynopsis>
  <para>
   mnoGoSearch セッションを割り当てます。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dbaddr</parameter></term>
     <listitem>
      <para>
       <parameter>dbaddr</parameter> - URL 形式のデータベース名。SQL
       データベースへ接続する際のオプション (型、ホスト、データベース名、
       ポート、ユーザー、パスワード)。
       組み込みのテキストファイルサポートには関係ありません。
       フォーマットは以下のようになります。
       <literal>DBType:[//[DBUser[:DBPass]@]DBHost[:DBPort]]/DBName/</literal>
       現在、サポートされている DBType の値は mysql,
       pgsql, msql, solid, mssql, oracle, ibase です。
       実際、ネーティブなライブラリのサポートは重要ではありません。しかし、
       ODBC ユーザーは、サポートされる値の一つを指定する必要があります。
       使用するデータベース型がサポートされていない場合、<literal>unknown</literal>
       を代わりに使用することも可能です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbmode</parameter></term>
     <listitem>
      <para>
       <parameter>dbmode</parameter> - 単語の記憶用 SQL データベース
       モードを選択可能です。<parameter>dbmode</parameter> でとりうる値は
       <literal>single</literal>、<literal>multi</literal>、<literal>crc</literal>
       あるいは <literal>crc-multi</literal> です。
       <literal>single</literal> を指定した場合、全ての単語が同じ
       テーブルに保存されます。<literal>multi</literal> を選択した場合、
       単語はその長さに応じて別々のテーブルに保存されます。通常は "multi"
       モードの方が通常高速ですが、データベース上でより多くのテーブルを
       必要とします。"crc" モードが選択された場合、mnoGoSearch は、単語の
       代わりに CRC32 アルゴリズムで計算された 32 ビット整数の単語 ID を
       保存します。このモードで必要なディスク容量はより小さいですが、
       "single" および "multi" モードと比較してより高速です。
       <literal>crc-multi</literal> は、"crc" モードと同じ記憶構造を
       使用しますが、"multi" モードのように単語長に応じて別々のデータベースに
       単語を保存します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <note>
   <para>
    <parameter>dbaddr</parameter> および
    <parameter>dbmode</parameter> は、インデックス作成時に使用される
    これらの選択肢に一致している必要があります。
   </para>
  </note>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功した場合に mnogosearch エージェント ID、失敗した場合に &false;
   を返します。この関数は、データベースパラメータを有するセッションを
   生成します。
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    実際、これらの関数はデータベースへの接続をオープンする必要はなく、
    よって、ログイン名やパスワードを確認しません。実際のデータベースへの
    接続およびログイン/パスワード認証は、
    <function>udm_find</function> で行われます。
   </para>
  </note>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
