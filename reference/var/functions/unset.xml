<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
<!-- splitted from ./ja/functions/var.xml, last change in rev 1.1 -->
<!-- EN-Revision: 1.14 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>指定した変数の割当を解除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function> は指定した変数を破棄します。PHP 3 では、
     <function>unset</function> は常に &true;(実際には整数値 1) を返していました。
     しかし、PHP 4 では <function>unset</function> は
     もはや真の意味で関数ではなく、命令となっています。値が返されないため、
     <function>unset</function> の値を取得しようとすると、
     パースエラーとなります。
    </para>
    <para>
     <example>
      <title><function>unset</function> の例</title>
      <programlisting role="php">
<![CDATA[
<?php
// 変数を一つ破棄する
unset ($foo);

// 配列の要素の一つを破棄する
unset ($bar['quux']);

// 複数の変数を破棄する
unset ($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      現在のコンテキストで見えるものであれば、
      オブジェクトのプロパティでさえも破棄することが可能です。
     </para>
    </note>
    <para>
     関数 <function>unset</function> の内部動作は、
     破棄しようとする変数の型に依存します。
    </para>
    <para>
     あるグローバル変数が関数の中で <function>unset</function>
     された場合、ローカル変数のみが破棄されます。呼出側の環境にある変数は、
     <function>unset</function> がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     グローバル変数を関数の内部で <function>unset</function> したい場合は、
     <varname>$GLOBALS</varname> 配列を使用することが可能です。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     参照渡しされた変数が関数内で <function>unset</function> された場合に、
     ローカル変数のみが破棄されます。呼出側の環境でその変数は、
     <function>unset</function> がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     静的変数が関数の内部で <function>unset</function> された場合、
     <function>unset</function> は、その関数の残りのコンテキスト内においてのみ
     変数を破棄します。関数を再度コールすると、破棄する前の値が復元されます。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Before unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "after unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
Before unset: 1, after unset: 23
Before unset: 2, after unset: 23
Before unset: 3, after unset: 23
]]>
      </screen>
     </informalexample>
    </para>

    &note.language-construct;

    <para>
     <function>isset</function>、
     <function>empty</function>、
     <function>array_splice</function>
     も参照ください。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
