<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./ja/functions/var.xml, last change in rev 1.1 -->
<!-- EN-Revision: 1.2 Maintainer: hirokawa Status: ready -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>指定した変数の割当を解除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>
	<replaceable><optional>var</optional></replaceable>
       </parameter></methodparam>
      <methodparam><type></type><parameter>
	<replaceable><optional>...</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function>は指定した変数を破棄します。PHP 3では、
     <function>unset</function> は常に &true;(実際には整数値1) を返して
     いました。しかし、PHP 4では <function>unset</function> はもはや真
     の意味で関数ではなく、命令となっています。値が返されないため、
     <function>unset</function> の値を取得しようとすると、パースエラー
     となります。
    </para>
    <para>
     <example>
      <title><function>unset</function>の例</title>
      <programlisting role="php">
<![CDATA[
// 変数を一つ破棄する
unset ($foo);

// 配列の要素の一つを破棄する
unset ($bar['quux']);

// 複数の変数を破棄する
unset ($foo1, $foo2, $foo3);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     関数<function>unset</function>の内部動作は、破棄しようとする変数
     の型に依存します。
    </para>
    <para>
     あるグローバル変数が関数の中で<function>unset</function>された場
     合、ローカル変数のみが破棄されます。呼出側の環境にある変数は、
     <function>unset</function>がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function destroy_foo() {
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
]]>
      </programlisting>
     </informalexample>
     上記の例の出力は次のようになります。
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     参照渡しされた変数が関数内で<function>unset</function>された場合
     に、ローカル変数のみが破棄されます。呼出側の環境でその変数は、
     <function>unset</function>がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function foo(&$bar) { 
    unset($bar); 
    $bar = "blah"; 
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
]]>
      </programlisting>
     </informalexample>
     上の例の出力は以下のようになります。
     The above example would output:
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     静的変数が関数の内部で<function>unset</function>された場合、
     <function>unset</function>は、その変数とその静的変数への全てのリ
     ファレンスを破棄します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function foo() {
    static $a;
    $a++;
       echo "$a\n";

    unset($a);
}

foo();
foo();
foo();
]]>
      </programlisting>
     </informalexample>
     上記の例の出力は次のようになります。
     <informalexample>
      <screen>
<![CDATA[
1
1
1
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     グローバル変数を関数内で<function>unset</function>したい場合、
     配列<parameter>$GLOBALS</parameter>を使用し、次のようにして下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function foo() {
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      <function>unset</function> は言語の一部です。
     </para>
    </note>
    <para>
     <function>isset</function>、<function>empty</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
