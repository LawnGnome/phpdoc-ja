<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.27 Maintainer: hirokawa Status: ready -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   保存用表現から PHP の値を生成する
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> は、シリアル化された変数を
   PHP 変数値に戻す変換を行います。
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       シリアル化された文字列。
      </para>
      <para>
       もしアンシリアライズする変数がオブジェクトの場合、
       オブジェクトが無事再作成された後、PHP は自動的にメンバ関数
       <function>__wakeup</function> (存在していれば) をコールしようとします。
      </para>
      <para>
       <note>
        <title>unserialize_callback_func ディレクティブ</title>
        <para>
         コールバック関数を設定することが可能です。(不完全な
         <type>object</type> "__PHP_Incomplete_Class"を得ることを防ぐため)
         コールバック関数は、非シリアル化する際に未定義のクラスをインスタ
         ンス化する必要がある場合にコールされます。
         '<literal>unserialize_callback_func</literal>'を定義するためには、
         &php.ini;, <function>ini_set</function>, &htaccess; を使用し
         てください。未定義のクラスをインスタンス化する度に、コールバック関
         数がコールされます。この機能を無効とするには、
         単純にこの設定を空にしてください。
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   変換された値が返されます。その値は、
   <type>boolean</type>, <type>integer</type>, <type>float</type>,
   <type>string</type>, <type>array</type>, <type>object</type>
   のいずれかとなります。
  </para>
  <para>
   渡された文字列が復元できなかった場合、&false; を返して
   <constant>E_NOTICE</constant> を発生します。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.2.0</entry>
       <entry>
        unserialize_callback_func ディレクティブが追加されました。
       </entry>
      </row>
      <row>
       <entry>4.0.0</entry>
       <entry>
        オブジェクトをシリアル化しても、メソッドが失われなくなりました。
        詳細は
        <link linkend="language.oop.serialization">オブジェクトのシリアル化</link>
        を参照ください。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unserialize</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// ここで、データベースから $session_data にセッションデータをロード
// するために unserialize() を使用します。
// この例は、serialize() で記述された例を補足するものです。

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // 実行または取得が失敗した場合、空の配列で初期化します
    $session_data = array();
} else {
    // tmp[0] にシリアル化されたデータを保持している必要があります。
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // 何か問題があったため、空の配列で初期化します。
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>unserialize_callback_func の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// unserialize_callback_func ディレクティブは PHP 4.2.0 以降で利用可能
ini_set('unserialize_callback_func', 'mycallback'); // 独自のコールバック関数を設定する

function mycallback($classname) 
{
    // クラスが定義されているファイルをインクルードするだけです。
    // どのクラス定義が必要になるのかを $classname で判断します。
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    エラーやシリアライズされた &false; 値をアンシリアライズする場合、
    &false; が返されます。この特殊なケースは
    <parameter>str</parameter> を <literal>serialize(false)</literal>
    で比較する、もしくは <constant>E_NOTICE</constant>
    をキャッチすることで区別することができます。
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">オブジェクトのオートローディング</link></member>
    <member><link linkend="unserialize-callback-func">unserialize_callback_func</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
