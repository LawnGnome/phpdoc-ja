<?xml version="1.0" encoding="utf-8"?>
<!-- splitted from ./ja/functions/yaz.xml, last change in rev 1.11 -->
<!-- EN-Revision: 1.8 Maintainer: hirokawa Status: ready -->
  <refentry id="function.yaz-scan">
   <refnamediv>
    <refname>yaz_scan</refname>
    <refpurpose>スキャンの準備をする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>yaz_scan</methodname>
      <methodparam><type>int</type><parameter>id</parameter></methodparam>
      <methodparam><type>string</type><parameter>type</parameter></methodparam>
      <methodparam><type>string</type><parameter>startterm</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、Z39.50スキャンリクエストの準備をします。引数
     <parameter>id</parameter> はターゲットIDです。スキャンを開始する
     言葉の場所は、<parameter>startterm</parameter>で指定します。
     開始語を指定する形式は、<parameter>type</parameter>で指定します。
     現在、<literal>rpn</literal>型がサポートされています。
     オプションの<parameter>flags</parameter>によりスキャンリクエスト
     の動作を制御する追加情報を指定します。現在、次の3つの添字が、現在、
     flagsから読み込まれます。
     <literal>number</literal> (リクエストされた語の数)、
     <literal>position</literal> (要求された語の位置)、
     <literal>stepSize</literal> (要求されたステップ数)。
     実際にスキャンリクエストをターゲットに送信し、スキャンレスポンス
     を受信する際には、<function>yaz_wait</function>をコールする必要が
     あります。<function>yaz_wait</function>が完了した後、応答を処理す
     るために、<function>yaz_error</function> および
     <function>yaz_scan_result</function>をコールします。
    </para>
    <para>
     <parameter>startterm</parameter>の構文は、
     <function>yaz_search</function>で説明いたRPNクエリに似ています。
     starttermは、ゼロ以上の<literal>@attr</literal>演算子の後にトーク
     ンが一つだけ続く形式となります。
    </para>
    <para>
    <example>
    <title>タイトルをスキャンするPHP関数</title>
    <programlisting>
<![CDATA[
      function scan_titles($id, $starterm) {
        yaz_scan($id,"rpn", "@attr 1=4 " . $starterm);
        yaz_wait();
        $errno = yaz_errno($id);
        if ($errno == 0) {
          $ar = yaz_scan_result($id,&$options);
          echo 'Scan ok; ';
          $ar = yaz_scan_result($id, &$options);
          while(list($key,$val)=each($options)) {
             echo "$key = $val &nbsp;";
          }
          echo '<br><table><tr><td>';
          while(list($key,list($k, $term, $tcount))=each($ar)) {
            if (empty($k)) continue;
            echo "<tr><td>$term</td><td>";
            echo $tcount;
            echo "</td></tr>";
          }
          echo '</table>';
        } else {
          echo "Scan failed. Error: " . yaz_error($id) . "<br>";
        }
      }
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
