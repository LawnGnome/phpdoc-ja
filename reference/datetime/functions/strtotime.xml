<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 312829 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xml:id="function.strtotime" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtotime</refname>
  <refpurpose>
   英文形式の日付を Unix タイムスタンプに変換する
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>strtotime</methodname>
   <methodparam><type>string</type><parameter>time</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>now</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   この関数は英語の書式での日付を含む文字列が指定されることを期待しており、
   <parameter>now</parameter> で与えられたその形式から
   Unix タイムスタンプ (1970 年 1 月 1 日 00:00:00 UTC からの経過秒数) への変換を試みます。
   <parameter>now</parameter> が指定されていない場合は現在日時に変換します。
  </simpara>
  <para>
   この関数は、タイムスタンプを計算するために (利用可能であれば) 環境変数
   <envar>TZ</envar> を使用します。PHP 5.1.0 以降では、日付/時刻関数で
   使用されるタイムゾーンを設定する簡単な方法があります。
   その方法については <function>date_default_timezone_get</function>
   関数のページを参照ください。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>time</parameter></term>
     <listitem>
      <para>&date.formats.parameter;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>now</parameter></term>
     <listitem>
      <para>
       返される値を計算するために使用されるタイムスタンプ。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功時はタイムスタンプ、そうでなければ &false; を返します。
   PHP 5.1.0 以前ではこの関数は失敗時に <literal>-1</literal> を返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
   
   &date.timezone.errors.description;
 
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        PHP 5.3.0 より前のバージョンでは、<literal>24:00</literal>
        は無効なフォーマットとされており
        <function>strtotime</function> は &false; を返していました。
       </entry>
      </row>
      <row>
       <entry>5.2.7</entry>
       <entry>
        5.2.7 より前の PHP 5 では、「ある月の何回目の何曜日」
        を取得するときにもしその月の初日がその曜日だった場合、
        タイムスタンプが間違って一週間追加されてしまっていました。
        これは 5.2.7 以降のバージョンでは修正されています。
       </entry>
      </row>
      <row>
       <entry>5.1.0</entry>
       <entry>
        失敗時に <literal>-1</literal> の代わりに &false;
        を返すようになりました。
       </entry>
      </row>

      &date.timezone.errors.changelog;

      <row>
       <entry>5.0.2</entry>
       <entry>
        5.0.2 までの PHP 5 では、<literal>"now"</literal>
        やその他の相対時刻は誤って当日の真夜中から計算されます。
        他のバージョンでは、これは正しく現在時刻から計算されます。
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        マイクロ秒も受け付けるようになりましたが、指定してもそれは無視されます。
       </entry>
      </row>
      <row>
       <entry>4.4.0</entry>
       <entry>
        バージョン 4.4.0 より前の PHP では、<literal>"next"</literal>
        が誤って +2 として計算されます。これを解決するには、代わりに
        <literal>"+1"</literal> を使用します。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>strtotime</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>失敗のチェック</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'Not Good';

// PHP 5.1.0 以前では、false の代わりに -1 と比較する
if (($timestamp = strtotime($str)) === false) {
    echo "The string ($str) is bogus";
} else {
    echo "$str == " . date('l dS \o\f F Y h:i:s A', $timestamp);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    年を 2 桁の数値で指定した場合、その値が 00-69 なら 2000-2069 に、
    70-99 なら 1970-1999 にそれぞれ変換されます。
    32 ビットシステム上での相違点 (2038-01-19 03:14:07
    までの日付しか表せない) については以下の注意を参照ください。
   </para>
  </note>
  <note>
   <para>
    タイムスタンプの有効な範囲は、通常、Fri, 13 Dec 1901 20:45:54
    UTC から Tue, 19 Jan 2038 03:14:07 UTC までです (これらは、32
    ビット符号付整数の最大及び最小に一致します)。
    さらに全てのプラットフォームが負のタイムスタンプをサポートしている
    わけではありませんので、日付の範囲は Unix
    エポック以前にはならないかも知れません。
    これは、例えば Windows やいくつかの Linux ディストリビューション、
    いくつかの他のオペレーティングシステムでは
    1970 年 1 月 1 日以前の日付では動作しない事を意味しています。
    PHP 5.1.0 以降のバージョンでは、この制限はなくなっています。
   </para>
   <para>
    64 ビット版の PHP では、タイムスタンプの有効範囲は事実上無制限です。
    というのも、64 ビットでは過去側も未来側も約 2930 億年を表せるからです。
   </para>
  </note>
  <note>
   <para>
    <literal>m/d/y</literal> あるいは <literal>d-m-y</literal>
    といった書式の曖昧さを解決する際には、区切り文字を利用します。スラッシュ
    (<literal>/</literal>) で区切られている場合はアメリカ風の
    <literal>m/d/y</literal> と見なし、ダッシュ
    (<literal>-</literal>) あるいはドット (<literal>.</literal>)
    で区切られている場合はヨーロッパ風の
    <literal>d-m-y</literal> であると見なします。
   </para>
   <para>
    このような曖昧さを避けるためにも、ISO 8601 形式
    (<literal>YYYY-MM-DD</literal>) を使うか、可能であれば
    <methodname>DateTime::createFromFormat</methodname> を使うことを推奨します。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>DateTime::createFromFormat</methodname></member>
    <member><function>checkdate</function></member>
    <member><function>strptime</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
