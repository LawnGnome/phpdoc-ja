<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317502 Maintainer: takagi Status: ready -->
<refentry xml:id="function.sdo-das-relational-applychanges" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SDO_DAS_Relational::applyChanges</refname>
  <refpurpose>
   データグラフに対する変更を、データベースに書き戻す
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type>
   <methodname>SDO_DAS_Relational::applyChanges</methodname>
   <methodparam>
    <type>PDO</type>
    <parameter>database_handle</parameter>
   </methodparam>
   <methodparam>
    <type>SDODataObject</type>
    <parameter>root_data_object</parameter>
   </methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   PDO データベースハンドルとデータグラフのルートオブジェクトを受け取り、
   データグラフの変更内容を吟味したうえで、その変更内容をデータベースに適用します。
   適用される変更の内容は、データオブジェクトの作成や削除、
   そしてデータオブジェクトのプロパティへの変更です。
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>PDO_database_handle</term>
     <listitem>
      <para>
       PDO 拡張モジュールを使用して作成されます。
       PDO データベースハンドルを作成する典型的な方法は、このようになります。
       <programlisting role="php" xml:id="sdo.das.rel.ac.examples.pdo">
<![CDATA[
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>root_data_object</term>
     <listitem>
      <para>
       特別なルートオブジェクトで、これはすべての SDO
       データグラフのトップレベルにあります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   なし。しかし、渡されたデータグラフは何も変更されず、
   そのまま使用可能なことに注意しましょう。
   さらに、もしデータオブジェクトの作成の際にテーブルの主キーを自動生成していたのなら、
   その主キーの値がここでデータオブジェクトに設定されます。
   変更内容の書き込みが正常に終了すると、そのデータグラフに関連する
   変更概要が消去されます。これにより、
   そのデータグラフにさらに変更を加えてはそれを適用するといったことが可能になります。
   この方法により、同じデータグラフを使用して繰り返し変更内容を適用することができます。
  </para>
 </refsect1>



 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <function>SDO_DAS_Relational::applyChanges</function>
   は、変更内容を正しく適用できなかった場合に
   <classname>SDO_DAS_Relational_Exception</classname> をスローします。
  </para>
  <para>
   リレーショナル DAS は、変更内容の適用を始める前に
   データベースのトランザクションを開始します。
   そして、変更内容がすべて正常に適用できた場合にのみそれをコミットします。
   リレーショナル DAS は、更新あるいは削除する行を指定するための適切な
   where 句を含む update 文あるいは delete 文を作成します。これは、
   データを最初に取得した際の値に基づいて作成されます。
   これにより、楽観的な同時並行性 (concurrency) が実装されています。
   この update 文や delete 文が更新、削除に失敗したとすると、
   その原因はおそらく、最初にデータを取得した後で
   データベース内のデータが変更されたことでしょう。
   どんな場合でも、もし何らかの理由で更新が失敗したら
   トランザクションはロールバックされます。そして例外がスローされます。
   例外の中には、失敗した SQL 文が含まれています。
  </para>
  
  <para>
   リレーショナル DAS は、PDO の例外も捕捉します。その中に含まれる
   PDO の診断情報を <classname>SDO_DAS_Relational_Exception</classname>
   に格納し、それをスローします。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   リレーショナル DAS についての一般的な情報は
   <link linkend="sdo.das.rel.examples">例</link>
   を参照ください。ここにはこのメソッドをコールする例がたくさんあります。
   また、リレーショナル DAS が作成した SQL 文を見るには、
   <link linkend="sdo.das.rel.tracing">トレース</link>
   を参照ください。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
