<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324522 Maintainer: takagi Status: ready -->

<chapter xml:id="sam.setup" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.setup;

 <!-- {{{ Requirements -->
 <section xml:id="sam.requirements">
  &reftitle.required;
  <para>
   SAM 拡張モジュールは、IBM Messaging and Queuing ミドルウェア製品とのインターフェイスとして
   XMS のライブラリおよびクライアント側のコードを使用します。
   このパッケージは、IBM support pack IA94 としてフリーでダウンロードできます。
   このパッケージについての説明、そしてダウンロード用のリンクは
   <link xlink:href="&url.ibm.ia94;">Introducing XMS - The IBM Message Service API</link>
   にあります。
  </para>
  <para>
   SAM を使用して WebSphere MQ のメッセージングおよびキューイング機能にアクセスしたい場合は、
   ローカル MQ キューマネージャあるいは WebSphere MQ
   クライアントパッケージをインストールする必要があります。
   クライアントパッケージは、サポートパック (<link xlink:href="&url.ibm.mqc6;">MQC6</link>)
   としてフリーで公開されています。
  </para>
  <para>
   単に、WebSphere Application Server のキューに対して
   <literal>WebSphere Platform Messaging protocol (WPM)</literal>
   を使用したメッセージの送受信を行いたいだけなら、MQC6
   パッケージをインストールする必要はありません。
  </para>
  <para>
   これらのパッケージをインストールしたら、次に XMS のバイナリや
   (もし使用するなら) MQ クライアントの bin ディレクトリが
   PATH 環境変数に含まれていることを確認しましょう。これにより、
   Apache や PHP から関連する DLL/ライブラリ を見つけられるようになります。
  </para>
 </section>
 <!-- }}} -->

 <!-- {{{ Installation -->
 <section xml:id="sam.installation">
  &reftitle.install;
  <para>
   &pecl.info;
   <link xlink:href="&url.pecl.package;sam">&url.pecl.package;sam</link>.
  </para>
  <para>
   SAM フレームワークおよび MQTT サポートをビルドして使用するためには、
   特にその他の前提条件はありません。
   MQTT 以外のプロトコルのサポートはライブラリとして提供されており、
   クライアント側のコードの中にはは XMS を使用するものもあります。
  </para>
  <para>
   組み込みの MQTT サポートを使用したいだけである場合は、
   SAM を拡張モジュールとしてビルドして設定するか、
   あるいは単に <filename>php_sam.php</filename> を PHP スクリプトから <function>require</function>
   あるいは <function>require_once</function> で読み込みます。この場合は、
   コードをインストールするだけでよく、拡張モジュールをビルドする必要はありません。
   これを行うには、pear インストーラで次のように指定します。
   <screen>
<![CDATA[
pecl install -B SAM
]]>
   </screen>
  </para>

  <!-- {{{ Linux -->
  <section xml:id="sam.installation.linux">
   <title>Linux でのインストール手順</title>
   <para>
    SAM 拡張モジュールは PECL モジュールとして提供され、
    次の手順でダウンロード、インストールすることができます。
    <screen>
<![CDATA[
pecl install sam
]]>
    </screen>
    (php の環境にもよりますが、おそらく root になる必要があるでしょう)
   </para>
   <para>
    このモジュールを PHP に読み込ませるために、
    &php.ini; に以下を追加します。
    <screen>
<![CDATA[
extension=sam.so
]]>
    </screen>
    XMS サポートを使用して IBM Messaging and Queuing family にアクセスしたい場合は、
    SAM XMS 拡張モジュールも有効にしなければなりません。
    <screen>
<![CDATA[
extension=sam_xms.so
]]>
    </screen>
   </para>
   <para>
    PEAR インストーラを使用できない場合は、
    拡張モジュールをダウンロードして手動でビルドします。
    <screen>
<![CDATA[
pear download sam          # sam-<version>.tgz をダウンロードします
tar -xzf sam-<version>.tgz
cd sam-<version>
phpize
./configure
make
make install               # おそらく root になる必要があるでしょう
]]>
    </screen>
   </para>
   <para>
    最新のソースを使用したい場合は、SVN からソースを取得して、
    上の手順で手動ビルドします。
   </para>
  </section>
  <!-- }}} -->
  <!-- {{{ Windows -->
  <section xml:id="sam.installation.windows">
   <title>Windows でのインストール手順</title>
   <para>
    SAM のウェブサイトにあるビルド済みバイナリは、非常に限られた範囲のものになっています。
    そのため、おそらく自分でビルドすることになるでしょう。この拡張モジュールのビルド手順は、
    Windows 上での標準的な拡張モジュールビルド手順と同じです。
   </para>
   <para>
    SAM 拡張モジュールを使用する予定の PHP と同じバージョンの、
    PHP 自身のソースツリーが必要となります。これは php.net から取得します。
    取得したソースを、どこかの作業ディレクトリに展開します。
   </para>
   <para>
    また、PHP 拡張モジュールが使用するライブラリやヘッダを
    http://www.php.net/extra/win32build.zip から取得し、
    作業ディレクトリの下に展開します。
   </para>
   <para>
    するとこのような状態になります。
    <screen>
<![CDATA[
c:\php-build\-
              |
              |---php-5.0.5--|---build
              |              |---ext
              |              |--- ...
              |
              |---win32build--|---bin
                              |---include
                              |---lib
]]>
    </screen>
   </para>
   <para>
    コンパイラが必要です。たとえば、フリーの Visual Studio C++
    Express が Microsoft のウェブサイトから取得可能です。
    また、Microsoft <literal>SDK Microsoft Windows Platform</literal>
    も必要となります。これも Microsoft のウェブサイトからダウンロードできます。
   </para>
   <para>
    SAM 拡張モジュールのソースを、pear を使用して (pear download sam)
    あるいは SVN から取得し、それを PHP ソースツリーの "ext" ディレクトリ内に作成した
    "sam" ディレクトリに配置します。
   </para>
   <para>
    この拡張モジュールをビルドするには、ビルド環境を次の場所から開きます。
    start <screen>menu->all programs->microsoft platform SDK for windows->
    open build environment window->windows 200 build environment->
    set windows 2000 build environment (retail)</screen>
   </para>
   <para>
    これは、コマンドプロンプトを開き、プラットフォーム SDK
    などを使用するためのすべての環境変数を設定します。
    次に、Visual Studio 用の環境変数を設定するために、このウィンドウでコマンド
    <command>vcvars32.bat</command> を実行します。
   </para>
   <para>
    cd <filename>c:\php-build</filename> などとして、作業ディレクトリに移動します。
    そして win32build ツール群にアクセスできるよう、そのパスを環境変数
    PATH に追加します。
    <screen>
<![CDATA[
set PATH=..\win32build\bin;%PATH%
]]>
    </screen>
   </para>
   <para>
    <command>buildconf.bat</command> コマンドを実行します。これは
    <filename>configure.js</filename> ファイルを作成します。
   </para>
   <para>
    cscript コマンドに適切なオプションをつけて実行します。
    SAM 拡張モジュールフレームワークと MQTT サポートだけをビルドするのなら
    <screen>
<![CDATA[
cscript /nologo configure.js --with-sam
]]>
    </screen>
    SAM フレームワークおよび XMS サポートをビルドするのなら
    <screen>
<![CDATA[
cscript /nologo configure.js --with-sam --with-sam_xms="c:\program files\ibm\xms"
]]>
    </screen>
   </para>
   <para>
    とします。sam_xms に渡している追加のパラメータは、XMS ライブラリやランタイムへのパスです。
    これらは、このファイルの最初に書いてある前提条件によってインストールされているものです。
   </para>
   <para>
    <command>cscript</command> のパラメータとして、
    php のビルドオプションのうちお好みのものを追加したり削除することもできます。
   </para>
   <para>
    すべてがうまくいけば、あとは SAM フレームワーク用の make を実行するだけです!
    <screen>
<![CDATA[
nmake php_sam.dll
]]>
    </screen>
    また、もし XML サポートを使用するのなら、sam_xms 拡張モジュールも make しなければなりません。
    <screen>
<![CDATA[
nmake php_sam_xms.dll
]]>
    </screen>
   </para>
   <para>
    Visual Studio 2005 を使用して DLL をビルドする場合は、
    これ以降に進む前に次の追加手順を実行しなければなりません。
   </para>
   <para>
    作成された DLL (<filename>php_sam.dll</filename> およびオプションで
    <filename>php_sam_xms.dll</filename>)
    を、PHP をセットアップしたディレクトリ以下の適切な場所にコピーします。
    このモジュールを PHP に読み込ませるために、次の行を
    &php.ini; に追加しておきましょう。
    <screen>
<![CDATA[
extension=php_sam.dll
]]>
    </screen>
    XMS サポートを使用して IBM Messaging and Queuing family
    にアクセスしたい場合は SAM XMS 拡張モジュールも有効にする必要があります。
    <screen>
<![CDATA[
extension=php_sam_xms.dll
]]>
    </screen>
   </para>
  </section>
  <!-- }}} -->
  <!-- {{{ VS2005 -->
  <section xml:id="sam.installation.vs2005">
   <title>Visual Studio 2005 用の追加手順</title>
   <para>
    SAM 拡張モジュールを Microsoft Visual Studio 2005 のコンパイラでビルドしたい場合は、
    さらに追加の手順が必要です。これにより、php_sam.dll が実行時に
    C ランタイムライブラリとリンクできるようにします。
    この追加手順では、依存性マニフェストを DLL に組み込みます。
    php_sam.dll が作成されたディレクトリ (通常は、php ソースディレクトリ配下の
    Release_TS あるいは Debug_TS) に移動し、次のように謎の呪文をとなえます。
    <screen>
<![CDATA[
mt.exe -manifest php_sam.dll.manifest -outputresource:php_sam.dll;2
]]>
    </screen>
    XMS 機能を使用する場合は、同様に
    SAM XMS DLL も指定しなければなりません。
    <screen>
<![CDATA[
mt.exe -manifest php_sam_xms.dll.manifest -outputresource:php_sam_xms.dll;2
]]>
    </screen>
   </para>
   <para>
    SAM 拡張モジュールを Microsoft Visual Studio 2005 のコンパイラやライブラリでビルドした場合は、
    ランタイムコンポーネントが SAM を使用する予定のシステムにインストールされている必要があります。
    そのためには、そこに Visual Studio 2005 をインストールするか、あるいはフリーで配布されている
    <link xlink:href="&url.ms.crt;">ランタイムパッケージ</link> を使用します。
   </para>
  </section>
  <!-- }}} -->
 </section>
 <!-- }}} -->

 <!-- {{{ Configuration -->
 <section xml:id="sam.configuration">
  &reftitle.runtime;
  <section xml:id="sam.configuration.mapping">
   <title>プロトコルサポートおよびマッピング</title>
   <para>
    SAM フレームワークを拡張して、他のメッセージングプロトコルや通信機構をサポートさせることができます。
    新しいプロトコルや接続ライブラリのサポートを追加するには、
    それをサポートするクラスを定義する必要があります。これは C 拡張モジュールあるいは
    PHP スクリプトとして作成します。また、"ファクトリ" スクリプトも作成しなければなりません。
    サポートクラスは、SAMConnection クラスの全メソッドを実装する必要があります。
    SAMConnection を継承してはいけません。ファクトリスクリプトはフレームワークからコールされ、
    実装クラスのインスタンスを作成します。SAM がどのファクトリをコールするのかは、
    "connect" の最初のパラメータで指定したプロトコルによって決まります。
   </para>
   <para>
    デフォルトでは、connect でプロトコルに SAM_MQTT ("mqtt") を指定した場合に
    組み込みの MQTT サポートを使用します。その他のプロトコルを指定した場合は
    XMS 拡張モジュールを使用します。
    新たなプロトコルのサポートを追加したりデフォルトの挙動を変更したりするには、
    &php.ini; の [sam] セクションにエントリを追加します。
    デフォルトのマッピングは、以下のエントリと同等です。
    <screen>
<![CDATA[
[sam]
sam.factory.mqtt=mqtt
sam.factory.wmq=xms
sam.factory.wmq:client=xms
sam.factory.wmq:bindings=xms
sam.factory.wpm=xms
sam.factory.rtt=xms
]]>
    </screen>
    これらの例でわかるように、エントリは "sam.factory.pppp=xxx"
    という形式になります。pppp の部分が connect コール時に指定するプロトコル文字列で、
    xxx はファクトリ名のサフィックスです。
    注意: SAM では、これらのプロトコルに対応する定数を定義しています。たとえば
    <literal>SAM_WMQ=wmq</literal>、<literal>SAM_WPM=wpm</literal>、
    <literal>SAM_RTT=rtt</literal>、<literal>SAM_MQTT=mqtt</literal> などとなります。
   </para>
   <para>
    connect コールの際にこれを指定すると、
    SAM はそのプロトコル名を &php.ini; のエントリから探し、対応するファクトリスクリプト
    <filename>sam_factory_xxx.php</filename> をコールします。
    エントリが見つからなかった場合は、デフォルトは XMS となります。
   </para>
  </section>
 </section>
 <!-- }}} -->

 <!-- {{{ Resources -->
 <section xml:id="sam.resources">
  &reftitle.resources;
  &no.resource;
 </section>
 <!-- }}} -->

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

