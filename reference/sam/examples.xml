<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283834 Maintainer: takagi Status: ready -->

<chapter xml:id="sam.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id='sam.connections'>
  <title>接続</title>
  <para>
   メッセージングやキューイングの関数を実行するには、
   メッセージングサーバとの接続が確立されていなければなりません。そのためには、
   SAMConnection オブジェクトを作成してその "connect" メソッドを実行します。
   その際に、接続用のプロパティを指定します。SAMConnection
   オブジェクトが破棄されるまでの間は、接続が使用可能となります。
   SAMConnection オブジェクトは、PHP スクリプトが終了する際に破棄されます。
  </para>
  <para>
   メッセージングサーバに接続する際にはデフォルトのプロパティを使用することもできますが、
   最低限、使用するプロトコルだけは PHP スクリプトで指定しなければなりません。
  </para>
  <para>
   <example>
    <title>接続の作成、およびリモートの WebSphere MQSeries Messaging Server への接続</title>
    <programlisting role='php'>
<![CDATA[
<?php
$conn = new SAMConnection();
$conn->connect(SAM_WMQ, array(SAM_HOST => 'myhost.mycompany.com',
                              SAM_PORT => 1506,
                              SAM_BROKER => 'mybroker'));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>接続の作成、およびリモートの WebSphere Application Server への接続</title>
    <programlisting role='php'>
<![CDATA[
<?php
$conn = new SAMConnection();
$conn->connect(SAM_WPM, array(SAM_ENDPOINTS => 'localhost:7278:BootstrapBasicMessaging',
                              SAM_BUS => 'Bus1',
                              SAM_TARGETCHAIN => 'InboundBasicMessaging'));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>接続の作成、および MQTT サーバへの接続</title>
    <programlisting role='php'>
<![CDATA[
<?php
$conn = new SAMConnection();
$conn->connect(SAM_MQTT, array(SAM_HOST => 'myhost.mycompany.com',
                               SAM_PORT => 1883));
?>
]]>
    </programlisting>
   </example>
  </para>
 </section>  <!-- xml:id=sam.connections -->

 <section xml:id='sam.messages'>
  <title>メッセージ</title>
  <para>
   キューとのメッセージの送受信を行うのが SAMMessage オブジェクトです。
   SAMMessage オブジェクトは、メッセージ本文 (もしあれば)
   とそのメッセージに関連するヘッダプロパティをカプセル化します。
   SAMMessage オブジェクトは、メッセージング操作の際のパラメータ、
   そしてその返り値の両方に用いられます。
  </para>
  <para>
   <example>
    <title>単純なテキストのメッセージの作成</title>
    <programlisting role="php">
<![CDATA[
<?php
$msg = new SAMMessage('This is a simple text message');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   メッセージにはヘッダプロパティを関連付けることができます。
   これは、メッセージの配送方法を制御したり、
   受け取り側のアプリケーションに詳しい情報を提供したりするものです。
   デフォルトでは、メッセージのプロパティは文字列として配送されます。
   この場合は、プロパティを設定する際に次のような簡単な構文を使用します。
  </para>
  <para>
   <example>
    <title>デフォルト構文による、テキスト形式のプロパティの設定</title>
    <programlisting role="php">
<![CDATA[
<?php
$msg->header->myPropertyName = 'textData';
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   デフォルト以外の構文で使用する型情報を渡す場合は、値と型情報を連想配列で渡します。
  </para>
  <para>
   <example>
    <title>型ヒントを使用したプロパティの設定</title>
    <programlisting role="php">
<![CDATA[
<?php
$msg->header->myPropertyName = array(3.14159, SAM_FLOAT);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   プロパティは、メッセージのヘッダから取り出すことができます。
  </para>
  <para>
   <example>
    <title>メッセージのヘッダからのプロパティの取得</title>
    <programlisting role="php">
<![CDATA[
<?php
$myProperty = $msg->header->myPropertyName;
?>
]]>
    </programlisting>
   </example>
  </para>
 </section>  <!-- xml:id=sam.messages -->

 <section xml:id='sam.operations'>
  <title>メッセージング操作</title>
  <para>
   すべてのメッセージング操作は、接続オブジェクトのメソッドをコールすることで行います。
   キューにメッセージを追加するには "send" メソッドを使用し、
   キューからメッセージを取得するには "receive" メソッドを使用します。
   その他のメソッドには、配信や購読機能、
   そしてトランザクションの境界の制御などがあります。
  </para>
  <para>
   <example>
    <title>キューへのメッセージの追加および応答の取得</title>
    <programlisting role="php">
<![CDATA[
<?php
$msg = new SAMMessage('This is a simple text message');
$msg->header->SAM_REPLY_TO = 'queue://receive/test';
$correlid = $conn->send('queue://send/test', $msg);

if (!$correlid) {
  // 送信に失敗しました!
  echo "Send failed ($conn->errno) $conn->error";
} else {
  $resp = $conn->receive('queue://receive/test', array(SAM_CORRELID => $correlid));
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </section>  <!-- xml:id=sam.operations -->

 <section xml:id='sam.pubsub'>
  <title>配信/購読およびトピックの購読</title>
  <para>
   SAM では、メッセージをキューに送信するか、あるいは WebSphere MQ および WPM
   ではトピックに配信/購読することができます。
   トピックを SAM に指定するには、場所を指定する際に
   'queue://AQUEUE' ではなく 'topic://fred' 形式を使用します。
   配信/購読 機能を使用するには、正しいブローカ名を CAMConnect の
   "connect" コール時に指定し、対象のトピックを SAMConnect の "send"
   および "receive" コール時に指定する必要があります。
   それ以外については、PHP のインターフェイスは point to point モデルと同じです。
  </para>
  <para>
   デフォルトでは、SAM は永続的でない購読を作成して配信/購読を行います。
   つまり、メッセージをトピックに配信しているときにクライアントアプリケーションがアクティブでなくなると、
   その後アプリケーションが再開しても受信処理は行われないということです。
   WPM あるいは WebSphere MQ の配信/購読 を使用している場合は、
   SAM でトピックへの永続的な購読を作成することができます。
   こうすると、データの配信時にクライアントがアクティブでなかったとしても、
   アプリケーションでデータを受信することができるようになります。
  </para>
  <para>
   永続的な購読を指定するには SAMConnect の "subscribe" コールを使用します。
   このメソッドは、対象となるトピックを入力パラメータとして受け取り、
   購読 ID を返します。この ID を使用して、"receive" コールを行います。
   購読が不要になった場合は、SAMConnection の "unsubscribe"
   メソッドを使用して購読を削除します。
  </para>
  <para>
   <example>
    <title>トピックに対する永続的な購読の作成</title>
    <programlisting role="php">
<![CDATA[
<?php

$subName = $conn->subscribe('topic://A');

if (!$subName) {
   echo "購読に失敗しました";
} else {
   # 購読に成功しました
   // ...
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>WebSphere Platform Messaging (WPM) サーバを使用したトピックの購読</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new SAMConnection();
// 注意: WPM での配信/購読では、永続的な購読を保持するメッセージングエンジン
//      (SAM_WPM_DUR_SUB_HOME) を接続の際に指定する必要があります
$conn->connect(SAM_WMQ, array(SAM_ENDPOINTS => 'localhost:7278:BootstrapBasicMessaging',
                              SAM_BUS => 'Bus1',
                              SAM_TARGETCHAIN => 'InboundBasicMessaging',
                              SAM_WPM_DUR_SUB_HOME => 'MyMachineNode01.server1-Bus1'));

$subName = $conn->subscribe('topic://A');

if (!$subName) {
   echo "購読に失敗しました";
} else {
   # 購読に成功しました
   // ...
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>永続的な購読による、配信されたデータの受信</title>
    <programlisting role="php">
<![CDATA[
<?php

$msg = $conn->receive($subName);
if ($msg) {
   echo "メッセージの受信に成功しました";
} else {
   echo "受信に失敗しました";
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>トピックへの永続的な購読の削除</title>
    <programlisting role="php">
<![CDATA[
<?php

if (!$conn->unsubscribe($subName)) {
   echo "購読解除に失敗しました";
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </section>  <!-- xml:id=sam.pubsub -->

 <section xml:id='sam.errors'>
  <title>エラー処理</title>
  <para>
   SAMConnection のメソッドでメッセージング操作を行うものはすべて、
   リクエスト処理中にエラーが発生すると &false; を返します。
   さらに SAMConnection オブジェクトはふたつのプロパティ
   "errno" および "error" を保持しています。これらはそれぞれ、
   接続上でおこった最後のエラーのエラー番号およびエラー内容のテキストを表します。
  </para>
  <para>
   <example>
    <title>結果を返さないメソッドからのエラーの処理</title>
    <programlisting role="php">
<![CDATA[
<?php
if (!$conn->commit()) {
    // コミットに失敗しました!
    echo "Commit failed ($conn->errno) $conn->error";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>結果を返すメソッドからのエラーの処理</title>
    <programlisting role="php">
<![CDATA[
<?php
$correlid = $conn->send('queue://send/test', $msg);

if (!$correlid) {
  // 送信に失敗しました!
  echo "Send failed ($conn->errno) $conn->error";
} else {
  /* ... */
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </section>  <!-- xml:id=sam.errors -->

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

