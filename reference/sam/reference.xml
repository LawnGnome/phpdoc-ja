<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.7 Maintainer: takagi Status: ready -->
 <reference id="ref.sam">
  <title>SAM - Simple Asynchronous Messaging: 単純な非同期メッセージング</title>
  <titleabbrev>SAM</titleabbrev>

  <partintro>
   <section id="sam.intro">
    &reftitle.intro;
    <para>
     この拡張モジュールを使用すると、IBM WebSphere MQSeries
     製品群のようなメッセージングシステム・キューイングシステムに
     PHP スクリプトからアクセスできるようになります。このインターフェイスは、
     一般的な操作 (単純なテキストメッセージをキューに配送するなど)
     については限りなくシンプルに実行できるように設計されています。
     また、熟練者向けには、より複雑な操作もできるようになっています。
     大半のユーザが使用する場合には、複雑で膨大な設定オプションは無視することができます。
    </para>
    <para>
     SAM 拡張モジュールは、さまざまなメッセージングミドルウェアシステムにアクセスするための手段として
     非常にシンプルな API を提供するフレームワークです。
     現在このパッケージに標準で組み込まれているのは、
     MQTT (MQ Telemetry Transport) メッセージングプロトコルのサポート
     および IBM Messaging and Queuing ミドルウェア製品群のサポートです。
     SAM は、その他のメッセージングシステムをサポートするために拡張できるよう設計されています。
     この拡張モジュールは、C あるいは PHP で書くことができます。
    </para>
   </section>  <!-- id=sam.intro -->

   <section id='sam.installation'>
    &reftitle.install;
    <para>
      SAM フレームワークおよび MQTT サポートをビルドして使用するためには、
      特にその他の前提条件はありません。
      MQTT 以外のプロトコルのサポートはライブラリとして提供されており、
      クライアント側のコードの中にはは XMS を使用するものもあります。
    </para>
    <para>
      組み込みの MQTT サポートを使用したいだけである場合は、
      SAM を拡張モジュールとしてビルドして設定するか、
      あるいは単に "php_sam.php" を PHP スクリプトから "requires"
      あるいは "requires_once" で読み込みます。この場合は、
      コードをインストールするだけでよく、拡張モジュールをビルドする必要はありません。
      これを行うには、pear インストーラで次のように指定します。
      <screen>
       <![CDATA[
      pecl install -B SAM
]]>
      </screen>
    </para>
    <section id='sam.installation.prerequisites'>
     <title>前提条件</title>
      <para>
       SAM 拡張モジュールは、IBM Messaging and Queuing ミドルウェア製品とのインターフェイスとして
       XMS のライブラリおよびクライアント側のコードを使用します。
       このパッケージは、IBM support pack IA94 としてフリーでダウンロードできます。
       このパッケージについての説明、そしてダウンロード用のリンクは
       <ulink url="&url.ibm.ia94;">Introducing XMS - The IBM Message Service API</ulink>
       にあります。
      </para>
      <para>
       SAM を使用して WebSphere MQ のメッセージングおよびキューイング機能にアクセスしたい場合は、
       ローカル MQ キューマネージャあるいは WebSphere MQ
       クライアントパッケージをインストールする必要があります。
       クライアントパッケージは、サポートパック (<ulink url="&url.ibm.mqc6;">MQC6</ulink>)
       としてフリーで公開されています。
      </para>
      <para>
       単に、WebSphere Application Server のキューに対して
       WebSphere Platform Messaging protocol (WPM)
       を使用したメッセージの送受信を行いたいだけなら、MQC6
       パッケージをインストールする必要はありません。
      </para>
      <para>
       これらのパッケージをインストールしたら、次に XMS のバイナリや
       (もし使用するなら) MQ クライアントの bin ディレクトリが
       PATH 環境変数に含まれていることを確認しましょう。これにより、
       Apache や PHP から関連する DLL/ライブラリ を見つけられるようになります。
      </para>
     </section>
     <section id='sam.installation.linux'>
      <title>Linux でのインストール手順</title>
      <para>
       SAM 拡張モジュールは PECL モジュールとして提供され、
       次の手順でダウンロード、インストールすることができます。
      <screen>
       <![CDATA[
pear install sam
]]>
      </screen>
       (php の環境にもよりますが、おそらく root になる必要があるでしょう)
      </para>
      <para>
       このモジュールを PHP に読み込ませるために、
       &php.ini; に以下を追加します。
      <screen>
       <![CDATA[
extension=sam.so
]]>
      </screen>
      XMS サポートを使用して IBM Messaging and Queuing family にアクセスしたい場合は、
      SAM XMS 拡張モジュールも有効にしなければなりません。
      <screen>
       <![CDATA[
extension=sam_xms.so
]]>
      </screen>
      </para>
      <para>
       PEAR インストーラを使用できない場合は、
       拡張モジュールをダウンロードして手動でビルドします。
      <screen>
       <![CDATA[
pear download sam          # sam-<version>.tgz をダウンロードします
tar -xzf sam-<version>.tgz
cd sam-<version>
phpize
./configure
make
make install               # おそらく root になる必要があるでしょう
]]>
      </screen>
      </para>
      <para>
       最新のソースを使用したい場合は、cvs からソースを取得して、
       上の手順で手動ビルドします。
      </para>
     </section>
     <section id='sam.installation.windows'>
     <title>Windows でのインストール手順</title>
      <para>
       SAM のウェブサイトにあるビルド済みバイナリは、非常に限られた範囲のものになっています。
       そのため、おそらく自分でビルドすることになるでしょう。この拡張モジュールのビルド手順は、
       Windows 上での標準的な拡張モジュールビルド手順と同じです。
      </para>
      <para>
       SAM 拡張モジュールを使用する予定の PHP と同じバージョンの、
       PHP 自身のソースツリーが必要となります。これは php.net から取得します。
       取得したソースを、どこかの作業ディレクトリに展開します。
      </para>
      <para>
       また、PHP 拡張モジュールが使用するライブラリやヘッダを
       http://www.php.net/extra/win32build.zip から取得し、
       作業ディレクトリの下に展開します。
      </para>
      <para>
       するとこのような状態になります。
       <screen>
        <![CDATA[
c:\php-build\-
              |
              |---php-5.0.5--|---build
              |              |---ext
              |              |--- ...
              |
              |---win32build--|---bin
                              |---include
                              |---lib
        ]]>
       </screen>
      </para>
      <para>
       コンパイラが必要です。たとえば、フリーの Visual Studio C++
       Express が Microsoft のウェブサイトから取得可能です。
       また、Microsoft Windows Platform SDK も必要となります。
       これも Microsoft のウェブサイトからダウンロードできます。
      </para>
      <para>
       SAM 拡張モジュールのソースを、pear を使用して (pear download sam)
       あるいは CVS から取得し、それを PHP ソースツリーの "ext" ディレクトリ内に作成した
       "sam" ディレクトリに配置します。
      </para>
      <para>
       この拡張モジュールをビルドするには、ビルド環境を次の場所から開きます。
start menu->all programs->microsoft platform SDK for windows->
  open build environment window->windows 200 build environment->
    set windows 2000 build environment (retail)
      </para>
      <para>
       これは、コマンドプロンプトを開き、プラットフォーム SDK
       などを使用するためのすべての環境変数を設定します。
       次に、Visual Studio 用の環境変数を設定するために、このウィンドウでコマンド
       "vcvars32.bat" を実行します。
      </para>
      <para>
       cd c:\php-build などとして、作業ディレクトリに移動します。
       そして win32build ツール群にアクセスできるよう、そのパスを環境変数
       PATH に追加します。
      <screen>
       <![CDATA[
set PATH=..\win32build\bin;%PATH%
]]>
      </screen>
      </para>
      <para>
       buildconf.bat コマンドを実行します。これは configure.js ファイルを作成します。
      </para>
      <para>
cscript コマンドに適切なオプションをつけて実行します。
SAM 拡張モジュールフレームワークと MQTT サポートだけをビルドするのなら
      <screen>
       <![CDATA[
cscript /nologo configure.js --with-sam
]]>
      </screen>
SAM フレームワークおよび XMS サポートをビルドするのなら
      <screen>
       <![CDATA[
cscript /nologo configure.js --with-sam --with-sam_xms="c:\program files\ibm\xms"
]]>
      </screen>
      </para>
      <para>
       とします。sam_xms に渡している追加のパラメータは、XMS ライブラリやランタイムへのパスです。
       これらは、このファイルの最初に書いてある前提条件によってインストールされているものです。
      </para>
      <para>
       cscript のパラメータとして、php のビルドオプションのうちお好みのものを追加したり削除することもできます。
      </para>
      <para>
       すべてがうまくいけば、あとは SAM フレームワーク用の make を実行するだけです!
      <screen>
       <![CDATA[
nmake php_sam.dll
]]>
      </screen>
また、もし XML サポートを使用するのなら、sam_xms 拡張モジュールも make しなければなりません。
      <screen>
       <![CDATA[
nmake php_sam_xms.dll
]]>
      </screen>
      </para>
      <para>
Visual Studio 2005 を使用して DLL をビルドする場合は、
これ以降に進む前に次の追加手順を実行しなければなりません。
      </para>
      <para>
作成された DLL (php_sam.dll およびオプションで php_sam_xms.dll)
を、PHP をセットアップしたディレクトリ以下の適切な場所にコピーします。
このモジュールを PHP に読み込ませるために、次の行を
&php.ini; に追加しておきましょう。
      <screen>
       <![CDATA[
extension=php_sam.dll
]]>
      </screen>
      XMS サポートを使用して IBM Messgaing and Queuing family
      にアクセスしたい場合は SAM XMS 拡張モジュールも有効にする必要があります。
      <screen>
       <![CDATA[
extension=php_sam_xms.dll
]]>
      </screen>
      </para>
     </section>
     <section id='sam.installation.VS2005'>
      <title>Visual Studio 2005 用の追加手順</title>
      <para>
       SAM 拡張モジュールを Microsoft Visual Studio 2005 のコンパイラでビルドしたい場合は、
       さらに追加の手順が必要です。これにより、php_sam.dll が実行時に
       C ランタイムライブラリとリンクできるようにします。
       この追加手順では、依存性マニフェストを DLL に組み込みます。
       php_sam.dll が作成されたディレクトリ (通常は、php ソースディレクトリ配下の
       Release_TS あるいは Debug_TS) に移動し、次のように謎の呪文をとなえます。
      <screen>
       <![CDATA[
mt.exe -manifest php_sam.dll.manifest -outputresource:php_sam.dll;2
]]>
      </screen>
XMS 機能を使用する場合は、同様に
SAM XMS DLL も指定しなければなりません。
      <screen>
       <![CDATA[
mt.exe -manifest php_sam_xms.dll.manifest -outputresource:php_sam_xms.dll;2
]]>
      </screen>
      </para>
      <para>
       SAM 拡張モジュールを Microsoft Visual Studio 2005 のコンパイラやライブラリでビルドした場合は、
       ランタイムコンポーネントが SAM を使用する予定のシステムにインストールされている必要があります。
       そのためには、そこに Visual Studio 2005 をインストールするか、あるいはフリーで配布されている
       <ulink url="&url.ms.crt;">ランタイムパッケージ</ulink> を使用します。
      </para>
     </section>
     <section id='sam.installation.configutaion'>
      <title>プロトコルサポートおよびマッピング</title>
      <para>
SAM フレームワークを拡張して、他のメッセージングプロトコルや通信機構をサポートさせることができます。
新しいプロトコルや接続ライブラリのサポートを追加するには、
それをサポートするクラスを定義する必要があります。これは C 拡張モジュールあるいは
PHP スクリプトとして作成します。また、"ファクトリ" スクリプトも作成しなければなりません。
サポートクラスは、SAMConnection クラスの全メソッドを実装する必要があります。
SAMConnection を継承してはいけません。ファクトリスクリプトはフレームワークからコールされ、
実装クラスのインスタンスを作成します。SAM がどのファクトリをコールするのかは、
"connect" の最初のパラメータで指定したプロトコルによって決まります。
      </para>
      <para>
デフォルトでは、connect でプロトコルに SAM_MQTT ("mqtt") を指定した場合に
組み込みの MQTT サポートを使用します。その他のプロトコルを指定した場合は
XMS 拡張モジュールを使用します。
新たなプロトコルのサポートを追加したりデフォルトの挙動を変更したりするには、
&php.ini; の [sam] セクションにエントリを追加します。
デフォルトのマッピングは、以下のエントリと同等です。
      <screen>
       <![CDATA[
[sam]
sam.factory.mqtt=mqtt
sam.factory.wmq=xms
sam.factory.wmq:client=xms
sam.factory.wmq:bindings=xms
sam.factory.wpm=xms
sam.factory.rtt=xms
]]>
      </screen>
これらの例でわかるように、エントリは "sam.factory.pppp=xxx"
という形式になります。pppp の部分が connect コール時に指定するプロトコル文字列で、
xxx はファクトリ名のサフィックスです。
注意: SAM では、これらのプロトコルに対応する定数を定義しています。たとえば
SAM_WMQ=wmq、SAM_WPM=wpm、SAM_RTT=rtt、SAM_MQTT=mqtt などとなります。
      </para>
      <para>
connect コールの際にこれを指定すると、
SAM はそのプロトコル名を &php.ini; のエントリから探し、対応するファクトリスクリプト
sam_factory_xxx.php をコールします。
エントリが見つからなかった場合は、デフォルトは XMS となります。
      </para>
     </section>
   </section>  <!-- id=sam.installation -->

   <section id='sam.usage'>
    <title>API の使用法</title>

    <section id='sam.connections'>
     <title>接続</title>
      <para>
       メッセージングやキューイングの関数を実行するには、
       メッセージングサーバとの接続が確立されていなければなりません。そのためには、
       SAMConnection オブジェクトを作成してその "connect" メソッドを実行します。
       その際に、接続用のプロパティを指定します。SAMConnection
       オブジェクトが破棄されるまでの間は、接続が使用可能となります。
       SAMConnection オブジェクトは、PHP スクリプトが終了する際に破棄されます。
     </para>
     <para>
       メッセージングサーバに接続する際にはデフォルトのプロパティを使用することもできますが、
       最低限、使用するプロトコルだけは PHP スクリプトで指定しなければなりません。
     </para>
     <para>
      <example>
       <title>接続の作成、およびリモートの WebSphere MQSeries Messaging Server への接続</title>
       <programlisting role='php'>
        <![CDATA[
<?php
   $conn = new SAMConnection();
   $conn->connect(SAM_WMQ, array(SAM_HOST => myhost.mycompany.com,
                                 SAM_PORT => 1506,
                                 SAM_BROKER => mybroker));
?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>接続の作成、およびリモートの WebSphere Application Server への接続</title>
       <programlisting role='php'>
        <![CDATA[
<?php
   $conn = new SAMConnection();
   $conn->connect(SAM_WMQ, array(SAM_ENDPOINTS => 'localhost:7278:BootstrapBasicMessaging',
                                 SAM_BUS => 'Bus1',
                                 SAM_TARGETCHAIN => 'InboundBasicMessaging'));
?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>接続の作成、および MQTT サーバへの接続</title>
       <programlisting role='php'>
        <![CDATA[
<?php
   $conn = new SAMConnection();
   $conn->connect(SAM_MQTT, array(SAM_HOST => 'myhost.mycompany.com',
                                 SAM_PORT => 1883));
?>
        ]]>
       </programlisting>
      </example>
     </para>
    </section>  <!-- id=sam.connections -->

    <section id='sam.messages'>
     <title>メッセージ</title>
     <para>
      キューとのメッセージの送受信を行うのが SAMMessage オブジェクトです。
      SAMMessage オブジェクトは、メッセージ本文 (もしあれば)
      とそのメッセージに関連するヘッダプロパティをカプセル化します。
      SAMMessage オブジェクトは、メッセージング操作の際のパラメータ、
      そしてその返り値の両方に用いられます。
     </para>
     <para>
      <example>
       <title>単純なテキストのメッセージの作成</title>
       <programlisting role="php">
        <![CDATA[
<?php
   $msg = new SAMMessage('This is a simple text message');
?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      メッセージにはヘッダプロパティを関連付けることができます。
      これは、メッセージの配送方法を制御したり、
      受け取り側のアプリケーションに詳しい情報を提供したりするものです。
      デフォルトでは、メッセージのプロパティは文字列として配送されます。
      この場合は、プロパティを設定する際に次のような簡単な構文を使用します。
     </para>
     <para>
      <example>
       <title>デフォルト構文による、テキスト形式のプロパティの設定</title>
       <programlisting role="php">
<![CDATA[
<?php
   $msg->header->myPropertyName = 'textData';
?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      デフォルト以外の構文で使用する型情報を渡す場合は、値と型情報を連想配列で渡します。
     </para>
     <para>
      <example>
       <title>型ヒントを使用したプロパティの設定</title>
       <programlisting role="php">
<![CDATA[
<?php
   $msg->header->myPropertyName = array(3.14159, SAM_FLOAT);
?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      プロパティは、メッセージのヘッダから取り出すことができます。
     </para>
     <para>
      <example>
       <title>メッセージのヘッダからのプロパティの取得</title>
       <programlisting role="php">
<![CDATA[
<?php
   $myProperty = $msg->header->myPropertyName;
?>
]]>
       </programlisting>
      </example>
     </para>
    </section>  <!-- id=sam.messages -->

    <section id='sam.operations'>
     <title>メッセージング操作</title>
     <para>
      すべてのメッセージング操作は、接続オブジェクトのメソッドをコールすることで行います。
      キューにメッセージを追加するには "send" メソッドを使用し、
      キューからメッセージを取得するには "receive" メソッドを使用します。
      その他のメソッドには、配信や購読機能、
      そしてトランザクションの境界の制御などがあります。
     </para>
     <para>
      <example>
       <title>キューへのメッセージの追加および応答の取得</title>
       <programlisting role="php">
        <![CDATA[
<?php
   $msg = new SAMMessage('This is a simple text message');
   $msg->header->SAM_REPLY_TO = 'queue://receive/test';
   $correlid = $conn->send('queue://send/test', $msg);

   if (!$correlid) {
     // 送信に失敗しました!
     echo "Send failed ($conn->errno) $conn->error";
   } else {
     $resp = $conn->receive('queue://receive/test', array(SAM_CORRELID => $correlid));
   }
?>
        ]]>
       </programlisting>
      </example>
     </para>
    </section>  <!-- id=sam.operations -->
    <section id='sam.pubsub'>
     <title>配信/購読およびトピックの購読</title>
     <para>
     SAM では、メッセージをキューに送信するか、あるいは WebSphere MQ および WPM
     ではトピックに配信/購読することができます。
     トピックを SAM に指定するには、場所を指定する際に
     'queue://AQUEUE' ではなく 'topic://fred' 形式を使用します。
     配信/購読 機能を使用するには、正しいブローカ名を CAMConnect の
     "connect" コール時に指定し、対象のトピックを SAMConnect の "send"
     および "receive" コール時に指定する必要があります。
     それ以外については、PHP のインターフェイスは point to point モデルと同じです。
     </para>
     <para>
     デフォルトでは、SAM は永続的でない購読を作成して配信/購読を行います。
     つまり、メッセージをトピックに配信しているときにクライアントアプリケーションがアクティブでなくなると、
     その後アプリケーションが再開しても受信処理は行われないということです。
     WPM あるいは WebSphere MQ の配信/購読 を使用している場合は、
     SAM でトピックへの永続的な購読を作成することができます。
     こうすると、データの配信時にクライアントがアクティブでなかったとしても、
     アプリケーションでデータを受信することができるようになります。
     </para>
     <para>
     永続的な購読を指定するには SAMConnect の "subscribe" コールを使用します。
     このメソッドは、対象となるトピックを入力パラメータとして受け取り、
     購読 ID を返します。この ID を使用して、"receive" コールを行います。
     購読が不要になった場合は、SAMConnection の "unsubscribe"
     メソッドを使用して購読を削除します。
     </para>
     <para>
      <example>
       <title>トピックに対する永続的な購読の作成</title>
       <programlisting role="php">
        <![CDATA[
<?php

      $subName = $conn->subscribe('topic://A');

      if (!$subName) {
         echo "購読に失敗しました";
      } else {
         # 購読に成功しました
         ...
      }
?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>WebSphere Platform Messaging (WPM) サーバを使用したトピックの購読</title>
       <programlisting role="php">
        <![CDATA[
<?php
   $conn = new SAMConnection();
   // 注意: WPM での配信/購読では、永続的な購読を保持するメッセージングエンジン
   //      (SAM_WPM_DUR_SUB_HOME) を接続の際に指定する必要があります
   $conn->connect(SAM_WMQ, array(SAM_ENDPOINTS => 'localhost:7278:BootstrapBasicMessaging',
                                 SAM_BUS => 'Bus1',
                                 SAM_TARGETCHAIN => 'InboundBasicMessaging'
                                 SAM_WPM_DUR_SUB_HOME => 'MyMachineNode01.server1-Bus1'));

   $subName = $conn->subscribe('topic://A');

   if (!$subName) {
      echo "購読に失敗しました";
   } else {
      # 購読に成功しました
      ...
   }
?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>永続的な購読による、配信されたデータの受信</title>
       <programlisting role="php">
        <![CDATA[
<?php

      $msg = $conn->receive($subName);
      if ($msg) {
         echo "メッセージの受信に成功しました";
      } else {
         echo "受信に失敗しました";
      }

?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>トピックへの永続的な購読の削除</title>
       <programlisting role="php">
        <![CDATA[
<?php

      if (!$conn->unsubscribe($subName)) {
         echo "購読解除に失敗しました";
      }

?>
        ]]>
       </programlisting>
      </example>
     </para>
    </section>  <!-- id=sam.pubsub -->
    <section id='sam.errors'>
     <title>エラー処理</title>
     <para>
      SAMConnection のメソッドでメッセージング操作を行うものはすべて、
      リクエスト処理中にエラーが発生すると &false; を返します。
      さらに SAMConnection オブジェクトはふたつのプロパティ
      "errno" および "error" を保持しています。これらはそれぞれ、
      接続上でおこった最後のエラーのエラー番号およびエラー内容のテキストを表します。
     </para>
     <para>
      <example>
       <title>結果を返さないメソッドからのエラーの処理</title>
       <programlisting role="php">
        <![CDATA[
<?php
   if (!$conn->commit()) {
     // コミットに失敗しました!
     echo "Commit failed ($conn->errno) $conn->error";
   }
?>
        ]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>結果を返すメソッドからのエラーの処理</title>
       <programlisting role="php">
        <![CDATA[
<?php
   $correlid = $conn->send('queue://send/test', $msg);

   if (!$correlid) {
     // 送信に失敗しました!
     echo "Send failed ($conn->errno) $conn->error";
   } else {
     ...
   }
?>
        ]]>
       </programlisting>
      </example>
     </para>
    </section>  <!-- id=sam.errors -->
   </section>  <!-- id=sam.usage -->

   <!-- class definition section -->
   <section id='sam.classes'>
    &reftitle.classes;

<!-- Connection class  -->
    <section id='sam.class.Connection'>
     <title><classname>SAMConnection</classname></title>
     <para>
      メッセージングサーバとの接続を表すオブジェクトです。
     </para>

     <section id='sam.class.Connection.constructor'>
      &reftitle.constructor;
      <itemizedlist>
       <listitem>
        <para>
         <link linkend='function.samconnection-constructor'>new SAMConnection</link> -
         新しい接続オブジェクトを作成し、メッセージング環境への接続を可能にします。
        </para>
       </listitem>
      </itemizedlist>
     </section>  <!-- id=sam.class.Connection.constructor -->

     <section id='sam.class.Connection.methods'>
      &reftitle.methods;
      <itemizedlist>
       <listitem>
        <para>
         <link linkend='function.samconnection-commit'>commit</link>
         - 現在作業中の内容をコミット (正常に完了) するメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-connect'>connect</link>
         - PHP スクリプトをメッセージングサーバに接続させるメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-disconnect'>disconnect</link>
         - PHP スクリプトとメッセージングサーバとの接続を解除するメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-isconnected'>isConnected</link>
         - PHP スクリプトがメッセージングサーバと接続しているかどうかを調べるメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-peek'>peek</link>
         - メッセージをキューから取得し、それをキューに残したままにしておくメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-peekall'>peekAll</link>
         - ひとつあるいは複数のメッセージをキューから取得し、それをキューに残したままにしておくメソッドです。
        </para>
       </listitem>       
       <listitem>
        <para>
         <link linkend='function.samconnection-receive'>receive</link>
         - メッセージをキューあるいは購読から取得するメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-remove'>remove</link>
         - メッセージをキューから削除するメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-rollback'>rollback</link>
         - 現在作業中の内容をキャンセル (ロールバック) するメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-send'>send</link>
         - キューにメッセージを送信したり、トピックの投稿したりするメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-setDebug'>setDebug</link>
         - 追加のデバッグ出力をオンあるいはオフにするメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-subscribe'>subscribe</link>
         - ひとつあるいは複数のトピックを購読するためのメソッドです。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-unsubscribe'>unsubscribe</link>
         - ひとつあるいは複数のトピックの購読を解除するメソッドです。
        </para>
       </listitem>
      </itemizedlist>
     </section>  <!-- id=sam.class.Connection.methods -->

     <section id='sam.class.Connection.properties'>
      &reftitle.properties;
      <itemizedlist>
       <listitem>
        <para>
         <link linkend='function.samconnection-errno'>errno</link> -
         この接続で最後に発生したエラーのエラーコードを表す数値です。
         直近の処理が正常に終了した場合は、このプロパティは 0 となります。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.samconnection-error'>error</link> -
         この接続で最後に発生したエラーの説明テキストです。
        </para>
       </listitem>
      </itemizedlist>
     </section>    <!-- id=sam.class.Connection.properties -->
    </section>   <!-- id=sam.class.Connection -->

<!-- Message class    *************************************************** -->
    <section id='sam.class.Message'>
     <title><classname>SAMMessage</classname></title>
     <para>
      送受信するメッセージを表すオブジェクトです。
     </para>

     <section id='sam.class.Message.constructor'>
      &reftitle.constructor;
      <itemizedlist>
       <listitem>
        <para>
         <link linkend='function.sammessage-constructor'>new SAMMessage</link> -
         新しいメッセージを作成します。
        </para>
       </listitem>
      </itemizedlist>
     </section>  <!-- id=sam.class.Message.constructor -->

     <section id='sam.class.Message.properties'>
      &reftitle.properties;
      <itemizedlist>
       <listitem>
        <para>
         <link linkend='function.sammessage-body'>body</link> -
         メッセージの本文です。
        </para>
       </listitem>
       <listitem>
        <para>
         <link linkend='function.sammessage-header'>header</link> -
         メッセージのヘッダプロパティです。
        </para>
       </listitem>
      </itemizedlist>
     </section>  <!-- id=sam.class.Message.methods -->
    </section>   <!-- id=sam.class.Message -->

   </section>    <!-- id=sam.classes -->


   <!-- Include the stuff from constants.xml? -->
  &reference.sam.constants;

  </partintro>

  <!-- This seems to create the table of contents -->
 &reference.sam.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
