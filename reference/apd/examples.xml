<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 301112 Maintainer: takagi Status: ready -->

<appendix xml:id="apd.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="apd.examples.usage">
  <title>スクリプト中で PHP-APD を使用する方法</title>
  <procedure>
   <step>
    <para>
     トレースを開始するには、PHP スクリプトの最初の行で apd_set_pprof_trace()
     関数をコールします。
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
apd_set_pprof_trace();
?>
]]>
     </programlisting>
    </para>
    <para>
     この行はスクリプト内のどの場所にでも挿入可能ですが、
     もしスクリプトの最初からトレースを始めなければ、
     あなたをパフォーマンスのボトルネックに導いてくれるかもしれないデータを捨てることになってしまいます。
    </para>
   </step>
   <step>
    <para>
     さあ、スクリプトを実行しましょう。ダンプ結果は
     <filename>apd.dumpdir/pprof_pid.ext</filename> に出力されます。
     <tip>
     <para>
       CGI 版の PHP を使用している場合は、apd が正しく動作するように
       '-e' フラグつきで実行し、拡張情報を有効にしてください。たとえば
       <userinput>php -e -f script.php</userinput> のように実行します。
     </para>
     </tip>
    </para>
   </step>
   <step>
    <para>
     プロファイルデータを整形して表示するには、お好みの並べ替えオプション・
     表示オプションを指定して <command>pprofp</command> コマンドを実行してください。
     整形された出力は以下のようになります。
     <screen>
<![CDATA[
bash-2.05b$ pprofp -R /tmp/pprof.22141.0

Trace for /home/dan/testapd.php
Total Elapsed Time = 0.00
Total System Time  = 0.00
Total User Time    = 0.00


Real         User        System             secs/    cumm
%Time (excl/cumm)  (excl/cumm)  (excl/cumm) Calls    call    s/call  Memory Usage Name
--------------------------------------------------------------------------------------
100.0 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0000   0.0009            0 main
56.9 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0005   0.0005            0 apd_set_pprof_trace
28.0 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 preg_replace
14.3 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 str_replace
]]>
     </screen>
    </para>
    <para>
     この例で使われている -R オプションは、
     その関数を実行するのにかかった時間の順でプロファイルテーブルを並べ替えます。
     "cumm call" 列には個々の関数が何回コールされたか、
     そして "s/call" 列には 1 回のコールあたりの平均所要時間が表示されます。
    </para>
   </step>
   <step>
    <para>
    KCacheGrind にインポートできる形式のファイルを作成するには、
    <command>pprof2calltree</command> コマンドを実行してください。
    </para>
   </step>
  </procedure>
 </section>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

