<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
 <reference id="ref.hyperwave">
  <title>Hyperwave 関数</title>
  <titleabbrev>Hyperwave</titleabbrev>

  <partintro>

   <section id="hw-intro">
    <title>導入</title>
    <para>
     <productname>Hyperwave</productname> は、Graz の <ulink
     url="http://www.iicm.edu">IICM</ulink> において開発されました。
     当初は <acronym>Hyper-G</acronym> という名前でしたが、
     商品化された際(恐らく 1996 年でした)に Hyperwave に変更されました。
    </para>
    <para>
     Hyperwave はフリーソフトウエアではありません。
     最新版は4.1で、<ulink url="&url.hyperwave;">www.hyperwave.com</ulink>
     から得ることができます。30 日間試用可能な版を注文することができます。
    </para>
    <para>
     Hyperwave は、データベースに似た情報システム
     (<acronym>HIS</acronym>, Hyperwave Information Server)です。この
     システムは、文書の保存と管理に着目しています。文書には、あらゆる
     データとすることが可能で、同時にファイルに保存することもできます。
     各文書には、オブジェクトレコードが付属しています。
     オブジェクトレコードは、その文書のメタデータを有しています。
     メタデータは、ユーザーにより拡張可能な属性のリストです。
     ある種の属性は、Hyperwave サーバーにより常に設定されますが、
     その他は、ユーザーにより修正可能です。
     属性は、名前=値 という形式の 名前/値 の組です。
     完全なオブジェクトレコードは、ユーザーの指定した数のこの
     組を有することができます。
     属性の名前は、ユニークである必要はありません。
     例えば、title はオブジェクトレコードの中に複数回現れる
     可能性があります。
     これは、複数の言語で title を指定したい場合に意味があります。
     このような場合、
     各 title の値は、2文字の言語の短縮型の後にコロンが続くものを
     前に置くという慣習があります。
     例えば、'en:Title in English' または 'ge:Titel in deutsch'
     description または keywords のような他の属性は、潜在的な候補です。
     残りの属性の値とコロンで区切ることにより他の文字列で言語の短縮形を
     置換することも可能です。
    </para>
    <para>
     各オブジェクトレコードは、各名前/キーの組で表した文字列であり、
     改行で区切られています。
     Hyperwave拡張には、属性名をキーとした連想配列としての第二の表現も
     有しています。
     多言語属性値は、それ自体で言語の短縮形をキーとする別の
     連想配列を構成します。
     実際、複数の属性は、属性値をキーとし、左にコロンがある文字列で
     連想配列を構成します。
     (これは完全に実装されていません。 
     まだ、適正に処理されるのは、属性 Title, Description, Keyword のみです。)
    </para>
    <para>
     文書と共に文書中の全てのハイパーリンクは
     同じくオブジェクトレコードとして保存されます。
     文書がデータベースに挿入される際には、
     文書中のハイパーリンクは文書から取り除かれ独立したオブジェクトとして
     保存されます。
     リンクに関するオブジェクトレコードは、リンクに関する記述を
     開始した場所と終了した場所に関する情報を有しています。
     オリジナルの文書を得るためには、リンクの無いプレーンな文書と
     リンクのリストを取り出し、リンクを再び挿入する必要があります。
     (関数 <function>hw_pipedocument</function> および 
     <function>hw_gettext</function> がこれを行います。)
     リンクを文書から分離する利点は明白です。
     リンクをされている文書が名前を変更した場合でも、
     そのリンクは簡単に適宜変更可能です。
     そのリンクを有する文書は、全く影響を受けません。
     文書自体を変更せずに文書にリンクを追加することさえ可能です。
    </para>
    <para>
     <function>hw_pipedocument</function> および
     <function>hw_gettext</function> が自動的にリンクの挿入を行う
     というのは、耳で聞く程簡単なことではありません。
     リンクの挿入は、ある種のドキュメント階層の操作を含んでいます。
     Web サーバーではこの機能はファイルシステムにより提供されますが、
     Hyperwave は固有の階層を有しており、名前はその階層のオブジェクト
     の位置を反映しません。
     このため、リンク作成時はまず Hyperwave の階層および名前空間から
     各 Web 名前空間の階層への対応付けを必要とします。
     Hyperwave と Web の間の根本的な違いは、Hyperwave では名前と階層
     の間を明確に区別することです。
     名前は、階層におけるオブジェクトの位置に関する情報を全く有していません。
     Web では、名前もオブジェクトの階層における位置に関する情報を
     有しています。
     このため、対応付けには2種類の手法があります。
     つまり、Hyperwave の階層および Hyperwave オブジェクトの名前が URL に
     反映されたものまたは名前のみのどちらかです。
     簡単のため、第2の方法が使用されます。
     'my_object' という名前の Hyperwave オブジェクトは、
     Hyperwave 階層のどこに位置するかによらず
     'http://host/my_object'  に対応付けます。
     Hyperwave 階層においては、名前 'parent/my_object' を有するオブジェクトは、
     Hyperwave 階層の 'my_object' の子となります。
     しかし、Web の名前空間では正反対となるため、ユーザーに混乱を生じる
     可能性があります。
     これは、適当なオブジェクト名を選択することによってのみ防止すること
     ができます。
    </para>
    <para>
     この選択により第2の問題が生じます。
     PHP をどうやって起動しますか?
     URL http://host/my_object は、例えば、Web サーバーに対して
     この URL を 'http://host/php3_script/my_object' に
     書き換えさせない限り、いかなる PHPスクリプトもコールしません。
     スクリプト 'php3_script' は $PATH_INFO 変数を評価し、
     Hyperwave サーバーから名前 'my_object' を有するオブジェクトを
     取得します。
     一つだけ欠点がありますが、簡単に修正可能です。
     URL の書き換えは、その Web サーバー上の他のドキュメントにアクセスする
     時には許可されません。
     Hyperwave サーバーで検索を行う PHPスクリプトは実現不可能です。
     このため、
     例えば http://host/Hyperwave で始まるような URL 
     を除くような少なくとも第2の書き換え規則を必要とします。
    </para>
    <para>
     上記の機構的なリンクは、他のドキュメントに挿入されます。
    </para>
    <para>
     PHP がサーバーモジュールでもCGI スクリプトでもなく、例えば
     CD-ROM 上に Hyperwave サーバーの内容をダンプするといった
     スタンドアロンのアプリケーションとして実行されている場合は、
     より複雑になります。
     このような場合、Hyperwave 階層を保ち、ファイルシステムに対応付けを
     行う必要があります。
     これは、(例えば、'/' を含む名前を選択することにより)固有の階層に
     対応付けている場合には、オブジェクト名と衝突する可能性があります。
     このため、'/' は他の文字、例えば '_' に置換されるべきです。
    </para>
    <para>
     Hyperwave サーバーと通信するためのネットワークプロトコルは、
     <ulink url="&spec.hyperwave;">HG-CSP</ulink>
     (Hyper-G Client/Serverプロトコル)という名前です。
     このプロトコルは、例えばオブジェクトレコードを得るといったある動
     作を始めるためのメッセージに基づいています。
     Hyperwave サーバーの初期の版では、二つの専用クライアント
     (Harmony,Amadeus) がサーバーとの通信用に提供されていました。
     これらは、Hyperwave が商品化された際になくなりました。
     代わりに、wavemaster が提供されました。
     wavemaster は、<abbrev>HTTP</abbrev> から <abbrev>HG-CSP</abbrev>
     へのプロトコルコンバーターのようなものです。
     これは、データベースの管理とドキュメントの可視化を全て
      Web インターフェースにより行うという考えによるものです。
      wavemaster は、インターフェースをカスタマイズするための
      作業用に一連のプレースホルダーを導入しています。
      この一連のプレースホルダーは、<abbrev>PLACE</abbrev> 言語
      と呼ばれています。      
     <abbrev>PLACE</abbrev> は、通常のプログラミング言語の機能の
     多くを欠いており、言語への拡張としては、プレースホルダーの
     リストを拡大するだけです。
     このことは、JavaScript を使用することにより作業が楽になったわけでは
     ないということと類似しています。
    </para>
    <para>
     Hyperwave サポートを PHP に付加することにより、インターフェース
     のカスタマイズ用のプログラミング言語を有していないという穴を
     埋めることになります。
     この機能は、<abbrev>HG-CSP</abbrev> により定義された
     全てのメッセージをサポートするだけでなく、
     完全なドキュメントの取得といった更に強力なコマンドも提供します。
    </para>
    <para>
     Hyperwave は、情報の特定の部分を名付けるために固有の用語法を
     用います。
     この方法は、広範に用いられ、拡張されています。
     ほとんどすべの関数は、次のデータ型のどれかを操作します。

     <itemizedlist>
      <listitem>
       <simpara>
	object ID: Hyperwave サーバーの各オブジェクトについてユニークな
	整数値。オブジェクトレコード (ObjectID) の属性の一つでもあります。
	object id は、オブジェクトを指定するための入力パラメータとして
	しばしば用いられます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	object record: 	attribute=value 形式の属性-値の組となる文字列。
	この組は、復改文字で他と区切られています。
	オブジェクトレコードは、<function>hw_object2array</function> により
	オブジェクトレコードに簡単に変換できます。
	いくつかの関数は、オブジェクトレコードを返します。
	これらの関数の名前は、obj で終わります。
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	object array: オブジェクトの全ての属性を有する連想配列。
	キーは属性名です。ある属性が、
	オブジェクトレコードに複数回現れる場合、別の添字または連想配列
	が生成されます。(title,keyword,description のような)
	言語に依存する属性は、省略語をキーとした連想配列として
	作成されます。
	他の複数の属性は、添字配列として作成されます。
	PHP 関数は、オブジェクト配列を返しません。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	hw_document: これは、完全に新規のデータ型であり、
	HTML,PDF 等といった実際のドキュメントを保持します。
	これは、幾分 HTML 用に最適化されていますが、他のフォーマット
	に使用することが可能です。 
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     オブジェクトレコードの配列を返すいくつかの関数は、そのレコードに
     関する統計情報を有する連想配列も返します。この配列は、オブジェク
     トレコード配列の最後の要素です。統計配列には、次のエントリがあり
     ます。
     <variablelist>
      <varlistentry>
       <term>Hidden</term>
       <listitem>
	<simpara>
	 属性 PresentationHints が Hidden であるオブジェクトレコードの数
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>CollectionHead</term>
       <listitem>
	<simpara>
	 属性 PresentationHints が CollectionHead であるオブジェクト
	 レコードの数
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>FullCollectionHead</term>
       <listitem>
	<simpara>
	 属性 PresentationHints が FullCollectionHead であるオブジェクト
	 レコードの数
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>CollectionHeadNr</term>
       <listitem>
	<simpara>
	 属性 PresentationHints が CollectionHead であるオブジェクト
	 レコードの配列のインデックス
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>FullCollectionHeadNr</term>
       <listitem>
	<simpara>
	 属性 PresentationHints が FullCollectionHead であるオブジェクト
	 レコードの配列のインデックス
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Total</term>
       <listitem>
	<simpara>
	 Total: オブジェクトレコードの数
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </section>

   <section id="hw-apache">
    <title>Apache との組み合わせ</title>
    <para>
     Hyperwave モジュールは、PHP が Apache モジュールとしてコンパイル
     された場合に、最適化されています。
     この場合、Apache が書き換えエンジンを使用する場合、内部の
     Hyperwave サーバーをほぼ完全にユーザーから隠すことが可能です。
     以下の手順によりこのことを説明します。
    </para>
    <para>
     Hyperwave サポートを有効にして Apache に組み込んだ PHP は、
     wavemaster に基づく本来の Hyperwave の手法を置換するものなので、
     Apache サーバーは、Hyperwave Web インターフェースとしてのみ
     処理を行うと仮定します。
     これは必然ではありませんが、設定が容易になります。
     考え方は非常に簡単です。
     まず最初に <envar>PATH_INFO</envar> 変数を評価し、
     Hyperwave オブジェクトの名前としてその値を処理する PHP スクリプトが
     必要です。
     このスクリプトを 'Hyperwave' と呼びましょう。URL <systemitem
     role="url">http://your.hostname/Hyperwave/name_of_object</systemitem>
     'name_of_object' という名前の Hyperwave オブジェクトを返します。
     オブジェクトの型に応じて、スクリプトは対応した処理を行う
     必要があります。
     collection の場合、恐らく子のリストを返すことになります。
     ドキュメントの場合、MIME 型と内容を返すことになります。
     Apache の書換エンジンを使用した場合、若干の改善が見込まれます。
     ユーザーの立場で見ると、URL 
     <systemitem role="url">http://your.hostname/name_of_object</systemitem>
     がオブジェクトを返せば、より簡単になります。書き換えの規則は非常
     に簡単です。
     <informalexample>
      <programlisting role="apache-conf">
<![CDATA[
RewriteRule ^/(.*) /usr/local/apache/htdocs/HyperWave/$1 [L]
]]>
      </programlisting>
     </informalexample>
     この状態で、全ての URL は Hyperwave サーバーのオブジェクトに
     関係付けられています。これにより問題の解決が容易になります。
     'Hyperwave' スクリプト以外の検索といった他のスクリプト
     を実行することはできません。
     これは次のような別の規則により修正することができます。

     <informalexample>
      <programlisting role="apache-conf">
<![CDATA[
RewriteRule ^/hw/(.*) /usr/local/apache/htdocs/hw/$1 [L]
]]>
      </programlisting>
     </informalexample>

     これにより、ディレクトリ <filename
     class="directory">/usr/local/apache/htdocs/hw</filename> が
     追加のスクリプトや他のファイル用に確保されます。
     この規則は、一つ前の規則よりも前に評価されることに注意して下さい。
     これには若干の欠点があります。
     つまり、'hw/' で始まる名前を有する Hyperwave オブジェクトは
     全て隠されてしまいます。
     このため、このような名前を使用しないようにして下さい。
     例えば画像用により多くのディレクトリが必要な場合、
     更に規則を加えるか一つのディレクトリに全てを置くかして下さい。
     最後にRewriteEngineをオンにすることを忘れないで下さい。

     <informalexample>
      <programlisting role="apache-conf">
<![CDATA[
RewriteEngine on
]]>
      </programlisting>
     </informalexample>

     経験上、次のようなスクリプトが必要になることと思われます。

     <itemizedlist>
       <listitem>
       <simpara>
	オブジェクト自身を返す
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	検索を許可する
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	自分を定義する
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	プロファイルを設定する
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	オブジェクト属性を表示したり、ユーザーに関する情報を表示したり、
	サーバーのステータスを表示したり等する追加される関数毎に一つ
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section id="hw-todo">
    <title>Todo</title>
    <para>
    まだやるべきことがいくつかあります。
     <itemizedlist>
      <listitem>
       <simpara>
	hw_InsertDocument は、<function>hw_InsertObject</function> お
	よび<function>hw_PutDocument</function> に分割する必要があります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	いくつかの関数の名前はまだ修正されていません。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	多くの関数は最初のパラメータとして現在の接続 ID を
	必要とします。これにより入力が多くかつ頻繁になってますが、
	一つだけの接続をオープンしている場合には必要ないはずです。
	デフォルト接続の導入により改善される見込みです。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	多重属性を処理するには、オブジェクトレコードからオブジェクト配
	列への変換機能が必要です。
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>
  </partintro>














































  






 


  






&reference.hw.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

