<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342130 Maintainer: hirokawa Status: working -->
<!-- CREDITS: shimooka -->
<refentry xml:id="function.get-class" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_class</refname>
  <refpurpose>オブジェクトのクラス名を返す</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>get_class</methodname>
   <methodparam choice="opt"><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   指定した <parameter>object</parameter> のクラス名を取得します。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       調べるオブジェクト。クラスの内部ではこのパラメータを省略することもできます。
      </para>
      <note>
       <simpara>
        Explicitly passing &null; as the <parameter>object</parameter> is no
        longer allowed as of PHP 7.2.0.
       </simpara>
       <simpara>
        The parameter is still optional and calling <function>get_class</function>
        without a parameter from inside a class will work, but passing &null; now
        emits an <constant>E_WARNING</constant> notice.<!-- to be translated -->
       </simpara>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   オブジェクト <parameter>object</parameter> がインスタンス
   であるクラスの名前を返します。<parameter>object</parameter>
   がオブジェクトでない場合には&false;が返されます。
  </para>
  <para>
   クラスの内部で <parameter>object</parameter> を省略すると、
   そのクラスの名前を返します。
  </para>
  <para>
   If the <parameter>object</parameter> is an instance of a class which exists 
   in a namespace, the qualified namespaced name of that class is returned.<!-- to be translated -->
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   オブジェクト以外に対して <function>get_class</function> をコールすると、
   <constant>E_WARNING</constant> レベルのエラーが発生します。
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        &null; was removed as the default value for <parameter>object</parameter>,
        and is no longer a valid input.<!-- to be translated -->
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        &null; が <parameter>object</parameter> のデフォルトとなりました。
        したがって、&null; を <parameter>object</parameter>
        に渡すのは何も指定しないのと同じ意味ということになります。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>get_class</function> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

class foo {
    function name()
    {
        echo "My name is " , get_class($this) , "\n";
    }
}

// オブジェクトを生成
$bar = new foo();

// 外部からコール
echo "Its name is " , get_class($bar) , "\n";

// 内部からコール
$bar->name();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Its name is foo
My name is foo
]]>
    </screen>
   </example>
   <example>
    <title><function>get_class</function> のスーパークラスでの使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class bar {
    public function __construct()
    {
        var_dump(get_class($this));
        var_dump(get_class());
    }
}

class foo extends bar {
}

new foo;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "foo"
string(3) "bar"
]]>
    </screen>
   </example>
   <example>
    <title>Using <function>get_class</function> with namespaced classes</title><!-- to be translated -->
    <programlisting role="php">
<![CDATA[
<?php

namespace Foo\Bar;

class Baz {
    public function __construct()
    {

    }
}

$baz = new \Foo\Bar\Baz;

var_dump(get_class($baz));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "Foo\Bar\Baz"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_called_class</function></member>
    <member><function>get_parent_class</function></member>
    <member><function>gettype</function></member>
    <member><function>is_subclass_of</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
