<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 301720 Maintainer: takagi Status: ready -->

<section xml:id="mongo.security" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>セキュリティ</title>

 <section>
  <title>リクエストインジェクション攻撃</title>
  <para>
   クエリに <literal>$_GET</literal> パラメータを渡している場合は、
   まず最初にそれを文字列にキャストすることを忘れないようにしましょう。
   GET リクエストには連想配列を入れることもでき、
   そのまま使うと期待通りのクエリにはなりません。
  </para>

  <para>
   当たり障りのない例を示します。ユーザの情報を調べるときに
   <emphasis>http://www.example.com?username=bob</emphasis>
   のようなリクエストを送っているとしましょう。アプリケーション側では
   <literal>$collection->find(array("username" => $_GET['username']))</literal>
   のような問い合わせをします。
  </para>

  <para>
   ここで、誰かが
   <emphasis>http://www.example.com?password[$ne]=foo</emphasis>
   のようなリクエストを送ったとします。PHP はこれを自動的に連想配列に変換するので、クエリは
   <literal>$collection->find(array("username" => array('$ne' => "foo")))</literal>
   のようになります。これは、名前が "foo" ではないユーザすべて (おそらく全員でしょうね)
   の情報を返すことになります。
  </para>

  <para>
   この攻撃を防ぐのはきわめて簡単です。$_GET パラメータが期待通りの型であることを確かめてから
   データベースにリクエストを送ればよいのです (この場合は、文字列にキャストすることになります)。
  </para>

  <para>
   <link xlink:href="&url.mongodb.injection;">Phil</link> の指摘に感謝します。
  </para>
 </section>

</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

