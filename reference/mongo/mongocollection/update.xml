<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 307744 Maintainer: takagi Status: ready -->

<refentry xml:id="mongocollection.update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::update</refname>
  <refpurpose>指定した条件にもとづいてレコードを更新する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>boolean</type><methodname>MongoCollection::update</methodname>
   <methodparam><type>array</type><parameter>criteria</parameter></methodparam>
   <methodparam><type>array</type><parameter>newobj</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>criteria</parameter>
     </term>
     <listitem>
      <para>
       更新したいオブジェクトの条件。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>newobj</parameter>
     </term>
     <listitem>
      <para>
       マッチするレコードを更新するオブジェクト。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       このパラメータは
       <literal>array("optionname" => &lt;boolean&gt;, ...)</literal>
       形式の連想配列で、現在サポートしているオプションは次の通りです。
       <itemizedlist>
        <listitem>
         <para>
          <literal>"upsert"</literal>
         </para>
         <para>
          $criteria にマッチするレコードが見つからない場合に
          $criteria と $newobj から新しいオブジェクトを作ります
          (以下の upsert の例を参照ください)。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"multiple"</literal>
         </para>
         <para>
          $criteria にマッチするすべてのドキュメントを更新します。
          <function>MongoCollection::update</function> は
          <function>MongoCollection::remove</function> と正反対の動きをします。
          デフォルトでは、マッチするすべてのドキュメントではなく
          ひとつのドキュメントだけを更新するのです。
          <emphasis>複数ドキュメントを更新したいのかそうでないのかは、
          常に指定しておくことを推奨します。</emphasis>
          将来、データベースのデフォルトの挙動が変わる可能性があるからです。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          boolean あるいは整数値で、デフォルトは &false; です。&false;
          の場合、データベースからの応答を待たずにプログラムを続行します。
          &true; の場合、プログラムはデータベースからの応答を待ち、
          更新に失敗したときには
          <classname>MongoCursorException</classname> をスローします。
         </para>
         <para>
          レプリケーションを使っていてマスタを変更している場合、もし "safe"
          を使っていればドライバはマスタとの接続を切断して例外をスローし、
          次の操作時に新しいマスタを探そうとします
          (新しいマスタに対して操作を再試行するかどうかは
          アプリケーション側で判断しなければなりません)。
         </para>
         <para>
          レプリカセットで "safe" を <emphasis>使わずに</emphasis>
          マスタを変更する場合は、ドライバがその変更について知るすべがありません。
          そのため、何もエラーを出さずに書き込みに失敗し続けます。
         </para>
         <para>
          <literal>safe</literal> が整数値の場合は、
          指定した数のマシンで更新が成功するまでは成功したと見なしません
          (処理がタイムアウトした場合は例外をスローします。wtimeout を参照ください)。
          これは、コレクションに設定された w 変数をオーバーライドします。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"fsync"</literal>
         </para>
         <para>
          boolean で、デフォルトは &false; です。
          更新操作がディスク上に同期されるまで成功とは見なさないようにさせます。
          &true; の場合は "安全な" 追加操作が前提となり、
          <literal>safe</literal> の設定を &false; にオーバーライドします。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          整数値。デフォルトは <literal>MongoCursor::$timeout</literal> です。
          "safe" が設定されている場合に、クライアントがデータベースからの応答をどれだけ待つかを
          (ミリ秒単位で) 指定します。ここで指定した時間内にデータベースからの応答がない場合は
          <classname>MongoCursorTimeoutException</classname>
          がスローされます。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   更新のデータベースへの送信が成功したかどうかを返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   "safe" オプションが設定されているときに更新に失敗した場合は、
   <classname>MongoCursorException</classname> をスローします。
  </para>
  <para>
   "safe" オプションが設定されているときに
   <literal>MongoCollection::$wtimeout</literal> ミリ秒以内に処理が終わらなければ
   <classname>MongoCursorTimeoutException</classname> をスローします。
   これはサーバ上の操作を終了させるわけではなく、あくまでもクライアント側のタイムアウトです。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.1</entry>
       <entry>
        "options" パラメータが boolean から配列に変わりました。
        1.0.1 より前のバージョンでは二番目のパラメータはオプションの boolean
        値で、upsert を指定するものでした。
       </entry>
      </row>
      <row>
       <entry>1.0.5</entry>
       <entry>
        "safe" オプションが追加されました。
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        "safe" オプションに整数値がわたせるようになり (以前は booleans
        のみでした)、さらに "fsync" オプションが追加されました。
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        "safe" が設定されている場合は、"not master" エラーで接続を切断するようになりました。
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        timeout オプションが追加されました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::update</function></title>
   <para>
    address フィールドをドキュメントに追加します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->insert(array("firstname" => "Bob", "lastname" => "Jones" ));
$newdata = array('$set' => array("address" => "1 Smith Lane"));
$c->update(array("firstname" => "Bob"), $newdata);

var_dump($c->findOne(array("firstname" => "Bob")));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["firstname"]=>
  string(3) "Bob"
  ["lastname"]=>
  string(5) "Jones"
  ["address"]=>
  string(12) "1 Smith Lane"
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::update</function> での upsert</title>
   <para>
    upsert を使うとコードを簡潔にすることができます。
    オブジェクトが存在しない場合は新たに作成し、
    存在する場合はそれを更新するという操作を一行で書けるからです。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(array("uri" => "/summer_pics"), array('$inc' => array("page hits" => 1)), array("upsert" => true));
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#9 (0) {
  }
  ["uri"]=>
  string(12) "/summer_pics"
  ["page hits"]=>
  int(1)
}
]]>
   </screen>
   <para>
    <literal>newobj</literal> が $ 演算子を含まない場合、upsert
    は新しいドキュメントを単体で作成します。これは、通常の update の挙動と同じです。
    update で $ 演算子を使わなければ、ドキュメント全体が上書きされます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->update(array("name" => "joe"), array("username" => "joe312", "createdAt" => new MongoDate()), 
    array("upsert" => true));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#10 (0) {
  }
  ["username"]=>
  string(6) "joe312"
  ["createdAt"]=>
  object(MongoDate)#4 (0) {
  }
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::update</function> での複数更新</title>
   <para>
    デフォルトでは <function>MongoCollection::update</function> は、
    $criteria にマッチするドキュメントが複数見つかっても最初のものだけを更新します。
    必要なら、"multiple" オプションでその挙動を変えることができます。
   </para>
   <para>
    この例は、翌日が誕生日である全員に "gift" フィールドを追加します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime("+1 day")));
$people->update(array("birthday" => $today), array('$set' => array('gift' => $surprise)), array("multiple" => true));

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <link linkend="mongo.updates">更新に関するドキュメント</link> および
   <link xlink:href="&url.mongodb.dochub.update;">MongoDB コアメント</link>
   を参照ください。
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
