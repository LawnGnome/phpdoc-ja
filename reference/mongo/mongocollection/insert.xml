<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321505 Maintainer: takagi Status: ready -->

<refentry xml:id="mongocollection.insert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::insert</refname>
  <refpurpose>配列をコレクションに追加する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool|array</type><methodname>MongoCollection::insert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   データベースに送信する文字列は UTF-8 でなければなりません。
   UTF-8 以外の文字列を送信した場合は
   <classname>MongoException</classname> がスローされます。非 UTF-8 文字列を追加
   (あるいは問い合わせ) するには <classname>MongoBinData</classname> を使います。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       配列。
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       追加時のオプション。
       <itemizedlist>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          boolean あるいは整数値で、デフォルトは &false; です。&false;
          の場合、データベースからの応答を待たずにプログラムを続行します。
          &true; の場合、プログラムはデータベースからの応答を待ち、
          追加に失敗したときには
          <classname>MongoCursorException</classname> をスローします。
         </para>
         <para>
          レプリケーションを使っていてマスタを変更している場合、もし "safe"
          を使っていればドライバはマスタとの接続を切断して例外をスローし、
          次の操作時に新しいマスタを探そうとします
          (新しいマスタに対して操作を再試行するかどうかは
          アプリケーション側で判断しなければなりません)。
         </para>
         <para>
          レプリカセットで "safe" を <emphasis>使わずに</emphasis>
          マスタを変更する場合は、ドライバがその変更について知るすべがありません。
          そのため、何もエラーを出さずに書き込みに失敗し続けます。
         </para>
         <para>
          <literal>safe</literal> が整数値の場合は、
          指定した数のマシンで追加が成功するまでは成功したと見なしません
          (処理がタイムアウトした場合は例外をスローします。wtimeout を参照ください)。
          これは、コレクションに設定された w 変数をオーバーライドします。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"fsync"</literal>
         </para>
         <para>
          boolean で、デフォルトは &false; です。
          追加操作がディスク上に同期されるまで成功とは見なさないようにさせます。
          &true; の場合は "安全な" 追加操作が前提となり、
          <literal>safe</literal> の設定を &false; にオーバーライドします。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          整数値。デフォルトは <literal>MongoCursor::$timeout</literal> です。
          "safe" が設定されている場合に、クライアントがデータベースからの応答をどれだけ待つかを
          (ミリ秒単位で) 指定します。ここで指定した時間内にデータベースからの応答がない場合は
          <classname>MongoCursorTimeoutException</classname>
          がスローされます。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <parameter>safe</parameter> が設定されている場合は、
   追加結果を含む配列を返します。設定されていない場合は、
   配列が空でなかったかどうかをあらわす boolean 値を返します (空の配列は追加されません)。
  </para>
  <para>
   配列が返された場合、その中に含まれる要素は次のようになります。
   <variablelist>
    <varlistentry>
     <term>
      <parameter>ok</parameter>
     </term>
     <listitem>
      <para>
       これは常に 1 です (ただし last_error 自体が失敗した場合は除く)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>err</parameter>
     </term>
     <listitem>
      <para>
       このフィールドに null 以外の値が入っている場合は、直前の操作でエラーが発生しています。
       このフィールドが設定されている場合、その内容は発生したエラーを表す文字列となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>code</parameter>
     </term>
     <listitem>
      <para>
       データベースのエラーが発生した場合に、そのエラーコードをクライアントに戻します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>errmsg</parameter>
     </term>
     <listitem>
      <para>
       このフィールドが設定されるのは、データベースコマンドで何か問題が発生したときです。
       <literal>ok</literal> を 0 にすることと組み合わせて使います。
       たとえば、もし <literal>w</literal> が設定されているときにタイムアウトが発生すると、
       errmsg は "timed out waiting for slaves" そして <literal>ok</literal> は 0 になります。
       このフィールドが設定されている場合、その内容は発生したエラーを表す文字列となります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>n</parameter>
     </term>
     <listitem>
      <para>
       直近の操作が insert、update あるいは remove だった場合に、影響を受けた行の数を返します。
       of objects affected will be returned. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>wtimeout</parameter>
     </term>
     <listitem>
      <para>
       直近の操作がレプリケーション待ちでタイムアウトしたかどうか。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>waiter</parameter>
     </term>
     <listitem>
      <para>
       操作がタイムアウトするまでにどれだか待ったか。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>wtime</parameter>
     </term>
     <listitem>
      <para>
       <literal>w</literal> を設定して、かつ操作が成功した場合に、
       <literal>w</literal> サーバへのレプリケートにかかった時間。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>upserted</parameter>
     </term>
     <listitem>
      <para>
       upsert が発生した場合は、このフィールドに新しいレコードの
       <literal>_id</literal> が格納されます。upsert の場合は、このフィールドあるいは
       <literal>updatedExisting</literal> のいずれかが (エラーが発生しない限り) 必ず存在します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>updatedExisting</parameter>
     </term>
     <listitem>
      <para>
       upsert が既存の要素を更新した場合に、このフィールドが true となります。
       <literal>_id</literal> が格納されます。upsert の場合は、このフィールドあるいは
       upsearted のいずれかが (エラーが発生しない限り) 必ず存在します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   "safe" オプションが設定されていて追加に失敗した場合に
   <classname>MongoCursorException</classname> をスローします (バージョン 1.0.1 以降)。
  </para>
  <para>
   "safe" オプションが設定されているときに
   <literal>MongoCollection::$wtimeout</literal> ミリ秒以内に処理が終わらなければ
   <classname>MongoCursorTimeoutException</classname> をスローします。
   これはサーバ上の操作を終了させるわけではなく、あくまでもクライアント側のタイムアウトです。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.5</entry>
       <entry>
        二番目のパラメータがオプションの配列に変わりました。1.0.5
        より前のバージョンでは、二番目のパラメータは "safe"
        オプションを表す boolean 値でした。
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        "safe" オプションに整数値がわたせるようになり (以前は booleans
        のみでした)、さらに "fsync" オプションが追加されました。
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        "safe" オプションを使っている場合の返り値の型が配列に変わりました。
        配列にはエラー情報が含まれています。"safe" オプションを使わない場合は、今までどおり
        boolean のままです。
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        "safe" が設定されている場合は、"not master" エラーで接続を切断するようになりました。
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        timeout オプションが追加されました。
       </entry>
      </row>
      <row>
       <entry>1.3.0</entry>
       <entry>
        <parameter>options</parameter> パラメータで、boolean
        だけを渡して安全な追加を指定することができなくなりました。
        同じことをするには <literal>array('safe' => true)</literal>
        としなければなりません。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::insert</function> の _id の例</title>
   <para>
    オブジェクトを挿入すると、参照渡しでない限りはそこに _id フィールドを追加します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo(); 
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$a = array('x' => 12);
$collection->insert($a);
var_dump($a);

$b = array('x' => 12);
$ref = &$b;
$collection->insert($ref);
var_dump($ref);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(2) {
  ["x"]=>
  int(12)
  ["_id"]=>
  object(MongoId)#4 (0) {
  }
}
array(12) {
  ["x"]=>
  int(1)
}
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoCollection::insert</function> での safe の例</title>
   <para>
    この例は、同じ _id を持つ二つの要素を追加しようとするものです。
    <parameter>safe</parameter> が設定されていれば、
    <classname>MongoCursorException</classname> がスローされます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$person = array("name" => "Joe", "age" => 20);
$collection->insert($person, true);

// $person には _id フィールドができたので、
// もう一度追加しようとすると例外が発生します
try {
    $collection->insert($person, true);
} catch(MongoCursorException $e) {
    echo "Can't save the same person twice!\n";
}

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::batchInsert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>MongoDB コアドキュメントの <link xlink:href="&url.mongodb.dochub.insert;">insert</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
