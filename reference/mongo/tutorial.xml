<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 301119 Maintainer: takagi Status: ready -->

<section xml:id="mongo.tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>チュートリアル</title>
 <section>
  <title>接続の作成</title>
  <para>
   データベースサーバに接続するには、次のいずれかの方法を使います。

   <programlisting role="php">
<![CDATA[
<?php

$connection = new Mongo(); // localhost:27017 に接続します
$connection = new Mongo( "example.com" ); // リモートホスト (デフォルトのポート) に接続します
$connection = new Mongo( "example.com:65432" ); // リモートホストの指定したポートに接続します

?>
]]>
   </programlisting>

   これで、$connection を使ってデータベースを取得できるようになります。
  </para>
 </section>

 <section>
  <title>データベースの取得</title>
  <para>
   データベースを選択するには次のようにします。

   <programlisting role="php">
<![CDATA[
<?php

$db = $connection->dbname;

?>
]]>
   </programlisting>
   データベースを事前に作っておく必要はありません。
   存在しないデータベースを選択すれば、新しいデータベースを作ることができます。
   Typo には注意しましょう! 意図せずに新しいデータベースを作ってしまい、
   エラーで悩まされる原因になります。

   <programlisting role="php">
<![CDATA[
<?php

$db = $connection->mybiglongdbname;
// 何かをします
$db = $connection->mybiglongdbnme;
// これは別のデータベースに接続してしまいます!

?>
]]>
   </programlisting>
  </para>
 </section>

 <section>
  <title>コレクションの取得</title>
  <para>
   コレクションの取得は、データベースの取得と同じ構文で行えます。

   <programlisting role="php">
<![CDATA[
<?php

$db = $connection->baz;
$collection = $db->foobar;

// あるいは、もうすこし簡潔に
$collection = $connection->baz->foobar;

?>
]]>
   </programlisting>
  </para>
 </section>

 <section>
  <title>ドキュメントの追加</title>
  <para>
   連想配列は、データベース内のコレクションに保存できる基本的なオブジェクトです。
   何らかの "ドキュメント" はこのような形式になります。

   <programlisting role="php">
<![CDATA[
<?php

$doc = array( "name" => "MongoDB",
   "type" => "database",
   "count" => 1,
   "info" => (object)array( "x" => 203,
       "y" => 102),
   "versions" => array("0.9.7", "0.9.8", "0.9.9")
);

?>
]]>
   </programlisting>

   配列やオブジェクトをネストできることに注目しましょう。
   MongoDB において、オブジェクトとドキュメントはほぼ同じ意味になります。
   $doc のことをドキュメントと言ってもかまいませんしオブジェクトと呼んでもかまいません。
   しかし、"info" フィールドは常にオブジェクトでドキュメントではありません。
   この決まりは、すべてのドキュメントについて適用されます。
  </para>
  <para>
   ドキュメントを追加するには <function>MongoCollection::insert</function> を使います。

   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo();
$collection = $m->foo->bar;
$collection->insert( $doc );

?>
]]>
   </programlisting>
  </para>
 </section>

 <section>
  <title>
   <function>MongoCollection::findOne</function> によるドキュメントの検索
  </title>
  <para>
   追加したドキュメントがそこにあることを表示して確かめるには、
   findOne() を使ってコレクション内の最初のドキュメントを取得します。
   このメソッドは単一のドキュメントを返します (一方、
   <function>MongoCollection::find</function> は
   <classname>MongoCursor</classname> を返します)。
   クエリにマッチするドキュメントがひとつしかない場合や
   ひとつの結果だけを知りたい場合に便利です。

   <programlisting role="php">
<![CDATA[
<?php

$obj = $collection->findOne();
var_dump( $obj );

?>
]]>
   </programlisting>

   結果は、このようになります。

   <programlisting>
<![CDATA[
array(5) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["name"]
  string(7) "MongoDB"
  ["type"]=>
  string(8) "database"
  ["count"]=>
  int(1)
  ["info"]=>
  array (2) {
    ["x"]=>
    int(203)
    ["y"]=>
    int(102)
  }
  ["versions"]
  array(3) {
    [0]=>
    string(5) "0.9.7"
    [1]=>
    string(5) "0.9.8"
    [2]=>
    string(5) "0.9.9"
  }
}
]]>
   </programlisting>
  </para>
  <para>
   _id フィールドが自動的にドキュメントに追加されたことに注目しましょう。
   MongoDB は、_ と $ で始まる要素名を
   内部的な動作のために予約しています。
  </para>
 </section>

 <section>
  <title>複数のドキュメントの追加</title>
  <para>
   もう少し意味のある問い合わせをするために、複数のシンプルなドキュメントをコレクションに追加しましょう。
   これから追加するドキュメントは次のようなものです。

   <programlisting role="php">
<![CDATA[
<?php

array( "i" => value );

?>
]]>
   </programlisting>

   効率的に、ループで処理します。

   <programlisting role="php">
<![CDATA[
<?php

for($i=0; $i<100; $i++) {
    $collection->insert( array( "i" => $i ) );
}

?>
]]>
   </programlisting>
  </para>

  <para>
   先ほどと同じコレクションに、別のキーを持つ配列を追加していることに注目しましょう。
   MongoDB が「スキーマフリー」であると言われるのは、こういう側面があるからです。
  </para>
 </section>

 <section>
  <title>コレクション内のドキュメント数</title>
  <para>
   これで 101 件のドキュメントを追加したことになります
   (先ほどのループで 100 件、そして最初の 1 件)。
   本当にそうなっているか、count() メソッドで確認してみましょう。
   <programlisting role="php">
<![CDATA[
<?php

echo $collection->count();

?>
]]>
   </programlisting>
   結果は 101 と表示されます。
  </para>
  <para>
   <function>MongoCollection::count</function>
   には、クエリとフィールドを渡すこともできます。また、
   <classname>MongoCursor</classname> (以下を参照) の数を数えることもできます。
   この場合、クエリで指定したフィルタを考慮して数えます。
  </para>
 </section>

 <section>
  <title>カーソルを使った全ドキュメントの取得</title>
  <para>
   コレクション内のすべてのドキュメントを取得するには
   <function>MongoCollection::find</function> を使います。
   find() メソッドは <classname>MongoCursor</classname> オブジェクトを返し、
   これを使うとクエリにマッチしたドキュメントすべてに対する反復処理ができるようになります。
   では、すべてのドキュメントを取得して表示させてみましょう。

   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();
foreach ($cursor as $id => $value) {
    echo "$id: ";
    var_dump( $value );
}

?>
]]>
   </programlisting>

   これは、コレクション内の全 101 ドキュメントを表示します。
   $id はドキュメントの _id フィールドで、
   $value はドキュメントそのものです。
  </para>
 </section>

 <section>
  <title>問い合わせの条件の設定</title>
  <para>
   クエリを作って find() メソッドに渡せば、
   コレクション内のドキュメントのサブセットを取得することができます。
   たとえば、"i" フィールドの値が 71 であるドキュメントを探したいときは、
   このようにします。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => 71 );
$cursor = $collection->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>

   そうすると、ひとつのドキュメントだけが表示されます。

   <programlisting>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["i"]=>
  int(71)
  ["_ns"]=>
  "testCollection"
}
]]>
   </programlisting>
  </para>
 </section>

 <section>
  <title>クエリによる複数ドキュメントの取得</title>
  <para>
   クエリを使って、コレクションからドキュメントのセットを取得することができます。
   たとえば、"i" &gt; 50 であるすべてのドキュメントを取得したい場合は次のようにします。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( '$gt' => 50 ) ); // '$gt' と、シングルクォートで囲んでいることに注意しましょう
$cursor = $coll->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>

   これは、i &gt; 50 であるドキュメントをすべて表示します。
   また、20 &lt; i &lt;= 30 のような範囲を指定することもできます。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( "\$gt" => 20, "\$lte" => 30 ) );
$cursor = $coll->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>

   "$" をエスケープするのをつい忘れてしまいがちになるときは、
   '$' 以外の文字を特殊文字として使うようにすることもできます。
   キーの中にはあらわれないような特殊文字、たとえば ":"
   をひとつ選び、php.ini に次の行を追加します。

   <programlisting>
<![CDATA[
mongo.cmd = ":"
]]>
   </programlisting>

   すると、先ほどの例を次のように書けるようになります。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( ":gt" => 20, ":lte" => 30 ) );

?>
]]>
   </programlisting>

   これは、コードの中でも ini_set("mongo.cmd", ":") のように変更することができます。
   もちろん、単に $ を使うときはシングルクォートで囲むようにするだけでもかまいません。
  </para>
 </section>

 <section>
  <title>インデックスの作成</title>
  <para>
   MongoDB はインデックスをサポートしています。コレクションにインデックスを追加するのは簡単です。
   インデックスを作るには、対象となるフィールドと並び順を指定します。
   並び順は、昇順 (1) あるいは降順 (-1) のいずれかです。
   この例では、"i" フィールドの昇順でインデックスを作成しています。

   <programlisting role="php">
<![CDATA[
<?php

$coll->ensureIndex( array( "i" => 1 ) );  // "i" にインデックスを作ります
$coll->ensureIndex( array( "i" => -1, "j" => 1 ) );  // "i" の降順、"j" の昇順でインデックスを作ります

?>
]]>
   </programlisting>
  </para>
 </section>
 <section>
  <title>簡単な例</title>
  <para>
   この例では、MongoDB への接続からオブジェクトの追加、
   オブジェクトの問い合わせ、その結果の反復処理、そして接続の切断までを行っています。
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// 接続
$m = new Mongo();

// データベースの選択
$db = $m->comedy;
$collection = $db->cartoons;

// 要素の追加
$obj = array( "title" => "Calvin and Hobbes", "author" => "Bill Watterson" );
$collection->insert($obj);

// 構造が違う別の要素の追加
$obj = array( "title" => "XKCD", "online" => true );
$collection->insert($obj);

// コレクション内のすべての内容の検索
$cursor = $collection->find();

// 結果の反復処理
foreach ($cursor as $obj) {
    echo $obj["title"] . "\n";
}

// 切断
$m->close();

?>
]]>
  </programlisting>
  <para>
   結果は次のようになります。
  </para>
  <screen>
<![CDATA[
Calvin and Hobbes
XKCD
]]>
  </screen>
 </section>
</section>
