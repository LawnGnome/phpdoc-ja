<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 307180 Maintainer: takagi Status: working -->

<section xml:id="mongo.tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>チュートリアル</title>
 <section>
  <title>Introduction</title>
  <para>
   This is the 10gen-supported PHP driver for MongoDB.  
  </para>
  <para>Here's a quick code sample that connects, inserts documents, queries for
   documents, iterates through query results, and disconnects from MongoDB.  
   There are more details on each step in the tutorial below.
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// connect
$m = new Mongo();

// select a database
$db = $m->comedy;

// select a collection (analogous to a relational database's table)
$collection = $db->cartoons;

// add a record
$obj = array( "title" => "Calvin and Hobbes", "author" => "Bill Watterson" );
$collection->insert($obj);

// add another record, with a different "shape"
$obj = array( "title" => "XKCD", "online" => true );
$collection->insert($obj);

// find everything in the collection
$cursor = $collection->find();

// iterate through the results
foreach ($cursor as $obj) {
    echo $obj["title"] . "\n";
}

?>
]]>
  </programlisting>
  <para>
   This would output:
  </para>
  <screen>
<![CDATA[
Calvin and Hobbes
XKCD
]]>
  </screen>
 </section>
 <section>
  <title>接続の作成</title>
  <para>
   データベースサーバに接続するには、次のいずれかの方法を使います。

   <programlisting role="php">
<![CDATA[
<?php

$connection = new Mongo(); // localhost:27017 に接続します
$connection = new Mongo( "example.com" ); // リモートホスト (デフォルトのポート) に接続します
$connection = new Mongo( "example.com:65432" ); // リモートホストの指定したポートに接続します

?>
]]>
   </programlisting>

   You do not have to explicitly disconnect from the database.  When 
   <literal>$connection</literal> goes out of scope, the connection will be 
   closed automatically and any database resources it was using will be freed.
  </para>
  <section>
   <title>See Also</title>
   <para>
    The manual chapter on <link linkend="mongo.connecting">connecting</link> 
    covers different types of connections.  
   </para>
   <para>
    The API documentation on the <classname>Mongo</classname> class and 
    <function>Mongo::__construct</function> give a comprehensive look at all 
    possible options with a number of examples.
  </para>
 </section>

 <section>
  <title>データベースの取得</title>
  <para>
   データベースを選択するには次のようにします。

   <programlisting role="php">
<![CDATA[
<?php

$db = $connection->dbname;

?>
]]>
   </programlisting>
   データベースを事前に作っておく必要はありません。
   存在しないデータベースを選択すれば、新しいデータベースを作ることができます。
   Typo には注意しましょう! 意図せずに新しいデータベースを作ってしまい、
   エラーで悩まされる原因になります。

   <programlisting role="php">
<![CDATA[
<?php

$db = $connection->mybiglongdbname;
// 何かをします
$db = $connection->mybiglongdbnme;
// これは別のデータベースに接続してしまいます!

?>
]]>
   </programlisting>
  </para>
   <section>
    <title>See Also</title>
    <para>
     The API documentation on the <classname>MongoDB</classname> class contains 
     more information about database objects.
    </para>
   </section>
 </section>

 <section>
  <title>コレクションの取得</title>
  <para>
   コレクションの取得は、データベースの取得と同じ構文で行えます。

   <programlisting role="php">
<![CDATA[
<?php

$db = $connection->baz;
$collection = $db->foobar;

// あるいは、もうすこし簡潔に
$collection = $connection->baz->foobar;

?>
]]>
   </programlisting>
  </para>
   <section>
    <title>See Also</title>
    <para>
     The API documentation on the <classname>MongoCollection</classname> class 
     contains more information about collection objects.
    </para>
   </section>
 </section>

 <section>
  <title>ドキュメントの追加</title>
  <para>
   連想配列は、データベース内のコレクションに保存できる基本的なオブジェクトです。
   何らかの "ドキュメント" はこのような形式になります。

   <programlisting role="php">
<![CDATA[
<?php

$doc = array( "name" => "MongoDB",
   "type" => "database",
   "count" => 1,
   "info" => (object)array( "x" => 203, "y" => 102),
   "versions" => array("0.9.7", "0.9.8", "0.9.9")
);

?>
]]>
   </programlisting>

   配列やオブジェクトをネストできることに注目しましょう。
  </para>
  <para>
   ドキュメントを追加するには <function>MongoCollection::insert</function> を使います。

   <programlisting role="php">
<![CDATA[
<?php

$collection->insert( $doc );

?>
]]>
   </programlisting>
  </para>
   <section>
    <title>See Also</title>
    <para>
     The API documentation on <function>MongoCollection::insert</function> 
     contains more information about inserting data.
    </para>
   </section>
 </section>

 <section>
  <title>
   <function>MongoCollection::findOne</function> によるドキュメントの検索
  </title>
  <para>
    To show that the document we inserted in the previous step is there, we can 
    do a simple <function>MongoCollection::findOne</function> operation to get a 
    single document from the collection. This method is useful when there only is
    one document matching the query or you are only interested in one result.

   <programlisting role="php">
<![CDATA[
<?php

$obj = $collection->findOne();
var_dump( $obj );

?>
]]>
   </programlisting>

   結果は、このようになります。

   <programlisting>
<![CDATA[
array(5) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["name"]
  string(7) "MongoDB"
  ["type"]=>
  string(8) "database"
  ["count"]=>
  int(1)
  ["info"]=>
  array (2) {
    ["x"]=>
    int(203)
    ["y"]=>
    int(102)
  }
  ["versions"]
  array(3) {
    [0]=>
    string(5) "0.9.7"
    [1]=>
    string(5) "0.9.8"
    [2]=>
    string(5) "0.9.9"
  }
}
]]>
   </programlisting>
  </para>
  <para>
    Note the <literal>_id</literal> field has been added automatically to your 
    document. <literal>_id</literal> is the "primary key" field that is 
    automatically populate for almost all documents in MongoDB.
  </para>
   <section>
    <title>See Also</title>
    <para>
     The API documentation on <function>MongoCollection::findOne</function> 
     contains more information about finding data.
    </para>
   </section>
 </section>

 <section>
  <title>複数のドキュメントの追加</title>
  <para>
   もう少し意味のある問い合わせをするために、複数のシンプルなドキュメントをコレクションに追加しましょう。
   これから追加するドキュメントは次のようなものです。

   <programlisting role="php">
<![CDATA[
<?php

array( "i" => value );

?>
]]>
   </programlisting>

   効率的に、ループで処理します。

   <programlisting role="php">
<![CDATA[
<?php

for($i=0; $i<100; $i++) {
    $collection->insert( array( "i" => $i ) );
}

?>
]]>
   </programlisting>
  </para>

  <para>
   先ほどと同じコレクションに、別のキーを持つ配列を追加していることに注目しましょう。
   MongoDB が「スキーマフリー」であると言われるのは、こういう側面があるからです。
  </para>
 </section>

 <section>
  <title>コレクション内のドキュメント数</title>
  <para>
   これで 101 件のドキュメントを追加したことになります
   (先ほどのループで 100 件、そして最初の 1 件)。
   本当にそうなっているか、<function>MongoCollection::count</function> メソッドで確認してみましょう。
   <programlisting role="php">
<![CDATA[
<?php

echo $collection->count();

?>
]]>
   </programlisting>
   結果は 101 と表示されます。
  </para>
 </section>

 <section>
  <title>カーソルを使った全ドキュメントの取得</title>
  <para>
   コレクション内のすべてのドキュメントを取得するには
   <function>MongoCollection::find</function> を使います。
   find() メソッドは <classname>MongoCursor</classname> オブジェクトを返し、
   これを使うとクエリにマッチしたドキュメントすべてに対する反復処理ができるようになります。
   では、すべてのドキュメントを取得して表示させてみましょう。

   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();
foreach ($cursor as $id => $value) {
    echo "$id: ";
    var_dump( $value );
}

?>
]]>
   </programlisting>

   これは、コレクション内の全 101 ドキュメントを表示します。
   <literal>$id</literal> はドキュメントの <literal>_id</literal> フィールドで、
   <literal>$value</literal> はドキュメントそのものです。
  </para>
   <section>
    <title>See Also</title>
    <para>
     The API documentation on <function>MongoCollection::find</function> 
     contains more information about finding data.
    </para>
   </section>
 </section>

 <section>
  <title>問い合わせの条件の設定</title>
  <para>
   クエリを作って <function>MongoCollection::find</function> メソッドに渡せば、
   コレクション内のドキュメントのサブセットを取得することができます。
   たとえば、"i" フィールドの値が 71 であるドキュメントを探したいときは、
   このようにします。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => 71 );
$cursor = $collection->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>

   そうすると、ひとつのドキュメントだけが表示されます。

   <programlisting>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["i"]=>
  int(71)
  ["_ns"]=>
  "testCollection"
}
]]>
   </programlisting>
  </para>
 </section>

 <section>
  <title>クエリによる複数ドキュメントの取得</title>
  <para>
   クエリを使って、コレクションからドキュメントのセットを取得することができます。
   たとえば、"i" &gt; 50 であるすべてのドキュメントを取得したい場合は次のようにします。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( '$gt' => 50 ) ); // '$gt' と、シングルクォートで囲んでいることに注意しましょう
$cursor = $coll->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>

   これは、i &gt; 50 であるドキュメントをすべて表示します。
   また、20 &lt; i &lt;= 30 のような範囲を指定することもできます。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( "\$gt" => 20, "\$lte" => 30 ) );
$cursor = $coll->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>

   "$" をエスケープするのをつい忘れてしまいがちになるときは、
   '$' 以外の文字を特殊文字として使うようにすることもできます。
   キーの中にはあらわれないような特殊文字、たとえば ":"
   をひとつ選び、php.ini に次の行を追加します。

   <programlisting>
<![CDATA[
mongo.cmd = ":"
]]>
   </programlisting>

   すると、先ほどの例を次のように書けるようになります。

   <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( ":gt" => 20, ":lte" => 30 ) );

?>
]]>
   </programlisting>

   これは、コードの中でも ini_set("mongo.cmd", ":") のように変更することができます。
   もちろん、単に $ を使うときはシングルクォートで囲むようにするだけでもかまいません。
  </para>
 </section>

 <section>
  <title>インデックスの作成</title>
  <para>
   MongoDB はインデックスをサポートしています。コレクションにインデックスを追加するのは簡単です。
   インデックスを作るには、対象となるフィールドと並び順を指定します。
   並び順は、昇順 (1) あるいは降順 (-1) のいずれかです。
   この例では、"i" フィールドの昇順でインデックスを作成しています。

   <programlisting role="php">
<![CDATA[
<?php

$coll->ensureIndex( array( "i" => 1 ) );  // "i" にインデックスを作ります
$coll->ensureIndex( array( "i" => -1, "j" => 1 ) );  // "i" の降順、"j" の昇順でインデックスを作ります

?>
]]>
   </programlisting>
  </para>
  </section>
 </section>
</section>
