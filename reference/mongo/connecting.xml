<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331062 Maintainer: takagi Status: ready -->

<chapter xml:id="mongo.connecting" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>接続</title>

 <para>
  MongoDB への接続は単に <literal>new Mongo</literal> とするだけの簡単なものですが、
  オプションや設定項目が多数あります。
  <function>MongoClient::__construct</function> のページにすべての API
  オプションをまとめましたが、ここではより実用的な使用例とアドバイスをとりあげます。
 </para>

 <section xml:id="mongo.connecting.auth">
  <title>認証</title>
  <para>
   MongoDB を <literal>--auth</literal> あるいは
   <literal>--keyFile</literal> オプションつきで起動すると、
   まずログインしないとドライバを使った操作ができなくなります。
   接続時の認証をするには、ユーザー名とパスワードを接続 URI に指定するか、あるいは
   <function>MongoClient::__construct</function> でオプション
   <literal>"username"</literal> および <literal>"password"</literal> を指定します。
  </para>
  <example xml:id="mongo.connecting.auth-example">
   <title>"admin" データベースに対する認証</title>
   <programlisting role="php">
<![CDATA[
<?php
// ユーザー名とパスワードを接続 URI で指定する方法 (推奨)
$m = new MongoClient("mongodb://${username}:${password}@localhost");

// ユーザー名とパスワードをオプションの配列で指定する方法 (別の方法)
$m = new MongoClient("mongodb://localhost", array("username" => $username, "password" => $password));
?>
]]>
   </programlisting>
  </example>
  <para>
   デフォルトでは、ドライバは <literal>admin</literal>
   データベースに対する認証を試みます。別のデータベースに対する認証をするには、
   データベースを接続 URI に指定するか、あるいは
   <function>MongoClient::__construct</function> でオプション
   <literal>"db"</literal> を指定します。
  </para>
  <example xml:id="mongo.connecting.auth-db-example">
   <title>通常のデータベースに対する認証</title>
   <programlisting role="php">
<![CDATA[
<?php
// 認証データベースを接続 URI で指定する方法 (推奨)
$m = new MongoClient("mongodb://${username}:${password}@localhost/myDatabase");

// 認証データベースをオプションの配列で指定する方法 (別の方法)
$m = new MongoClient("mongodb://${username}:${password}@localhost", array("db" => "myDatabase"));
?>
]]>
   </programlisting>
  </example>
  <para>
   接続が落ちると、ドライバが自動的に再接続と再認証を試みます。
  </para>
 </section>

 <section xml:id="mongo.connecting.rs">
  <title>レプリカセット</title>
  <para>
   レプリカセットに接続するには、セットに属するサーバーをひとつ以上指定して、
   さらに <literal>replicaSet</literal> オプションを使います。
   複数のサーバーを指定するときには、カンマで区切ります。
  </para>
  <example xml:id="mongo.connecting.rs-example">
   <title>レプリカセットのシードリスト</title>
   <programlisting role="php">
<![CDATA[
<?php
// 複数のサーバーをシードリストとして使います (推奨)
$m = new MongoClient("mongodb://rs1.example.com:27017,rs2.example.com:27017/?replicaSet=myReplSetName");

// 単一のサーバーをシードリストとして使います
$m = new MongoClient("mongodb://rs1.example.com:27017", array("replicaSet" => "myReplSetName"));

// 複数のサーバーをシードリストとして使います
$m = new MongoClient("mongodb://rs1.example.com:27017,rs2.example.com:27017", array("replicaSet" => "myReplSetName"));
?>
]]>
   </programlisting>
  </example>
  <para>
   PHP ドライバは、指定したサーバー群に問い合わせてどれがプライマリなのかを調べます。
   リストにあげたサーバーのうち少なくともひとつに接続でき、
   プライマリが見つかってさえいれば接続が成功したとみなされます。
   どのサーバーにも接続できない、あるいはプライマリが見つからないといった場合は
   <classname>MongoConnectionException</classname> がスローされます。
  </para>
  <tip>
   <para>
    レプリカセットのシードリストは、常に複数のメンバーに適用しなければいけません。
    高可用性を確保するには、データセンターごとに少なくとも一つシードを用意すべきです。
   </para>
  </tip>
  <warning>
   <para>
    ここで指定したホスト名は、レプリカセットの設定で指定した名前と
    <emphasis>必ず</emphasis> 一致しなければいけません。
    ドライバは、レプリカセットの設定で指定した名前を使って内部マッピングをするからです。
    設定したホスト名ではなく IP アドレスなどを指定すると、
    ドライバはホスト名に対する接続とその IP アドレスに対する接続を両方維持し続けます。
   </para>
  </warning>
  <para>
   プライマリが使えなくなったときに、セカンダリがプライマリになるには数秒かかります。
   その間は、この接続では一切のデータベース操作ができなくなります
   (セカンダリに接続して読み込みを行うことは可能です)。
   したがって、この間
   (<link xlink:href="&url.mongodb.replica.failover;">20-60 秒</link>)
   に何らかの読み書き操作をすると例外が発生します。
   セカンダリへの接続は可能で、読み込みはできます。
  </para>
  <note>
   <para>
    デフォルトの <link linkend="mongo.readpreferences">優先読み込み</link>
    では、プライマリからだけ読み込みます。サーバーを選択するときにプライマリが見つからなければ、
    その読み込みは失敗します。
   </para>
   <para>
    読み込みについて高可用性が要求されるアプリケーションでは、優先読み込み設定を
    <constant>MongoClient::RP_PRIMARY_PREFERRED</constant> にしておくことをおすすめします。
    これは、プライマリが使えない場合にだけセカンダリからの読み込みを実行する設定です。
   </para>
  </note>
  <para>
   新しいプライマリが選ばれると、読み込みや書き込みの操作時にドライバが新しいプライマリを検出できるようになります。
   そして、ドライバがデータベース接続を切り替えて通常の操作を続行できるようになります。
  </para>
  <para>
   セカンダリの health や state のチェックは 5 秒おきに行うか
   (<link linkend="ini.mongo.ping-interval">mongo.ping_interval</link>
   で変更可能)、あるいは 5 秒以上経過した後の次の操作のときに行います。
   ドライバからサーバーに到達できない問題が発生したときにも設定を再チェックします。
  </para>
  <para>
   レプリカセットのフェイルオーバーは 60 秒おきにチェックします
   (<link linkend="ini.mongo.is-master-interval">mongo.is_master_interval</link>
   で変更可能)。また、確認付き書き込みを利用している際に書き込みに失敗したときにもフェイルオーバーします。
  </para>

  <caution>
   <para>
    セカンダリのデータはプライマリに比べて古くなっている可能性があります。
    <constant>MongoClient::RP_PRIMARY</constant> 以外の優先読み込みを選ぶ場合は、
    最新ではないデータでもアプリケーション側で対応できるようにしておかないといけません。
   </para>
  </caution>

  <para>
   レプリカセットについての詳細は、
   <link xlink:href="&url.mongodb.replica;">コアドキュメント</link>
   を参照ください。
  </para>

  <simplesect role="seealso">
   &reftitle.seealso;
   <simplelist>
    <member><xref linkend="mongo.readpreferences" /></member>
    <member><xref linkend="mongo.writeconcerns" /></member>
   </simplelist>
  </simplesect>

  <simplesect role="changelog">
   &reftitle.changelog;
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.9</entry>
       <entry>
        レプリカセットへの接続と自動フェイルオーバーに対応しました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </simplesect>

 </section>

 <section xml:id="mongo.connecting.mongos">
  <title>シャーディング</title>
  <para>
   シャードクラスタに接続するには、一つあるいは複数の
   <literal>mongos</literal> インスタンスの場所を接続文字列で指定します。
   複数のサーバーを指定する場合はカンマで区切ります。
  </para>
  <example xml:id="mongo.connecting.mongos-example">
   <programlisting role="php">
<![CDATA[
<?php
// 単一のサーバーをシードリストとして使います
$m = new MongoClient("mongodb://mongos1.example.com:27017");

// 複数のサーバーをシードリストとして使います
$m = new MongoClient("mongodb://mongos1.example.com:27017,mongos2.example.com:27017");
?>
]]>
   </programlisting>
  </example>
  <para>
   各サーバーがスタンドアロンの <literal>mongod</literal>
   であるか完全なレプリカセットであるかにかかわらず、ドライバの接続手順は同じです。
   データベースとの通信は、すべて <literal>mongos</literal> を通して行います。
  </para>
  <para>
   MongoDB におけるシャーディングの詳細な情報は
   <link xlink:href="&url.mongodb.docs.sharding;">シャーディングのドキュメント</link>
   を参照ください。
  </para>
 </section>

 <section xml:id="mongo.connecting.uds">
  <title>ドメインソケットのサポート</title>

  <para>
   MongoDB は Unix ドメインソケット経由での接続をサポートしており、起動時にソケットを開きます。
   デフォルトのソケットの場所は <filename>/tmp/mongodb-&lt;port&gt;.sock.</filename> です。
  </para>

  <para>
   ソケットファイルに接続するには、このパスを MongoDB 接続文字列に指定します。
  </para>

  <example xml:id="mongo.connecting.uds-example">
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient("mongodb:///tmp/mongo-27017.sock");
?>
]]>
   </programlisting>
  </example>

  <para>
   上で示したようなソケットファイルへの接続で認証を使いたい場合は、
   ポート番号 <literal>0</literal> を指定しなければなりません。
   接続文字列のパーサは、これを接続文字列の終端と見なします。
   あるいは、コンストラクタのオプションを使うこともできます。
  </para>

   <example xml:id="mongo.connecting.uds-auth-example">
    <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient("mongodb://username:password@/tmp/mongo-27017.sock:0/foo");
?>
]]>
   </programlisting>
  </example>

  <simplesect role="changelog">
   &reftitle.changelog;
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Unix ドメインソケットに対応しました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </simplesect>

 </section>

 <section xml:id="mongo.connecting.pools">
  <title>接続プーリング (バージョン 1.2.0-1.2.12 限定)</title>
  <note>
   <para>
    この節の内容は、1.3.0 以降のドライバには無関係です。
    歴史的な情報として、かつてプーリングをどのように使っていたかを残しておきます。
   </para>
   <para>
    最新版のドライバにはプーリングという概念がなく、プロセスごとに一つの接続を保持します。
    接続形式 (ReplicaSet/standalone/mongos) と条件の組み合わせごとにプロセスがわかれます。
    </para>
   </note>
  <para>
   接続の作成は、ドライバが行う作業の中でも最も重量級の作業です。
   接続を正しく確立するには、どんなに高速なネットワークであっても数百ミリ秒はかかることがあります。
   そこで、ドライバが新たな接続を作る回数をできるだけ減らすために、
   プールにある接続を再利用することを考えます。
  </para>
  <para>
   ユーザーが新しい <classname>Mongo</classname> のインスタンスを作ると、
   必要な接続はすべて接続プールから取り出します (レプリカセットへの接続には
   複数の接続が必要となることもあります。それぞれが、セット内の個々のメンバーへの接続となります)。
   <classname>Mongo</classname> のインスタンスがスコープ外に出ると、接続をプールに返します。
   PHP のプロセスが終了すると、プール内のすべての接続が閉じられます。
  </para>
  <section>
   <title>"なぜこんなに接続をオープンしてしまっているの?"</title>
   <para>
    接続プールが作成する接続の数が大量になることがあります。
    これは意外なことではなく、ちょっとした計算をすればどれだけの接続が必要になるかがわかります。
    接続の総数に影響するのは、次の三要素です。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>
       connections_per_pool
      </literal>
     </para>
     <para>
      各接続プールが作成する接続の数は、デフォルトでは無制限です。
      これは問題だと感じる人もいるでしょう。無制限に作れるとしても、
      ファイルディスクリプタの制限があるから何千も作るのは無理じゃないか? と。
      実際のところ、そこまで達することはあり得ません。
      未使用の接続はプールに返されてその後再利用されるので、
      後から接続を利用するときには新しく作るのではなく既存の接続を使います。
      何千もの接続を一気に作ってどれもスコープから外れないようにでもしない限り、
      接続の数は常識的な範囲に収まります。
     </para>
     <para>
      プール内の接続数を知るには
      <function>MongoPool::info</function> を使います。
      指定したサーバーの "in use" フィールドと "in pool" フィールドの値を足した結果が、
      そのプールの接続の総数となります。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>
       pools_per_process
      </literal>
     </para>
     <para>
      接続先の MongoDB サーバーごとに、自前の接続プールを持っています。
      たとえばローカルのホスト名が "example.net" のときに
      "example.net:27017"、"localhost:27017"、そして "/tmp/mongodb-27017.sock"
      に接続すると、全部で 3 つの接続プールができることになります。
      開いている接続プールの総数は <function>MongoPool::info</function>
      で取得できます。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>
       processes
      </literal>
     </para>
     <para>
      PHP のプロセスごとに、プール群は分かれています。
      PHP-FPM や Apache は、一般的に 6 から数十の間の
      PHP ワーカープロセスを作ります。最大でどれだけの PHP
      プロセスが立ち上がる設定になっているか、確認しましょう。
     </para>
     <para>
      PHP-FPM を使っている場合は、接続数の見積もりは多少面倒です。
      というのも、負荷が高くなると PHP-FPM ワーカーをより多く立ち上げるようになるからです。
      安全側に倒すなら、max_children パラメータあるいは
      spare_servers+start_servers (のどちらか大きいほう)
      を確認しましょう。これが、想定すべき PHP プロセス数 (そして、プール数) となります。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    これら 3 つの変数を掛け合わせた
    <literal>connections_per_pool</literal> *
    <literal>pools_per_process</literal> *
    <literal>processes</literal>
    で、接続の総数が得られます。<literal>connections_per_pool</literal>
    はプールによって異なることに注意しましょう。つまり、この計算をするときには
    <literal>connections_per_pool</literal> は最大値を使わなければなりません。
   </para>
   <para>
    たとえば、プールごとに 30 の接続があって PHP のプロセスあたり 10 のプールを用意し、
    さらに PHP が 128 プロセスあるものとします。この場合、マシン上での接続数は
    38400 になります。したがって、これだけの数をさばける程度にファイルディスクリプタの制限を増やしておく必要があります。
    ファイルディスクリプタの上限に達してしまうと、それ以上の接続は処理できなくなります。
   </para>
   <para>
    接続プーリングに関する詳細な情報は
    <classname>MongoPool</classname> を参照ください。
   </para>
  </section>
 </section>

 <section xml:id="mongo.connecting.persistent">
  <title>持続的接続 (バージョン 1.1.4 まで限定)</title>
  <note>
   <para>
    この節は 1.2.0 以降のバージョンには関係ありません。
    1.2.0 以降、接続は常に持続的なものとなり、
    ドライバが自動管理するようになりました。
    1.2.x (1.3.x 以降は除く) を使っている場合は、
    プーリングに関する詳細な情報は <classname>MongoPool</classname> を参照ください。
   </para>
  </note>

  <para>
   データベースへの接続を新たに確立させるには、非常に時間がかかります。
   データベースへ接続の作成回数を最小限にするには、持続的接続を使うことができます。
   持続的接続は PHP が保持するので、同じ接続を使って複数のリクエストを送ることができます。
  </para>

  <para>
   たとえば、この単純なプログラムはデータベースに 1000 回接続します。
  </para>

  <example xml:id="mongo.connecting.no-persistent-example">
   <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new MongoClient();
}

?>
]]>
   </programlisting>
  </example>

  <para>
   実行時間は約 18 秒です。これを、持続的接続を使うように変更してみましょう。
  </para>

  <example xml:id="mongo.connecting.persistent-example">
   <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new MongoClient("localhost:27017", array("persist" => "x"));
}

?>
]]>
   </programlisting>
  </example>

  <para>
   実行時間は 0.02 秒未満になりました。データベースへの接続は 1 回だけしか行わないからです。
  </para>

  <para>
   持続的接続には識別用の文字列 (上の例では "x")
   が必要で、これを使って接続を識別します。
   持続的接続を使うには、ホスト名とポート、持続文字列、そしてユーザー名とパスワード(指定した場合)
   が既存の持続的接続と一致しなければなりません。
   一致しない場合は、この識別情報で新しい接続を作成します。
  </para>
  <para>
   持続的接続を使うことを<emphasis>強く推奨します</emphasis>。
   実運用環境では、やむを得ぬ理由がない限り常に持続的接続を使うべきです。
   リレーショナルデータベースにおいて持続的接続を推奨しない理由はいくつかありますが、
   その大半は MongoDB には無関係なものです。
  </para>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

