<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 312738 Maintainer: takagi Status: ready -->

<section xml:id="mongo.connecting" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>接続</title>

 <para>
  MongoDB への接続は単に <literal>new Mongo</literal> とするだけの簡単なものですが、
  オプションや設定項目が多数あります。
  <function>Mongo::__construct</function> のページにすべての API
  オプションをまとめましたが、ここではより実用的な使用例とアドバイスをとりあげます。
 </para>

 <section>
  <title>接続時のログイン</title>
  <para>
   MongoDB を <literal>--auth</literal> あるいは
   <literal>--keyFile</literal> オプションつきで起動すると、
   まずログインしないとドライバを使った操作ができなくなります。
   接続にログインするには、ユーザ名とパスワードを接続 URI に指定します。
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://${username}:${password}@localhost");

?>
]]>
  </programlisting>
  <para>
   接続が落ちると、ドライバが自動的に再接続と再認証を試みます。
  </para>
  <para>
   データベースレベルでの認証には
   <function>MongoDB::authenticate</function> を使います。
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo();
$db = $m->admin;

$db->authenticate($username, $password);

?>
]]>
  </programlisting>
  <para>
   この方式には大きな問題があります。データベース接続が落ちて再接続したときには、
   認証されていない状態になるということです。
  </para>
  <para>
   URI 形式を使えば、ドライバが admin データベースに対して認証を試みます。
   別のデータベースに対して認証を試みるには、データベース名をホスト名の後に指定します。
   この例では、"blog" データベースにログインしています。
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://${username}:${password}@localhost/blog");

?>
]]>
  </programlisting>
 </section>

 <section>
  <title>レプリカセット</title>
  <para>
   レプリカセットに接続するには、セットに属するサーバをひとつ以上指定して、
   さらに <literal>replicaSet</literal> オプションを使います。
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://localhost:27017", array("replicaSet" => "myReplSetName"));

?>
]]>
  </programlisting>
  <para>
   バージョン 1.0.9 以降のドライバでは、レプリカセットへの接続が必須となります
   (それより前のバージョンでは、マスタの自動検出や再接続が正しく動作しません)。
  </para>
  <para>
   PHP ドライバは、指定したサーバ群に問い合わせてどれがマスタなのかを調べます。
   リストにあげたサーバのうち少なくともひとつに接続でき、
   マスタが見つかってさえいれば接続が成功したとみなされます。
   どのサーバにも接続できない、あるいはマスタが見つからないといった場合は
   <classname>MongoConnectionException</classname> がスローされます。
  </para>
  <para>
   マスタが使えなくなったときに、スレーブがマスタになるには数秒かかります。
   その間は、この接続では一切のデータベース操作ができなくなります
   (スレーブに接続して読み込みを行うことは可能です)。
   したがって、このときに何らかの読み書き操作をすると例外が発生します。
  </para>
  <para>
   新しいマスタが選ばれると、読み込みや書き込みの操作時にドライバが新しいマスタを検出できるようになります。
   そして、ドライバがデータベース接続を切り替えて通常の操作を続行できるようになります。
  </para>
  <para>
   レプリカセットについての詳細は、
   <link xlink:href="&url.mongodb.replica;">コアドキュメント</link>
   を参照ください。
  </para>
 </section>

 <section>
  <title>ドメインソケットのサポート</title>

  <para>
   MongoDB をローカルで動かしていてバージョン 1.0.9
   以降のドライバを使っている場合は、ファイル経由でデータベースに接続することができます。
   MongoDB は、起動時に自動的にソケットファイル
   /tmp/mongodb-&lt;port&gt;.sock をオープンします。
  </para>

  <para>
   ソケットファイルに接続するには、このパスを MongoDB 接続文字列に指定します。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb:///tmp/mongo-27017.sock");

?>
]]>
  </programlisting>

  <para>
   上で示したようなソケットファイルへの接続で認証を使いたい場合は、
   ポート番号 0 を指定しなければなりません。
   接続文字列のパーサは、これを接続文字列の終端と見なします。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://username:password@/tmp/mongo-27017.sock:0/foo");

?>
]]>
  </programlisting>

 </section>

 <section>
  <title>接続プーリング</title>
  <para>
   バージョン 1.2.0 以降では、ドライバが自動的に接続プールを管理します。
  </para>
  <para>
   ユーザが新しい <classname>Mongo</classname> のインスタンスを作ると、
   必要な接続はすべて接続プールから取り出します (レプリカセットへの接続には
   複数の接続が必要となることもあります)。<classname>Mongo</classname>
   のインスタンスがスコープ外に出ると、接続をプールに返します。
  </para>
 </section>

 <section>
  <title>持続的接続</title>
  <note>
   <para>
    この節は 1.2.0 以降のバージョンには関係ありません。
    1.2.0 以降、接続は常に持続的なものとなり、
    ドライバが自動管理するようになりました。
   </para>
  </note>

  <para>
   データベースへの接続を新たに確立させるには、非常に時間がかかります。
   データベースへ接続の作成回数を最小限にするには、持続的接続を使うことができます。
   持続的接続は PHP が保持するので、同じ接続を使って複数のリクエストを送ることができます。
  </para>

  <para>
   たとえば、この単純なプログラムはデータベースに 1000 回接続します。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new Mongo();
}

?>
]]>
  </programlisting>

  <para>
   実行時間は約 18 秒です。これを、持続的接続を使うように変更してみましょう。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new Mongo("localhost:27017", array("persist" => "x"));
}

?>
]]>
  </programlisting>

  <para>
   実行時間は .02 秒未満になりました。データベースへの接続は 1 回だけしか行わないからです。
  </para>

  <para>
   持続的接続には識別用の文字列 (上の例では "x")
   が必要で、これを使って接続を識別します。
   持続的接続を使うには、ホスト名とポート、持続文字列、そしてユーザ名とパスワード(指定した場合)
   が既存の持続的接続と一致しなければなりません。
   一致しない場合は、この識別情報で新しい接続を作成します。
  </para>
  <para>
   持続的接続を使うことを<emphasis>強く推奨します</emphasis>。
   実運用環境では、やむを得ぬ理由がない限り常に持続的接続を使うべきです。
   リレーショナルデータベースにおいて持続的接続を推奨しない理由はいくつかありますが、
   その大半は MongoDB には無関係なものです。
  </para>
  <para>
   持続的接続は、1.0.12 でデフォルトの接続方式になりました。
   持続的でない接続を作成するには、
   <literal>"persist" =&gt; false</literal> を
   <function>Mongo::__construct</function> に渡さなければなりません。
  </para>
 </section>

</section>
