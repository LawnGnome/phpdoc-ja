<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 301580 Maintainer: takagi Status: ready -->

<refentry xml:id="mongo.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::__construct</refname>
  <refpurpose>新しいデータベース接続オブジェクトを作成する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <methodname>Mongo::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>server</parameter><initializer>"mongodb://localhost:27017"</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array("connect" => &true;)</initializer></methodparam>
  </methodsynopsis>
  <para>
   パラメータを省略した場合は、"localhost:27017" (あるいは php.ini の
   <link linkend="ini.mongo.default-host">mongo.default_host</link> と
   <link linkend="ini.mongo.default-port">mongo.default_port</link> で設定した場所)
   に接続します。
  </para>
  <para>
   バージョン 1.0.2 以降、<parameter>server</parameter> は次のような形式にしなければなりません。
   <programlisting>
<![CDATA[
mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/db
]]>
   </programlisting>
  </para>
  <para>
   接続文字列は常に <literal>mongodb://</literal> で始まります。
   この部分が、接続文字列であることを表しています。
  </para>
  <para>
   <literal>username</literal> と <literal>password</literal>
   を指定すれば、コンストラクタが接続を確立する際にデータベースへの認証を試みます。
   ユーザ名とパスワードはオプションで、もし指定するならその後に
   <literal>@</literal> を続けなければなりません。
  </para>
  <para>
   少なくともひとつのホストを指定しなければなりません
   (ポートはオプションで、デフォルトは常に 27017 となります)。
   そのあとに、接続させたいホストをいくつでも続けることができます。
   ホスト名はカンマ区切りで並べ、少なくともひとつのホストへの接続が成功すれば
   コンストラクタは正常な結果を返します。
   どのホストにも接続できなかった場合は
   <classname>MongoConnectionException</classname> をスローします。
  </para>
  <para>
   ユーザ名とパスワードを指定したときには、認証先のデータベースも指定することになるでしょう。
   <literal>db</literal> を省略した場合は "admin" を使います。
  </para>

  <warning>

   <title><parameter>server</parameter> の書式</title>

   <para>
    バージョン 1.0.2 より前は、<parameter>server</parameter> の先頭に
    <literal>mongodb://</literal> を含めることはできませんでした。
    また、ユーザ名やパスワードも設定できず、ホスト名もひとつしか設定できませんでした。
    詳細は、以下の変更履歴を参照ください。
   </para>

  </warning>

  <para>
   その時点での接続はしないことにした (オプション
   <literal>array("connect" => false)</literal> を渡した) 場合は、
   データベースを操作する前に
   <function>Mongo::connect</function> をコールしなければなりません。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$mongo = new Mongo("mongodb://localhost", array("connect" => false));

// MongoException をスローします。$mongo はまだ完全には初期化されていないからです
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

// これで成功します
$mongo->connect();
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

?>
]]>
   </programlisting>
  </informalexample>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server</parameter>
     </term>
     <listitem>
      <para>
       サーバ名。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       接続オプションの配列。現在使用できるオプションは次のとおりです。
       <itemizedlist>
        <listitem>
         <para>
          <literal>"connect"</literal>
         </para>
         <para>
          コンストラクタで接続を行うか。デフォルトは
          &true;。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"persist"</literal>
         </para>
         <para>
          持続的な接続を行うかどうか。これを設定すると、接続が持続的なものとなります。
          文字列の値を接続 ID として使うので、
          <literal>array("persist" => "foobar")</literal> で初期化した
          <classname>Mongo</classname> のインスタンスがふたつあれば、
          それは同じデータベース接続をあらわします。一方、
          <literal>array("persist" => "barbaz")</literal>
          で初期化したインスタンスは別のデータベース接続を使います。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          ドライバがデータベースへの接続を試みる時間の長さ (ミリ秒単位)。
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"replicaSet"</literal>
         </para>
         <para>
          指定したホストがレプリカセットのシードであるか否か。
          シードである場合は、シードのデータベースコマンド
          <literal>ismaster</literal> を使ってマスタを決定します。
          ドライバは、リストに上がっていないサーバに接続することになるかもしれません。
          詳細は、以下のレプリカセットの例を参照ください。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   新しいデータベース接続オブジェクトを返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   指定したすべてのホスト名へのデータベースへの接続に失敗した場合に
   <classname>MongoConnectionException</classname> をスローします。
   指定したユーザ名やパスワードが間違っている場合にも
   <classname>MongoConnnectionException</classname> をスローします。
   一般的な例外とその原因については
   <classname>MongoConnectionException</classname>
   のドキュメントを参照ください。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.2</entry>
       <entry>
        コンストラクタがオプションの配列を受け取るようになりました。
        以前のバージョンでは、コンストラクタは以下のパラメータを受け取っていました。
        <variablelist>
         <varlistentry>
          <term>
           <parameter>server</parameter>
          </term>
          <listitem>
           <para>
            サーバ名。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>connect</parameter>
          </term>
          <listitem>
           <para>
            オプションの boolean パラメータで、
            コンストラクタがデータベースに接続するかどうかを示します。
            デフォルトは &true; です。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>persistent</parameter>
          </term>
          <listitem>
           <para>
            持続的な接続を行うかどうか。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>paired</parameter>
          </term>
          <listitem>
           <para>
            ペア接続を行うかどうか。
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        <literal>replicaSet</literal> オプションが追加されました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Mongo::__construct</function> でのレプリカセットの例</title>
   <para>
    この例は、レプリカセットに接続する方法を示します。
    このでは、次の三つのサーバ sf1.example.com、sf2.example.com および
    ny1.example.com があるものと仮定します。
    マスタは、これらのうちのいずれかひとつとなります。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// カンマ区切りのサーバ名をコンストラクタに渡します
$m1 = new Mongo("mongodb://sf2.example.com,ny1.example.com", array("replicaSet" => true));

// ひとつのシードを渡すだけで、ドライバがそこから完全なリストを取得して
// シードからマスタを探します
$m2 = new Mongo("mongodb://ny1.example.com", array("replicaSet" => true));

?>
]]>
   </programlisting>
   <para>
    現在のマスタで処理に失敗した場合、
    セカンダリサーバのうちのどれを新しいマスタにするかをドライバが判断し、
    自動的にその接続を開始させます。この自動フェイルオーバー機能は、
    <literal>replicaSet</literal> を指定しなければ正しく動作しません。
   </para>
   <para>
    シードリストの中の少なくともひとつのシードに接続できなければ、
    ドライバからレプリカセットに接続することはできません。
   </para>
   <para>
    二つの別のレプリカセットからのシードを指定した場合の挙動は未定義です。
   </para>
  </example>
  <example>
   <title><function>Mongo::__construct</function> での持続的接続の例</title>
   <para>
    持続的な接続は、ひとつのリクエストだけでなく別のリクエストまでも持続します
    (普通は…。どの程度続くかはサーバ次第です)。
    接続の再利用ができ、おおきな時間の節約になります。
    接続は、時間のかかる処理だからです。
   </para>
   <para>
    持続的な接続の識別は、サーバ文字列と ID 文字列で行います。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// 持続的な接続を作成します
$m1 = new Mongo("mongodb://localhost", array("persist" => ""));

// $m1 と同じ接続を使います
$m2 = new Mongo("mongodb://localhost", array("persist" => ""));

// 新しい接続を作ります
$m3 = new Mongo("mongodb://127.0.0.1", array("persist" => ""));

// 新しい接続を作ります
$m4 = new Mongo("mongodb://127.0.0.1:27017", array("persist" => ""));

// 新しい接続を作ります
$m5 = new Mongo("mongodb://localhost", array("persist" => "foo"));

// $m5 の接続を使います
$m6 = new Mongo("mongodb://localhost", array("persist" => "foo"));

?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>Mongo::__construct</function> での認証の例</title>
   <para>
    認証を使うには、admin データベースにユーザが存在しなければなりません。
    Mongo シェルでユーザを作るには、次のようにします。
   </para>
   <programlisting>
<![CDATA[
> use admin
switched to db admin
> db.addUser("testUser", "testPass");
{
        "_id" : ObjectId("4b21272fd9ab21611d19095c"),
        "user" : "testUser",
        "pwd" : "03b9b27e0abf1865e2f6fcbd9845dd59"
}
>
]]>
   </programlisting>
   <para>
    ユーザを作ったら、このユーザ名 "testUser" とパスワード
    "testPass" で次のようにして認証させることができます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://testUser:testPass@localhost");

?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
