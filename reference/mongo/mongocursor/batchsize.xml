<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<!-- EN-Revision: 335760 Maintainer: takagi Status: ready -->
<refentry xml:id="mongocursor.batchsize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::batchSize</refname>
  <refpurpose>ひとつのバッチで返す要素数を制限する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::batchSize</methodname>
   <methodparam><type>int</type><parameter>batchSize</parameter></methodparam>
  </methodsynopsis>
  <para>
   カーソルは一般的に、結果オブジェクトをバッチで取得してローカルに格納します。
   このメソッドはバッチのサイズを決めるもので、
   一回の欧風でサーバーから取得するドキュメントの数を設定できます。
   しかし、バッチサイズの最大値 (通常は 4MB) に収まらないドキュメントは返せません。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>batchSize</parameter>
     </term>
     <listitem>
      <para>
       バッチで返す結果の数。バッチごとにサーバーとのやりとりが発生します。
      </para>
      <para>
       <parameter>batchSize</parameter> が <emphasis>2 以上</emphasis>
       の場合は、取得するオブジェクトの各バッチのサイズを表します。
       これをうまく調整すれば、パフォーマンスとデータ転送量を最適化できます。
      </para>
      <para>
       <parameter>batchSize</parameter> が <literal>1</literal> あるいは負の数の場合は、
       返すドキュメントの最大数を batchSize の絶対値までに抑え、
       結果を返した後にカーソルを閉じます。
       たとえば batchSize を <literal>-10</literal>
       にすると、サーバーは 4MB に収まる範囲で最大 10 件までのドキュメントを返して
       カーソルを閉じます。
      </para>
      <warning>
       <para>
        <parameter>batchSize</parameter> が <literal>1</literal>
        あるいは <literal>-1</literal> の場合は特別で、
        このカーソルからは 1 件のドキュメントしか返せなくなります。
       </para>
      </warning>
      <para>
       この機能が <function>MongoCursor::limit</function> と違うところは、
       ドキュメントが最大サイズに収まらなければいけないという点と、
       カーソルを閉じるリクエストをサーバーに送らなくてもよいという点です。
       カーソルをループしている間にもバッチサイズを変更でき、
       その次にバッチを取得するときから新しい設定が反映されます。
      </para>
      <para>
       これは、MongoDB がクライアントに返すデータ量の制限を上書きすることはできません。
       つまり、たとえバッチサイズを 1,000,000,000 にしても、
       MongoDB がバッチあたりで返す結果は 4-16MB にしかならないということです。
      </para>
      <para>
       一貫性を維持するため、
       <function>MongoCursor::batchSize</function> と
       <function>MongoCursor::limit</function> のルールは多少込み入ったものになっていますが、
       「期待通りに」動作します。そのルールとは、
       ハードリミットがソフトリミットを上書きし、
       <function>MongoCursor::limit</function> のほうが
       <function>MongoCursor::batchSize</function> より優先順位が高くなるということです。
       その結果、どちらであってももう一方より小さく設定されているほうが優先されます。
       以下の例を参照ください。
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   このカーソルを返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCursor::batchSize</function> を
   <function>MongoCursor::limit</function> と組み合わせる例</title>
   <programlisting role="php">
<![CDATA[
<?php

// ひとつのバッチで最大 10 件。-10 でサーバーから 10 件を返し、
// カーソルを削除する。
$cursor->limit(20)->batchSize(-10);

// 最初のバッチ。最大 10 件
$cursor->limit(10);

// 最初のバッチ。最大 10 件
$cursor->limit(10)->batchSize(20);

// 結果を 10 件ずつのバッチで取得し、最大で 20 件
// (10 件のバッチが二つ) を返す
$cursor->limit(20)->batchSize(10);

// 結果を 7 件ずつのバッチで取得し、最大で 30 件を返す
// (ドライバが 7 件のバッチを 4 回リクエストし、最後のバッチは 2 件となる)
$cursor->limit(30)->batchSize(7)
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   MongoDB コアドキュメントの <link xlink:href="&url.mongodb.dochub.batchsize;">batchSize</link>。
  </para>
  <para>
   <simplelist>
    <member><function>MongoCursor::limit</function></member>
    <member><methodname>MongoCursorInterface::batchSize</methodname></member>
   </simplelist>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.4.5</entry>
       <entry>
        <para>
         1.4.5 より前のバージョンでは、このメソッドは、
         カーソルの反復処理が始まっている場合に <classname>MongoCursorException</classname> をスローしていました。
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
