<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 305864 Maintainer: takagi Status: working -->
<section xml:id="mongo.queries" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>問い合わせ</title>

 <section>
  <title>問い合わせのスレーブへの分散</title>

  <note>
   <title>1.1.0+</title>
   <para>
    <link xlink:href="&url.mongodb.replica;">レプリカセット</link>
    とバージョン 1.1.0 以降のドライバを使っている場合、
    ドライバは読み込みを自動的にスレーブにまわします。
    これは以前のバージョンのドライバにはなかった挙動で、"通常の"
    マスタ-スレーブでは <emphasis>使えません</emphasis>。
   </para>
  </note>

  <para>
   デフォルトでは、ドライバはすべての問い合わせをマスタに送信します。
   "slaveOkay" オプションを設定すると、ドライバはすべての問い合わせを
   (もし可能なら) プライマリ以外のサーバに送信します。
   "slaveOkay" オプションは、
   <link linkend="mongo.setslaveokay">接続</link>、
   <link linkend="mongodb.setslaveokay">データベース</link>、
   <link linkend="mongocollection.setslaveokay">コレクション</link> および
   <link linkend="mongocursor.slaveokay">カーソル</link>
   のすべてのレベルで設定できます。各クラスは上位の "slaveOkay" 設定を継承するので、たとえば
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$db->setSlaveOkay(true);
$c = $db->myCollection;

$cursor = $c->find();

?>
]]>
  </programlisting>

  <para>
   のようにすると、この問い合わせはスレーブに対して実行されます (コレクションがデータベースから
   "slaveOkay" の設定を継承し、カーソルはコレクションからその設定を継承します)。
  </para>

  <section>
   <title>How slaves are chosen</title>

   <para>
    Each instance of <classname>Mongo</classname> gets its own slave, randomly 
    chosen from the readable slaves.  This holds, even if you are using 
    persistent connections.  So, if we do something like:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// connects to a replica set with members ip0, ip1, and ip2
// ip0 is the primary, ip1 and ip2 are secondaries
$m1 = new Mongo("mongodb://ip0", array("replicaSet" => true, "persist" => "x"));
echo "m1's slave is ".$m1->getSlave()."\n";

// uses the same connection as $m1
$m2 = new Mongo("mongodb://ip0", array("replicaSet" => true, "persist" => "x"));
echo "m2's slave is ".$m2->getSlave()."\n";

?>
]]>
   </programlisting>
   <para>
    we'd probably end up with something like:
   </para>
   <screen>
m1's slave is: ip2
m2's slave is: ip1
   </screen>

   <para>
    If we continued to create new <classname>Mongo</classname>s, we should get a
    fairly even distribution between ip1 and ip2.
   </para>

   <para>
    Slaves are chosen on a per-instance basis and do no change (unless something 
    bad happens to your set and they are forced to).  
   </para>

   <para>
    You can see what the driver thinks is the current status of the set members
    by running <function>Mongo::getHosts</function>.
   </para>

   <para>
    If no non-primary server is readable, the driver will send 
    reads to the primary (even if "slaveOkay" is set).  A server is considered 
    readable if its state is 2 (SECONDARY) and its health is 1.  You can check 
    this with <function>Mongo::getHosts</function> (some fields omitted for 
    clarity):
   </para>
   <programlisting>
<![CDATA[
Array
(
    [ubuntu:27017] => Array
        (
            [_id] => 0
            [name] => ip0
            [health] => 1
            [state] => 1
            [stateStr] => PRIMARY
        )

    [ubuntu:27019] => Array
        (
            [_id] => 2
            [name] => ip1
            [health] => 1
            [state] => 2
            [stateStr] => SECONDARY
        )

    [ubuntu:27018] => Array
        (
            [_id] => 1
            [name] => ip2
            [health] => 1
            [state] => 2
            [stateStr] => SECONDARY
        )

)
]]>
   </programlisting>
   <para>
    The set above has two readable servers, "ip1" and "ip2".  If both of 
    these went down or became stale, reads would go to "ip0".
   </para>

   <para>
    If you enjoy twiddling knobs that you probably shouldn't mess with, you can 
    force the driver to use a different slave by calling 
    <function>Mongo::switchSlave</function>.  This randomly chooses a new slave 
    to use and shouldn't be used unless you know what you're doing.
   </para>

  </section>
  <section>
   <title>Random notes</title>

   <para>
    Writes are always sent to the primary.  Database commands, even read-only 
    commands, are also always sent to the primary.
   </para>

   <para>
    The health and state of a slave is checked every 5 seconds or when the next 
    operation occurs after 5 seconds.  It will also recheck the configuration 
    when the driver has a problem reaching a server.  You can manually force the
    driver to update the status by calling <function>Mongo::getHosts</function>.
   </para>
   
   <para>
    Note that a non-primary server may be behind the primary in operations, so 
    your application must be okay with getting out-of-date data (or you must use
    w for all writes).
   </para>
  </section>

 </section>

 <section>
  <title>_id による問い合わせ</title>
  <para>
   追加されたすべてのオブジェクトには、一意な _id フィールドが自動的に付加されます。
   これは、問い合わせで使うフィールドとして便利です。
  </para>
  <para>
   今追加したばかりのドキュメントを探すことを考えてみましょう。
   追加するとドキュメントに _id フィールドができるので、それを問い合わせればいいのです。

   <programlisting role="php">
<![CDATA[
<?php

$person = array("name" => "joe");

$people->insert($person);

// $joe には _id フィールドがあります
$joe = $people->findOne(array("_id" => $person['_id']));

?>
]]>
   </programlisting>
  </para>
  <para>
   ユーザが別途指定しない限り、_id フィールドは
   <classname>MongoId</classname> となります。ありがちな間違いは、
   文字列を <classname>MongoId</classname> とマッチさせようとすることです。
   文字列とは別の型であり、そのままではマッチしないことを覚えておきましょう。
   これは、文字列 "array()" と空の配列が別のものであるというのと同じことです。
   次の例を参照ください。

   <programlisting role="php">
<![CDATA[
<?php

$person = array("name" => "joe");

$people->insert($person);

// _id を文字列に変換します
$pid = $person['_id'] . "";

// 失敗 - $pid は文字列であり、MongoId ではありません
$joe = $people->findOne(array("_id" => $pid));

?>
]]>
   </programlisting>
  </para>
 </section>

 <section>
  <title>配列</title>

  <para>
   配列には特殊な点がいくつかあります。
   まず、MongoDB が扱う配列には二種類あります。
   "普通の" 配列と連想配列です。連想配列には、任意の型のキーと値を組み合わせることができます。
   "普通の" 配列は、0 から始まってひとつずつ増えていく数値のインデックスに
   それぞれ要素を関連づけます。
   これらは、ほぼ PHP の配列や連想配列と同じようなものです。
  </para>

  <para>
   たとえば、受賞の一覧をドキュメントに保存するときには次のようにできます。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$collection->save(array("awards" => array("gold", "silver", "bronze")));

?>
]]>
  </programlisting>

  <para>
   問い合わせでは、配列の要素も探すことができます。
   指定した値が配列の要素に含まれるすべてのドキュメントを探すことを考えましょう。
   たとえば、受賞 (awards) に金賞 (gold) が含まれる次のようなドキュメントです。
  </para>

  <programlisting>
<![CDATA[
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "awards" : ["gold", "silver", "bronze"]}
]]>
  </programlisting>
  
  <para>
   これは、単純なクエリで問い合わせることができます。"awards"
   が配列であるということを気にせず、次のようにすればいいのです。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

  $cursor = $collection->find(array("awards" => "gold"));

?>
]]>
  </programlisting>

  <para>
   もう少し複雑なオブジェクトを考えてみましょう。
   配列の各要素のオブジェクトになっている、次のような例だとどうでしょう。
  </para>

  <programlisting>
<![CDATA[
{ 
     "_id" : ObjectId("4b06c282edb87a281e09dad9"), 
     "awards" : 
     [
        {
            "first place" : "gold"
        },
        {
            "second place" : "silver" 
        },
        {
            "third place" :  "bronze"
        }
     ]
}
]]>
  </programlisting>

  <para>
   このような場合でも、配列であることを特別視する必要はありません。
   内部のオブジェクトへの問い合わせには、ドット記法が使えます。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards.first place" => "gold"));

?>
]]>
  </programlisting>

  <para>
   フィールド名にスペースが含まれていてもかまわないことに注目しましょう
   (スペースを使わないにこしたことはありませんが、可読性を考慮しました)。
  </para>

  <para>
   配列を使って、取り得る値を複数指定した問い合わせを行うこともできます。
   "gold" あるいは "copper" を含むドキュメントを探すには、このようにします。
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards" => array('$in' => array("gold", "copper"))));

?>
]]>
  </programlisting>

 </section>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

