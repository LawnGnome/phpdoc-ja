<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317502 Maintainer: takagi Status: ready -->

<reference xml:id="ref.sca" xmlns="http://docbook.org/ns/docbook">
 <title>SCA &Functions;</title>
 
 <partintro>
  <!-- FIXME: This needs to be upgraded to the new oo-markup -->
  <!-- Class definition section -->
  <section xml:id="sca.classes"><!-- {{{ -->
   &reftitle.classes;
   <para> 
    SCA へのインターフェイスのほとんどは、SCA コンポーネントのアノテーションを用いて操作します。
    そのため、パブリックなクラスやメソッドは少ししかありません。
    スクリプトやコンポーネントからコールできるクラスは、
    <classname>SCA</classname> クラスそのもののほかには
    プロキシクラスである <classname>SCA_LocalProxy</classname> と
    <classname>SCA_SoapProxy</classname> だけです。
   </para>
   
   <section xml:id="sca.class"><!-- {{{ -->
    <title><classname>SCA</classname></title>
    <para>
     SCA クラスのほとんどの作業は、SCA コンポーネントにファイル <filename>SCA.php</filename>
     をインクルードしたときに行われます。しかし、PHP スクリプトは
     <filename>SCA.php</filename> をインクルードしてから SCA クラスの
     <function>getService</function> メソッドをコールし、
     サービスのプロキシを取得することもできます。
     コンポーネントは、これを行う必要はありません。というのも、
     インスタンス変数と @reference アノテーションを定義することでプロキシを取得できるからです。
    </para>
    <para> 
     SDO を作成して呼び出し元に返す必要があるコンポーネントは、
     データファクトリが必要となります。この目的のために、SCA クラスは
     <function>createDataObject</function> メソッドをサポートしています。
     これは、コンポーネントの @types アノテーションで定義したモデルに基づいた
     SDO を作成します。
     <function>createDataObject</function> への引数は、
     SDO の XML データアクセスサービスと同じです。
    </para>
    
    <section xml:id="sca.class.SCA.methods"><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link linkend="function.sca-getservice">
         getService</link> - サービスのプロキシを取得する
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend="function.sca-createdataobject">
         createDataObject</link> - SDO を作成する
       </para>
      </listitem>
     </itemizedlist>
    </section> <!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id="sca-local-proxy.class"><!-- {{{ -->
    <title>
     <classname>SCA_LocalProxy</classname>
    </title>
    <para>
     <function>getService</function> に
     対象となるローカル PHP コンポーネントを指定してコールすると、
     ローカルプロキシが返されます。
     ローカルプロキシは、@reference および @binding.php
     アノテーションで定義されたコンポーネントのインスタンス変数に注入されます。
     スクリプトあるいはコンポーネントがローカルプロキシをコールすると、
     それが対象のコンポーネント自身に渡されます。
    </para>
    <para> 
     SDO を作成して呼び出し元に返す必要があるコンポーネントは、
     データファクトリが必要となります。この目的のために、
     SCA_LocalProxy クラスは <function>createDataObject</function> メソッドをサポートしています。
     これは、コンポーネントの @types アノテーションで定義したモデルに基づいた
     SDO を作成します。
     <function>createDataObject</function> への引数は、
     SDO の XML データアクセスサービスと同じです。
    </para>
    
    <section xml:id="sca.class.SCA-LocalProxy.methods"><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
         linkend="function.sca-localproxy-createdataobject">
         createDataObject</link> - SDO を作成する
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id="sca-soap-proxy.class"><!-- {{{ -->
    <title>
     <classname>SCA_SoapProxy</classname>
    </title>
    <para>
     <function>getService</function> に
     対象となる WSDL ファイルを指定してコールすると、
     SOAP プロキシが返されます。
     SOAP プロキシは、@reference および @binding.soap
     アノテーションで定義されたコンポーネントのインスタンス変数に注入されます。
     スクリプトあるいはコンポーネントが SOAP プロキシをコールすると、
     それがウェブサービスへの SOAP リクエストに変換され、
     PHP の Soap 拡張モジュールの助けを得て対象のコンポーネントに渡されます。
    </para>
    <para> 
     SDO を作成して呼び出し元に返す必要があるコンポーネントは、
     データファクトリが必要となります。この目的のために、
     <classname>SCA_SoapProxy</classname> クラスは
     <function>createDataObject</function> メソッドをサポートしています。
     これは、対象の WSDL で定義したモデルに基づいた
     SDO を作成します。
     <function>createDataObject</function> への引数は、
     SDO の XML データアクセスサービスと同じです。
    </para>
    
    <section xml:id="sca.class.SCA-SoapProxy.methods"><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
         linkend="function.sca-soapproxy-createdataobject">
         createDataObject</link> - SDO を作成する
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
  </section>
  <!-- }}} -->

 </partintro>
 
 &reference.sca.entities.functions;
 
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
