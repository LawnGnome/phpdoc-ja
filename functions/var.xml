<?xml version="1.0" encoding="utf-8"?>
<reference id="ref.variables">
  <title>変数用の関数</title>
  <titleabbrev>変数</titleabbrev>

  <refentry id="function.doubleval">
   <refnamediv>
    <refname>doubleval</refname>
    <refpurpose>変数の値をdoubleとして取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>doubleval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>var</parameter>の値をdouble（浮動小数点数）
     として返します。
    </simpara>
    <para>
     <parameter>var</parameter> はどんなスカラー型でもかまいません。
     <function>doubleval</function> には配列やオブジェクトは指定
     できません。
     <informalexample>
      <programlisting role="php">
$var = '122.34343The';
$double_value_of_var = doubleval ($var);
print $double_value_of_var; // 122.34343 を出力します
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>intval</function>,
     <function>strval</function>,
     <function>settype</function>,
     <link linkend="language.types.type-juggling">型のジャグリング</link>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.empty">
   <refnamediv>
    <refname>empty</refname>
    <refpurpose>変数がセットされているかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>empty</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <parameter>var</parameter> が設定され、かつ空でないかゼロでない値を
    有する場合に &false; を返し、そうでなければ &true; を返します。
    <informalexample>
       <programlisting role="php">
$var = 0;
if ( empty($var) ) { // trueと評価された場合
    print '$var is either 0 or not at all set';
}
if ( !isset($var) ) { // falseと評価された場合
    print 'The $var is not set at all';
}
       </programlisting>
    </informalexample>
    </para>
    <simpara>
    変数でないものに使用しても意味がないことに注意して下さい。
    例えば、<command>empty( addslashes( $name ) )</command>は
    変数でないものに対して
    &false;値を持つ変数であるかどうかを調べているため意味がありません。
    </simpara>
    <simpara>
    <function>isset</function> および <function>unset</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.gettype">
   <refnamediv>
    <refname>gettype</refname>
    <refpurpose>変数の型を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>gettype</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     PHP 変数 <parameter>var</parameter> の型を返します。
    </para>
    <para>
     返された文字列は、以下のいずれかの値を持ちます。
     <itemizedlist>
      <listitem>
       <simpara>"boolean"</simpara>
      </listitem>
      <listitem>
       <simpara>"integer"</simpara>
      </listitem>
      <listitem>
       <simpara>"double"</simpara>
      </listitem>
      <listitem>
       <simpara>"string"</simpara>
      </listitem>
      <listitem>
       <simpara>"array"</simpara>
      </listitem>
      <listitem>
       <simpara>"object"</simpara>
      </listitem>
      <listitem>
       <simpara>"resource"</simpara>
      </listitem>
      <listitem>
       <simpara>"user function" (PHP 3のみ。古い形式)</simpara>
      </listitem>
      <listitem>
       <simpara>"unknown type"</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     PHP 4 でユーザ関数に関する <function>gettype</function> の以前の
     使用法を置き換えるには <function>function_exists</function> およ
     び <function>method_exists</function> を使用する必要があります。
    </para>
    <para>
     <function>settype</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-defined-vars">
   <refnamediv>
    <refname>get_defined_vars</refname>
    <refpurpose>
     全ての定義済の変数を配列で返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_defined_vars</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、環境変数、サーバ変数、ユーザが定義した変数を含む全て
     の定義済の変数のリストを有する多次元の配列を返します。
     <informalexample>
      <programlisting role="php">
$b = array(1,1,2,3,5,8);

$arr = get_defined_vars();

// $b を出力
print_r($arr["b"]);

// PHPインタプリタのパスを出力 (CGIとして使用された場合)
// 例えば、/usr/local/bin/php
echo $arr["_"];

// コマンドラインパラメータがある場合に出力
print_r($arr["argv"]);

// サーバ変数を全て表示
print_r($arr["HTTP_SERVER_VARS"]);

// 変数の配列で利用可能なキーを全て出力
print_r(array_keys(get_defined_vars()));
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>get_defined_functions</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-resource-type">
   <refnamediv>
    <refname>get_resource_type</refname>
    <refpurpose>リソース型を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>get_resource_type</function></funcdef>
      <paramdef>resource <parameter>$handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、指定したリソースの型を表す文字列を返します。パラメー
     タが、有効なリソースでない場合はエラーとなります。
     <informalexample>
      <programlisting role="php">
$c = mysql_connect();
echo get_resource_type($c)."\n";
//  mysql link を出力

$fp = fopen("foo","w");
echo get_resource_type($fp)."\n";
// file を出力

$doc = new_xmldoc("1.0");
echo get_resource_type($doc->doc)."\n";
// domxml document を出力
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.intval">
   <refnamediv>
    <refname>intval</refname>
    <refpurpose>変数の整数としての値を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>intval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>base</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     指定された値 base を基数（デフォルトは 10）とする、
     <parameter>var</parameter> の整数としての値を返します。
    </simpara>
    <simpara>
     <parameter>var</parameter> はどんなスカラー型でもかまいません。
     <function>intval</function> には配列やオブジェクトは指定
     できません。
    </simpara>
    <simpara>
     <function>doubleval</function>,
     <function>strval</function>,
     <function>settype</function>,
     <link linkend="language.types.type-juggling">
      型の相互変換(ジャグリング)</link>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-array">
   <refnamediv>
    <refname>is_array</refname>
    <refpurpose>変数が配列かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_array</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> が配列であれば&true;を、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, 
     <function>is_object</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-bool">
   <refnamediv>
    <refname>is_bool</refname>
    <refpurpose>
     変数がbooleanであるかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_bool</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     パラメータ<parameter>var</parameter>がbooleanである場合に&true;を返
     します。
    </para>
    <para>
     <function>is_array</function>,<function>is_double</function>,
     <function>is_float</function>,<function>is_int</function>,
     <function>is_integer</function>,<function>is_real</function>,
     <function>is_string</function>,<function>is_long</function>, 
     <function>is_object</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-double">
   <refnamediv>
    <refname>is_double</refname>
    <refpurpose>変数が double かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_double</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> が double であれば&true;、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_array</function>,
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, 
     <function>is_object</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-float">
   <refnamediv>
    <refname>is_float</refname>
    <refpurpose> 変数がfloatかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_float</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は<function>is_double</function>の別名です。
    </simpara>
    <simpara>
     <function>is_double</function>,
     <function>is_bool</function>,
     <function>is_real</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_long</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-int">
   <refnamediv>
    <refname>is_int</refname>
    <refpurpose> 変数が整数かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_int</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は <function>is_long</function> の別名です。
    </simpara>
    <simpara>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_long</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-integer">
   <refnamediv>
    <refname>is_integer</refname>
    <refpurpose> 変数が整数かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_integer</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は<function>is_long</function>の別名です。
    </simpara>
    <simpara>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_long</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-long">
   <refnamediv>
    <refname>is_long</refname>
    <refpurpose> 変数が整数かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_long</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter>が整数(long)であれば&true;を、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_integer</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-null">
   <refnamediv>
    <refname>is_null</refname>
    <refpurpose>
     変数がヌルかどうか調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_null</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter> がヌルの場合に&true;、その他に&false;を返
     します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_numeric</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_integer</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-numeric">
   <refnamediv>
    <refname>is_numeric</refname>
    <refpurpose>指定した変数が数字または数値文字列であるかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_numeric</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter>が数値または数値文字列である場合に
     &true;、その他の場合に&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_integer</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-object">
   <refnamediv>
    <refname>is_object</refname>
    <refpurpose>変数がオブジェクトかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_object</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter>がオブジェクトであれば&true;を、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_array</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-real">
   <refnamediv>
    <refname>is_real</refname>
    <refpurpose>変数が実数(real)かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_real</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は <function>is_double</function> の別名です。
    </simpara>
    <simpara>
     <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_object</function>,
     <function>is_string</function>,
     <function>is_array</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.is-resource">
   <refnamediv>
    <refname>is_resource</refname>
    <refpurpose>
     変数がリソースかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_resource</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_resource</function>はパラメータ
     <parameter>var</parameter>で指定した変数がリソースの場合に&true;を
     返し、その他の場合に&false;を返します。
    </para>
    <para>
     リソースとはファイルやデータベース結果ハンドル等を意味し、
     PHP内部関数により確保や開放が行われます。これらのリソースに関して
     使用終了後でかつユーザのコードにより開放が行われていない場合に、
     何らかのクリーンアップが必要となる可能性があります。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.is-scalar">
   <refnamediv>
    <refname>is_scalar</refname>
    <refpurpose>
     変数がスカラーかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool 
       <function>is_scalar</function>
      </funcdef>
      <paramdef>mixed 
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_scalar</function> returns &true; if the variable
     given by the <parameter>var</parameter> parameter is a scalar, 
     otherwise it returns &false;.
    </para>
    <para>
     Scalar variables are those containing an integer, float, string
     or boolean. For example:
     <informalexample>
      <programlisting role="php">
function show_var($var) {
    if (is_scalar($var))
        echo $var;
    else
        var_dump($var);
}

$pi = 3.1416;
$proteins = array("hemoglobin", "cytochrome c oxidase", "ferredoxin");

show_var($pi);
// prints: 3.1416

show_var($proteins)
// prints:
// array(3) {
//   [0]=>
//   string(10) "hemoglobin"
//   [1]=>
//   string(20) "cytochrome c oxidase"
//   [2]=>
//   string(10) "ferredoxin"
// }
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.4pl1 のリリースコード後にCVSコードに追加され
      ました。4.0.4pl1
     </para>
    </note>
    <para>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_numeric</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_integer</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-string">
   <refnamediv>
    <refname>is_string</refname>
    <refpurpose>変数が文字列かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_string</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter>が文字列であ?ptrue、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>変数がセットされているかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>isset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>var</parameter> が存在すれば&true;、
     そうでなければ&false;を返します。
    </simpara>
    <para>
     変数が、<function>unset</function> により割当を解除された場合、
     <function>isset</function> はもう&true;とはなりません。
     &null;に設定されている変数を調べた場合、
     <function>isset</function> は&false;を返します。
     ヌルバイト(<literal>"\0"</literal>)はPHPの定数
     &null;と等価ではないことにも注意して下さい。
     <informalexample>
      <programlisting role="php">
$a = "test";
echo isset ($a); // TRUE
unset ($a);
echo isset ($a); // FALSE
$foo = NULL; 
print isset ($foo); // FALSE 
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>empty</function>および<function>unset</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.print-r">
   <refnamediv>
    <refname>print_r</refname>
    <refpurpose>
     指定した変数に関する情報を解りやすく出力する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>print_r</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、解り易い形式で変数の値に関する情報を表示します。
     文字列、整数、倍制度実数を指定した場合はその値が出力されます。
     配列を指定した場合、キーと要素を表す形式で値が表示されます。
     オブジェクトに関しても同様の表示形式となります。
    </simpara>
    <simpara>
     <function>print_r</function>は、配列ポインタを終端まで移動するこ
     とに注意して下さい。ポインタを最初に戻すために
     <function>reset</function>を使用して下さい。
    </simpara>
    <simpara>
     <function>print_r</function>を
     <function>var_dump</function>と比較してみて下さい。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
$a = array (1, 2, array ("a", "b", "c"));
print_r ($a);
?>
      </programlisting>
     </informalexample>
    </para>
    <warning>
     <para>
      この関数は、指定した配列またはオブジェクが自分自身への直接または
      間接の参照を有しているか、同様のことを行う配列またはオブジェクト
      を有している場合に際限なく実行し続けます。
      特に<literal>$GLOBALS</literal>はそれ自体グローバル変数で、
      自分自身へのリファレンスを有しているため、
      <literal>print_r($GLOBALS)</literal>はこのケースにあたります。
     </para>
    </warning>
   </refsect1>
  </refentry>
  
  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     値の保存可能な表現を生成する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>serialize</function></funcdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> は、<parameter>value</parameter>の
     保存可能なバイトストリーム表現を含む文字列を返します。
    </simpara>
    <simpara>
     型や構造を失わずにPHPの値を保存または渡す際に有効です。
    </simpara>
    <simpara>
     シリアル化された文字列をPHPの値に戻すには、
     <function>unserialize</function>を使用して下さい。
     <function>serialize</function>は型<type>integer</type>, 
     <type>double</type>,<type>string</type>,<type>array</type> 
     (多次元),<type>object</type> 
     (オブジェクトプロパティはシリアル化されますが、メソッドは失われます)
     に対応します。
    </simpara>
    <note>
     <para>
      PHP 3では、メソッドはシリアル化されたオブジェクトを非シリアル化
      する際に保存されません。PHP 4ではこの制限は取り除かれ、プロパティ
      とメソッドの両方を保存します。より詳細な情報については、
      <link linkend="language.oop">オブジェクトとクラス</link> の
      <link linkend="language.oop.serialization">オブジェクトのシリア
      ル化</link>の節を参照下さい。
     </para>
    </note>
    <para>
     <example>
      <title><function>serialize</function>の例</title>
      <programlisting role="php">
// $session_data はカレントユーザーのセッション情報を含む多次元配列を
// 保持しています。リクエストの最後にこれをデータベースに保存するために
//  serialize() を使用します。

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array(serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &amp;$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &amp;$sqldata)) {
    /* 何か問題があったようです。Bitch, whine and moan. */
    }
}
      </programlisting>
     </example>
    </para>
    <para>
     <function>unserialize</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.settype">
   <refnamediv>
    <refname>settype</refname>
    <refpurpose>変数の型をセットする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>settype</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     変数 <parameter>var</parameter> の型を
     <parameter>type</parameter> にセットします。
    </para>
    <para>
     <parameter>type</parameter> の値は以下の命令のいずれかです。
     
     <itemizedlist>
      <listitem><simpara>"boolean"</simpara></listitem>
      <listitem><simpara>"integer"</simpara></listitem>
      <listitem><simpara>"double"</simpara></listitem>
      <listitem><simpara>"string"</simpara></listitem>
      <listitem><simpara>"array"</simpara></listitem>
      <listitem><simpara>"object"</simpara></listitem>
     </itemizedlist>
    </para>
    <para>
     成功すれば&true;、そうでなければ&false;を返します。
    </para>
    <para>
     <example>
      <title><function>settype</function> の例</title>
      <programlisting role="php">
$foo = "5bar"; // string
$bar = true;   // boolean

settype($foo, "integer"); // ここでは、$foo は 5です (整数)
settype($bar, "string");  // ここでは、$bar は "1" です (文字列)
      </programlisting>
     </example>
    </para>
    <para>
     <function>gettype</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.strval">
   <refnamediv>
    <refname>strval</refname>
    <refpurpose>変数の文字列としての値を得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>var</parameter> の文字列としての値を返します。
    </simpara>
    <simpara>
     <parameter>var</parameter> は全てのスカラー型とすることができます。
     <function>strval</function> では、配列またはオブジェクトを 
     使用することはできません。
    </simpara>
    <simpara>
     <function>doubleval</function>,<function>intval</function>,
     <function>settype</function> , 
     <link linkend="language.types.type-juggling">型の相互変換(ジャグリング)
     </link>を参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>保存用表現から PHP の値を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>unserialize</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>unserialize</function> は、シリアル化された変数
     (<function>serialize</function> を参照) をとり、PHP 変数値に
     戻す変換を行います。変換された値が返されます。その値は、
     <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> , <type>object</type>
     とすることが可能です。オブジェクトがシリアル化された場合、返り値
     にそのメソッドは保存されていません。
    </simpara>
    <note>
     <para>
      PHP 3では、メソッドはシリアル化されたオブジェクトを非シリアル化
      する際に保存されません。PHP 4ではこの制限は取り除かれ、プロパティ
      とメソッドの両方を保存します。より詳細な情報については、
      <link linkend="language.oop">オブジェクトとクラス</link> の
      <link linkend="language.oop.serialization">オブジェクトのシリア
      ル化</link>の節を参照下さい。
     </para>
    </note>
    <para>
     <example>
      <title><function>unserialize</function>の例</title>
      <programlisting role="php">
// ここで、データベースから $session_data にセッションデータをロード 
// するために unserialize() を使用します。
// この例は、<function>serialize</function> で記述された例を補足するものです。
 
$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($PHP_AUTH_USER);
if (!odbc_execute($stmt, &amp;$sqldata) || !odbc_fetch_into($stmt, &amp;$tmp)) {
    // 実行または取得が失敗した場合、空の配列で初期化します
    $session_data = array();
} else {
    // $tmp[0] にシリアル化されたデータを保持している必要があります。
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // 何か問題があったため、空の配列で初期化します。
        $session_data = array();
    }
}
      </programlisting>
     </example>
    </para>
    <para>
     <function>serialize</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>指定した変数の割当を解除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>unset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed 
       <parameter>
	<replaceable><optional>var</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>
       <parameter>
	<replaceable><optional>...</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>unset</function>は指定した変数を破棄します。PHP 3では、
     <function>unset</function> は常に &true;(実際には整数値1) を返して
     いました。しかし、PHP 4では <function>unset</function> はもはや真
     の意味で関数ではなく、命令となっています。値が返されないため、
     <function>unset</function> の値を取得しようとすると、パースエラー
     となります。
    </para>
    <para>
     <example>
      <title><function>unset</function>の例</title>
      <programlisting role="php">
// 変数を一つ破棄する
unset ($foo);

// 配列の要素の一つを破棄する
unset ($bar['quux']);

// 複数の変数を破棄する
unset ($foo1, $foo2, $foo3);
      </programlisting>
     </example>
    </para>
    <para>
     関数<function>unset</function>の内部動作は、破棄しようとする変数
     の型に依存します。
    </para>
    <para>
     あるグローバル変数が関数の中で<function>unset</function>された場
     合、ローカル変数のみが破棄されます。呼出側の環境にある変数は、
     <function>unset</function>がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
function destroy_foo() {
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
      </programlisting>
     </informalexample>
     上記の例の出力は次のようになります。
     <informalexample>
      <programlisting>
bar
      </programlisting>
     </informalexample>
    </para>
    <para>
     参照渡しされた変数が関数内で<function>unset</function>された場合
     に、ローカル変数のみが破棄されます。呼出側の環境でその変数は、
     <function>unset</function>がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
function foo(&amp;$bar) { 
    unset($bar); 
    $bar = "blah"; 
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
      </programlisting>
     </informalexample>
     The above example would output:
     <informalexample>
      <programlisting>
something
something
      </programlisting>
     </informalexample>
    </para>
    <para>
     静的変数が関数の内部で<function>unset</function>された場合、
     <function>unset</function> は静的変数自体ではなく静的変数へのリファ
     レンスを破棄します。
     <informalexample>
      <programlisting role="php">
function foo() { 
    static $a;
    $a++;
       echo "$a\n";

    unset($a);
}

foo();
foo();
foo();
      </programlisting>
     </informalexample>
     上記の例の出力は次のようになります。
     <informalexample>
      <programlisting>
1
2
3
      </programlisting>
     </informalexample>
    </para>
    <para>
     グローバル変数を関数内で<function>unset</function>したい場合、
     配列<parameter>$GLOBALS</parameter>を使用し、次のようにして下さい。
     <informalexample>
      <programlisting role="php">
function foo() {
    unset($GLOBALS['bar']);       
}

$bar = "something";
foo();
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      <function>unset</function> は言語の一部です。
     </para>
    </note>
    <para>
     <function>isset</function>、<function>empty</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.var-dump">
   <refnamediv>
    <refname>var_dump</refname>
    <refpurpose>
     指定した変数に関する情報をダンプする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>var_dump</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、指定した式に関してその型や値を含む構造化された
     情報を返します。
     配列の場合、その構造を表示するために各値について再帰的に探索されます。
    </simpara>
    <simpara>
     <function>var_dump</function>を
     <function>print_r</function>と比較して見て下さい。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;pre>
&lt;?php
    $a = array (1, 2, array ("a", "b", "c"));
    var_dump ($a);
?>
&lt;/pre>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
