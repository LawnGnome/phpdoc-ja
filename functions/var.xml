<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.35 $ -->
 <reference id="ref.variables">
  <title>変数用の関数(variable)</title>
  <titleabbrev>変数</titleabbrev>

  <partintro>
   <para>
    変数の動作に関する情報については、このマニュアルの
    <link linkend="langref">言語リファレンス</link>セクションにある
    <link linkend="language.variables">変数</link>のエントリを参照下さ
    い。
   </para>
  </partintro>

  <refentry id="function.doubleval">
   <refnamediv>
    <refname>doubleval</refname>
    <refpurpose><function>floatval</function>のエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <para>
     この関数は、<function>floatval</function>のエイリアスです。
    </para>
    <note>
     <para>
      このエイリアスは、関数の名称変更に伴い削除されています。以前のバー
      ジョンのPHPでは、<function>floatval</function>がまだ利用できない
      ため、<function>floatval</function>のこのエイリアスを使用する必
      要があります。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.empty">
   <refnamediv>
    <refname>empty</refname>
    <refpurpose>変数がセットされているかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>boolean</type><methodname>empty</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <note>
     <para>
      <function>empty</function>は、言語構造です。
     </para>
    </note>
    <para>
     この関数は、変数が設定されていない場合に警告は生成されないこと以
     外は、<literal>(boolean)<parameter>var</parameter></literal>の逆
     です。より詳細な情報については、<link
     linkend="language.types.boolean.casting">論理値への変換</link>を
     参照下さい。
    </para>

    <!-- Returns &false; if <parameter>var</parameter> is set and has a
     non-empty or non-zero value; &true; otherwise. -->

    <informalexample>
     <programlisting role="php">
<![CDATA[
$var = 0;

if (empty($var)) {  // evaluates true
    echo '$var is either 0 or not set at all';
}

if (!isset($var)) { // evaluates false
    echo '$var is not set at all';
}
]]>
     </programlisting>
    </informalexample>
    <simpara>
     変数でないものに使用しても意味がないことに注意して下さい。すなわ
     ち、<command>empty( addslashes( $name ) )</command>は変数でないも
     のに対して&false;値を持つ変数であるかどうかを調べているため意味が
     ありません。
     <!-- will even result in parse error (at least in PHP 4) -->
    </simpara>
    <simpara>
     <function>isset</function> および <function>unset</function> も参
     照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.floatval">
   <refnamediv>
    <refname>floatval</refname>
    <refpurpose>変数のfloat値を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>float</type><methodname>floatval</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>var</parameter>の<type>float</type>値を返します。
    </simpara>
    <para>
     <parameter>var</parameter>はあらゆるスカラー型とすることが可能で
     す。配列またはオブジェクトに<function>floatval</function>を使用す
     ることはできません。
     <informalexample>
      <programlisting role="php">
<![CDATA[
$var = '122.34343The';
$float_value_of_var = floatval ($var);
print $float_value_of_var; // prints 122.34343
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>intval</function>,
     <function>strval</function>, <function>settype</function>,
     <link linkend="language.types.type-juggling">型の相互変換</link>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.gettype">
   <refnamediv>
    <refname>gettype</refname>
    <refpurpose>変数の型を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>gettype</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     PHP 変数 <parameter>var</parameter> の型を返します。
    </para>
    <warning>
     <simpara>
      返された文字列は将来的なバージョンで変更される可能性があるので、
      特定の型を調べるために<function>gettype</function>を使用しないで
      下さい。更に、この関数は文字列比較を行うため、処理が遅いです。
      <!-- where's my dictionary? -->.
     </simpara>
     <simpara>
      替わりに<literal>is_*</literal>関数を使用して下さい。
     </simpara>
    </warning>
    <para>
     返された文字列は、以下のいずれかの値を持ちます。
     <itemizedlist>
      <listitem>
       <simpara>"<type>boolean</type>" (PHP 4以降)</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>integer</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>
        "<type>double</type>" (歴史的な理由により<type>float</type>の
        場合に"double"が返され、"float"とはなりません)
       </simpara>
      </listitem>
      <listitem>
       <simpara>"<type>string</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>array</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>object</type>"</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>resource</type>" (PHP 4以降)</simpara>
      </listitem>
      <listitem>
       <simpara>"<type>null</type>" (PHP 4以降)</simpara>
      </listitem>
      <listitem>
       <simpara>"user function" (PHP 3のみ。古い形式)</simpara>
      </listitem>
      <listitem>
       <simpara>"unknown type"</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     PHP 4の場合、ある関数に関する<function>gettype</function>の以前の
     使用法を置き換えるには<function>function_exists</function>および
     <function>method_exists</function>を使用する必要があります。
    </para>
    <para>
     <function>settype</function>,
     <function>is_array</function>,
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_integer</function>,
     <function>is_null</function>,
     <function>is_numeric</function>,
     <function>is_object</function>,
     <function>is_resource</function>,
     <function>is_scalar</function>,
     <function>is_string</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-defined-vars">
   <refnamediv>
    <refname>get_defined_vars</refname>
    <refpurpose>
     全ての定義済の変数を配列で返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>get_defined_vars</methodname>
      <void/>
     </methodsynopsis>
    <para>
     この関数は、環境変数、サーバ変数、ユーザが定義した変数を含む全て
     の定義済の変数のリストを有する多次元の配列を返します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
$b = array(1,1,2,3,5,8);

$arr = get_defined_vars();

// $b を出力
print_r($arr["b"]);

// PHPインタプリタのパスを出力 (CGIとして使用された場合)
// 例えば、/usr/local/bin/php
echo $arr["_"];

// コマンドラインパラメータがある場合に出力
print_r($arr["argv"]);

// サーバ変数を全て表示
print_r($arr["HTTP_SERVER_VARS"]);

// 変数の配列で利用可能なキーを全て出力
print_r(array_keys(get_defined_vars()));
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>get_defined_functions</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-resource-type">
   <refnamediv>
    <refname>get_resource_type</refname>
    <refpurpose>リソース型を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>get_resource_type</methodname>
      <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、指定した<type>resource</type>の型を表す文字列を返しま
     す。パラメータが有効なリソースでない場合はエラーとなります。
     <informalexample>
      <programlisting role="php">
<![CDATA[
$c = mysql_connect();
echo get_resource_type($c)."\n";
//  mysql link を出力

$fp = fopen("foo","w");
echo get_resource_type($fp)."\n";
// file を出力

$doc = new_xmldoc("1.0");
echo get_resource_type($doc->doc)."\n";
// domxml document を出力
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.import-request-variables">
   <refnamediv>
    <refname>import_request_variables</refname>
    <refpurpose>
     GET/POST/Cookie変数をグローバルスコープにインポートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>import_request_variables</methodname>
      <methodparam><type>string</type><parameter>types</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     GET/POST/Cookie変数をグローバルスコープにインポートします。この関
     数は、<link
     linkend="ini.register-globals">register_globals</link>を無効とし
     ているが、いくつかの変数をグローバルスコープで参照したいといった
     場合に有用です。
    </simpara>
    <simpara>
     <parameter>types</parameter>パラメータを使用すると、インポートす
     るリクエスト変数の種類を指定可能です。文字'G', 'P', 'C'をそれぞれ
     GET, POST, Cookieに使用できます。これらの文字は、大文字小文字を区
     別しないため、'g', 'p', 'c'の組み合せも使用することが可能です。
     POSTには、アップロードされたファイルの情報も含まれます。
     文字の順番には注意して下さい。"gp"とすると、POST変数は同名のGET変
     数を上書きします。GPC以外の文字は無視されます。
    </simpara>
    <note>
     <para>
      引数<parameter>prefix</parameter>はオプションですが、
      接頭辞を指定しないか空の文字列を接頭辞として指定すると、通知レベ
      ルエラーが発生します。これは、セキュリティ上の問題を生じるリスク
      です。通知レベルエラーは、デフォルトのエラー出力レベルでは表示さ
      れません。
     </para>
    </note>
    <informalexample>
     <programlisting role="php">
<![CDATA[
// This will import GET and POST vars
// with an "rvar_" prefix
import_request_variables("gP", "rvar_");
]]>
     </programlisting>
    </informalexample>
    <simpara>
     <link linkend="ini.register-globals">register_globals</link>,
     <link linkend="ini.track-vars">track_vars</link>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.intval">
   <refnamediv>
    <refname>intval</refname>
    <refpurpose>変数の整数としての値を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>intval</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>base</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     指定された値 base を基数（デフォルトは 10）とする、
     <parameter>var</parameter>の<type>integer</type>としての値を返し
     ます。
    </simpara>
    <simpara>
     <parameter>var</parameter>は、どんなスカラー型でもかまいません。
     <function>intval</function> には<type>array</type>や
     <type>object</type>は指定できません。
    </simpara>
    <note>
     <para>
      <function>intval</function>の引数<parameter>base</parameter>は、
      <parameter>var</parameter>引数が文字列でない限り、意味がありませ
      ん。
     </para>
    </note>
    <simpara>
     <function>floatval</function>,
     <function>strval</function>,
     <function>settype</function>,
     <link linkend="language.types.type-juggling">
      型の相互変換(ジャグリング)</link>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-array">
   <refnamediv>
    <refname>is_array</refname>
    <refpurpose>変数が配列かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_array</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>var</parameter> が配列であれば&true;を、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_object</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-bool">
   <refnamediv>
    <refname>is_bool</refname>
    <refpurpose>
     変数がbooleanであるかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_bool</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     パラメータ<parameter>var</parameter>が<type>boolean</type>である
     場合に&true;を返します。
    </para>
    <para>
     <function>is_array</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_object</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-double">
   <refnamediv>
    <refname>is_double</refname>
    <refpurpose><function>is_float</function>のエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <para>
     この関数は、<function>is_float</function>のエイリアスです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-float">
   <refnamediv>
    <refname>is_float</refname>
    <refpurpose>変数がfloatかどうか調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_float</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>var</parameter>が<type>float</type>の場合に&true;、そ
     うでない場合に&false;を返します。
    </simpara>
    <tip>
     <para>
      変数が数値、または数値文字列(フォーム入力の場合は常に文字列です)
      かどうかを調べるには、<function>is_numeric</function>を使用する
      必要があります。
     </para>
    </tip>
    <simpara>
     <function>is_bool</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_numeric</function>,
     <function>is_string</function>,
     <function>is_array</function>,
     <function>is_object</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-int">
   <refnamediv>
    <refname>is_int</refname>
    <refpurpose> 変数が整数かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_int</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>var</parameter>が<type>integer</type>の場合に&true;、
     そうでない場合に&false;を返します。
    </simpara>
    <tip>
     <para>
      変数が数値、または数値文字列(フォーム入力の場合は常に文字列です)
      かどうかを調べるには、<function>is_numeric</function>を使用する
      必要があります。
     </para>
    </tip>
    <simpara>
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_integer</function>,
     <function>is_numeric</function>,
     <function>is_string</function>,
     <function>is_array</function>,
     <function>is_object</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-integer">
   <refnamediv>
    <refname>is_integer</refname>
    <refpurpose><function>is_int</function>のエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <para>
     この関数は、<function>is_int</function>の別名です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-long">
   <refnamediv>
    <refname>is_long</refname>
    <refpurpose><function>is_int</function>のエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <para>
     この関数は、<function>is_int</function>の別名です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-null">
   <refnamediv>
    <refname>is_null</refname>
    <refpurpose>
     変数が &null;かどうか調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_null</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>var</parameter> が<type>null</type>の場合に&true;、そ
     の他に&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_numeric</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-numeric">
   <refnamediv>
    <refname>is_numeric</refname>
    <refpurpose>指定した変数が数字または数値文字列であるかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_numeric</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>var</parameter>が数値または数値文字列である場合に
     &true;、その他の場合に&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_integer</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-object">
   <refnamediv>
    <refname>is_object</refname>
    <refpurpose>変数がオブジェクトかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_object</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>var</parameter>がオブジェクトであれば&true;を、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_string</function>,
     <function>is_array</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-real">
   <refnamediv>
    <refname>is_real</refname>
    <refpurpose><function>is_float</function>のエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <para>
     この関数は、<function>is_float</function> の別名です。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.is-resource">
   <refnamediv>
    <refname>is_resource</refname>
    <refpurpose>
     変数がリソースかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_resource</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>is_resource</function>はパラメータ
     <parameter>var</parameter>で指定した変数がリソースの場合に&true;を
     返し、その他の場合に&false;を返します。
    </para>
    <para>
     詳細については、<type>resource</type>型のドキュメントを参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.is-scalar">
   <refnamediv>
    <refname>is_scalar</refname>
    <refpurpose>
     変数がスカラーかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_scalar</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>is_scalar</function>は、パラメータ
     <parameter>var</parameter>で指定した変数がスカラーの場合に&true;、
     その他の場合に&false;を返します。
    </para>
    <para>
     スカラー変数には、整数、float、文字列、論理値が含まれます。例えば、
     <informalexample>
      <programlisting role="php">
function show_var($var) {
    if (is_scalar($var))
        echo $var;
    else
        var_dump($var);
}

$pi = 3.1416;
$proteins = array("hemoglobin", "cytochrome c oxidase", "ferredoxin");

show_var($pi);
// prints: 3.1416

show_var($proteins)
// prints:
// array(3) {
//   [0]=>
//   string(10) "hemoglobin"
//   [1]=>
//   string(20) "cytochrome c oxidase"
//   [2]=>
//   string(10) "ferredoxin"
// }
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      リソース型は現在整数に基づく抽象型であるため、
      <function>is_scalar</function>は<type>resource</type>型の値をス
      カラー値と判定しません。この実装の詳細は変更される可能性があるた
      め、前堤にするべきではありません。
     </para>
    </note>
    <para>
     <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_numeric</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>,
     <function>is_integer</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-string">
   <refnamediv>
    <refname>is_string</refname>
    <refpurpose>変数が文字列かどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_string</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>var</parameter>が<type>string</type>である場合に&true;、
     そうでなければ&false;を返します。
    </para>
    <para>
     <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_object</function>,
     <function>is_array</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>変数がセットされているかどうかを検査する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>isset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>var</parameter> が存在すれば&true;、
     そうでなければ&false;を返します。
    </simpara>
    <para>
     変数が、<function>unset</function> により割当を解除された場合、
     <function>isset</function> はもう&true;とはなりません。
     &null;に設定されている変数を調べた場合、
     <function>isset</function> は&false;を返します。
      &null;バイト(<literal>"\0"</literal>)はPHPの定数
     &null;と等価ではないことにも注意して下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
$a = "test";
echo isset ($a); // TRUE
unset ($a);
echo isset ($a); // FALSE
$foo = NULL; 
print isset ($foo); // FALSE
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>empty</function>および<function>unset</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.print-r">
   <refnamediv>
    <refname>print_r</refname>
    <refpurpose>
     指定した変数に関する情報を解りやすく出力する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>print_r</methodname>
      <methodparam><type>mixed</type><parameter>expression</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>print_r</function>は、解り易い形式で変数の値に関する情
     報を表示します。<type>string</type>, <type>integer</type>,
     <type>float</type>を指定した場合はその値が出力されます。
     <type>array</type>を指定した場合、キーと要素を表す形式で値が表示
     されます。<type>object</type>に関しても同様の表示形式となります。
    </simpara>
    <simpara>
     <function>print_r</function>は、配列ポインタを終端まで移動するこ
     とに注意して下さい。ポインタを最初に戻すために
     <function>reset</function>を使用して下さい。
    </simpara>
    <simpara>
     <function>print_r</function>を
     <function>var_dump</function>と比較してみて下さい。
    </simpara>
     &tip.ob-capture;
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<pre>
<?php
    $a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x','y','z'));
    print_r ($a);
?>
</pre>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     出力は次のようになります:
     <screen>
<![CDATA[
<pre>
Array
(
    [a] => apple
    [b] => banana
    [c] => Array
        (
            [0] => x
            [1] => y
            [2] => z
        )
)
</pre>
]]>
      </screen>
     </para>
    <note>
     <simpara>
      PHP 4.0.4より前のバージョンでは、自分自身への直接または間接の参
      照を含む<type>array</type>または<type>object</type>が指定された
      場合には、無限に<function>print_r</function>が実行されてしまいま
      した。<literal>print_r($GLOBALS)</literal>が例で、
      <literal>$GLOBALS</literal>はそれ自体自分自身への参照を有するグ
      ローバル変数です。
     </simpara>
    </note>
    <simpara>
     <function>ob_start</function>, <function>var_dump</function>,
     <function>var_export</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     値の保存可能な表現を生成する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>serialize</methodname>
      <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>serialize</function> は、<parameter>value</parameter>の
     保存可能なバイトストリーム表現を含む文字列を返します。
    </simpara>
    <simpara>
     型や構造を失わずにPHPの値を保存または渡す際に有用です。
    </simpara>
    <simpara>
     シリアル化された文字列をPHPの値に戻すには、
     <function>unserialize</function>を使用して下さい。
     <function>serialize</function>は、<type>resource</type>以外の全て
     の型を処理します。自分自身への参照を含む配列を
     <function>serialize</function>することも可能です。
     <function>serialize</function>している配列/オブジェクト内の参照も
     保存されます。
    </simpara>
  <!-- TODO
     in 4.0.4pl1 this didn't work properly, however, there
     been some fixes. I don't know whether this all
     works correctly now, and if so, whether it is since 405
     or 406
   <note>
    <simpara>
     This didn't work correctly until 4.0.?
    </simpara>
   </note>
   </simpara>
   -->
    <note>
     <para>
      PHP 3では、オブジェクトのプロパティはシリアル化されますが、メソッ
      ドは失われます。PHP 4ではこの制限は取り除かれ、プロパティ
      とメソッドの両方を保存します。より詳細な情報については、
      <link linkend="language.oop">オブジェクトとクラス</link> の
      <link linkend="language.oop.serialization">オブジェクトのシリア
      ル化</link>の節を参照下さい。
     </para>
    </note>
    <para>
     <example>
      <title><function>serialize</function>の例</title>
      <programlisting role="php">
<![CDATA[
// $session_data はカレントユーザーのセッション情報を含む多次元配列を
// 保持しています。リクエストの最後にこれをデータベースに保存するために
//  serialize() を使用します。

$conn = odbc_connect ("webdb", "php", "chicken");
$stmt = odbc_prepare ($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &amp;$sqldata)) {
    /* 何か問題があったようです。Bitch, whine and moan. */
    }
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>unserialize</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.settype">
   <refnamediv>
    <refname>settype</refname>
    <refpurpose>変数の型をセットする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>settype</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam><type>string</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     変数 <parameter>var</parameter> の型を
     <parameter>type</parameter> にセットします。
    </para>
    <para>
     <parameter>type</parameter> の値は以下の命令のいずれかです。
     <itemizedlist>
      <listitem>
       <simpara>
        "boolean" (または、PHP 4.2.0以降は"bool")
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "integer" (または、PHP 4.2.0以降は"int")
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "float" (PHP 4.2.0以降でのみ可能、古いバージョンでは、"double"
        を使用します)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "string"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "array"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "object"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "null" (PHP 4.1.0以降)
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     成功すれば&true;、そうでなければ&false;を返します。
    </para>
    <para>
     <example>
      <title><function>settype</function> の例</title>
      <programlisting role="php">
<![CDATA[
$foo = "5bar"; // string
$bar = true;   // boolean

settype($foo, "integer"); // ここでは、$foo は 5です (整数)
settype($bar, "string");  // ここでは、$bar は "1" です (文字列)
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>gettype</function>,
     <link linkend="language.types.typecasting">type-casting</link>,
     <link linkend="language.types.type-juggling">type-juggling</link>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.strval">
   <refnamediv>
    <refname>strval</refname>
    <refpurpose>変数の文字列としての値を得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>strval</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>var</parameter>の<type>string</type>としての値を返しま
     す。文字列への変換の詳細については、<type>string</type>のドキュメ
     ントを参照下さい。
    </simpara>
    <simpara>
     <parameter>var</parameter>は、全てのスカラー値にできます。
     <function>strval</function>に配列又はオブジェクトは使用可能できま
     せん。
    </simpara>
    <simpara>
     <function>floatval</function>,
     <function>intval</function>, <function>settype</function>,
     <link linkend="language.types.type-juggling">型の相互変換(ジャグリング)
     </link>を参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>保存用表現から PHP の値を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>unserialize</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>unserialize</function> は、シリアル化された変数
     (<function>serialize</function> を参照) をとり、PHP 変数値に
     戻す変換を行います。変換された値が返されます。その値は、
     <type>integer</type>, <type>float</type>,
     <type>string</type>, <type>array</type> , <type>object</type>
     とすることが可能です。オブジェクトがシリアル化された場合、返り値
     にそのメソッドは保存されていません。
    </simpara>
    <note>
     <para>
      コールバック関数を設定することが可能です。(不完全な
      <type>object</type> "__PHP_Incomplete_Class"を得ることを防ぐため)
      コールバック関数は、非シリアル化する際に未定義のクラスをインスタ
      ンス化する必要がある場合にコールされます。
      'unserialize_callback_func'を定義するためには、
      php.ini, <function>ini_set</function>, .htaccessファイルを使用し
      て下さい。未定義のクラスをインスタンス化する度に、コールバック関
      数がコールされます。この機能を無効とするには、このグローバル変数
      を空として下さい。
     </para>
    </note>
    <para>
     <example>
      <title>unserialize_callback_funcの例</title>
      <programlisting role="php">
<![CDATA[
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

ini_set('unserialize_callback_func','mycallback'); // set your callback_function

function mycallback($classname) {
    // just include a file containing your classdefinition
    // you get $classname to figure out which classdefinition is required
}
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      PHP 3では、メソッドはシリアル化されたオブジェクトを非シリアル化
      する際に保存されません。PHP 4ではこの制限は取り除かれ、プロパティ
      とメソッドの両方を保存します。より詳細な情報については、
      <link linkend="language.oop">オブジェクトとクラス</link> の
      <link linkend="language.oop.serialization">オブジェクトのシリア
      ル化</link>の節を参照下さい。
     </para>
    </note>
    <para>
     <example>
      <title><function>unserialize</function>の例</title>
      <programlisting role="php">
<![CDATA[
// ここで、データベースから $session_data にセッションデータをロード 
// するために unserialize() を使用します。
// この例は、<function>serialize</function> で記述された例を補足するものです。
 
$conn = odbc_connect ("webdb", "php", "chicken");
$stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata) || !odbc_fetch_into ($stmt, &amp;$tmp)) {
    // 実行または取得が失敗した場合、空の配列で初期化します
    $session_data = array();
} else {
    // $tmp[0] にシリアル化されたデータを保持している必要があります。
    $session_data = unserialize ($tmp[0]);
    if (!is_array ($session_data)) {
        // 何か問題があったため、空の配列で初期化します。
        $session_data = array();
    }
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>serialize</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>指定した変数の割当を解除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>
	<replaceable><optional>var</optional></replaceable>
       </parameter></methodparam>
      <methodparam><type></type><parameter>
	<replaceable><optional>...</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function>は指定した変数を破棄します。PHP 3では、
     <function>unset</function> は常に &true;(実際には整数値1) を返して
     いました。しかし、PHP 4では <function>unset</function> はもはや真
     の意味で関数ではなく、命令となっています。値が返されないため、
     <function>unset</function> の値を取得しようとすると、パースエラー
     となります。
    </para>
    <para>
     <example>
      <title><function>unset</function>の例</title>
      <programlisting role="php">
<![CDATA[
// 変数を一つ破棄する
unset ($foo);

// 配列の要素の一つを破棄する
unset ($bar['quux']);

// 複数の変数を破棄する
unset ($foo1, $foo2, $foo3);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     関数<function>unset</function>の内部動作は、破棄しようとする変数
     の型に依存します。
    </para>
    <para>
     あるグローバル変数が関数の中で<function>unset</function>された場
     合、ローカル変数のみが破棄されます。呼出側の環境にある変数は、
     <function>unset</function>がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function destroy_foo() {
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
]]>
      </programlisting>
     </informalexample>
     上記の例の出力は次のようになります。
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     参照渡しされた変数が関数内で<function>unset</function>された場合
     に、ローカル変数のみが破棄されます。呼出側の環境でその変数は、
     <function>unset</function>がコールされる前と同じ値を保持します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function foo(&$bar) { 
    unset($bar); 
    $bar = "blah"; 
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
]]>
      </programlisting>
     </informalexample>
     上の例の出力は以下のようになります。
     The above example would output:
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     静的変数が関数の内部で<function>unset</function>された場合、
     <function>unset</function>は、その変数とその静的変数への全てのリ
     ファレンスを破棄します。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function foo() {
    static $a;
    $a++;
       echo "$a\n";

    unset($a);
}

foo();
foo();
foo();
]]>
      </programlisting>
     </informalexample>
     上記の例の出力は次のようになります。
     <informalexample>
      <screen>
<![CDATA[
1
1
1
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     グローバル変数を関数内で<function>unset</function>したい場合、
     配列<parameter>$GLOBALS</parameter>を使用し、次のようにして下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
function foo() {
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      <function>unset</function> は言語の一部です。
     </para>
    </note>
    <para>
     <function>isset</function>、<function>empty</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.var-dump">
   <refnamediv>
    <refname>var_dump</refname>
    <refpurpose>
     指定した変数に関する情報をダンプする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>var_dump</methodname>
      <methodparam><type>mixed</type><parameter>expression</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>expression</parameter></methodparam>
      <methodparam choice="opt"><type></type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     この関数は、指定した式に関してその型や値を含む構造化された情報を
     返します。配列の場合、その構造を表示するために各値について再帰的
     に探索されます。
    </simpara>
     &tip.ob-capture;
    <simpara>
     <function>var_dump</function>を
     <function>print_r</function>と比較して見て下さい。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<pre>
<?php
$a = array (1, 2, array ("a", "b", "c"));
var_dump ($a);

/* output:
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
}

*/

$b = 3.1; $c = TRUE;
var_dump($b,$c);

/* output:
float(3.1)
bool(true)

*/
?>;
</pre>
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.var-export">
   <refnamediv>
    <refname>var_export</refname>
    <refpurpose>
     変数の文字列表現を出力または返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>var_export</methodname>
      <methodparam><type>mixed</type><parameter>expression</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>return</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     この関数は、この関数に渡された変数に関する構造化された情報を返し
     ます。この関数は、<function>var_dump</function>に似ていますが、
     返される表現が有効なPHPコードであるところが異なります。
    </simpara>
    <simpara>
     この関数の2番目の引数に&true;を指定することにより、変数表現を返す
     ことも可能です。
    </simpara>
    <simpara>
     <function>var_export</function>を<function>var_dump</function>と
     比較して下さい。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<pre>
<?php
$a = array (1, 2, array ("a", "b", "c"));
var_export ($a);

/* output:
array (
  0 => 1,
  1 => 2,
  2 => 
  array (
    0 => 'a',
    1 => 'b',
    2 => 'c',
  ),
)
*/

$b = 3.1;
$v = var_export($b, TRUE);
echo $v;

/* output:
3.1
*/
?>
</pre>
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.is-callable'>
   <refnamediv>
    <refname>is_callable</refname>
    <refpurpose>
     引数が有効なコール可能な構造であるかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_callable</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>callable_name</parameter></methodparam>
     </methodsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

