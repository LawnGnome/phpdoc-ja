
 <reference id="ref.sem">
  <title>セマフォおよび共有メモリ関数</title>
  <titleabbrev>Semaphore</titleabbrev>
  <partintro>
   <para>
    このモジュールは、システム V セマフォを用いてセマフォ関数を提供します。
    セマフォは、マシーン上のリソースへの排他的アクセス機能や、
    同時にあるリソースを使用することができるプロセスの数を制限するために
    使用することができます。
   </para>
   <para>
    このモジュールは、システム V 共有メモリを使用して共有メモリ関数も
    提供します。共有メモリは、グローバル変数へのアクセス手段を提供するために
    使用することが可能です。別の httpd デーモンおよび
    (Perl, C, ... のような)他のプログラムさえ、グローバルデータ交換を
    提供するこのデータにアクセスすることが可能です。
    共有メモリは、同時アクセスに関して安全ではないということを覚えておいて
    下さい。
    同期をとるには、セマフォを使用して下さい。
    <table>
     <title>Unix OS による共有メモリの制限</title>
     <tgroup cols="2">
      <tbody>
       <row>
	<entry>SHMMAX</entry> 
	<entry>共有メモリの最大サイズ。通常は 131072
	バイト</entry>
       </row>
       <row>
	<entry>SHMMIN</entry>
	<entry>共有メモリの最小サイズ。通常は 1 バイト</entry>
       </row>
       <row>
	<entry>SHMMNI</entry> 
	<entry>共有メモリセグメントの最大数。通常は
	100</entry>
       </row>
       <row>
	<entry>SHMSEG</entry>
	<entry>プロセス毎の共有メモリの最大数。通常は
	6</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <note>
    <simpara>
     これらの関数は、Windowsシステムでは動作しません。
    </simpara>
   </note>
  </partintro>

  <refentry id="function.sem-get">
   <refnamediv>
    <refname>sem_get</refname>
    <refpurpose>セマフォ ID を得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sem_get</function></funcdef>
      <paramdef>int <parameter>key</parameter></paramdef>
      <paramdef>int <parameter><optional>max_acquire</optional>
       </parameter></paramdef>
      <paramdef>int <parameter><optional>perm</optional>
       </parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     返り値: 成功時には正のセマフォ ID、
     エラー時には FALSE を返します。
    </para>
    <para>
     <function>sem_get</function> は、
     システム V セマフォを指定したキーでアクセスするために使用可能な
     ID を返します。
     必要ならば perm で指定された許可属性ビット(デフォルトは 0666)を用いて
     セマフォが生成されます。
     同時にセマフォを得ることが可能なプロセス数を
     max_acquire (デフォルトは 1)にセットします。
     実際、この値はプロセスが現在そのセマフォに付随している
     唯一のプロセスであることがわかった場合にのみセットされます。
    </para>
    <para>
     同じキーで <function>sem_get</function> を2 度コールした場合、
     別のセマフォ ID が返されます。
     しかし、どちらの ID も同じそのセマフォをアクセスします。
    </para>
    <para> 
     <function>sem_acquire</function> および
     <function>sem_release</function> も参照下さい。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.sem-acquire">
   <refnamediv>
    <refname>sem_acquire</refname>
    <refpurpose>セマフォを得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sem_acquire</function></funcdef>
      <paramdef>int <parameter>sem_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     返り値: 成功の場合に TRUE、エラーの場合に FALSE。
    </para>
    <para>
     <function>sem_acquire</function> は、(必要な場合)
     セマフォが確保できるまでブロックします。
     既に確保されているセマフォを得ようとするプロセスは、
     セマフォの獲得により max_aquire 値を超える場合、
     永久にブロックされます。
    </para>
    <para>
     リクエスト処理の後、プロセスにより獲得された全てのセマフォのうち、
     明示的に開放されていないものは、自動的に開放され、警告が表示され
     ます。
    </para>
    <para> 
     <function>sem_get</function> および
     <function>sem_release</function> も参照下さい。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.sem-release">
   <refnamediv>
    <refname>sem_release</refname>
    <refpurpose>セマフォを解放します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sem_release</function></funcdef>
      <paramdef>int <parameter>sem_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     返り値: 成功の場合に TRUE、エラーの場合に FALSE を返します。
    </para>
    <para>
     <function>sem_release</function> は、そのセマフォが
     コール元のプロセスにより現在確保されている場合、解放します。
     そうでない場合、警告が表示されます。
    </para>
    <para>
     セマフォを解放した後、再び確保するには、<function>sem_acquire</function>
     をコールします。
    </para>
    <para> 
     <function>sem_get</function> および
     <function>sem_acquire</function> も参照下さい。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.shm-attach">
   <refnamediv>
    <refname>shm_attach</refname>
    <refpurpose>共有メモリセグメントを作成またはオープンします</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>shm_attach</function></funcdef>
      <paramdef>int <parameter>key</parameter></paramdef>
      <paramdef>int
      <parameter><optional>memsize</optional></parameter></paramdef>
      <paramdef>int
      <parameter><optional>perm</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>shm_attach</function> は ID を返します。
     これは、指定されたキーでシステム V 共有メモリにアクセスする際に
     使用することが可能です。
     最初のコールの際に、mem_size (デフォルト: <link
     linkend="configuration.file">設定ファイル</link> の sysvshm.init_mem
     それ以外は 10000 バイト) を有し、
     perm ビット(デフォルト:0666)をオプションとする
     共有メモリセグメントが作成されます。
    </para>
    <para>
     同じ <parameter>key</parameter> で
     <function>shm_attach</function> を2 回コールした場合、    
     別の共有メモリ ID が返されますが、両方の ID は、同じ共有メモリ
     をアクセスします。
     <parameter>memsize</parameter> および
     <parameter>perm</parameter> は無視されます。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.shm-detach">
   <refnamediv>
    <refname>shm_detach</refname>
    <refpurpose>共有メモリセグメントへの接続を閉じます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>shm_detach</function></funcdef>
      <paramdef>int <parameter>shm_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>shm_detach</function> は、
     <function>shm_attach</function> で作成され、
     指定した <parameter>shm_identifier</parameter> を有する共有メモリ
     への接続を閉じます。
     共有メモリは、まだ UNIX システム上に存在しており、
     データはまだ存在するということを覚えておいて下さい。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.shm-remove">
   <refnamediv>
    <refname>shm_remove</refname> 
    <refpurpose>UNIX システムから共有メモリを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>shm_remove</function></funcdef>
      <paramdef>int <parameter>shm_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     UNIXシステムから共有メモリを削除します。全てのデータは破棄されます。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.shm-put-var">
   <refnamediv>
    <refname>shm_put_var</refname> 
    <refpurpose>共有メモリの変数を挿入または更新します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>shm_put_var</function></funcdef>
      <paramdef>int <parameter>shm_identifier</parameter></paramdef>
      <paramdef>int <parameter>variable_key</parameter></paramdef>
      <paramdef>mixed <parameter>variable</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定した <parameter>variable_key</parameter> を有する
     変数 <parameter>variable</parameter> の挿入または更新を行います。
     全ての変数型 (double, long, 文字列, 配列)がサポートされます。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.shm-get-var">
   <refnamediv>
    <refname>shm_get_var</refname> 
    <refpurpose>共有メモリから変数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>shm_get_var</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>variable_key</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>shm_get_var</function> は、
     指定した<parameter>variable_key</parameter> を有する変数を読みこみます。
     その変数はまだ共有メモリに存在します。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.shm-remove-var">
   <refnamediv>
    <refname>shm_remove_var</refname> 
    <refpurpose>共有メモリから変数を削除します
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>shm_remove_var</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>variable_key</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定した<parameter>variable_key</parameter> を有する変数を
     共有メモリから削除し、占有するメモリを解放することができます。
    </para>
    <note>
     <simpara>
      この関数は、Windowsシステムでは動作しません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
