 <reference id="ref.java">
  <title>Java</title>
  <titleabbrev>PHP / Java の連携</titleabbrev>
  <partintro>
   <para>
    PHPとJavaの連携をとして考えられる手段は2種類あります。JavaをPHPに統合
    する手法、この手法はより安定で効率的な手法です、または、PHPをJavaサー
    ブレット環境に統合する手法です。前者は、ext/java で提供され、後者はサ
    ーブレットサーバとのインターフェイスであるSAPIモジュールです。
   </para>
   <para>
    PHP 4 ext/java は、PHPからJavaオブジェクトのメソッドを生成し、コール
    する簡単で効率的な手段を提供します。このJVMはJNIを用いて作成され、全
    てはこのプロセスで動作します。ext/javaの構築手順は、
    php4/ext/java/README にあります。

    <example>
     <title>Java の例</title>
     <programlisting role="php">
&lt;?php
  // Java クラス java.lang.System のインスタンスをPHPに作成する
  $system = new Java("java.lang.System");

  // プロパティへのアクセスのデモ
  print "Java version=".$system-&gt;getProperty("java.version")." &lt;br&gt;";
  print "Java vendor=" .$system-&gt;getProperty("java.vendor")."  &lt;br&gt;";
  print "OS=".$system-&gt;getProperty("os.name")." ".
              $system-&gt;getProperty("os.version")." on ".
              $system-&gt;getProperty("os.arch")." &lt;br&gt;";

  // java.util.Date の例
  $formatter = new Java("java.text.SimpleDateFormat",
                        "EEEE, MMMM dd, yyyy 'at' h:mm:ss a zzzz");

  print $formatter-&gt;format(new Java("java.util.Date"));
?&gt;
     </programlisting>
    </example>
    <example>
     <title>AWT の例</title>
     <programlisting role="php">
&lt;?php
  // この例は、CGIとして実行されることのみを考慮しています。

  $frame  = new Java("java.awt.Frame", "Zend");
  $button = new Java("java.awt.Button", "Hello Java world!");

  $frame-&gt;add("North", $button);
  $frame-&gt;validate();
  $frame-&gt;pack();
  $frame-&gt;visible = True;

  $thread = new Java("java.lang.Thread");
  $thread-&gt;sleep(10000);

  $frame-&gt;dispose();
?&gt;
     </programlisting>
    </example>

    注意:

    <itemizedlist>
     <listitem>
      <simpara>
       new Java() は、有効なコンストラクタある場合、クラスのインスタンス
       を生成します。引数が指定されない場合には、デフォルトのコンストラ
       クタにより"java.lang.System"のようなクラスにアクセスするとよいで
       しょう。このクラスは、静的な手法でそのクラスの機能の多くを公開し
       ています。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       あるインスタンスのメンバーにアクセスする際には、まずbeanプロパティ
       が探されてから、次にpublicフィールドが探されます。言い換えると、
       "print $date.time" はまず "$date.getTime()" と解釈され、続いて
       "$date.time" と解釈されます。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       静的メンバおよびインスタンスメンバは共に同じ構文でアクセス可能です。
       さらに、javaオブジェクトが"java.lang.Class"型の場合、このクラスの静
       的メンバ(フィールドとメソッド)にアクセス可能です。
      </simpara>
     </listitem>
     <listitem>
      <para>
       例外が発生するとPHPの警告が出力され、結果はNULLとなります。警告は
       "@"記号を付けてメソッドをコールすることに抑圧できます。以下のAPI
       を直近のエラーを取得し、リセットするために使用することができます。

       <itemizedlist>
        <listitem><simpara><function>java_last_exception_get</function></simpara></listitem>
        <listitem><simpara><function>java_last_exception_clear</function></simpara></listitem>
       </itemizedlist>
      </para>
     </listitem>
     <listitem>
      <simpara>
       オーバーロードの解決は、二つの言語の間で型の違いがあるため一般には
       困難な問題です。PHP のJava拡張機能は簡単ですが最も一致するオーバー
       ロードを定義するかなり効率的な手段を使用しています。
       加えて、PHPのメソッド名は大文字小文字を区別しないため、選択される
       オーバーロードの数は増加する傾向があります。

       メソッドが一度選択されると、パラメータの値は必要に応じて調整されま
       す。このため、(倍精度実数が論理値に変換されるといった)データの劣化
       が発生する可能性があります。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       PHPでは伝統的に配列とハッシュテーブルは相互に完全に可換でした。PHPの
       ハッシュテーブルは整数または配列の添字のみを使用できることに注意して
       下さい。また、Javaのprimitive型の配列は疎とすることができないことに
       も注意して下さい。これらの構造は値で渡されるため、メモリと時間の消
       費量が大きくする可能性があります。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP4 sapi/servlet はPHPプロセッサ全体をサーブレットとして実行するために
    ext//javaにより定義された機構の上に構築されています。
    この形態のPHPの側からこの実装が基本的に優れている点は、サーブレットを
    サポートするWebサーバが通常JVMをプールし、再利用することに注力している
    ことです。このサーブレットSAPIモジュールの構築手順は、php4/sapi/README
    にあります。

    注意:

    <itemizedlist>
     <listitem>
      <simpara>
       このコードは、全てのサーブレットエンジンで実行可能であるように作成
       されていますが、現在ApacheのJakarta/tomcatでしかテストされていませ
       ん。他のエンジンでこのコードを実行する際に必要なパッチ、バグレポー
       ト、成功事例等をお知らせ下さい。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       PHP は、動作ディレクトリを変更する特徴があります。sapi/サーブレット
       はもとに戻そうとしますが、PHPが実行されている間、サーブレットエンジ
       ンはCLASSPATHい相対ディレクトリにより指定されている全てのクラスをロ
       ードできないか、管理用およびJSPコンパイル用に使用されている作業ディ
       レクトリを見つけることができなくなる可能性があります。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </partintro>

  <refentry id="function.java-last-exception-clear">
   <refnamediv>
    <refname>java_last_exception_clear</refname>
    <refpurpose>直近の例外をクリアする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>java_last_exception_clear</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
   </refsect1>
  </refentry>

  <refentry id="function.java-last-exception-get">
   <refnamediv>
    <refname>java_last_exception_get</refname>
    <refpurpose>直近のJava例外を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>exception <function>java_last_exception_get</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     以下の例は、Java例外ハンドラをPHPから使用する方法を示すものです。

     <example>
      <title>Java例外ハンドラ</title>
      <programlisting role="php">
<?php
  $stack = new Java("java.util.Stack");
  $stack-&gt;push(1);

  // 以下のコードは実行に成功します
  $result = $stack->pop();
  $ex = java_last_exception_get();
  if (!$ex) print "$result\n";

  // 以下のコードは失敗します (エラー出力は、@により抑制されています)
  $result = @$stack-&gt;pop();
  $ex = java_last_exception_get();
  if ($ex) print $ex->toString();

  // 直近の例外をクリア
  java_last_exception_clear();
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
