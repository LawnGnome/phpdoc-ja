<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.38 $ -->
 <reference id="ref.array">
  <title>配列関数(array)</title>
  <titleabbrev>Arrays</titleabbrev>
  <partintro>
   <simpara>
    これらの関数により様々な手法で配列にアクセスし、操作することが可能
    になります。配列は、変数の組を保存、管理、操作する基本的な要素です。
   </simpara>
   <simpara>
    通常の配列および多次元配列がサポートされており、ユーザが定義したり、
    他の関数で作成することも可能です。いくつかのデータベース処理関数は、
    データベースのクエリから配列を返しますし、いくつかの関数は配列を返
    します。
   </simpara>
   <para>
    PHPでの配列の実装や使用方法の詳細については、マニュアルの
    <link linkend="language.types.array">配列</link>に関する節を参照下
    さい。
   </para>
   <para>
    <function>is_array</function>, <function>explode</function>, 
    <function>implode</function>, <function>split</function>,
    <function>join</function>も参照下さい。
   </para>
  </partintro>

  <refentry id="function.array">
   <refnamediv>
    <refname>array</refname>
    <refpurpose>配列を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array</function></funcdef>
      <paramdef>mixed 
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     パラメータの配列を返します。パラメータには、
     <literal>=&gt;</literal>演算子によりインデックスを指定することもできます。
     <note>
      <para>
       <function>array</function>は、実際にはリテラル配列を表現するための
       言語構成要素であり、通常の関数ではありません。
      </para>
     </note>
    </para>
    <para>
     カンマ区切った構文 "index =&gt; values" は、インデックスと値を定
     義します。インデックスは文字列または数値とすることが可能です。イ
     ンデックスが省略された場合、0から始まる整数インデックスが自動的に
     生成されます。インデックスが整数の場合、次に生成されるインデック
     スは、整数インデックスの最大値 + 1 となります。同じインデックスを
     2度定義した場合、後の定義により最初の定義が上書きされることに注意
     して下さい。
    </para>
    <para>
     以下の例では、2 次元配列の生成方法、連想配列のキーの指定方法、
     および通常の配列において添字番号をスキップし、それに続く
     要素にアクセスする方法についてご紹介しています。
     <example>
      <title><function>array</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fruits = array (
    "fruits"  => array("a"=>"orange", "b"=>"banana", "c"=>"apple"),
    "numbers" => array(1, 2, 3, 4, 5, 6),
    "holes"   => array("first", 5 => "second", "third")
);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>array</function> における自動インデックス</title>
      <programlisting role="php">
<![CDATA[
$array = array( 1, 1, 1, 1,  1, 8=>1,  4=>1, 19, 3=>13);
print_r($array);
]]>
      </programlisting>
      <para>
       この例の出力は次のようになります。
       <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
       </screen>
      </para>
     </example>
     インデックス '3' は二度定義されており、後の値 13 が保持されること
     に注意して下さい。インデックス 4 はインデックス 8 の後に定義され、
     次に生成されるインデックス(値は19)は、最大のインデックスが 8 であ
     るため、9となります。
    </para>
    <para>
     次の例は、1から始まる配列を作成します。
     <example>
      <title><function>array</function> で1から始まる配列を作成</title>
      <programlisting role="php">
<![CDATA[
$firstquarter  = array(1 => 'January', 'February', 'March');
print_r($firstquarter);
]]>
      </programlisting>
      <para>
       この例の出力は次のようになります。
       <screen>
<![CDATA[
Array 
(
    [1] => 'January'
    [2] => 'February'
    [3] => 'March'
)
]]>
       </screen>
      </para>
     </example>
    </para>
    <para>
     <function>array_pad</function>, <function>list</function>, 
     <function>range</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.array-change-key-case">
   <refnamediv>
    <refname>array_change_key_case</refname>
    <refpurpose>
     配列のキーを全て小文字または大文字にして返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_change_key_case</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>case</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_change_key_case</function> は、配列
     <parameter>input</parameter>のキーを全て小文字または大文字にします。
     変更は、オプションの最後のパラメータ<parameter>case</parameter>に依存
     します。ここには、二つの定数<constant>CASE_UPPER</constant>および
     <constant>CASE_LOWER</constant>を指定可能です。デフォルトは、
     <constant>CASE_LOWER</constant>です。この関数は数値添字はそのままに
     します。
    </para>
    <example>
     <title><function>array_change_key_case</function>の例</title>
     <programlisting role="php">
<![CDATA[
$input_array = array("FirSt" => 1, "SecOnd" => 4);
print_r(array_change_key_case($input_array, CASE_UPPER);
]]>
     </programlisting>
     <para>
      上のプログラムの出力は以下のようになります。
      <screen>
<![CDATA[
Array
(
    [FIRST] => 1
    [SECOND] => 2
)
]]>
      </screen>
     </para>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.array-chunk">
   <refnamediv>
    <refname>array_chunk</refname>
    <refpurpose>配列を分割する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_chunk</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>size</parameter></paramdef>
      <paramdef>bool 
       <parameter><optional>preserve_keys</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_chunk</function> は、各配列が
     <parameter>size</parameter>個の値を有するように配列を複数の配列に
     分割します。最後の配列には指定した数よりも少ない個数の値が含まれ
     る可能性があります。ゼロから始まる添字を有する多次元配列のメンバー
     としてこれらの配列を取得します。
    </para>
    <para>
     オプションの引数<parameter>preserve_keys</parameter>に&true;を設
     定することにより、配列inputから取得した元のキーを維持させることが
     可能です。&false;を指定した場合、返される各配列ではゼロから始まる
     新しい添字が使用されます。デフォルトは、&false;です。
    </para>
    <example>
     <title><function>array_chunk</function> の例</title>
     <programlisting role="php">
<![CDATA[
$input_array = array('a', 'b', 'c', 'd', 'e');
print_r(array_chunk($input_array, 2));
print_r(array_chunk($input_array, 2, TRUE));
]]>
     </programlisting>
     <para>     
      上のプログラムの出力は以下のようになります。
      <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => a
            [1] => b
        )

    [1] => Array
        (
            [0] => c
            [1] => d
        )

    [2] => Array
        (
            [0] => e
        )

)
Array
(
    [0] => Array
        (
            [0] => a
            [1] => b
        )

    [1] => Array
        (
            [2] => c
            [3] => d
        )

    [2] => Array
        (
            [4] => e
        )

)
]]>
      </screen>
     </para>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.array-count-values">
   <refnamediv>
    <refname>array_count_values</refname>
    <refpurpose>配列の値の数を数える</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_count_values</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_count_values</function>は、
     配列<parameter>input</parameter>の値をキーとし、
     <parameter>input</parameter>におけるその値の出現回数を値とした
     配列を返します。
    </para>
    <para>
     <example>
      <title><function>array_count_values</function>の例</title>
      <programlisting role="php">
<![CDATA[
$array = array(1, "hello", 1, "world", "hello");
array_count_values($array); // array(1=>2, "hello"=>2, "world"=>1)を返します
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-diff">
   <refnamediv>
    <refname>array_diff</refname>
    <refpurpose>配列の差を計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_diff</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_diff</function> は、他の引数のいずれにも存在しな
     い<parameter>array1</parameter>の値の全てを有する配列を返します。
     キーと値の関係は維持されることに注意して下さい。
    </para>
    <para>
     <example>
      <title><function>array_diff</function> の例</title>
      <programlisting role="php">
<![CDATA[
$array1 = array ("a" => "green", "red", "blue");
$array2 = array ("b" => "green", "yellow", "red");
$result = array_diff ($array1, $array2);
]]>
      </programlisting>
     </example>
    </para>     
    <para>
     これにより、<varname>$result</varname> は
     <literal>array ("blue");</literal> となります。$array1に複数存在
     する場合でも全て同様に処理されます。
    </para>
    <note>
     <simpara>
      二つの要素は、<literal>(string) $elem1 === (string) $elem2</literal>
      の場合のみ等しいと見直されます。言い換えると、文字列表現が同じ場合と
      なります。
      <!-- TODO: example of it... -->
     </simpara>
    </note>
    <warning>
     <simpara>
      この関数は、PHP 4.0.4では動作しません!
      <!-- TODO: when exactly was this broken?... -->
     </simpara>
    </warning>
    <para>
     <function>array_intersect</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-filter">
   <refnamediv>
    <refname>array_filter</refname>
    <refpurpose>
     コールバック関数を使用する配列要素フィルタ
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_filter</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>callback</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_filter</function> は、コールバック関数によりフィ
     ルタ処理が行われた<parameter>input</parameter>の全ての要素を含む
     配列を返します。<parameter>input</parameter>が連想配列の場合、キー
     は保存されます。
    </para>
    <para>
     <example>
      <title><function>array_filter</function>の例</title>
      <programlisting role="php">
<![CDATA[
function odd($var) {
    return ($var % 2 == 1);
}

function even($var) {
    return ($var % 2 == 0); 
}

$array1 = array ("a"=>1, "b"=>2, "c"=>3, "d"=>4, "e"=>5);
$array2 = array (6, 7, 8, 9, 10, 11, 12);

$odd_arr = array_filter($array1, "odd");
$even_arr = array_filter($array2, "even");
]]>
      </programlisting>
     </example>
    </para>     
    <para>
     この例により、<varname>$odd_arr</varname> は
     <literal>array ("a"=&gt;1, "c"=&gt;3, "e"=&gt;5);</literal> とな
     り、<varname>$even_arr</varname> は
     <literal>array (6, 8, 10, 12);</literal>となります。
    </para>
    &note.func-callback;
    <para>
     <function>array_map</function>,
     <function>array_reduce</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-flip">
   <refnamediv>
    <refname>array_flip</refname>
    <refpurpose>配列の値を反転にする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_flip</function></funcdef>
      <paramdef>array <parameter>trans</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_flip</function> は、配列を反転して返します。
     すなわち、<parameter>trans</parameter>のキーは値となり、
     <parameter>trans</parameter>の値はキーとなります。
    </para>
    <para>
     <parameter>trans</parameter>の値は有効なキーを必要とすることに注意して
     下さい。すなわち、キーは、<type>integer</type>または
     <type>string</type>である必要があります。ある値が間違った型である場合、
     警告が出力され、問題のこのキー/値の組は逆順にされません。
    </para>
    <para>
     ある値が複数回出現した場合、最後のキーがその値として使用され、その他の
     値は失われます。
    </para>
    <para>
     <function>array_flip</function>は失敗した場合に&false;を返します。
    </para>
    <para>
     <example>
      <title><function>array_flip</function>の例</title>
      <programlisting role="php">
<![CDATA[
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>array_flip</function>の例 : 衝突</title>
      <programlisting role="php">
<![CDATA[
$trans = array ("a" => 1, "b" => 1, "c" => 2);
$trans = array_flip ($trans);
// ここで$transは次のようになります: array(1 => "b", 2 => "c");
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-fill">
   <refnamediv>
    <refname>array_fill</refname>
    <refpurpose>配列を指定した値で埋める</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_fill</function></funcdef>
      <paramdef>int <parameter>start_index</parameter></paramdef>
      <paramdef>int <parameter>num</parameter></paramdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_fill</function> は、
     パラメータ<parameter>value</parameter>を値とする
     <parameter>num</parameter>個のエントリからなる配列を埋めます。
     この際、キーは、<parameter>start_index</parameter>パラメータから
     外します。
    </para>
    <para>
     <example>
      <title><function>array_fill</function> の例</title>
      <programlisting role="php">
<![CDATA[
$a = array_fill(5, 6, 'banana');

/*
$a now has the following entries:

$a[5]  = "banana";
$a[6]  = "banana";
$a[7]  = "banana";
$a[8]  = "banana";
$a[9]  = "banana";
$a[10] = "banana";
*/
]]>
      </programlisting>
     </example>     
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.array-intersect">
   <refnamediv>
    <refname>array_intersect</refname>
    <refpurpose>配列の共通項を計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_intersect</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_intersect</function> は、他の全ての引数に存在する
     <parameter>array1</parameter>の値を全て有する配列を返します。
     キーと値の関係は維持されることに注意して下さい。
    </para>
    <para>
     <example>
      <title><function>array_intersect</function> の例</title>
      <programlisting role="php">
<![CDATA[
$array1 = array ("a" => "green", "red", "blue");
$array2 = array ("b" => "green", "yellow", "red");
$result = array_intersect ($array1, $array2);
]]>
      </programlisting>
     </example>
    </para>     
    <para>
     これにより、<varname>$result</varname> は
     <literal>array ("a" => "green", "red");</literal>となります。
    </para>
    <note>
     <simpara>
      二つの要素は、
      <literal>(string) $elem1 === (string) $elem2</literal>の場合のみ
      等しいとみなされます。言い換えると、文字列表現が同じ場合となります。
      <!-- TODO: example of it... -->
     </simpara>
    </note>
    <warning>
     <simpara>
      この関数はPHP 4.0.4では動作しません!
      <!-- TODO: when exactly was this broken?... -->
     </simpara>
    </warning>
    <para>
     <function>array_diff</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-key-exists">
   <refnamediv>
    <refname>array_key_exists</refname>
    <refpurpose>
     指定したキーまたは添字が配列にあるかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>array_key_exists</function></funcdef>
      <paramdef>mixed <parameter>key</parameter></paramdef>
      <paramdef>array <parameter>search</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定した<parameter>key</parameter>が配列に設定されている場合、
     <function>array_key_exists</function>は&true;を返します。
     <parameter>key</parameter>は配列添字として使用できる全ての
     値を使用可能です。
    </para>
    <para>
     <example>
      <title><function>array_key_exists</function>の例</title>
      <programlisting role="php">
<![CDATA[
$search_array = array("first" => 1, "second" => 4);
if (array_key_exists("first", $search_array)) {
    echo "The 'first' element is in the array";
}
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      この関数の名前は、PHPバージョン4.0.6では
      <function>key_exists</function>です。
     </simpara>
    </note>
    <para>
     <function>isset</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-keys">
   <refnamediv>
    <refname>array_keys</refname>
    <refpurpose>配列のキーをすべて返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_keys</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>search_value</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_keys</function>は、配列<parameter>input</parameter>から
     全てのキー(数値および文字列)を返します。
    </para>
    <para>
     オプション<parameter>search_value</parameter>が指定された場合、
     指定した値に関するキーのみが返されます。指定されない場合は、
     <parameter>input</parameter>から全てのキーが返されます。
    </para>
    <para>
     <example>
      <title><function>array_keys</function>の例</title>
      <programlisting role="php">
<![CDATA[
$array = array(0 => 100, "color" => "red");
array_keys($array);       // array(0, "color")を返します

$array = array ("blue", "red", "green", "blue", "blue");
array_keys ($array, "blue");  //  配列 (0, 3, 4) を返します

$array = array ("color" =&gt; array("blue", "red", "green"), "size" =&gt; array("small", "medium", "large"));
array_keys ($array);  //  配列("color", "size") を返します
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      この関数は、PHP 4で追加されました。以下は、まだPHP 3を使用してい
      る場合の実装です。
      <example>
       <title>
	PHP 3ユーザ用の<function>array_keys</function>の実装
       </title>
       <programlisting role="php">
<![CDATA[
function array_keys ($arr, $term="") {
    $t = array();
    while (list($k,$v) = each($arr)) {
        if ($term && $v != $term) {
            continue;
            $t[] = $k;
        }
    }
    return $t;
}
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     <function>array_values</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-map">
   <refnamediv>
    <refname>array_map</refname>
    <refpurpose>
     指定した配列の要素にコールバック関数を適用する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_map</function></funcdef>
      <paramdef>mixed <parameter>callback</parameter></paramdef>
      <paramdef>array <parameter>arr1</parameter></paramdef>
      <paramdef>array
       <parameter><optional>arr2...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_map</function> は、<parameter>arr1</parameter>の
     各要素にコールバック関数を適用した後、その全ての要素を含む要素を
     返します。コールバック関数が受け付けるパラメータの数は、
     <function>array_map</function>に渡される配列の数に一致している必
     要があります。
    </para>
    <para>
     <example>
      <title><function>array_map</function> の例</title>
      <programlisting role="php">
<![CDATA[
function cube($n) {
  	return $n*$n*$n;
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例により <varname>$b</varname>には、<literal>array (1, 8, 27,
     64, 125);</literal>が代入されます。
    </para>
    <para>
     <example>
      <title><function>array_map</function> - より多くの配列を使用</title>
      <programlisting role="php">
<![CDATA[
function show_Spanish($n, $m) {
  	return "The number $n is called $m in Spanish";
}

function map_Spanish($n, $m) {
   return array ($n => $m);
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("show_Spanish", $a, $b);

print_r($c);

// 出力:
// Array
// (
//     [0] => The number 1 is called uno in Spanish
//     [1] => The number 2 is called dos in Spanish
//     [2] => The number 3 is called tres in Spanish
//     [3] => The number 4 is called cuatro in Spanish
//     [4] => The number 5 is called cinco in Spanish
// )

$d = array_map("map_Spanish", $a , $b);

print_r($d);

// 出力:
// Array
// (
//     [0] => Array
//         (
//             [1] => uno
//         )
// 
//     [1] => Array
//         (
//             [2] => dos
//         )
// 
//     [2] => Array
//         (
//             [3] => tres
//         )
// 
//     [3] => Array
//         (
//             [4] => cuatro
//         )
// 
//     [4] => Array
//         (
//             [5] => cinco
//         )
// 
// )
]]>
      </programlisting>
     </example>
    </para>
    <para>
     通常、二つ以上の配列を使用する場合、それらの長さは等しい必要があ
     ります。これは、コールバック関数が対応する要素に対して並行して適
     用されるためです。配列の長さが等しくない場合、最も短い配列は空の
     要素で拡張されます。
    </para>
    <para>
     この関数の面白い使用方法として、配列の配列を構築するというものが
     あります。これは、コールバック関数の名前として
     &null;を使用することにより、簡単に実行できるもの
     です。
    </para>
    <para>
     <example>
      <title>配列の配列を作成する</title>
      <programlisting role="php">
<![CDATA[
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);

// 出力:
// Array
// (
//     [0] => Array
//         (
//             [0] => 1
//             [1] => one
//             [2] => uno
//         )
// 
//     [1] => Array
//         (
//             [0] => 2
//             [1] => two
//             [2] => dos
//         )
// 
//     [2] => Array
//         (
//             [0] => 3
//             [1] => three
//             [2] => tres
//         )
// 
//     [3] => Array
//         (
//             [0] => 4
//             [1] => four
//             [2] => cuatro
//         )
// 
//     [4] => Array
//         (
//             [0] => 5
//             [1] => five
//             [2] => cinco
//         )
// 
// )
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>array_filter</function>,
     <function>array_reduce</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-merge">
   <refnamediv>
    <refname>array_merge</refname>
    <refpurpose>二つ以上の配列をマージする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_merge</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_merge</function>は、前の配列の後ろに配列を追加することに
     より、二つ以上の配列の要素をマージし、得られた配列を返します。
    </para>
    <para>
     入力配列が同じキー文字列を有していた場合、そのキーに関する後に指定された
     値が、前の値を上書きします。しかし、配列が同じ添字番号を有していても
     値は加算されるため、このようなことは起きません。
    </para>
    <para>
     <example>
      <title><function>array_merge</function>の例</title>
      <programlisting role="php">
<![CDATA[
$array1 = array ("color" => "red", 2, 4);
$array2 = array ("a", "b", "color" => "green", "shape" => "trapezoid", 4);
$result = array_merge ($array1, $array2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     返される配列は、<literal>array("color" =&gt; "green", 2, 4,
      "a", "b", "shape" =&gt; "trapezoid", 4)</literal>となります。
    </para>
    <para>
     <function>array_merge_recursive</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-merge-recursive">
   <refnamediv>
    <refname>array_merge_recursive</refname>
    <refpurpose>二つ以上の配列を再帰的にマージする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_merge_recursive</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_merge_recursive</function>は、 二つ以上の配列の要
     素をマージし、前の配列の最後にもう一つの配列の値を追加します。
     マージした後の配列を返します。
    </para>
    <para>
     入力配列が同じ文字列のキーを有している場合、これらのキーの値は配
     列に一つのマージされます。これは再帰的に行われます。
     このため、値の一つが配列自体を指している場合、この関数は別の配列
     の対応するエントリもマージします。しかし、配列が同じ数値キーを有
     している場合、後の値は元の値を上書せず、追加されます。
    </para>
    <para>
     <example>
      <title><function>array_merge_recursive</function>の例</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("color" => array ("favorite" => "red"), 5);
$ar2 = array (10, "color" => array ("favorite" => "green", "blue"));
$result = array_merge_recursive ($ar1, $ar2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     返される配列は、<literal>array ("color" =&gt; array
      ("favorite" =&gt; array ("red", "green"), "blue"), 5, 10)</literal>
     となります。
    </para>
    <para>
     <function>array_merge</function>も参照下さい。
    </para>   
   </refsect1>
  </refentry>

  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>複数の多次元の配列をソートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>array_multisort</function></funcdef>
      <paramdef>array <parameter>ar1</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>arg</optional></parameter>
      </paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_multisort</function>は、複数の配列を一度に、また
     は、多次元の配列をその次元の一つでソートする際に使用可能です。
     この関数は、ソートの際にキーの相関を維持します。
    </para>
    <para>
     入力の配列は、あるテーブルのカラムで行をソートする処理が行われま
     す。これは、SQL ORDER BY構文と似ています。最初の配列はソートされ
     る最初の配列です。その配列の行が同じだった場合は、次の入力配列で
     ソートされるといったようになります。
    </para>
    <para>
     この関数の引数の構造は、やや一般的ではありませんが、柔軟なもので
     す。先頭の引数は、配列である必要があります。その後の各引数には、
     配列または次のリストにあるソート用フラグのどちらかを指定すること
     が可能です。
    </para>
    <para>
     ソート方法指定フラグ:
     <itemizedlist>
      <listitem>
       <simpara>SORT_ASC - 昇順にソート</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_DESC - 降順にソート</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     ソート型のフラグ:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - 普通に比較</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - 数値的に比較</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - 文字列として比較</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     各配列に同じ型のソート用フラグを二つ指定することは出来ません。
     ある引数配列に適用を指定されたソート用フラグが適用されるのは、そ
     の配列のみです。新しい配列引数を処理する前にデフォルトのSORT_ASC
     およびSORT_REGULARにリセットします。
    </para>
    <para>
     成功時に&true;、失敗した場合に&false;を返します。
    </para>
    <para>
     <example>
      <title>複数の配列をソートする</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例では、ソートの後で、最初の配列は、10,"a", 100, 100となりま
     す。2番目の配列は、1, 1, "2", 3を有します。最初の配列(100および
     100)の同じエントリに対応している2番目の配列のエントリは同時にソー
     トされます。
    </para>
    <para>
     <example>
      <title>多次元の配列をソートする</title>
      <programlisting role="php">
<![CDATA[
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING, 
                 $ar[1], SORT_NUMERIC, SORT_DESC);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例では、ソートされた後、最初の配列は10,100, 100, "a" (文字列
     として昇順でソートされています)を有しており、2番目の配列は、
     1, 3, "2", 1 (数値として降順にソートされています)となっています。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.array-pad">
   <refnamediv>
    <refname>array_pad</refname>
    <refpurpose>指定長、指定した値で配列を埋める</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_pad</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>pad_size</parameter></paramdef>
      <paramdef>mixed <parameter>pad_value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_pad</function>は、<parameter>pad_size</parameter>
     で指定した長?`け値<parameter>pad_value</parameter>をうめて
     <parameter>input</parameter>のコピーを返します。
     <parameter>pad_size</parameter>が正の場合、配列の右側が埋められます。
     負の場合、配列の左側が埋められます。
     <parameter>pad_size</parameter>の絶対値が
     <parameter>input</parameter>の長さ以下の場合、埋める処理は
     行われません。
    </para>
    <para>
     <example>
      <title><function>array_pad</function>の例</title>
      <programlisting role="php">
<![CDATA[
$input = array (12, 10, 9);
 
$result = array_pad ($input, 5, 0);
// 結果は、array(12, 10, 9, 0, 0) です。
 
$result = array_pad ($input, -7, -1);
// 結果は、array(-1, -1, -1, -1, 12, 10, 9) です。
 
$result = array_pad ($input, 2, "noop");
// 埋める処理は行われません。
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pop">
   <refnamediv>
    <refname>array_pop</refname>
    <refpurpose>配列の末尾から要素を取り除く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_pop</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_pop</function>は配列<parameter>array</parameter>
     の最後の値を取り出して返します。配列<parameter>array</parameter>
     は、要素一つ分短くなります。<parameter>array</parameter> が空の場
     合、(または、配列でない場合、)&null;が返されます。
    </para>
    <example>
     <title><function>array_pop</function>の例</title>
     <programlisting role="php">
<![CDATA[
$stack = array ("orange", "apple", "raspberry");
$fruit = array_pop ($stack);
]]>
     </programlisting>
    </example>
    <para>
     これにより、<varname>$stack</varname>要素は二つ("orange"および
     "apple")だけとなり、<varname>$fruit</varname>は"raspberry"となります。
    </para>
    &return.falseproblem;
    <para>
     <function>array_push</function>,<function>array_shift</function>, 
     <function>array_unshift</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-push">
   <refnamediv>
    <refname>array_push</refname>
    <refpurpose>一つ以上の要素を配列の最後に追加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_push</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_push</function>は、<parameter>array</parameter>
     をスタックとして処理し、渡された変数を
     <parameter>array</parameter>の最後に加えます。配列
     <parameter>array</parameter>の長さは渡された変数の数だけ増加します。
     各<parameter>var</parameter>毎に以下を繰り返すことと同じ効果があります。
     <programlisting role="php">
<![CDATA[
$array[] = $var;
]]>
     </programlisting>
     各<parameter>var</parameter>で繰り返されます。
    </para>
    <para>
     処理後の配列の中の要素の数を返します。
    </para>
    <para>
     <example>
      <title><function>array_push</function>の例</title>
      <programlisting role="php">
<![CDATA[
$stack = array (1, 2);
array_push ($stack, "+", 3);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の結果、<varname>$stack</varname>には、4つの要素1,2,"+",
     3があることになります。
    </para>
    <para>
     <function>array_pop</function>,<function>array_shift</function>, 
     <function>array_unshift</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-rand">
   <refnamediv>
    <refname>array_rand</refname>
    <refpurpose>配列から一つ以上の要素をランダムに取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>引数</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_rand</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int
       <parameter><optional>num_req</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_rand</function>は、配列から一つ以上のランダムなエ
     ントリを取得しようとする場合に有用です。この関数は、配列
     <parameter>input</parameter>およびオプションとして
     <parameter>num_req</parameter>を引数とします。この引数は、取得す
     るエントリの数を指定します。指定されない場合は、デフォルトの1にな
     ります。
    </para>
    <para>
     エントリを一つだけ取得する場合、<function>array_rand</function>は
     ランダムなエントリのキーを返します。その他の場合は、ランダムなエ
     ントリのキーの配列を返します。これにより、ランダムなキーを取得し、
     配列から値を取得することが可能になります。
    </para>
    <para>
     乱数生成器を初期化するために<function>srand</function>をコールす
     ることを忘れないで下さい。
    </para>
    <para>
     <example>
      <title><function>array_rand</function>の例</title>
      <programlisting role="php">
<![CDATA[
srand ((float) microtime() * 10000000);
$input = array ("Neo", "Morpheus", "Trinity", "Cypher", "Tank");
$rand_keys = array_rand ($input, 2);
print $input[$rand_keys[0]]."\n";
print $input[$rand_keys[1]]."\n";
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.array-reverse">
   <refnamediv>
    <refname>array_reverse</refname>
    <refpurpose>逆順にした配列を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_reverse</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>bool 
       <parameter><optional>preserve_keys</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_reverse</function>は、<parameter>array</parameter>
     を引数とし、要素の順番を逆にした新しい配列を返します。この際、
     <parameter>preserve_keys</parameter>が&true;の場
     合はキーが保持されます。
    </para>
    <para>
     <example>
      <title><function>array_reverse</function>の例</title>
     <programlisting role="php">
<![CDATA[
$input = array ("php", 4.0, array ("green", "red"));
$result = array_reverse ($input);
$result_keyed = array_reverse ($input, TRUE);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例において、<varname>$result</varname>は、<literal>array
     (array ("green", "red"), 4.0, "php")</literal>となります。しかし、
     <varname>$result2[0]</varname>はまだ<literal>"php"</literal>です。
    </para>
    <note>
     <para>
      2番目のパラメータは、PHP 4.0.3で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
 
  <refentry id="function.array-reduce">
   <refnamediv>
    <refname>array_reduce</refname>
    <refpurpose>
     コールバックを用いて配列を普通の値に変更することにより、配列を再
     帰的に減らします。
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_reduce</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>mixed <parameter>callback</parameter></paramdef>
      <paramdef>int
       <parameter><optional>initial</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_reduce</function>は、配列<parameter>input</parameter>
     の各要素に<parameter>callback</parameter>関数を繰り返し適用し、
     配列を一つの値に減らします。オプション<parameter>intial</parameter>
     が利用可能な場合、処理の最初で使用されたり、配列が空の場合の最終結果
     として使用されます。
    </para>
    <para>
     <example>
      <title><function>array_reduce</function>の例</title>
      <programlisting role="php">
<![CDATA[
function rsum($v, $w) {
    $v += $w;
    return $v;
}

function rmul($v, $w) {
    $v *= $w;
    return $v;
}

$a = array(1, 2, 3, 4, 5);
$x = array();
$b = array_reduce($a, "rsum");
$c = array_reduce($a, "rmul", 10);
$d = array_reduce($x, "rsum", 1);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     これにより、<varname>$b</varname>の値は<literal>15</literal>
     となり、<varname>$c</varname>の値は
     <literal>1200</literal> (= 1*2*3*4*5*10)、そして、
     <varname>$d</varname>の値は<literal>1</literal>となります。
    </para>
    <para>
     <function>array_filter</function>,
     <function>array_map</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-shift">
   <refnamediv>
    <refname>array_shift</refname>
    <refpurpose>配列の先頭から要素を一つ取り出す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_shift</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_shift</function>は、<parameter>array</parameter>
     の最初の値を取り出して返します。配列 <parameter>array</parameter>
     は、要素一つ分だけ短くなり、全ての要素は前にずれます。
     <parameter>array</parameter> が空の場合(または配列でない場合)、 
     &null;が返されます。
    </para>
    <para>
     <example>
      <title><function>array_shift</function>の例</title>
      <programlisting role="php">
<![CDATA[
$args = array ("-v", "-f");
$opt = array_shift ($args);
]]>
      </programlisting>
     </example>
     これにより、<varname>$args</varname>には一つの要素"-f"が残り、
     <varname>$opt</varname>は"-v"となります。
    </para>
    <para>
     <function>array_unshift</function>,
     <function>array_push</function>, 
     <function>array_pop</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-slice">
   <refnamediv>
    <refname>array_slice</refname>
    <refpurpose>配列を要素を展開する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_slice</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int
       <parameter><optional>length</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_slice</function>は、<parameter>array</parameter>
     からパラメータ <parameter>offset</parameter>および 
     <parameter>length</parameter>で指定された連続する要素を返します。
    </para>
    <para>
     <parameter>offset</parameter>が正の場合、要素位置の計算は、
     配列<parameter>array</parameter>のoffsetから始められます。
     <parameter>offset</parameter>が負の場合、要素位置の計算は
     <parameter>array</parameter>の最後から行われます。
    </para>
    <para>
     <parameter>length</parameter>が指定され、正の場合、
     連続する複数の要素が返されます。<parameter>length</parameter>が
     指定され、負の場合、配列の末尾から連続する複数の要素が返されます。
     省略された場合、 <parameter>offset</parameter>から配列の最後まで
     の全ての要素が返されます。
    </para>
    <para>
     <example>
      <title><function>array_slice</function>の例</title>
      <programlisting role="php">
<![CDATA[
$input = array ("a", "b", "c", "d", "e");

$output = array_slice ($input, 2);      // "c", "d", "e"を返します
$output = array_slice ($input, 2, -1);  // "c", "d"を返します
$output = array_slice ($input, -2, 1);  // "d"を返します
$output = array_slice ($input, 0, 3);   // "a", "b", "c"を返します
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>array_splice</function>も参照下さい。
    </para>     
   </refsect1>
  </refentry>

  <refentry id="function.array-splice">
   <refnamediv>
    <refname>array_splice</refname>
    <refpurpose>配列の一部を削除し、他の要素で置換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_splice</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int
       <parameter><optional>length</optional></parameter>
      </paramdef>
      <paramdef>array
       <parameter><optional>replacement</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_splice</function>は、配列<parameter>input</parameter>
     から<parameter>offset</parameter>および<parameter>length</parameter>で
     指定された要素を削除し、配列<parameter>replacement</parameter>が
     指定されたこの要素で置換します。
    </para>
    <para>
     <parameter>offset</parameter>が正の場合、削除される部分は
     配列<parameter>input</parameter>の最初から指定オフセットの位置
     からとなります。
     <parameter>offset</parameter>が負の場合、削除される部分は、
     <parameter>input</parameter>の末尾から数えた位置からとなります。
    </para>
    <para>
     <parameter>length</parameter>が省略された場合、
     <parameter>offset</parameter>から配列の最後までが全て削除されます。
     <parameter>length</parameter>が指定され、正の場合、複数の要素が
     削除されます。
     <parameter>length</parameter>が指定され、負の場合、削除される
     部分は配列の末尾から複数の要素となります。
     ヒント: <parameter>replacement</parameter>も指定した場合に
     <parameter>offset</parameter>から配列の最後まで全てを削除するには、
     <parameter>length</parameter>を求めるために<literal>count($input)
     </literal>を使用して下さい。
    </para>
    <para>
     配列<parameter>replacement</parameter>が指定された場合、
     削除された要素は、この配列の要素で置換されます。
     <parameter>offset</parameter>および<parameter>length</parameter>で
     何も削除しないと指定した場合、配列<parameter>replacement</parameter>の
     要素は<parameter>offset</parameter>で指定された位置に挿入されます。
     ヒント:replacementに一つしか要素がない場合、要素そのものが配列で
     ない限り、<literal>array()</literal>で括る必要はありません。
    </para>
    <para>
     以下は等価となります。
     <programlisting role="php">
<![CDATA[
array_push($input, $x, $y)     array_splice($input, count($input), 0, array($x, $y))
array_pop($input)              array_splice($input, -1)
array_shift($input)            array_splice($input, 0, 1)
array_unshift($input, $x, $y)  array_splice($input, 0, 0, array($x, $y))
$a[$x] = $y                    array_splice($input, $x, 1, $y)
]]>
     </programlisting>
    </para>
    <para>
     削除された要素からなる配列を返します。
    </para>
    <para>
     <example>
      <title><function>array_splice</function>の例</title>
      <programlisting role="php">
<![CDATA[
$input = array ("red", "green", "blue", "yellow");
array_splice ($input, 2);      
// $input is now array ("red", "green")

$input = array ("red", "green", "blue", "yellow");
array_splice ($input, 1, -1);  
// $input is now array ("red", "yellow")

$input = array ("red", "green", "blue", "yellow");
array_splice ($input, 1, count($input), "orange");  
// $input is now array ("red", "orange")

$input = array ("red", "green", "blue", "yellow");
array_splice ($input, -1, 1, array("black", "maroon")); 
// $input is now array ("red", "green", 
//          "blue", "black", "maroon")
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>array_slice</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-sum">
   <refnamediv>
    <refname>array_sum</refname>
    <refpurpose>
     配列の中の値の合計を計算する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_sum</function></funcdef>
      <paramdef>array <parameter>arr</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_sum</function> は、配列の中の値の合計を整数または
     floatとして返します。
    </para>
    <para>
     <example>
      <title><function>array_sum</function> の例</title>
      <programlisting role="php">
<![CDATA[
$a = array(2,4,6,8);
echo "sum(a) = ".array_sum($a)."\n";
// 出力: sum(a) = 20

$b = array("a"=>1.2,"b"=>2.3,"c"=>3.4);
echo "sum(b) = ".array_sum($b)."\n";
// 出力: sum(b) = 6.9
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      4.0.6より前のバージョンのPHPは、渡された配列自体を修正し、文字列を
      数値(これは値にもよるが多くの場合ゼロとなります)に変換していました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.array-unique">
   <refnamediv>
    <refname>array_unique</refname>
    <refpurpose>配列から重複した値を削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_unique</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unique</function> は、
     <parameter>array</parameter>を入力とし、値に重複のない新規配列を
     返します。
    </para>
    <para>
     キーは保持されることに注意して下さい。
     <function>array_unique</function>は各値に関する最初のキーを保持し、
     残りのキーを全て無視します。
    </para>
    <note>
     <simpara>
      <literal>(string) $elem1 === (string) $elem2</literal>の場合のみ
      二つの要素は等しいとみなされます。言い換えると、文字列表現が
      同じ場合となります。
      <!-- TODO: example of it... -->
     </simpara>
     <simpara>
      最初の要素が使用されます。
     </simpara>
    </note>
    <warning>
     <simpara>
      この関数は、PHP 4.0.4では使用できません!
      <!-- TODO: when exactly was this broken?... -->
     </simpara>
    </warning>
    <para>
     <example>
      <title><function>array_unique</function> の例</title>
      <programlisting role="php">
<![CDATA[
$input = array ("a" => "green", "red", "b" => "green", "blue", "red");
$result = array_unique ($input);
print_r($result);
// 出力は次のようになります :
//Array
//(
//    [a] => green
//    [0] => red
//    [1] => blue
//)
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>array_unique</function>と型</title>
      <programlisting role="php">
<![CDATA[
$input = array (4,"4","3",4,3,"3");
$result = array_unique ($input);
var_dump($result);

/* 出力:
array(2) {
   [0]=>
   int(4)
   [1]=>
   string(1) "3"
}
*/
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-unshift">
   <refnamediv>
    <refname>array_unshift</refname>
    <refpurpose> 一つ以上の要素を配列の最初に加える </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_unshift</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unshift</function>は、<parameter>array</parameter>
     の先頭に指定された要素を加えます。リストの要素は全体として加えられるため、
     加えられた要素の順番は変わらないことに注意してください。
    </para>
    <para>
     処理後の<parameter>array</parameter>の要素の数を返します。
    </para>
    <para>
     <example>
      <title><function>array_unshift</function>の例</title>
      <programlisting role="php">
<![CDATA[
$queue = array ("p1", "p3");
array_unshift ($queue, "p4", "p5", "p6");
]]>
      </programlisting>
     </example>
     この例により、<varname>$queue</varname>の要素は次の5つとなります。
     : "p4", "p5", "p6", "p1", "p3" 
    </para>
    <para>
     <function>array_shift</function>,
     <function>array_push</function>, 
     <function>array_pop</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-values">
   <refnamediv>
    <refname>array_values</refname>
    <refpurpose>配列の全ての値を返す</refpurpose>
    </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_values</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_values</function>は、配列<parameter>input</parameter> 
     から全ての値を返します。
    </para>
    <para>
     <example>
      <title><function>array_values</function>の例</title>
      <programlisting role="php">
<![CDATA[
$array = array("size" => "XL", "color" => "gold");
array_values($array);    // array("XL", "gold")を返します
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0で追加されました。以下の実装はPHP 3でも
      使用することが可能です。
      <example>
       <title>
        PHP 3ユーザ用の<function>array_values</function>の実装
       </title>
       <programlisting role="php">
<![CDATA[
function array_values ($arr) {
    $t = array();
    while (list($k, $v) = each ($arr)) {
        $t[] = $v;
    }
    return $t;
}
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     <function>array_keys</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.array-walk">
   <refnamediv>
    <refname>array_walk</refname>
    <refpurpose>
     配列の各メンバーにユーザー関数を適用する。
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_walk</function></funcdef>
      <paramdef>array <parameter>arr</parameter></paramdef>
      <paramdef>string <parameter>func</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>userdata</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>arr</parameter>の各要素に<parameter>func</parameter> 
     という名前のユーザ定義関数を適用します。
     <parameter>func</parameter>には、配列の値が最初の引数として
     渡され、配列のキーが2番目のパラメータとして渡されます。
     <parameter>userdata</parameter>が指定された場合、3番目の引数として
     ユーザー関数に渡されます。<parameter>func</parameter>はユーザ定義の
     関数である必要があり、ネーティブなPHP関数は使用できません。
     つまり、<function>array_walk</function>を直接
     <function>str2lower</function>と組み合わせることて使用することは
     できません。まず、この関数を用いてユーザ定義関数を構築し、その関数
     を引数として渡す必要があります。
    </simpara>
    &note.func-callback;
    <simpara>
     <parameter>func</parameter>が2つまたは3つを超える引数を必要とする場合、
     <parameter>userdata</parameter>の指定によっては、
     <function>array_walk</function>が<parameter>func</parameter>
     をコールする度に警告が生成されます。これらの警告は、
     <function>array_walk</function>の前に'@'マークを付けるか
     <function>error_reporting</function>を使用することにより
      抑制されます。
    </simpara>
    <note>
     <para>
      <parameter>func</parameter>により配列の値そのものを変更する必要
      がある場合、<parameter>func</parameter>の最初の引数は参照として
      渡す必要があります。この場合、配列の要素に加えた変更は、配列自体
      に対して行われます。
     </para>
     <para>
      <parameter>func</parameter>の中から配列を修正すると予測できない
      動作を引き起こす可能性があります。
     </para>
    </note>
    <note>
     <para>
      キー及びuserdataを<parameter>func</parameter>に渡す処理は、
      バージョン4.0で追加されました。
     </para>
     <para>
      PHP 4では、<function>array_walk</function>で配列のリセットがデフォ
      ルトで行われないため、<function>reset</function>をコールする必要
      があります。
     </para>
    </note>
    <para>
     <example>
      <title><function>array_walk</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fruits = array ("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");

function test_alter (&$item1, $key, $prefix) {
    $item1 = "$prefix: $item1";
}

function test_print ($item2, $key) {
    echo "$key. $item2<br>\n";
}

array_walk ($fruits, 'test_print');
reset ($fruits);
array_walk ($fruits, 'test_alter', 'fruit');
reset ($fruits);
array_walk ($fruits, 'test_print');
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>each</function>および<function>list</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.arsort">
   <refnamediv>
    <refname>arsort</refname>
    <refpurpose>
     連想キーと要素との関係を維持しつつ配列を逆順にソートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>arsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、連想配列において各配列のキーと要素との関係を維持しつ
     つソートを行います。この関数は、主に実際の要素の並び方が重要であ
     る連想配列をソートするために使われます。
    </para>
    <example>
     <title><function>arsort</function>の例</title>
     <programlisting role="php">
<![CDATA[
$fruits = array ("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
arsort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
 echo "$key = $val\n";
}
]]>
     </programlisting>
     <para>
      この例は、以下のように出力されます。
      <screen>
<![CDATA[
a = orange
d = lemon
b = banana
c = apple
]]>
      </screen>
     </para>
    </example>
    <para>
     fruitsはアルファベットの逆順にソートされ、各要素とキーとの関係は
     維持されます。
    </para>
    <para>
     オプションのパラメータ<parameter>sort_flags</parameter>によりソー
     トの動作を修正可能です。詳細については、<function>sort</function>
     を参照下さい。
    </para>
    <para>
     <function>asort</function>, <function>rsort</function>,
     <function>ksort</function>, <function>sort</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.asort">
   <refnamediv>
    <refname>asort</refname>
    <refpurpose>
     連想キーと要素との関係を維持しつつ配列をソートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>asort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、連想配列において各配列のキーと要素との関係を維持しつ
     つ配列をソートします。この関数は、主に実際の要素の並び方が重要で
     ある連想配列をソートするために使われます。
    </para>
    <example>
     <title><function>asort</function>の例</title>
     <programlisting role="php">
<![CDATA[
$fruits = array ("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
asort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key = $val\n";
}
]]>
     </programlisting>
     <para>
      この例は、以下のように出力されます。
      <screen>
<![CDATA[
c = apple
b = banana
d = lemon
a = orange
]]>
      </screen>
     </para>
    </example>
    <para>
     fruitsはアルファベットの昇順にソートされ、各要素とキーとの関係は
     維持されます。
    </para>
    <para>
     オプションのパラメータ<parameter>sort_flags</parameter>によりソー
     トの動作を修正可能です。詳細については、<function>sort</function>
     を参照下さい。
    </para>
    <para>
     <function>arsort</function>, <function>rsort</function>,
     <function>ksort</function>,  <function>sort</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.compact">
   <refnamediv>
    <refname>compact</refname>
    <refpurpose>
     変数名とその値から配列を作成する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>compact</function></funcdef>
      <paramdef>mixed <parameter>varname</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>compact</function>がとるパラメータの数は可変です。
     各パラメータは、変数名を値とする文字列か、変数名の配列のどちらかとする
     ことができます。配列は、変数名を値とする別の配列を持つことができます。
     <function>compact</function>はこれを再帰的に処理します。
    </para>
    <para>
     各引数について、<function>compact</function>は現在のシンボルテーブル
     においてその名前を有する変数を探し、変数名がキー、変数の値がそのキー
     に関する値となるように追加します。
     端的に言うと、<function>extract</function>の逆の動作をします。
     追加された全ての変数を値とする出力配列を返します。
    </para>
    <para>
     設定されていない全ての文字列は、単にスキップされます。
    </para>
    <para>
     <example>
      <title><function>compact</function>の例</title>
      <programlisting role="php">
<![CDATA[
$city = "San Francisco";
$state = "CA";
$event = "SIGGRAPH";

$location_vars = array ("city", "state");

$result = compact ("event", "nothing_here", $location_vars);
]]>
      </programlisting>
      <para>
       この例により、<varname>$result</varname>は、
       <literal>array
       ("event" =&gt; "SIGGRAPH", "city" =&gt; "San Francisco",
        "state" =&gt; "CA")</literal>となります。
      </para>
     </example>
    </para>
    <para>
     <function>extract</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count">
   <refnamediv>
    <refname>count</refname>
    <refpurpose>変数に含まれる要素の数を数える</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>count</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>var</parameter>に含まれる要素の数を返します。
     通常、<parameter>var</parameter>は配列です（他のものには、1つの要素しか
     ありませんから）。
    </para>
    <para>
     変数が配列でない場合は<literal>1</literal>を返します。
     (例外: <literal>count(&null;)</literal> は<literal>0</literal>と等価)
    </para>
    <warning>
     <para>
      <function>count</function>は、セットされていない変数に関して0を返
      しますが、変数が空の配列として初期化されている場合にも0を返します。
      ある変数がセットされているかどうかを調べるには、
      <function>isset</function>を使用してください。
     </para>
    </warning>
    <para>
     配列の実装やPHPでの使用法に関する詳細な説明についてはマニュアルの
     <link linkend="language.types.array">配列</link>のセクションを
     参照下さい。
    </para>
    <para>
     <example>
      <title><function>count</function> の例</title>
      <programlisting role="php">
      <!-- TODO: examples about count(null), count(false), count(object).. -->
<![CDATA[
$a[0] = 1; 
$a[1] = 3; 
$a[2] = 5; 
$result = count ($a);
// $result == 3

$b[0] = 7;
$b[5] = 9;
$b[10] = 11;
$result = count ($b);
// $result == 3;
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <function>sizeof</function>関数は、<function>count</function>
      へのエイリアスです。
     </para>
    </note>
    <para>
     <function>is_array</function>, <function>isset</function>,
     <function>strlen</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.current">
   <refnamediv>
    <refname>current</refname>
    <refpurpose>配列内のカレントの要素を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>current</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     各配列は、"カレント"の要素へのポインタを有しています。
     このポインタは、その配列の最初の要素を指すように初期化されます。
    </para>
    <para>
     <function>current</function>関数は、単に内部ポインタが現在
     指している配列要素を返します。この関数は、ポインタを全く移動
     しません。内部ポインタが最終要素の次を指していた場合、
     <function>current</function>は&false;を返します。
     <warning>
      <para> 
       配列中に空の要素(0または空の文字列"")がある場合、この関数はこれ
       らの要素について&false;を返します。現在の要素が値0または配列の終
       わりを通過したのかを決定することができないのです。配列を正しく
       順番に処理するには、<function>each</function>を使用して下さい。
      </para>
     </warning>
    </para>
    <para>
     <function>end</function>, <function>next</function>,
     <function>prev</function>, <function>reset</function>も
     参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.each">
   <refnamediv>
    <refname>each</refname>
    <refpurpose>
     配列から、次のキーと値のペアを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>each</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     配列<parameter>array</parameter>から、次のキーと値のペアを返し、
     配列カーソルを進めます。このペアは、4つの要素を持つ配列で、
     それぞれの要素は<emphasis>0</emphasis>,<emphasis>1</emphasis>,
     <emphasis>key</emphasis>,<emphasis>value</emphasis>というキーを有
     しています。要素 <emphasis>0</emphasis>と<emphasis>key</emphasis>
     の各々は配列要素のキー名称を保持しており、<emphasis>1</emphasis>
     と<emphasis>value</emphasis>の各々はそのデータを保持しています。
    </para>
    <para>
     配列の内部ポインタが、配列の最終要素以降を指す場合、
     <function>each</function>は&false;を返します。
    </para>
    <para>
     <example>
      <title><function>each</function>の例</title>
      <programlisting role="php">
<![CDATA[
$foo = array ("bob", "fred", "jussi", "jouni", "egon", "marliese");
$bar = each ($foo);
]]>
      </programlisting>
      <para>
       <literal>$bar</literal>は、ここでは以下のキー/値のペアを保持し
       ています。
       <itemizedlist spacing="compact">
        <listitem><simpara>0 =&gt; 0</simpara></listitem>
        <listitem><simpara>1 =&gt; 'bob'</simpara></listitem>
        <listitem><simpara>key =&gt; 0</simpara></listitem>
        <listitem><simpara>value =&gt; 'bob'</simpara></listitem>
       </itemizedlist>
       <programlisting role="php">
<![CDATA[
$foo = array ("Robert" => "Bob", "Seppo" => "Sepi");
$bar = each ($foo);
]]>
       </programlisting>
      </para>
      <para>
       <literal>$bar</literal>は、この時点で以下のキー/値のペアを保持
       しています。
       <itemizedlist spacing="compact">
        <listitem><simpara>0 =&gt; 'Robert'</simpara></listitem>
        <listitem><simpara>1 =&gt; 'Bob'</simpara></listitem>
        <listitem><simpara>key =&gt; 'Robert'</simpara></listitem>
        <listitem><simpara>value =&gt; 'Bob'</simpara></listitem>
       </itemizedlist>
      </para>
     </example>
    </para>
    <para>
     通常<function>each</function>は、配列の走査をす?_っk
     <function>list</function>と共に使用されます。例えば、
     $HTTP_POST_VARSの場合は次のようになります。
     <example>
      <title>
       <function>each</function>により$HTTP_POST_VARSを走査する
      </title>
      <programlisting role="php">
<![CDATA[
echo "POSTメソッドにより受け渡された値：<br>";
reset ($HTTP_POST_VARS);
while (list ($key, $val) = each ($HTTP_POST_VARS)) {
   echo "$key => $val<br>";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>each</function>を実行した後、配列カーソルは、
     配列の次の要素に移動します。配列の最終要素にカーソルがある場合は、
     最終要素にとどまります。eachを使用して配列を走査するには、
     <function>reset</function>を使用する必要があります。
    </para>
    <para>
     <function>key</function>、<function>list</function>、
     <function>current</function>、<function>reset</function>、
     <function>next</function>、<function>prev</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.end">
   <refnamediv>
    <refname>end</refname>
    <refpurpose>
     配列の内部ポインタを最終要素にセットする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>end</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>end</function>は<parameter>array</parameter>の内部ポイ
     ンタを最後の要素まで進め、その要素を返します。
    </para>
    <para>
     <function>current</function>, <function>each</function>, 
     <function>next</function> , 
     <function>reset</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     配列からシンボルテーブルに変数をインポートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>extract</function></funcdef>
      <paramdef>array <parameter>var_array</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>extract_type</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>prefix</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、配列から現在のシンボルテーブルに変数をインポートする
     ために使用されます。この関数は連想配列<parameter>var_array</parameter>
     を引数とし、そのキーを変数名、値を変数の値として処理します。
     各キー/値の組に関して、<parameter>extract_type</parameter>および
     <parameter>prefix</parameter>パラメータに基づき現在のシンボルテー
     ブルに変数を一つ作成します。
    </para>
    <note>
     <para>
      バージョン4.0.5以降、この関数は展開された変数の数を返します。
     </para>
    </note>
    <para>
     <function>extract</function>は、各キーについて変数名として有効で
     あるかどうか、そして、シンボルテーブルの既存の変数と衝突しないか
     どうかを確認します。無効または数値キーおよび衝突に関する対処法は、
     <parameter>extract_type</parameter>で定義されます。これは以下の値
     のどれかとなります。
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
	<simpara>
	 衝突があった場合、存在する変数が上書きされます。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
	<simpara>
	 衝突があった場合、存在する変数は上書きされません。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
	<simpara>
	 衝突があった場合、<parameter>prefix</parameter>を前につけた
	 新しい変数となります。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
	<simpara>
	 全ての変数の前に<parameter>prefix</parameter>を付けます。PHP
	 4.0.5以降、接頭辞を数値とすることも可能です。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_INVALID</term>
       <listitem>
        <simpara>
	 無効または数値の変数名のみに接頭辞
         <parameter>prefix</parameter> を付ける。このフラグは、PHP
         4.0.5 で追加されました。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <parameter>extract_type</parameter>が指定されない場合、EXTR_OVERWRITE 
     が仮定されます。
    </para>
    <para>
     <parameter>prefix</parameter>は、
     <parameter>extract_type</parameter>がEXTR_PREFIX_SAME、
     EXTR_PREFIX_ALL、EXTR_PREFIX_INVALID の場合にのみ必要であることに
     注意して下さい。接頭辞を付けた変数名が有効な変数名でない場合、こ
     の変数はシンボルテーブルにインポートされません。
    </para>
    <para>
     <function>extract</function>は、各キーが有効な変数名からなるかど
     うかを確認し、有効な変数名である場合のみインポート処理を行います。
    </para>
    <para>
     extractの使用例としては、シンボルテーブルに
     <function>wddx_deserialize</function>から返された連想配列を
      インポートすることが考えられます。
    </para>
    <para>
     <example>
      <title><function>extract</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php

/* $var_array はwddx_deserializeから返された配列と仮定します
 */
$size = "large";
$var_array = array ("color" => "blue",
                    "size"  => "medium",
                    "shape" => "sphere");
extract ($var_array, EXTR_PREFIX_SAME, "wddx");
 
print "$color, $size, $shape, $wddx_size\n";
 
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     上記の例の結果は以下となります。
     <programlisting>
<![CDATA[
blue, large, sphere, medium
]]>
     </programlisting>
    </para>
    <para>
     EXTR_PREFIX_SAMEを指定したため、<varname>$size</varname>は上書き
     されず、<varname>$wddx_size</varname>が作成されます。
     EXTR_SKIPが指定された場合、$wddx_sizeは作成されません。EXTR_OVERWRITE
     の場合は、<varname>$size</varname>の値は"medium"となります。
     EXTR_PREFIX_ALLの場合は新規の変数<varname>$wddx_color</varname>,
     <varname>$wddx_size</varname>, <varname>$wddx_shape</varname>
     が作成されます。
    </para>
    <para>
     連想配列を使用する必要があり、数値添字の配列には結果は出力されま
     せん。
    </para>
    <para>
     <function>compact</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.in-array">
   <refnamediv>
    <refname>in_array</refname>
    <refpurpose>配列に値がある場合に&true;を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>in_array</function></funcdef>
      <paramdef>mixed <parameter>needle</parameter></paramdef>
      <paramdef>array <parameter>haystack</parameter></paramdef>
      <paramdef>bool 
       <parameter><optional>strict</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>haystack</parameter>で
     <parameter>needle</parameter>を検索し、配列にそれがあった場合に
     &true;、それ以外の場合は、&false;を返します。
    </para>
    <para>
     3番目のパラメータ<parameter>strict</parameter>が
     &true;に設定された場合、
     <function>in_array</function>は、<parameter>haystack</parameter>
     の中の <parameter>needle</parameter>の型も確認します。
    </para>
    <note>
     <para>
      <parameter>needle</parameter>が文字列の場合、比較の際に大文字小文字
      は区別されます。
     </para>
    </note>
    <para>
     <example>
      <title><function>in_array</function>の例</title>
      <programlisting role="php">
<![CDATA[
$os = array ("Mac", "NT", "Irix", "Linux");
if (in_array ("Irix", $os)) {
    print "Got Irix";
}
if (in_array ("mac", $os)) { # in_array()は大文字小文字を区別するため失敗
    print "Got mac";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>strictを指定した<function>in_array</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, TRUE))
    echo "'12.4' found with strict check\n";
if (in_array(1.13, $a, TRUE))
    echo "1.13 found with strict check\n";
?>

// 以下のような出力となります。

1.13 found with strict check
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>array_search</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-search">
   <refnamediv>
    <refname>array_search</refname>
    <refpurpose>
     指定した値を配列で検索し、見付かった場合に対応するキーを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_search</function></funcdef>
      <paramdef>mixed <parameter>needle</parameter></paramdef>
      <paramdef>array <parameter>haystack</parameter></paramdef>
      <paramdef>bool 
       <parameter><optional>strict</optional></parameter>
      </paramdef>    
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>haystack</parameter>において
     <parameter>needle</parameter>を検索し、配列中に見付かった場合にそ
     のキーを返します。そうでない場合に&false;を返します。
    </para>
    <para>
     3番目のパラメータ<parameter>strict</parameter>が
     &true;に設定された場合、
     <function>array_search</function>は
     <parameter>haystack</parameter>の中にある
     <parameter>needle</parameter>の型も確認します。
    </para>
    &return.falseproblem;
    <para>
     <function>in_array</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.key">
   <refnamediv>
    <refname>key</refname>
    <refpurpose>連想配列からキーを取り出す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>key</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>key</function>は、現在の配列位置における連想配列要素の
     キーを返します。
    </para>
    <para>
     <function>current</function>,
     <function>next</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.krsort">
   <refnamediv>
    <refname>krsort</refname>
    <refpurpose>配列をキーで逆順にソートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>krsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sort_flags</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     配列をキーにより逆順にソートします。キーとデータとの関係は維持されます。
     この関数は主に連想配列の場合に有用です。
     <example>
      <title><function>krsort</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fruits = array ("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
krsort ($fruits);
reset($fruits);
while(list($key,$val)=each($fruits)) {
 echo "$key -> $val\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の出力は次のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
d = lemon
c = apple
b = banana
a = orange
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     オプションのパラメータ<parameter>sort_flags</parameter>によりソー
     トの動作を修正可能です。詳細については、<function>sort</function>
     を参照下さい。
    </para>
    <simpara>
     <function>asort</function>, <function>arsort</function>, 
     <function>ksort</function>, <function>sort</function>, 
     <function>natsort</function>, <function>rsort</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ksort">
   <refnamediv>
    <refname>ksort</refname>
    <refpurpose>配列をキーでソートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ksort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sort_flags</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     キーとデータの関係を維持しつつ、配列をキーでソートします。
     この関数は、主として連想配列において有用です。
    <example>
      <title><function>ksort</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fruits = array ("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
ksort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key = $val\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例では以下のように出力が行われます。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
a = orange
b = banana
c = apple
d = lemon
]]>
      </programlisting>
     </informalexample>     
    </para>
    <para>
     オプションのパラメータ<parameter>sort_flags</parameter>によりソー
     トの動作を修正可能です。詳細については、<function>sort</function>
     を参照下さい。
    </para>
    <simpara>
     <function>asort</function>, <function>arsort</function>, 
     <function>sort</function>,  <function>natsort</function>,
     <function>rsort</function> も参照下さい。
    </simpara>
    <note>
     <para>
      2番目のパラメータは、PHP 4で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.list">
   <refnamediv>
    <refname>list</refname>
    <refpurpose>
     配列と同様の形式で、複数の変数への代入を行います
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>list</function></funcdef>
      <varargs/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array</function> と同様に、この関数は実際には関数
     ではなく言語の構成要素です。<function>list</function>は、
     単一の操作で一連の変数に値を割り当てるために使われます。
     <example>
      <title><function>list</function>の例</title>
      <programlisting role="php">
<![CDATA[
<table>
 <tr>
  <th>社員名</th>
  <th>給料</th>
 </tr>

<?php

$result = mysql_query ("SELECT id, name, salary FROM employees",$conn);
while (list ($id, $name, $salary) = mysql_fetch_row ($result)) {
    print (" <tr>\n".
           "  <td><a href=\"info.php3?id=$id\">$name</a></td>\n".
           "  <td>$salary</td>\n".
           " </tr>\n");
}

?>

</table>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>each</function>,<function>array</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.natsort">
   <refnamediv>
    <refname>natsort</refname>
    <refpurpose>
     "自然順"アルゴリズムで配列をソートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>natsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、人間が行うような手法でアルファベットまたは数字の文字
     列の順番をソートします。これは、"自然順(natural ordering)"と呼ば
     れているものです。このアルゴリズムと(<function>sort</function>を
     用いた)通常のコンピュータ文字列ソートアルゴリズムの違いを示す例を
     以下に示します。
    </para>
    <para>
     <example>
      <title><function>natsort</function>の例</title>
      <programlisting role="php">
<![CDATA[
$array1 = $array2 = array ("img12.png", "img10.png", "img2.png", "img1.png");
 
sort($array1);
echo "Standard sorting\n";
print_r($array1);

natsort($array2);
echo "\nNatural order sorting\n";
print_r($array2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     上記のコードの出力は次のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
Standard sorting
Array
(
    [0] => img1.png
    [1] => img10.png
    [2] => img12.png
    [3] => img2.png
)

Natural order sorting
Array
(
    [3] => img1.png
    [2] => img2.png
    [1] => img10.png
    [0] => img12.png
)
]]>
      </programlisting>
     </informalexample>
     より詳細な情報については、Martin Poolの<ulink
     url="&url.strnatcmp;">Natural Order String Comparison</ulink>
     ページを参照下さい。
    </para>
    <para>
     <function>natcasesort</function>,<function>strnatcmp</function>,
     <function>strnatcasecmp</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.natcasesort">
   <refnamediv>
    <refname>natcasesort</refname>
    <refpurpose>
     大文字小文字を区別しない"自然順"アルゴリズムを用いて配列をソートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>natcasesort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、人間が行うような手法でアルファベットまたは数字の文字
     列の順番をソートします。これは、"自然順(natural ordering)"と呼ば
     れているものです。
    </para>
    <para>
     <function>natcasesort</function> は、大文字小文字を区別しないバー
     ジョンの<function>natsort</function>です。このアルゴリズムと通常
     のコンピュータ文字列ソートアルゴリズムの違いの例については、
     <function>natsort</function>を参照下さい。
    </para>
    <para>
     より詳細な情報については、Martin Poolの<ulink
     url="&url.strnatcmp;">Natural Order String Comparison</ulink>
     ページを参照下さい。
    </para>
    <para>
     <function>sort</function>,<function>natsort</function>,
     <function>strnatcmp</function>,<function>strnatcasecmp</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.next">
   <refnamediv>
    <refname>next</refname>
    <refpurpose>
     内部配列ポインタを進める
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>next</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     内部配列ポインタが次の場所を指すようにし、(ポインタ移動後の)
     その配列の要素を返します。それ以上要素がない場合は
     &false;を返します。
    </para>
    <para>
     <function>next</function>は、1つの違いを除いて<function>
      current</function>と同じです。<function>next</function> は
     要素を返す前に内部配列ポインタを 1 つ先に進めます。つまり、
     次の配列要素を返すとともに内部配列ポインタを 1 つ進めるという
     ことです。もし内部配列ポインタを 1 つ進めた結果、要素リストの
     最後の先まで行ってしまった場合、<function>next</function>は
     &false;を返します。
     <warning>
      <para>
       配列に空の要素、または、値0をキーとする要素がある場合、この関数
       は、これらの要素に関して&false;を返します。空
       の要素または値0をキーとする要素がある配列を適切に順処理するには、
       <function>each</function>関数を参照下さい。
      </para>
     </warning>
    </para>
    <para>
     <function>current</function>,<function>end</function>,
     <function>prev</function>,<function>reset</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pos">
   <refnamediv>
    <refname>pos</refname>
    <refpurpose>配列から現在の要素を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>pos</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     これは<function>current</function>の別名です。
    </simpara>
    <para>
     <function>end</function>, <function>next</function>,
     <function>prev</function>, <function>reset</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.prev">
   <refnamediv>
    <refname>prev</refname>
    <refpurpose>内部の配列ポインタを1つ前に戻す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>prev</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     内部の配列ポインタが指している前の場所の配列要素を返します。
     もう要素がない場合は&false;を返します。
     <warning>
      <para>
       配列に空の要素がある場合、この関数はこれらの要素に関して
       &false;を返します。空の要素がある配列を適切に順処理するには、
       <function>each</function>関数を参照下さい。
      </para>
    </warning>
    </para>
    <para>  
     <function>prev</function>は、内部の配列ポインタを1つ前に
     戻すことを除けば<function>next</function>と同じです。
    </para>
    <para>
     <function>current</function>, <function>end</function>,
     <function>next</function>, <function>reset</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.range">
   <refnamediv>
    <refname>range</refname>
    <refpurpose>
     ある範囲の整数を有する配列を作成する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>range</function></funcdef>
      <paramdef>mixed <parameter>low</parameter></paramdef>
      <paramdef>mixed <parameter>high</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>range</function>は、<parameter>low</parameter>から
     <parameter>high</parameter>までの整数の配列を返します。
     low > highの場合、順番はhighからlowとなります。
    </para>
    <example>
     <title><function>range</function>の例</title>
     <programlisting role="php">
<![CDATA[
foreach(range(0, 9) as $number) {
    echo $number;
}
foreach(range('a', 'z') as $letter) {
    echo $letter;
}
foreach(range('z', 'a') as $letter) {
    echo $letter;
}
]]>
     </programlisting>
    </example>
    <note>
     <para>
      4.1.0より前のバージョンでは、<function>range</function>関数は、
      昇順の整数配列のみを生成しました。文字シーケンス及び降順の配列
      のサポートが4.1.0で追加されました。
     </para>
     <example>
      <title>デクリメントする範囲及び文字シーケンスの模擬</title>
      <programlisting role="php">
<![CDATA[
# 範囲の順番を反転するためにarray_reverseを使用可能
foreach(array_reverse(range(0,9)) as $number) {
    echo $number;
}

# chr()を用いて整数を文字に変換するためにarray_map()を使用可能
foreach(array_map('chr', range(ord('a'),ord('z'))) as $character) {
    echo $character;
}
]]>
      </programlisting>
     </example>
    </note>
    <para>
     その他の使用例については、<function>shuffle</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.reset">
   <refnamediv>
    <refname>reset</refname>
    <refpurpose>
     配列の内部ポインタを先頭の要素にセットする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>reset</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>reset</function>は、<parameter>array</parameter>の
     内部ポインタの先頭の要素に戻します。
    </para>
    <para>
     <function>reset</function>は、配列の最初の要素の値を返します。
    </para>
    <para>
     <function>current</function>, <function>each</function>, 
     <function>next</function>, <function>prev</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rsort">
   <refnamediv>
    <refname>rsort</refname>
    <refpurpose>配列を逆順にソートします</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>rsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sort_flags</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、配列を逆順に(高位から低位に)ソートします。
     <example>
      <title><function>rsort</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fruits = array ("lemon", "orange", "banana", "apple");
rsort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key = $val\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の出力は以下のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
0 = orange
1 = lemon
2 = banana
3 = apple
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     fruitsはアルファベットの逆順にソートされました。
    </para>
    <para>
     オプションのパラメータ<parameter>sort_flags</parameter>によりソー
     トの動作を修正可能です。詳細については、<function>sort</function>
     を参照下さい。
    </para>
    <para>
     <function>arsort</function>,<function>asort</function>,
     <function>ksort</function>,<function>sort</function>, 
     <function>usort</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.shuffle">
   <refnamediv>
    <refname>shuffle</refname>
    <refpurpose>配列をシャッフルする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>shuffle</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、(要素の順番をランダムにするために)配列をシャッフルし
     ます。この関数にシードを与えるために<function>srand</function>を
     使用する必要があります。
     <example>
      <title><function>shuffle</function>の例</title>
      <programlisting role="php">
<![CDATA[
$numbers = range (1,20);
srand ((float)microtime()*1000000);
shuffle ($numbers);
while (list (, $number) = each ($numbers)) {
    echo "$number ";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>arsort</function>,<function>asort</function>,
     <function>ksort</function>,<function>rsort</function>,
     <function>sort</function>,<function>usort</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.sizeof">
   <refnamediv>
    <refname>sizeof</refname>
    <refpurpose>変数の要素数を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sizeof</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>sizeof</function>は、<function>count</function>へのエイ
     リアスです。
    </para>
    <para>
     <function>count</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sort">
   <refnamediv>
    <refname>sort</refname>
    <refpurpose>配列をソートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>sort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sort_flags</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は配列をソートします。この関数が正常に終了すると、
     各要素は低位から高位へ並べ替えられます。
     <example>
      <title><function>sort</function>の例</title>
    <programlisting role="php">
<![CDATA[
<?php

$fruits = array ("lemon", "orange", "banana", "apple");
sort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "fruits[".$key."] = ".$val."\n";
}
 
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の出力は以下のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
fruits[0] = apple
fruits[1] = banana
fruits[2] = lemon
fruits[3] = orange
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     fruitsはアルファベットの昇順にソートされました。
    </para>
    <para>
     オプションの2番目のパラメータ<parameter>sort_flags</parameter>
     は、以下の値によりソートの動作を修正するために使用することが可能
     です。
    </para>
    <para>
     ソート型のフラグ:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - 通常通りに項目を比較</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - 数値的に項目を比較</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - 文字列として項目を比較</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>natsort</function>, <function>natcasesort</function>,
     <function>rsort</function>, <function>usort</function>,
     <function>array_multisort</function>, <function>uksort</function>     
     も参照下さい。     
    </para>
    <note>
     <para>
      2番目のパラメータはPHP 4で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.uasort">
   <refnamediv>
    <refname>uasort</refname>
    <refpurpose>
     ユーザー定義の比較関数で配列をソートし、連想インデックスを保持
     する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>uasort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>function <parameter>cmp_function</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、配列インデックスが関連する配列要素との関係を保持する
     ような配列をソートします。
     主に実際の配列の順序に意味がある連想配列をソートするために
     この関数は使用されます。比較関数はユーザーが定義します。
    </para>
    <note>
     <para>
      ユーザ定義の比較関数の例については、
      <function>usort</function> および <function>uksort</function> を
      参照下さい。
     </para>
    </note>
    &note.func-callback;
    <para>
     <function>usort</function>, <function>uksort</function>, 
     <function>sort</function>, <function>asort</function>, 
     <function>arsort</function>, <function>ksort</function>,
     <function>rsort</function>, <function>natsort</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.uksort">
   <refnamediv>
    <refname>uksort</refname>
    <refpurpose>
     ユーザー定義の比較関数を用いてキーで配列をソートします
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>uksort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>function <parameter>cmp_function</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、ユーザー定義の比較関数を用いて配列のキーをソートします。
     ソートしたい配列を複雑な基準でソートする必要がある場合には、
     この関数を使う必要があります。
    </para>
    <example>
     <title><function>uksort</function>の例</title>
     <programlisting role="php">
<![CDATA[
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}

$a = array (4 => "four", 3 => "three", 20 => "twenty", 10 => "ten");

uksort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
]]>
     </programlisting>
    </example>
    <para>
     この例による出力は以下のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
20: twenty
10: ten
4: four
3: three
]]>
      </programlisting>
     </informalexample>
    </para>
    &note.func-callback;
    <para>
     <function>usort</function>, <function>uasort</function>, 
     <function>sort</function>, <function>asort</function>, 
     <function>arsort</function>, <function>ksort</function>,
     <function>natsort</function>, <function>rsort</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     ユーザー定義の比較関数により値で配列をソートします
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>usort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>string <parameter>cmp_function</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、ユーザー定義の比較関数により配列をその値でソートします。
     ソートしたい配列を複雑な基準でソートする必要がある場合、
     この関数を使用するべきです。
    </para>
    <para>
     比較関数は、最初の引数が2番目の引数より小さいか、等しいか、大きい
     場合に、それぞれゼロ未満、ゼロに等しい、ゼロより大きい整数を返す
     必要があります。2つのメンバーの比較結果が等しいとなった場合、
     ソートされた配列の順番は定義されません。
    </para>
    <para>
     比較関数としてあるオブジェクトのメンバー関数を使用することも可能です。
     以下の例3を参照下さい。
    </para>
    <para>
     <example>
      <title><function>usort</function>の例</title>
 	<programlisting role="php">
<![CDATA[
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例は以下を表示します:
    </para>
   <para>
    <informalexample>
     <programlisting>
<![CDATA[
0: 6
1: 5
2: 3
3: 2
4: 1
]]>
     </programlisting>
    </informalexample>
   </para>
    <note>
     <para>
      もちろん、このような簡単な例では<function>rsort</function>関数
      の方がより適当です。
     </para>
    </note>
    <para>
     <example>
      <title>多次元配列を使用する<function>usort</function>の例</title>
      <programlisting role="php">
<![CDATA[
function cmp ($a, $b) {
    return strcmp($a["fruit"],$b["fruit"]);
} 

$fruits[0]["fruit"] = "lemons";
$fruits[1]["fruit"] = "apples";
$fruits[2]["fruit"] = "grapes";

usort($fruits, "cmp"); 

while (list ($key, $value) = each ($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     多次元配列をソートする際には、$a と $b は配列の最初のインデックス
     への参照を保持していまY。
    </para>
    <para>
     この例の出力は以下となります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <example>
      <title>
       <function>usort</function>でオブジェクトのメンバ関数を使用する例
      </title>
      <programlisting role="php">
<![CDATA[
class TestObj {
    var $name;

    function TestObj($name)
    {
        $this->name = $name;
    }

    /* 静的な比較関数: */
    function cmp_obj($a, $b)
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) return 0;
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

uasort($a, array ("TestObj", "cmp_obj"));

foreach ($a as $item) {
    print $item->name."\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の出力は以下のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
b
c
d
      </programlisting>
     </informalexample>
    </para>
    <warning>
     <para>
      (Solarisシステムのような)いくつかのCライブラリに含まれる
      quicksort関数は、比較関数が適当な値を返さない場合にPHPをクラッ
      シュさせる可能性があります。
     </para>
    </warning>
    <para>
     <function>uasort</function>, <function>uksort</function>, 
     <function>sort</function>, <function>asort</function>, 
     <function>arsort</function>, <function>ksort</function>,
     <function>natsort</function>, <function>rsort</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
