 <reference id="ref.regex">
  <title>正規表現関数 (POSIX拡張サポート)</title>
  <titleabbrev>Regexps</titleabbrev>
  
  <partintro>
   <para>
    PHPにおいて正規表現は複雑な文字列操作に使用されます。
    次の正規表現関数がサポートされます。
    <itemizedlist>
      <listitem>
       <simpara><function>ereg</function></simpara>
      </listitem>
      <listitem>
       <simpara><function>ereg_replace</function></simpara>
      </listitem>
      <listitem>
       <simpara><function>eregi</function></simpara>
      </listitem>
      <listitem>
       <simpara><function>eregi_replace</function></simpara>
      </listitem>
      <listitem>
       <simpara><function>split</function></simpara>
      </listitem>
      <listitem>
       <simpara><function>spliti</function></simpara>
      </listitem>
     </itemizedlist>
    これらの関数は、全て最初の引数に正規表現をとります。
    PHPはPOSIX 1003.2で定義されたPOSIX拡張正規表現を使用します。
    POSIX正規表現に関する詳細については、PHP配布ファイルのregexディレ
    クトリにあるregexのmanページを参照下さい。
    このページはmanpageフォーマットであり、読むには
    <command>man /usr/local/src/regex/regex.7</command>のようにします。
 
    <!-- Should add discussion of PCRE functions here. --></para>
 
   <para>
    <example>
     <title>正規表現の例</title>
     <programlisting role="php">
ereg (&quot;abc&quot;, $string);            
/* &quot;abc&quot;が$stringのどこかにある場合にtrueを返す */
 
ereg (&quot;^abc&quot;, $string);
/* &quot;abc&quot; が$stringの最初にある場合にtrueを返す */
 
ereg ("abc$", $string);
/* &quot;abc&quot; が$stringの最後にある場合にtrueを返す */
 
eregi ("(ozilla.[23]|MSIE.3)", $HTTP_USER_AGENT);  
/* クライアントブラウザがNetscape 2, 3またはMSIE 3である場合にtrue を返す */
 
ereg ("([[:alnum:]]+) ([[:alnum:]]+) ([[:alnum:]]+)", $string,$regs); 
/* 空白で区切られた3つ単語を
$regs[1], $regs[2],$regs[3]に代入する */
 
$string = ereg_replace ("^", "&lt;BR&gt;", $string); 
/* &lt;BR&gt; タグを $string の先頭に挿入する */
  
$string = ereg_replace ("$", "&lt;BR&gt;", $string); 
/* &lt;BR&gt; タグを $string の最後に挿入する */
 
$string = ereg_replace ("\n", "", $string);
/* $stringの改行文字を全て取り除く */
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.ereg">
   <refnamediv>
    <refname>ereg</refname>
    <refpurpose>正規表現にマッチさせる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ereg</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>array 
       <parameter>
	<replaceable><optional>regs</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、<parameter>pattern</parameter>で指定した正規表現
     により<parameter>string</parameter>を検索します。
    </simpara>
    <simpara>
     <parameter>pattern</parameter>の括弧でくくられた部分文字列に
     マッチし、かつこの関数が3番目の引数<parameter>regs</parameter>を指定
     してコールされた場合、マッチした部分が配列<parameter>regs</parameter>
     に格納されます。$regs[1]は最初の左括弧が始まる部分文字列を保持、
     $regs[2]は二番目の左括弧が始まる部分文字列を保持、．．．、
     といったようになっています。$regs[0]は
     <parameter>string</parameter>のコピーを保持しています。
    </simpara>
    <simpara>
     <function>ereg</function>が何かに完全にマッチした場合、$regs には
     ちょうど10個の要素が代入されます。これは、括弧で括られた部分文字
     列のうち、実際にマッチしたものが 10 より少なくても多くても同様で
     す。ただし、<function>ereg</function>にはより多くの部分文字列にマッ
     チする能力があります。マッチするものが見付からなかった場合、$regs
     は、<function>ereg</function>により書き換えられません。
    </simpara>
    <simpara>
     検索においては、大文字と小文字を区別します。
    </simpara>
    <simpara>
     <parameter>string</parameter>の中で<parameter>pattern</parameter>
     がマッチするとtrueを返し、マッチしなかった場合またはエラーとなっ
     た場合はfalseを返します。
    </simpara>
    <para>
     以下のサンプルコードは、ISOフォーマット(YYYY-MM-DD)で格納
     されている日付をDD.MM.YYYYフォーマットで表示するものです。
     <example>
      <title><function>ereg</function>の例</title>
      <programlisting role="php">
if ( ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs)) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "日付のフォーマットが不正です：$date";
}
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>eregi</function>,<function>ereg_replace</function>,
     <function>eregi_replace</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ereg-replace">
   <refnamediv>
    <refname>ereg_replace</refname>
    <refpurpose>正規表現による置換</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ereg_replace</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>replacement</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、<parameter>string</parameter>をスキャンして
     <parameter>pattern</parameter>にマッチするものを探し、
     マッチしたテキストを<parameter>replacement</parameter>
     で置換します。
    </simpara>
    <simpara>
     置換後の文字列が返されます。(マッチしなかった場合は、
     元の文字列が返されます。)
    </simpara>
    <simpara>
     <parameter>pattern</parameter>の中に括弧でくくられた部分
     文字列が含まれている場合、<parameter>replacement</parameter>
     の中に<literal>\\<replaceable>数字</replaceable></literal>
     のような部分文字列を埋め込むこともできます。この部分は、
     「数字」番目の括弧でくくられた部分文字列にマッチする文字列
     に置き換えられます。また、<literal>\\0</literal>は文字列全体
     を指します。9個までの部分文字列を使うことができます。括弧は
     入れ子になっていても構いません。この場合は開き括弧 '(' が
     最大9個まで使用可能です。
    </simpara>
    <simpara>
     <parameter>string</parameter>においてマッチするものがなかった
     場合、<parameter>string</parameter>は変更されずに返されます。
    </simpara>
    <para>
     たとえば、以下のサンプルコードは"This was a test" と3回表示します。
     <example>
      <title><function>ereg_replace</function>の例</title>
      <programlisting role="php">
$string = "This is a test";
echo ereg_replace ( " is", " was", $string );
echo ereg_replace ( "( )is", "\\1was", $string );
echo ereg_replace ( "(( )is)", "\\2was", $string );
      </programlisting>
     </example>
    </para>
    <para>
     注意しなければならないのは、パラメータ
     <parameter>replacement</parameter> として整数値を使用する場合、
     期待する結果が得られない可能性があります。これは、
     <function>ereg_replace</function> が文字の値を数値として解釈し、
     使用するためです。例えば、次のようになります。
     <example>
      <title><function>ereg_replace</function> の例</title>
      <programlisting>
&lt;?php
/* これは期待した通りに動作しません。 */
$num = 4;
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* 出力: 'This string has   words.' */

/* これは動作します。 */
$num = '4';
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* 出力: 'This string has 4 words.' */
?>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>ereg</function>, <function>eregi</function>,
     <function>eregi_replace</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>


  <refentry id="function.eregi">
   <refnamediv>
    <refname>eregi</refname>
    <refpurpose>
     大文字小文字を区別せずに正規表現によるマッチングを行う
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>eregi</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>array 
       <parameter>
	<replaceable><optional>regs</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、アルファベット文字をマッチングさせる際に
     大文字小文字の区別をしないこと以外は<function>ereg</function>と同
     じです。
    </para>
    <para>
     <function>ereg</function>, <function>ereg_replace</function>
     および<function>eregi_replace</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.eregi-replace">
   <refnamediv>
    <refname>eregi_replace</refname>
    <refpurpose>大文字小文字を区別せずに正規表現による置換を行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>eregi_replace</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>replacement</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、アルファベット文字をマッチングさせる際に大文字
     小文字の区別をしないこと以外は<function>ereg_replace</function>と
     同じです。
    </para>
    <para>
     <function>ereg</function>, <function>eregi</function>
     および<function>ereg_replace</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.split">
   <refnamediv>
    <refname>split</refname>
    <refpurpose>正規表現により文字列を分割し、配列に格納する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>split</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>limit</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列の配列を返します。配列の各要素は正規表現
     <parameter>pattern</parameter>により区切られた
     <parameter>string</parameter>中の部分文字列です。
     <parameter>limit</parameter>が指定された場合、返される配列には
     最大<parameter>limit</parameter>の要素が含まれます。この場合、
     最後の要素には<parameter>string</parameter>の残りの部分が全て
     入っています。エラーを生じた場合、<function>split</function>は
     falseを返します。
    </para>
    <para>
     <filename>/etc/passwd</filename>の行から最初の4つのフィールド
     を取り出すには、以下のようにします。
    <example>
      <title><function>split</function>の例</title>
      <programlisting role="php">
$passwd_list = split ( ":", $passwd_line, 5 );
      </programlisting>
     </example>
    </para>
    <para>
     スラッシュ、ドット、ハイフンをデリミタとすると日付を処理する例を
     以下に示します。
     <example>
      <title><function>split</function>の例</title>
      <programlisting role="php">
$date = "04/30/1973";  // デリミタはスラッシュ、ドット、ハイフンのどれかです。
list ($month, $day, $year) = split ('[/.-]', $date);
echo "Month: $month; Day: $day; Year: $year&lt;br&gt;\n";
      </programlisting>
     </example>
    </para>
    <para>
     <parameter>pattern</parameter> は大文字小文字を区別することに
     注意してください。
    </para>
    <para>
     正規表現の機能を必要としない場合、正規表現エンジンのオーバーヘッ
     ドがない<function>explode</function>の方がより高速であるというこ
     とに注意して下さい。
    </para>
    <para>
     Perlの<command>$chars = split('', $str)</command>の動作を模擬する
     手段を探しているユーザーについては、
     <function>preg_split</function>の例を参照下さい。
    </para>
    <para>
     <parameter>pattern</parameter> は正規表現であることに注意して下さ
     い。正規表現で特殊文字とみなされる文字を分割したい場合、それらを
     まずエスケープする必要があります。<function>split</function> (ま
     たは他の正規表現関数に関して)の動作が何か変であると感じたならば、
     PHP配布ファイルの	 
     <filename>regex/</filename>サブディレクトリにあるファイル
     <filename>regex.7</filename>を読んで下さい。このファイルは
     manpageフォーマットとなっており、読むには
     <command>man /usr/local/src/regex/regex.7</command>のようにします。
    </para>
    <para>
     <function>spliti</function>,<function>explode</function>,
     <function>implode</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.spliti">
   <refnamediv>
    <refname>spliti</refname>
    <refpurpose>
     大文字小文字を区別しない正規表現により文字列を分割し、配列に入れる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>spliti</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>limit</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、アルファベット文字にマッチさせる際に大文字小文字を区
     別しないこと以外は、<function>split</function>と同じです。
    </para>
    <para>
     <function>split</function>,<function>explode</function>,
     <function>implode</function>も参照ください。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sql-regcase">
   <refnamediv>
    <refname>sql_regcase</refname>
    <refpurpose>
     大文字小文字を区別しないマッチングのための正規表現を作成する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>sql_regcase</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     大文字小文字を区別せず <parameter>string</parameter>にマッチする、
     有効な正規表現式を返します。この表現式は、<parameter>string
     </parameter>の中の個々の文字を '[]' 表現に変換したものです。
     この '[]' 表現は、可能であれば大文字と小文字の書式で構成
     され、そうでない場合は元々の文字が2度出現します。
     <example>
      <title><function>sql_regcase</function>の例</title>
      <programlisting role="php">
echo sql_regcase ("Foo bar");
      </programlisting>
     </example>
     これは、<screen>[Ff][Oo][Oo] [Bb][Aa][Rr]</screen>と表示します。
    </para>
    <para>
     この関数は、大文字小文字を区別する正規表現しかサポートしない製品に
     おいて、大文字小文字を区別しないパターンマッチングを行いたい場合に
     役立ちます。
    </para>
   </refsect1>
  </refentry>
  

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
