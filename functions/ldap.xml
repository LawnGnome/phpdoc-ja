 <reference id="ref.ldap">
  <title>LDAP 関数</title>
  <titleabbrev>LDAP</titleabbrev>
  
  <partintro>
   <sect1 id="ldap.intro">
    <title>LDAP 入門</title>
    <para>
     LDAP とは Lightweight Directory Access Protocol を意味し、"ディレ
     クトリ・サーバー" にアクセスするために使用されるプロトコルです。ディ
     レクトリとは、ツリー構造に情報を保持している特殊なデータベースのこ
     とです。
    </para>
    <para> 
     この概念は、ハードディスクのディレクトリ構造に似ています。
     ただし、その内容は異なっており、ルートディレクトリは "世界" であり、
     最初のレベルのサブディレクトリは "国" となります。ディレクトリ構造
     の下位には、会社や機関、場所のエントリがあります。さらに下位には、
     人やおそらく道具や文書に関するディレクトリエントリもあります。
    </para>
    <para>
     ハードディスクにあるサブディレクトリにあるファイルを参照するには、
     次のようにします。
    </para>
    <literallayout>
/usr/local/myapp/docs
    </literallayout>
    <para>
     スラッシュは、リファレンスの各部分を区分し、解釈は左から右に行われます。
    </para>
    <para>
     LDAP においてこの完全に正しいファイル参照に等価なものは
    "区分された名前(distinguished name)"であり、単に"dn"と表されます。
     例として dn が次のようになっているとしましょう。
    </para>
    <literallayout>
     cn=John Smith,ou=Accounts,o=My Company,c=US
    </literallayout>
    <para>
     カンマは各部分を区分し、右から左に解釈されます。この dn は次のよう
     に解釈されます。
    </para>
    <literallayout>
    country = US
    organization = My Company
    organizationalUnit = Accounts
    commonName = John Smith
    </literallayout>
    <para>
     ハードディスクのディレクトリ構造を管理する手法について明確な規約が
     ないのと同様に、ディレクトリサーバーマネージャーは、目的に適したあ
     らゆる構造を設定することが可能です。しかし、実用的にはいくつかの慣
     習があります。
     利用可能なものに関する情報を持たずにデータベースを使用する
     ことができないのと同様にディレクトリの構造に関する情報なくして
     ディレクトリサーバーにアクセスするコードを書くことはできない
     ということが言えます。
    </para>
   </sect1>
 
   <sect1 id="ldap-example">
    <title>完全なコードの例</title>
    <para>
     あるディレクトリサーバーから姓が "S" から始まる全てのエントリに
     関する情報を検索し、名前と電子メールアドレスで検索結果を表示します。
    </para>
    <example>
     <title>LDAP 検索の例</title>
     <programlisting role="php">
&lt;?php
// LDAP の基本シーケンスは、接続、バインド、検索、検索結果の解釈、
// 接続のクローズです。
 
echo "&lt;h3>LDAP query test&lt;/h3>";
echo "Connecting ...";
$ds=ldap_connect("localhost");  // 有効な LDAP サーバーに違いない!
echo "connect result is ".$ds."&lt;p>";
 
if ($ds) { 
    echo "Binding ..."; 
    $r=ldap_bind($ds);     // これは "匿名" バインドで、通常は
                           // 読みこみのみのアクセスとなります。
    echo "Bind result is ".$r."&lt;p>";
 
    echo "Searching for (sn=S*) ...";
    // 名前(surname)エントリを検索
    $sr=ldap_search($ds,"o=My Company, c=US", "sn=S*");  
    echo "Search result is ".$sr."&lt;p>";

    echo "Number of entires returned is ".ldap_count_entries($ds,$sr)."&lt;p>";

    echo "Getting entries ...&lt;p>";
    $info = ldap_get_entries($ds, $sr);
    echo "Data for ".$info["count"]." items returned:&lt;p>";
 
    for ($i=0; $i<$info["count"]; $i++) {
        echo "dn is: ". $info[$i]["dn"] ."&lt;br>";
        echo "first cn entry is: ". $info[$i]["cn"][0] ."&lt;br>";
        echo "first email entry is: ". $info[$i]["mail"][0] ."&lt;p>";
    }
 
    echo "Closing connection";
    ldap_close($ds);
 
} else {
     echo "&lt;h4>Unable to connect to LDAP server&lt;/h4>";
}
?>
     </programlisting>
    </example>
    
    <sect2 id="ldap.using">
     <title>PHP LDAP コールの使用法</title>
     <para>
      ミシガン大の ldap-3.3 パッケージまたは Netscape Directory SDK
      3.0 のどちらかから完全な LDAP クライアントライブラリを取得する必
      要があります。また、PHP の LDAP コールを動作させるには、
      PHP を LDAP サポートを有効にして再コンパイルする必要があります。
     </para>
     <para>
      LDAP コールを使用する前に、以下のことを知っておいてください。
      
      <itemizedlist>
       <listitem>
	<para>
	 使用するディレクトリサーバーの名前またはアドレス
	</para>
       </listitem>
       <listitem>
	<para>
	 サーバーの "base dn" (このサーバーがあるワールドディレクトリ
	 の部分で、"o=My Company,c=US" のようにすることができます)
	</para>
       </listitem>
       <listitem>
	<para>
	 サーバーへのアクセスにパスワードを必要とするかどうか。
	 (多くのサーバーは "匿名バインド" に関して読みこみを
	 許可するが、他の処理についてはパスワードを要求します)
	</para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      アプリケーションとして作成する LDAP コールのシーケンスは、
      通常、次のようなパターンに沿っています。
      <literallayout>
   ldap_connect()    // サーバーへの接続を確立
      |
   ldap_bind()       // 匿名または認証された "ログイン"
      |
   ディレクトリの検索または更新等を行い、結果を表示する
      |
   ldap_close()      // "ログアウト"
      </literallayout>
     </para>
    </sect2>
    <sect2 id="ldap.moreinfo">
     <title>他の情報</title>
     <para>
      LDAP に関する多くの情報を以下の場所で得ることができます。
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <ulink url="&url.ldap.netscape;">Netscape</ulink>
       </para>
      </listitem>
      <listitem>
       <para>
        <ulink url="&url.ldap.michigan;">ミシガン大学</ulink>
       </para>
      </listitem>
      <listitem>
       <para>
        <ulink url="&url.ldap.openldap;">OpenLDAP プロジェクト</ulink>
       </para>
      </listitem>
      <listitem>
       <para>
        <ulink url="&url.ldap.ldapworld;">LDAP World</ulink>
       </para>
      </listitem>
     </itemizedlist>
     <para>    
      ネットスケープ SDK には、.html 形式の有用なプログラマー用ガイドが
      含まれています。
     </para>
    </sect2>
   </sect1>
  </partintro>
 
  <refentry id="function.ldap-add">
   <refnamediv>
    <refname>ldap_add</refname>
    <refpurpose>LDAP ディレクトリにエントリを付加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_add</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>array <parameter>entry</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功の場合に&true;、エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_add</function> 関数は、LDAP ディレクトリにエントリを
     加えるために使用されます。
     加えられるエントリの DN は、dn により指定されます。
     配列entryは、そのエントリに関する情報を指定します。
     エントリの値は、個々の属性によりインデックスが作成されています。
     ある属性に関して複数の値がある場合は、0 から始まる整数で添字
     が作成されます。
    </para>
    <informalexample>
     <literallayout>
    entry["attribute1"] = value
    entry["attribute2"][0] = value1
    entry["attribute2"][1] = value2
     </literallayout>
    </informalexample>
    <example>
     <title>認証型バインドの例</title>
     <programlisting role="php">
&lt;?php
$ds=ldap_connect ("localhost");  // LDAP サーバーはこのホストであると仮定
 
if ($ds) {
// 更新アクセスを行うために適当な dn でバインドする
    $r=ldap_bind($ds,"cn=root, o=My Company, c=US", "secret");
 
    // データを準備する
    $info["cn"]="John Jones";
    $info["sn"]="Jones";
    $info["mail"]="jonj@here.and.now";
    $info["objectclass"]="person";
 
    // データをディレクトリに追加
    $r=ldap_add($ds, "cn=John Jones, o=My Company, c=US", $info);
 
    ldap_close($ds);
} else {
    echo "LDAP サーバーに接続できません"; 
}
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-bind">
   <refnamediv>
    <refname>ldap_bind</refname>
    <refpurpose>LDAP ディレクトリにバインドする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_bind</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>bind_rdn</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>
       string
       <parameter>
	<replaceable><optional>bind_password</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定した RDN およびパスワードを用いて LDAP ディレクトリをバインドします。
     成功の場合に&true;、エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_bind</function> は、ディレクトリに関するバインド動
     作を行います、bind_rdn および bind_password はオプションです。
     指定されない場合は、匿名(anonymous) バインドが試みられます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-close">
   <refnamediv>
    <refname>ldap_close</refname>
    <refpurpose>LDAP サーバーへのリンクを閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_close</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功の場合に&true;、エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_close</function> は、指定した
     <parameter>link_identifier</parameter>が指すLDAP サーバーへのリン
     クを閉じます。
    </para>
    <para>
     このコールは、内部的には <function>ldap_unbind</function> と同じです。
     LDAP API は、<function>ldap_unbind</function> コールを行うため、
     <function>ldap_close</function> をコールする手間を考えるとこの関
     数を使用する方が良いでしょう。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-compare">
   <refnamediv>
    <refname>ldap_compare</refname>
    <refpurpose>
     DNで指定したエントリで見付かった属性の値を比較する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_compare</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>string <parameter>attribute</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>value</parameter>がマッチする場合に&true;、その他の場合
     に&false;、エラーの場合に-1を返します。
    </simpara>
    <para>
     <function>ldap_compare</function>は、属性
     <parameter>attribute</parameter>の値<parameter>value</parameter>
     を<parameter>dn</parameter>で指定したLDAPディレクトリエントリの同
     じ属性の値と比較するために使用します。 
    </para>
    <simpara>
     次の例は、指定したパスワードがDNの指定したエントリで定義されたも
     のと一致するかどうかをチェックする方法を示しています。
    </simpara>
    <example>
     <title>パスワード確認の例</title>
     <programlisting role="php">
&lt;?php

$ds=ldap_connect ("localhost");  // LDAPサーバーが同一ホストであると仮定
      
if ($ds) {

// バインド
  if(ldap_bind($ds)) {

        // データを準備
        $dn = "cn=Matti Meikku, ou=My Unit, o=My Company, c=FI";
        $value = "secretpassword";
        $attr = "password";	

        // 値を比較
        $r=ldap_compare($ds, $dn, $attr, $value);

        if ($r === -1) {
            echo "Error: ".ldap_error($ds);
        } elseif ($r === TRUE) {
            echo "Password correct.";
        } elseif ($r === FALSE) {
            echo "Wrong guess! Password incorrect.";
        }

    } else {
        echo "Unable to bind to LDAP server.";
    }          

    ldap_close($ds);

} else {
    echo "Unable to connect to LDAP server.";
}
?&gt;
     </programlisting>
    </example>  
    <note>
     <para>
      <function>ldap_compare</function>はBINARY値を比較することはでき
      ません!
     </para>
    </note>
    <note>
     <para>
      この関数は4.0.2で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-connect">
   <refnamediv>
    <refname>ldap_connect</refname>
    <refpurpose>LDAP サーバーへ接続する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_connect</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>hostname</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>port</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功した場合には、正の LDAP リンクIDを、エラーの場合に &false; を返
     します。
    </para>
    <para>  
     <function>ldap_connect</function> は、
     <parameter>hostname</parameter> と <parameter>port</parameter> で
     指定された LDAP サーバーへの接続を確立します。
     引数は両方ともオプションです。
     引数が指定されない場合、既に開かれているリンクのリンク ID が
     返されます。
     <parameter>hostname</parameter> のみが指定された場合、
     ポートのデフォルト値は、389 となります。
    </para>
    <para>
     OpenLDAP 2.x.x を使用している場合、ホスト名の代わりにURLを指定す
     ることが可能です。SSLと組み合わせてLDAPを使用するには、SSLサポー
     トを指定して OpenLDAP 2.x.x をコンパイル、PHP の configure で
     SSL を指定し、パラメータ <parameter>hostname</parameter> で
     ldaps://hostname/ を使用して下さい。<parameter>port</parameter>
     パラメータは、URLを使用する場合には使用されません。URL および SSL
     のサポートは、4.0.4 で追加されました。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-count-entries">
   <refnamediv>
    <refname>ldap_count_entries</refname>
    <refpurpose>サーチ時のエントリ数をカウントする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_count_entries</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     結果のエントリを数えます。エラーの場合は、&false;を返します。
    </para>
    <para>  
     <function>ldap_count_entries</function> は、サーチ実行の結果として
     保持されたエントリの数を返します。
     <parameter>result_identifier</parameter> は、LDAP内部結果IDを返し
     ます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-delete">
   <refnamediv>
    <refname>ldap_delete</refname>
    <refpurpose>ディレクトリからエントリを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_delete</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    成功の場合に&true;、エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_delete</function> 関数は、dn より指定された LDAP
     ディレクトリにおける特定のエントリを削除します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-dn2ufn">
   <refnamediv>
    <refname>ldap_dn2ufn</refname>
    <refpurpose>
     DN をユーザに分かりやすい名前のフォーマットに変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ldap_dn2ufn</function></funcdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ldap_dn2ufn</function> 関数は、型名を取り除いて
     DN をよりユーザーに分かりやすい形式に変換するために使用されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-err2str">
   <refnamediv>
    <refname>ldap_err2str</refname>
    <refpurpose>
     LDAP のエラー番号をエラーメッセージ文字列に変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ldap_err2str</function></funcdef>
      <paramdef>int <parameter>errno</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     エラーメッセージ文字列を返します。
    </para>
    <para>
     この関数は、エラー番号 errno が意味するエラーメッセージ文字列
     を返します。LDAP errno 番号は標準化されていますが、
     異なったライブラリでは、異なるかローカライズされたエラーメッセージ
     が返されます。特性のエラーメッセージをチェックするのではなく、
     常に必ずエラー番号をチェックするようにしてください。
    </para>
    <para>
     <function>ldap_errno</function> および
     <function>ldap_error</function> も参照下さい。
    <example>
     <title>全ての LDAP エラーメッセージに番号をふる</title>
<programlisting role="php">
&lt;?php
  for($i=0; $i&lt;100; $i++) {
    printf("Error $i: %s&lt;br>\n", ldap_err2str($i));
  }
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-errno">
   <refnamediv>
    <refname>ldap_errno</refname>
    <refpurpose>
     直近の LDAP コマンドのLDAP エラー番号を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_errno</function></funcdef>
      <paramdef>int <parameter>link_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     このリンクに関する直近のLDAPコマンドのLDAPエラー番号を返します。</para>
    <para>
     この関数は、指定したリンクIDに関して直近のLDAPコマンドにより返さ
     れた標準化されたエラー番号を返します。この番号は、
     <function>ldap_err2str</function>を用いてエラーメッセージ文字列に
     変換することができます。
    </para>
    <para>
     php3.ini で警告レベルを十分に下げるか、警告出力を抑制するために
     LDAPコマンドを @ 文字をつけない限り、発生したエラーは、HTML 出力
     にも表示されます。
     <example>
      <title>エラーを生成し、取得する</title>
<programlisting role="php">
&lt;?php
// この例には、エラーがあり、これを取得します。
$ld = ldap_connect("localhost");
$bind = ldap_bind($ld);
// フィルター式に構文エラーがあります。
// 動作するには、"objectclass=*" とする必要があります。
$res =  @ldap_search($ld, "o=Myorg, c=DE", "objectclass");
if (!$res) {
    printf("LDAP-Errno: %s&lt;br>\n", ldap_errno($ld));
    printf("LDAP-Error: %s&lt;br>\n", ldap_error($ld));
    die("Argh!&lt;br>\n");
}
$info = ldap_get_entries($ld, $res);
printf("%d matching entries.&lt;br>\n", $info["count"]);
?>
      </programlisting>
     </example>
    </para>
    <para>
     <function>ldap_err2str</function> および
     <function>ldap_error</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-error">
   <refnamediv>
    <refname>ldap_error</refname>
    <refpurpose>
     直近のLDAPコマンドのLDAP エラーメッセージを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ldap_error</function></funcdef>
      <paramdef>int <parameter>link_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     エラーメッセージ文字列を返します。
    </para>
    <para>
     この関数は、指定したリンクIDに関して直近のLDAPコマンドにより生成
     されたエラーを表すエラーメッセージ文字列を返します。LDAP errno 番
     号は標準化されていますが、異なったライブラリでは、異なるかローカ
     ライズされたエラーメッセージが返されます。特性のエラーメッセージ
     をチェックするのではなく、常に必ずエラー番号をチェックするように
     してください。
    </para>
    <para>
     <filename>php3.ini</filename>で警告レベルを十分に下げるか、
     警告出力を抑制するためにLDAPコマンドの前に<literal>@</literal> 文字を
     つけない限り、発生したエラーはHTML 出力にも表示されます。
    </para>
    <para>
     <function>ldap_err2str</function> および
     <function>ldap_errno</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-explode-dn">
   <refnamediv>
    <refname>ldap_explode_dn</refname>
    <refpurpose>DN を構成要素毎に分割する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ldap_explode_dn</function></funcdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>int <parameter>with_attrib</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ldap_explode_dn()</function> 関数は、
     <function>ldap_get_dn</function> により
     返された DN を分割し複数の要素に分けるために使用されます。
     各部分は、相対区分名(Relative Distinguished Name または RDN)
     と呼ばれます。<function>ldap_explode_dn</function> は、これらの全
     ての要素を含む配列を返します。
     <parameter>with_attrib</parameter> は、RDN が値のみを返すのか、
     あるいは、属性を同時に返すのかを指定するために使用されます。
     属性を有する RDN （すなわち、属性=値 フォーマットで) を得るために
     は<parameter>with_attrib</parameter> を 0 とし、値のみを得るために
     は1 にセットします。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-first-attribute">
   <refnamediv>
    <refname>ldap_first_attribute</refname>
    <refpurpose>最初の属性を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ldap_first_attribute</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_entry_identifier</parameter></paramdef>
      <paramdef>int <parameter>ber_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功した場合にエントリの最初の属性、エラーの場合に&false;を返します。
    </para>
    <para>  
     エントリの読み込みと同様に、属性も特定のエントリから一つずつ
     読み込まれます。
     <function>ldap_first_attribute</function> は、エントリ ID により指された
     エントリにおける最初の属性を返します。
     残りの属性は、<function>ldap_next_attribute</function> を逐次コールする
     ことにより得ることができます。
     <parameter>ber_identifier</parameter> は、内部メモリにおける位置ポインタ
     の ID です。この ID は、参照渡しされます。
     同じ <parameter>ber_identifier</parameter> が
     <function>ldap_next_attribute</function> 関数に渡された場合、
     そのポインタは修正されます。
    </para>
    <para>
     <function>ldap_get_attributes</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-first-entry">
   <refnamediv>
    <refname>ldap_first_entry</refname>
    <refpurpose> 最初の結果 ID を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_first_entry</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に最初のエントリに関する結果エントリ ID、エラーの場合に&false;
     を返します。
    </para>
    <para>  
     LDAP 結果におけるエントリは、<function>ldap_first_entry</function> 
     および <function>ldap_next_entry</function>関数を用いて連続的に読
     み込まれます。<function>ldap_first_entry</function> は、結果におけ
     る最初のエントリに関するエントリ ID を返します。
     このエントリ ID は、結果から連続的にエントリを得るために、
     <function>lap_next_entry</function> ルーチンに渡されます。
    </para>
    <para>
     <function>ldap_get_entries</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-free-result">
   <refnamediv>
    <refname>ldap_free_result</refname>
    <refpurpose>結果メモリを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_free_result</function></funcdef>
      <paramdef>int <parameter>result_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功した場合に&true;、エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_free_result</function> は、結果を保持するために内部
     的に確保され、<parameter>result_identifier</parameter> が指すメモ
     リを開放します。全ての結果メモリは、スクリプト実行終了時に自動的に
     開放されます。
    </para>
    <para>
     通常、LDAP の結果用に確保された全てのメモリはスクリプトの実行終了時
     に開放されます。連続的な検索を行うスクリプトのように大きな
     結果セットを返す場合、スクリプトにより使用される実行用メモリーを
     小さく保つために <function>ldap_free_result</function> 
     をコールすることが可能です。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-get-attributes">
   <refnamediv>
    <refname>ldap_get_attributes</refname>
    <refpurpose>サーチ結果エントリから属性を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ldap_get_attributes</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int
       <parameter>result_entry_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に完全なエントリ情報を多次元配列で返します。エラーの場合、
     &false;を返します。
    </para>
    <para>  
     <function>ldap_get_attributes</function> 関数は、探索結果における
     エントリから属性と値を間単に読み込むために使用されます。
     返り値は、属性と値の多次元配列となります。
    </para>
    <para>
     ディレクトリに特定のエントリを置いている場合、この関数をコールする
     ことにより、そのエントリに関して保持されている情報得ることができま
     す。ディレクトリエントリを "ブラウズ" するか、ディレクトリエントリの
     構造が未知であるアプリケーションにおいてこの関数を使用します。
     多くのアプリケーションにおいては、電子メールアドレスや姓のような特
     定の属性を検索するため、保持されている他のデータにどんなものがあるか
     ということは問題にならないと思われます。
    </para>
    <para>
     <informalexample>
      <literallayout>
return_value["count"] = そのエントリの属性の数
return_value[0] = 最初の属性
return_value[n] = n 番目の属性

return_value["attribute"]["count"] = その属性に関する値の数
return_value["attribute"][0] = その属性に関する最初の値
return_value["attribute"][i] = その属性に関する i 番目の値
      </literallayout>
    </informalexample>
     <example>
      <title>
       特定のディレクトリエントリに関して保持されている属性のリストを表示
      </title>
      <programlisting role="php">
// $ds はディレクトリのリンク ID
 
// $sr は事前の LDAP のディレクトリ検索コールの有効な結果
 
$entry = ldap_first_entry($ds, $sr);
 
$attrs = ldap_get_attributes($ds, $entry);
 
echo $attrs["count"]." attributes held for this entry:&lt;p>";
 
for ($i=0; $i&lt;$attrs["count"]; $i++)
     echo $attrs[$i]."&lt;br>";
      </programlisting>
     </example>
    </para>
    <para>
     <function>ldap_first_attribute</function> および
     <function>ldap_next_attribute</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-get-dn">
   <refnamediv>
    <refname>ldap_get_dn</refname>
    <refpurpose>結果エントリから DN を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ldap_get_dn</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_entry_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     結果エントリの DN を返します。エラーの場合、&false;を返します。
    </para>
    <para>  
     <function>ldap_get_dn</function> 関数は、結果におけるあるエントリ
     の DN を見つけるために使用されます。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-get-entries">
   <refnamediv>
    <refname>ldap_get_entries</refname>
    <refpurpose>全ての結果エントリを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
     <funcdef>array <function>ldap_get_entries</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に完全な結果情報を多次元配列で返します。エラーの場合に&false;
     を返します。
    </para>
    <para>  
     <function>ldap_get_entries</function> 関数は、結果から複数のエント
     リを読み込み、続いて属性と複数の値を読み込むことを簡単に行うために
     使用されます。全ての情報が一回の関数コールにより多次元配列で返され
     ます。配列の構造は、次のようになります。
    </para>
    <para>
     属性インデックスは、小文字に変換されます。
     (属性は大文字小文字を区別しますが、配列インデックスとして使用する時は
     区別されません)
     <informalexample>
      <literallayout>
return_value["count"] = 結果におけるエントリの数
return_value[0] : 最初のエントリの詳細情報を参照します

return_value[i]["dn"] =  結果における i 番目のエントリ DN 

return_value[i]["count"] = i 番目のエントリにおける属性の数
return_value[i][j] = 結果における i 番目のエントリにおける j 番目の属性

return_value[i]["attribute"]["count"] = i 番目のエントリにおける属性に関する値の数
return_value[i]["attribute"][j] = i 番目のエントリにおける j 番目の値
      </literallayout>
     </informalexample>
    </para>
    <para>
     <function>ldap_first_entry</function> および
     <function>ldap_next_entry</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-get-option">
   <refnamediv>
    <refname>ldap_get_option</refname>
    <refpurpose>指定したオプションの現在の値を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>ldap_get_option</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
      <paramdef>mixed <parameter>retval</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定したオプションの値を <parameter>retval</parameter> に設定し、
     成功時に&true;、エラー時に&false;を返します。
    </para>  
    <para>
     パラメータ <parameter>option</parameter> は次のどれかとします。
     LDAP_OPT_DEREF, LDAP_OPT_SIZELIMIT, LDAP_OPT_TIMELIMIT,
     LDAP_OPT_PROTOCOL_VERSION, LDAP_OPT_ERROR_NUMBER, LDAP_OPT_REFERRALS,
     LDAP_OPT_RESTART, LDAP_OPT_HOST_NAME, LDAP_OPT_ERROR_STRING,
     LDAP_OPT_MATCHED_DN 
     これらは、<ulink
     url="&url.ldap.openldap-c-api;">draft-ietf-ldapext-ldap-c-api-xx.txt
     </ulink> で説明されています。
    </para>
    <para>
     この関数は、OpenLDAP 2.x.x または Netscape Directory SDK x.x を使
     用した場合にのみ利用可能で、PHP 4.0.4 で追加されました。
    </para>
    
    <para>
     <example>
      <title>プロトコルのバージョンを調べる</title>
      <programlisting role="php">
// $ds はディレクトリサーバへの有効なリンクIDです
if (ldap_get_option($ds, LDAP_OPT_PROTOCOL_VERSION, $version))
    echo "使用中のプロトコルのバージョン: $version";
else
    echo "プロトコルのバージョンを定義することができません";
      </programlisting>
     </example>
    </para>
    
    <para>
     <function>ldap_set_option</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-get-values">
   <refnamediv>
    <refname>ldap_get_values</refname>
    <refpurpose>結果エントリから全ての値を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
   <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ldap_get_values</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_entry_identifier</parameter></paramdef>
      <paramdef>string <parameter>attribute</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功した場合、指定した属性に関する値を配列を返します。エラーの場合
     には、&false;を返します。
    </para>
    <para>  
     <function>ldap_get_values</function> 関数は、結果のエントリにおけ
     る属性の全ての値を読み込むために使用されます。
     エントリは、<parameter>result_entry_identifier</parameter>
     により指定されます。結果を有する配列において "count" と
     インデックス指定することにより値の数を得ることができます。
     個々の値は、配列において整数インデックスを指定するこhによりアクセス
     できます。最初のインデックスは、0 です。
    </para>
    <para> 
     この関数のコールは、<parameter>result_entry_identifier</parameter>
     を必要とします。このため、事前に LDAP の検索用関数のコールと個々の
     エントリ取得用関数のコールを行っておく必要があります。
    </para>
    <para>
     アプリケーションでは、("surname" または "mail" のような)特定の属性
     を探すためにその特性をコードに埋め込んで置くか、さもなくば、指定し
     たエントリに関して存在する属性を調べるために
     <function>ldap_get_attributes</function> をコールする必要があります。
    </para>
    <para>
     LDAP ではある属性に関して複数のエントリを持つことが可能です。
     このため、例えば、ある人に関する "mail" という属性で呼ばれる全ての
     ディレクトリエントリについて多数の電子メールアドレスを保存することが
     できます。
     <informalexample>
      <literallayout>
return_value["count"] = 属性の値の数
return_value[0] = 属性の最初の値
return_value[i] = 属性の i 番目の値
      </literallayout>
     </informalexample>
     <example>
      <title>
       あるディレクトリエントリの全ての "mail" 属性の一覧を表示します
      </title>
      <programlisting role="php">
// $ds はディレクトリサーバーの有効なリンク ID
// $sr は事前の LDAP 検索コールのどれかから返された有効な検索結果
// $entry はディレクトリエントリを返すコールのどれかから返された有効な
// エントリ ID
 
$values = ldap_get_values($ds, $entry,"mail");
 
echo $values["count"]." email addresses for this entry.&lt;p>";
 
for ($i=0; $i &lt; $values["count"]; $i++)
     echo $values[$i]."&lt;br>";
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-get-values-len">
   <refnamediv>
    <refname>ldap_get_values_len</refname>
    <refpurpose>結果エントリから全てのバイナリ値を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ldap_get_values_len</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_entry_identifier</parameter></paramdef>
     <paramdef>string <parameter>attribute</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に属性の値を配列で返し、エラー時に &false; を返します。
    </para>
    <para>  
     <function>ldap_get_values_len</function> 関数は、結果のエントリにおける
     全ての属性の値を読みこむために使用されます。エントリは、
     <parameter>result_entry_identifier</parameter> により指定されます。
     値の数は、結果の配列の "count" というキーを有する要素から知ること
     ができます。
     個々の値は、配列インデックスによりアクセスします。最初のインデッ
     クスは、0 です。
    </para>
    <para>
     この関数は、文字列データではなくバイナリデータを処理すること以外は、
     <function>ldap_get_values</function> と全く同じです。
    </para>
    <note>
     <para>
      この関数は4.0で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-list">
   <refnamediv>
    <refname>ldap_list</refname>
    <refpurpose>シングルレベル探索を行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
     <funcdef>int <function>ldap_list</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>base_dn</parameter></paramdef>
      <paramdef>string <parameter>filter</parameter></paramdef>
      <paramdef>array
       <parameter>
	<replaceable><optional>attributes</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>attrsonly</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sizelimit</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>timelimit</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>deref</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     検索結果IDを返します。エラーの場合は、&false;を返します。
    </para>
    <para>  
     <function>ldap_list</function> は、指定されたフィルタを用いて
     LDAP_SCOPE_ONELEVELのスコープを有するディレクトリの検索を行います。
    </para>
    <para>
     LDAP_SCOPE_ONELEVEL は、検索によりコール時に指定した DN の直下の
     レベルにおける情報のみ返されることを意味します。
     ("ls" と入力した際に、現在のワークディレクトリのファイルとフォルダー
     の一覧が得られるのと同じです)
    </para>
    <para>
     この関数のコールは、オプションのパラメータを5つとります。
     <function>ldap_search</function> の記述を参照下さい。
     <note>
      <para>
       以下のオプションパラメータは4.0.2で追加されました:
       <parameter>attrsonly</parameter>,
       <parameter>sizelimit</parameter>,
       <parameter>timelimit</parameter>,
       <parameter>deref</parameter>
      </para>
     </note>
     <example>
      <title>ある組織の全ての組織単位を一覧表示する 
      </title>
      <programlisting role="php">
// $ds はディレクトリサーバーの有効なリンク ID
 
$basedn = "o=My Company, c=US";
$justthese = array("ou");
 
$sr=ldap_list($ds, $basedn, "ou=*", $justthese);
 
$info = ldap_get_entries($ds, $sr);
 
for ($i=0; $i<$info["count"]; $i++)
    echo $info[$i]["ou"][0] ;
      </programlisting>
     </example>
    </para>
    <para>
     4.0.5以降、並行検索も実行可能となりました。詳細は、
     <function>ldap_search</function> を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-modify">
   <refnamediv>
    <refname>ldap_modify</refname>
    <refpurpose>LDAP エントリを修正する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_modify</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>array <parameter>entry</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true; 、エラー時に&false;を返します。
    </para>
    <para>  
     <function>ldap_modify</function> 関数は、LDAP ディレクトリに存在す
     るエントリを修正するために使用されます。
     エントリ(entry)の構造は、<function>ldap_add</function> と同じです。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-mod-add">
   <refnamediv>
    <refname>ldap_mod_add</refname>
    <refpurpose>現在の属性に属性を追加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_mod_add</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>array <parameter>entry</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true;、エラー時に&false;を返します。
    </para>
    <para>
     この関数は、指定したdnに属性を追加します。この関数は、
     オブジェクトレベルではなく属性レベルで修正を行います。
     オブジェクトレベルの追加は、<function>ldap_add</function> 関数
     により行います。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-mod-del">
   <refnamediv>
    <refname>ldap_mod_del</refname>
    <refpurpose>現在の属性から属性を削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_mod_del</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>array <parameter>entry</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true;、エラー時に&false;を返します。
    </para>
    <para>
     この関数は、指定した dn から属性を削除します。この関数は、
     オブジェクトレベルではなく属性レベルで修正を行います。
     オブジェクトレベルの削除は、<function>ldap_del</function> 関数
     により行います。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-mod-replace">
   <refnamediv>
    <refname>ldap_mod_replace</refname>
    <refpurpose>属性を新規の値に置換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_mod_replace</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>array <parameter>entry</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true;、エラー時に&false;を返します。
    </para>
    <para>
     この関数は、指定した dn で置換を行います。この関数は、
     オブジェクトレベルではなく属性レベルで修正を行います。
     オブジェクトレベルの修正は、<function>ldap_modify</function> 関数
     により行います。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-next-attribute">
   <refnamediv>
    <refname>ldap_next_attribute</refname>
    <refpurpose>結果における次の属性を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ldap_next_attribute</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_entry_identifier</parameter></paramdef>
      <paramdef>int <parameter>ber_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功した場合、エントリにおける次の属性を返します。エラー時に&false;
     を返します。
    </para>
    <para>  
     <function>ldap_next_attribute</function> は、あるエントリにおいて
     属性を得るためにコールされます。ポインタの内部状態は、
     <parameter>ber_identifier</parameter> により保持されます。
     この ID は、参照により関数に渡されます。
     最初に<function>ldap_next_attribute</function>をコールした際には《     <function>ldap_first_attribute</function> から返され_
     <parameter>result_entry_identifier</parameter> が使用されます。
    </para>
    <para>
     <function>ldap_get_attributes</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-next-entry">
   <refnamediv>
    <refname>ldap_next_entry</refname>
    <refpurpose>次の結果エントリを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_next_entry</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>result_entry_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ldap_first_entry</function> によりエントリが読み始められた
     結果において次のエントリに関するエントリID を返します。
     これ以上結果のエントリがない場合は、&false;を返します。
    </para>
    <para>  
     <function>ldap_next_entry</function> は、結果に保持されたエントリを
     得るために使用されます。
     連続的に <function>ldap_next_entry</function> をコールした場合、
     エントリがなくなるまでエントリを一つずつ返します。
     <function>ldap_next_entry</function> への最初のコールは、
     <function>ldap_first_entry</function> をresult_entry_identifier
     を指定してコールした後に行われます。
     <function>ldap_get_entries</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-read">
   <refnamediv>
    <refname>ldap_read</refname>
    <refpurpose>エントリを読み込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_read</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>base_dn</parameter></paramdef>
      <paramdef>string <parameter>filter</parameter></paramdef>
      <paramdef>array 
       <parameter>
	<replaceable><optional>attributes</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>attrsonly</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sizelimit</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>timelimit</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>deref</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     サーチ結果IDを返します。エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_read</function> は、スコープ LDAP_SCOPE_BASE を有する
     ディレクトリを指定されたフィルタで探索を行います。
     これは、ディレクトリからエントリを読み込むことと等価です。
    </para>
    <para>
     フィルタ(filter)は必ず指定する必要があります。
     このエントリに関する全ての情報を完全に取得したい場合、
     "objectClass=*" というフィルタを使用して下さい。
     ディレクトリサーバーで使用されるエントリの型が分かっている場合、
     "objectClass=inetOrgPerson" のような適当なフィルタャ?使用すること
     ができます。
    </para>
    <para>
     この関数は、オプションのパラメータを5つとります。
     <function>ldap_search</function> の記述を参照下さい。
    </para>
    <note>
     <para>
      次のオプションパラメータは、PHP 4.0.2で追加されました。
      <parameter>attrsonly</parameter>,
      <parameter>sizelimit</parameter>,
      <parameter>timelimit</parameter>,
      <parameter>deref</parameter>
     </para>
    </note>
    <para>
     4.0.5以降、並行検索も実行可能となっています。詳細は、
     <function>ldap_search</function> を参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ldap-rename">
   <refnamediv>
    <refname>ldap_rename</refname>
    <refpurpose>エントリ名を修正する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>ldap_rename</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>dn</parameter></paramdef>
      <paramdef>string <parameter>newrdn</parameter></paramdef>
      <paramdef>string <parameter>newparent</parameter></paramdef>
      <paramdef>boolean <parameter>deleteoldrdn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>dn</parameter> で指定したエントリの名前を変更または移
     動します。新しいRDNは<parameter>newrdn</parameter>で指定し、新し
     い親エントリは<parameter>newparent</parameter>で指定します。パラ
     メータ<parameter>deleteoldrdn</parameter>が&true;の場合、古いRDN値
     は削除されます。&true;でない場合、古いRDN値はそのエントリの
     non-distinguished 値として残されます。成功時に&true;、エラーの際に
     &false;が返されます。
    </para>  
    <para>
     この関数は、OpenLDAP 2.x.x または Netscape Directory SDK x.x を使
     用している場合にのみ使用可能で、,PHP 4.0.5 で追加されたものです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-search">
   <refnamediv>
    <refname>ldap_search</refname>
    <refpurpose>LDAP ツリーを探索する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_search</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>string <parameter>base_dn</parameter></paramdef>
      <paramdef>string <parameter>filter</parameter></paramdef>
      <paramdef>array 
       <parameter>
	<replaceable><optional>attributes</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>attrsonly</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>sizelimit</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>timelimit</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>deref</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     サーチ結果IDを返します。エラーの場合に&false;を返します。
    </para>
    <para>  
     <function>ldap_search</function> は、
     LDAP_SCOPE_SUBTREE のスコープを有するディレクトリに関して、
     指定されたフィルタにより検索を行います。
     これは、ディレクトリ全体を探索することと等価です。
     <parameter>base_dn</parameter> はディレクトリのベース DN を指定し
     ます。
    </para>
    <para>
     サーバーから返される属性と値を必要なものだけに制限するために
     オプションの4番目のバラメータを指定することができます。
     これは、(全ての属性と関連する値を返す)デフォルトの動作よりも
     かなり効率的です。
     このため、4番目のパラメータを使用することが望ましいです。
    </para>
    <para>
     4番目のパラメータは、array("mail","sn","cn") のような
     必要な属性を保持する通常の PHP 文字列配列です。
     "dn" は要求された属性の型によらず常に返されることに注意して下さい。
    </para>
    <para>
     いくつかのディレクトリサーバーホストが返すエントリは、事前に指定された
     エントリ数を超えないように設定されています。このような場合、サー
     バーは結果セットの一部のみを返すことがあります。
    </para>
    <para>
     検索フィルターは、LDAP ドキュメントに記述されたフォーマットの論理
     演算子を用いて、簡単なものまたは高度なものとすることができます。
     (フィルターに関する詳細な情報については、
     <ulink url="&url.ldap.filters;">Netscape Directory SDK</ulink>
     を参照下さい)
    </para>
    <para>
     以下の例は、"My Company" の全員について姓または名に部分文字列
     $person を含まれる組織単位、姓、名、電子メールアドレスを取得します。
     この例は、複数の属性に関する情報についてサーバーに検索をかける論理
     フィルターを使用します。
     <example>
      <title>LDAP 検索</title>
      <programlisting role="php">
// $ds は、ディレクトリサーバーの有効なリンク ID
 
// $person は、人名またはその一部。例 "Jo"
 
$dn = "o=My Company, c=US";
$filter="(|(sn=$person*)(givenname=$person*))";
$justthese = array( "ou", "sn", "givenname", "mail");
 
$sr=ldap_search($ds, $dn, $filter, $justthese);
 
$info = ldap_get_entries($ds, $sr);
 
print $info["count"]." 個のエントリが返されました&lt;p>";
      </programlisting>
     </example>
    </para>
    <para>
     4.0.5以降、並行検索も可能となっています。並行検索を行うには、単一
     のIDを使うのではなく、リンクIDの配列を使用します。
     同じ基本DNを使用したくない場合や全ての検索について同じフィルタを
     使用したくない場合、基本DNの配列またはフィルタの配列を使用するこ
     とが可能です。これらの配列は、リンクIDの配列と同じ大きさである必
     要があります。これは、その配列の最初が一回の検索で使用され、2番目
     のエントリが他の検索で使用されるといったようになるからです。並行
     検索を実行する際、エラーの場合を除き、検索結果IDの配列が返されま
     す。エラーの場合は対応する検索のエントリは&false;となります。これは、
     通常返される値とよく似ていますが、検索が行われた際に結果IDが常に
     返されます。まれに、並行検索はIDを返すにもかかわらず通常の検索は
     &false;を返すということがあります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-set-option">
   <refnamediv>
    <refname>ldap_set_option</refname>
    <refpurpose>指定したオプションの値を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>ldap_set_option</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
      <paramdef>mixed <parameter>newval</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定したオプションの値を <parameter>newval</parameter> に設定し、
     成功時に&true;、エラーの場合に&false;を返します。
    </para>  
    <para>
     パラメータ <parameter>option</parameter> は次のどれかになります。
     LDAP_OPT_DEREF, LDAP_OPT_SIZELIMIT, LDAP_OPT_TIMELIMIT,
     LDAP_OPT_PROTOCOL_VERSION, LDAP_OPT_ERROR_NUMBER, LDAP_OPT_REFERRALS,
     LDAP_OPT_RESTART, LDAP_OPT_HOST_NAME, LDAP_OPT_ERROR_STRING,
     LDAP_OPT_MATCHED_DN, LDAP_OPT_SERVER_CONTROLS, LDAP_OPT_CLIENT_CONTROLS
     以下に簡単に説明しますが、詳細については、
     <ulink url="&url.ldap.openldap-c-api;">
      draft-ietf-ldapext-ldap-c-api-xx.txt</ulink>を参照下さい。
    </para>
    <para>
     オプション LDAP_OPT_DEREF、LDAP_OPT_SIZELIMIT、LDAP_OPT_TIMELIMIT、
     LDAP_OPT_PROTOCOL_VERSION、LDAP_OPT_ERROR_NUMBER は整数値であり、
     LDAP_OPT_REFERRALS、LDAP_OPT_RESTART は論理値、オプション
     LDAP_OPT_HOST_NAME、LDAP_OPT_ERROR_STRING、LDAP_OPT_MATCHED_DN の
     値は文字列です。最初の例でこれらの使用方法を説明します。オプショ
     ン LDAP_OPT_SERVER_CONTROLS、LDAP_OPT_CLIENT_CONTROLS はコントロー
     ルのリストを必要とします。これは、値がコントロールの配列である必
     要があることを意味します。コントロールは、そのコントロールのIDで
     ある <emphasis>oid</emphasis>、オプションの
     <emphasis>value</emphasis>、オプションのフラグ
     <emphasis>criticality</emphasis> からなります。PHPにおいてコント
     ロールは、キーが <emphasis>oid</emphasis> で値が文字列、二つのオ
     プションの要素からなる配列で指定されます。オプションの要素は、キー
     が <emphasis>value</emphasis> で値が文字列、キーが
     <emphasis>iscritical</emphasis> で値が論理値です。
     <emphasis>iscritical</emphasis> が指定されない場合のデフォルト値
     は <emphasis>&false;</emphasis> です。以下の2番目の例も参照下さい。
    </para>
    <para>
     この関数は、OpenLDAP 2.x.x または Netscape Directory SDK x.x を使
     用している場合のみ利用可能で、PHP 4.0.4で追加されました。
    </para>
    <para>
     <example>
      <title>プロトコルバージョンを設定する</title>
      <programlisting role="php">
// $ds はディレクトリサーバーへの有効なリンクIDです
if (ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3))
    echo "LDAPv3 を使用します";
else
    echo "プロトコルバージョンを 3 に設定できませんでした";
      </programlisting>
     </example>
     <example>
      <title>サーバコントロールを設定する</title>
      <programlisting role="php">
// $ds は値を持たないディレクトリサーバコントロールへの有効なリンクID
// です。
$ctrl1 = array("oid" => "1.2.752.58.10.1", "iscritical" => TRUE);
// iscritical のデフォルトは、FALSE です。
$ctrl2 = array("oid" => "1.2.752.58.1.10", "value" => "magic");
// 両方のコントロールを試す
if (!ldap_set_option($ds, LDAP_OPT_SERVER_CONTROLS, array($ctrl1, $ctrl2)))
    echo "サーバコントロールの設定に失敗しました。";
      </programlisting>
     </example>
    </para>
    <para>
     <function>ldap_get_option</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ldap-unbind">
   <refnamediv>
    <refname>ldap_unbind</refname>
    <refpurpose>LDAP ディレクトリへのバインドを解除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ldap_unbind</function></funcdef>
      <paramdef>int <parameter>link_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true;、エラー時に&false;を返します。
    </para>
    <para>  
     <function>ldap_unbind</function> 関数は、LDAP ディレクトリへの
     バインドを解除します。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
