 <reference id="ref.exec">
  <title>プログラム実行関数</title>
  <titleabbrev>プログラムの実行</titleabbrev>

  <refentry id="function.escapeshellcmd">
   <refnamediv>
    <refname>escapeshellcmd</refname>
    <refpurpose>エスケープシェル・メタキャラクター</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>escapeshellcmd</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>EscapeShellCmd</function>は、文字列中においてシェルコマンドをだまして
     勝手なコマンドを実行する可能性がある文字をエスケープします。
     この関数は、ユーザに入力されたデータを関数 <function>exec</function>または
     <function>system</function>または、
     <link linkend="language.operators.execution">backtick 演算子</link>
     に渡す前に全てエスケープを行う場合に使用するべきです。
     標準的な使い方は以下のようになるでしょう。</para>
    <para>
     <informalexample>
      <programlisting role="php">
system(EscapeShellCmd($cmd))
      </programlisting>
     </informalexample>
    </para>

    <para>
     <function>exec</function>, <function>popen</function>,
     <function>system</function>, <link
      linkend="language.operators.execution">backtick 演算子</link>
      も参照下さい。
    </para>

   </refsect1>
  </refentry>

  <refentry id="function.exec">
   <refnamediv>
    <refname>exec</refname>
    <refpurpose>外部プログラムを実行します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>exec</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
      <paramdef>string <parameter><optional>array</optional></parameter></paramdef>
      <paramdef>int <parameter><optional>return_var</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
    <function>exec</function> は指定された <parameter>command</parameter>を実行しますが、
    一切の出力はありません。ただ単に、コマンド結果の最後の行を返すだけ
    です。コマンドを実行し、一切干渉を受けずに直接コマンドから全てのデータを
    受けとる必要があるならば、<function>PassThru</function> 関数を
    使ってください。</para>
    <para>
    引数<parameter>array</parameter>が存在する場合、指定した配列は、
    コマンドからの出力の各行で埋められます。配列に既に何らかの要素が
    含まれる場合は、<function>exec</function>は配列の最後に追加される
    ことに注意してください。関数が要素を追加することを望まないのなら、
    それが <function>exec</function> に渡される前に、配列の
    <function>unset</function>を呼び出してください。
    引数<parameter>return_var</parameter>が、引数
    <parameter>array</parameter>と共に存在する場合、実行したコマンドの
    ステータスがこの変数に書かれます。</para>
    <para>
    ユーザ入力によるデータを、この関数に渡すことを許可したいのであれば、
    ユーザがシステムをだまして勝手なコマンドを実行できないように、
    <function>EscapeShellCmd</function>を使うべきです。</para>
    <para>
    <function>system</function>,<function>PassThru</function>,
    <function>popen</function>,<function>EscapeShellCmd</function>,
    <link linkend="language.operators.execution">backtick 演算子</link>
    も参照ください。</para>
   </refsect1>
  </refentry>

  <refentry id="function.passthru">
   <refnamediv>
    <refname>passthru</refname>
    <refpurpose>外部プログラムを実行し、未整形の出力を表示します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>passthru</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
      <paramdef>int <parameter><optional>return_var</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     PassThru()関数は<function>Exec</function>関数と同様、
     <parameter>command</parameter>を実行します。
     引数 <parameter>return_var</parameter> を指定した場合、
     Unix command のステータスで置換されます。
     この関数は Unix command からの出力がバイナリデータであり、
     ブラウザーへ直接返す必要がある場合、<function>Exec</function>
     もしくは<function>System</function>の代わりに使用する必要があります。
     よく使うのは、直接画像ストリームを出力することができる pbmplus
     ユーティリティの様なものを実行する場合です。content-type を
     <emphasis>image/gif</emphasis>に設定して、gifを出力するpbmplus
     プログラムを呼び出すことにより、直接画像を出力する PHP スクリプトを作成
     することができます。</para>
    <para>
    <function>exec</function>, 
    <function>system</function>, <function>popen</function>,
    <function>EscapeShellCmd</function>, 
    <link linkend="language.operators.execution">backtick 演算子</link>
    も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.system">
   <refnamediv>
    <refname>system</refname>
    <refpurpose>外部プログラムの実行と表示</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>system</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
      <paramdef>int <parameter><optional>return_var</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>System</function>は、与えられた
    <parameter>command</parameter>を実行し、結果を出力する
    C言語のsystem関数に似ています。
    2番目の引数として変数が指定された場合、実行したコマンドの
    ステータスコードが、この変数に書き込まれます。</para>
    <para>
    ユーザが入力したデータをこの関数に渡そうとする場合、
    <function>EscapeShellCmd</function>を使用して、ユーザが
    システムをだまして、勝手なコマンドを実行することのないように
    するべきです。</para>
    <para>
    PHP をサーバモジュールとして実行している場合、
    <function>System</function> 呼び出しにより、各行を出力した後、
    webサーバの出力バッファが自動的にクリアされます。</para>
    <para>
    成功時にコマンド出力の最後の行が返され、失敗時に false が返されます。
    </para>
    <para>
    コマンドを実行し、何の加工もせずに全てのデータをコマンドから直接
    返す必要がある場合、<function>PassThru</function>関数をお使いください。</para>
    <para>
     <function>exec</function>, <function>PassThru</function>, <function>popen</function>,
       <function>EscapeShellCmd</function>, <link
        linkend="language.operators.execution">backtick 演算子</link>を参照下さい。
   </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
