<?xml version="1.0" encoding="utf-8"?>
 <reference id="ref.funchand">
  <title>関数処理関数</title>
  <titleabbrev>関数</titleabbrev>

  <partintro>
   <para>
    これらの関数は、関数で行うような様々な処理を行います。
   </para>
  </partintro>

  <refentry id="function.call-user-func-array">
   <refnamediv>
    <refname>call_user_func_array</refname>
    <refpurpose>
     パラメータの配列を指定してユーザ関数をコールする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed 
       <function>call_user_func_array</function>
      </funcdef>
      <paramdef>string 
       <parameter>function_name</parameter>
      </paramdef>
      <paramdef>array 
       <parameter><optional>paramarr</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>paramarr</parameter> にパラメータを指定して、
     <parameter>function_name</parameter>で指定したユーザ定義関数をコー
     ルします。例えば次のようになります。
     <informalexample>
      <programlisting role="php">
function debug($var, $val)
    echo "***DEBUGGING\nVARIABLE: $var\nVALUE:";
    if (is_array($val) || is_object($val) || is_resource($val))
        print_r($val);
    else
        echo "\n$val\n";
    echo "***\n";
}

$c = mysql_connect();
$host = $HTTP_SERVER_VARS["SERVER_NAME"];

call_user_func_array ('debug', array("host", $host));
call_user_func_array ('debug', array("c", $c));
call_user_func_array ('debug', array("HTTP_POST_VARS", $HTTP_POST_VARS));
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>call_user_func</function>,
     <function>call_user_method</function>,
     <function>call_user_method_array</function>も参照下さい。
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.4pl1のリリース後にCVSコードに追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.call-user-func">
   <refnamediv>
    <refname>call_user_func</refname>
    <refpurpose>
     最初の引数で指定したユーザ関数をコールする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed 
       <function>call_user_func</function>
      </funcdef>
      <paramdef>string 
       <parameter>function_name</parameter>
      </paramdef>
      <paramdef>mixed 
       <parameter>
	<replaceable><optional>parameter</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>mixed 
       <parameter>
	<replaceable><optional>...</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     パラメータ<parameter>function_name</parameter>で指定したユーザ定義関数
     をコールします。次のようにして下さい。
     <informalexample>
      <programlisting role="php">
function barber ($type) {
    print "You wanted a $type haircut, no problem";
}
call_user_func ('barber', "mushroom");
call_user_func ('barber', "shave");
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>call_user_func_array</function>,
     <function>call_user_method</function>,
     <function>call_user_method_array</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.create-function">
   <refnamediv>
    <refname>create_function</refname>
    <refpurpose>匿名(ラムダ形式)関数を作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>create_function</function></funcdef>
      <paramdef>string <parameter>args</parameter></paramdef>
      <paramdef>string <parameter>code</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定したパラメータにより匿名関数を作成し、その関数のユニークな名
     前を返します。通常、<parameter>args</parameter> をシングルクオー
     トで括られた文字列で指定します。<parameter>code</parameter> につ
     いても同様に指定することが推奨されます。シングルクオートで括った
     文字列を使用する理由は、パース時に変数名を保護するためです。ダブ
     ルクオートを使用した場合には、<literal>\$avar</literal>のように変
     数名をエスケープする必要があります。
    </para>
    <para>
     (例えば、)実行時に取得した情報から関数を作成する際にこの関数を使
     用することが可能です。
     <example>
      <title>
       <function>create_function</function>により匿名関数を作成する
      </title>
      <programlisting role="php">
$newfunc = create_function('$a,$b','return "ln($a) + ln($b) = ".log($a * $b);');
echo "New anonymous function: $newfunc\n";
echo $newfunc(2,M_E)."\n";
// 出力
// 新規匿名関数: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
      </programlisting>
     </example>
     もしくは、一般的なハンドル関数を作成するために、パラメータのリス
     トに一連の演算子を適用することも可能です。
     <example>
      <title>
       <function>create_function</function>で一般的な処理関数を作成する
      </title>
      <programlisting role="php">
function process($var1, $var2, $farr) {
    for ($f=0; $f &lt; count($farr); $f++)
    echo $farr[$f]($var1,$var2)."\n";
}

// 一連の数学関数を作成する
$f1 = 'if ($a &gt;=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a &gt; 0 &amp;&amp; $b != 0) {return "ln(a)/b = ".log($a)/$b;} else {return false;}';
$farr = array(
    create_function('$x,$y', 'return "some trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "a hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUsing the first array of anonymous functions\n";
echo "parameters: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// 一連の文字列処理関数を作成する
$garr = array(
    create_function('$b,$a','if (strncmp($a,$b,3) == 0) return "** \"$a\" '.
    'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)";'),
    create_function('$a,$b','; return "CRCs: ".crc32($a)." , ".crc32(b);'),
    create_function('$a,$b','; return "similar(a,b) = ".similar_text($a,$b,&amp;$p)."($p%)";')
    );
echo "\nUsing the second array of anonymous functions\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
      </programlisting>
     </example>
     上のコードを実行した場合、出力は次のようになります。
     <informalexample>
      <programlisting>
Using the first array of anonymous functions
parameters: 2.3445, M_PI
some trig: -1.6291725057799
a hypotenuse: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a/b) = 0.27122299212594

Using the second array of anonymous functions
** "Twas the night" and "Twas brilling and the slithy toves"
** Look the same to me! (looking at the first 3 chars)
CRCs: -725381282 , 1908338681
similar(a,b) = 11(45.833333333333%)
      </programlisting>
     </informalexample>
     しかし、恐らくラムダ形式の(匿名)関数の最も一般的な使用法は、
    <function>array_walk</function> または <function>usort</function>
     を使用する場合にようにコールバック関数を作成する場合でしょう。
    <example>
     <title>コールバック関数として匿名関数を使用</title>
     <programlisting role="php">
$av = array("the ","a ","that ","this ");
array_walk($av, create_function('&amp;$v,$k','$v = $v."mango";'));
print_r($av);  // for PHP3 use var_dump()
// 出力:
// Array
// (
//   [0] =&gt; the mango
//   [1] =&gt; a mango
//   [2] =&gt; that mango
//   [3] =&gt; this mango
// )

// 短い順にソートされた文字列の配列
$sv = array("small","larger","a big string","it is a string thing");
print_r($sv);
// 出力:
// Array
// (
//   [0] =&gt; small
//   [1] =&gt; larger
//   [2] =&gt; a big string
//   [3] =&gt; it is a string thing
// )

// 長さ順にソートする
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
// 出力:
// Array
// (
//   [0] =&gt; it is a string thing
//   [1] =&gt; a big string
//   [2] =&gt; larger
//   [3] =&gt; small
// )
     </programlisting>
    </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.func-get-arg">
   <refnamediv>
    <refname>func_get_arg</refname>
    <refpurpose>引数のリストから要素を1つ返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>func_get_arg</function></funcdef>
       <paramdef>int <parameter>arg_num</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     ユーザーが定義した関数の引数リストで<parameter>arg_num</parameter>
     番目の引数を返します。関数の引数はゼロから数えられます。
     <function>func_get_arg</function> は関数定義以外の場所で
     コールされた場合に警告を発生します。
    </simpara>
    <simpara>
     <parameter>arg_num</parameter> が実際に渡された引数の数よりも大きい場合、
     警告を発生し、<function>func_get_arg</function>oFALSEを返?Y。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
   $numargs = func_num_args();
   echo "Number of arguments: $numargs&lt;br&gt;\n";
   if ( $numargs &gt;= 2 ) {
      echo "Second argument is: " . func_get_arg( 1 ) . "&lt;br&gt;\n";
   }
} 
 
foo( 1, 2, 3 );
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_arg</function>は<function>func_num_args</function>および
     <function>func_get_args</function>と組み合わせて使用され、これにより
     ユーザ定義の関数が可変長の引数リストをとることができるようになります。
    </simpara>
    <note>
     <simpara>
      この関数はPHP4で追加されました。
     </simpara>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.func-get-args">
   <refnamediv>
    <refname>func_get_args</refname>
    <refpurpose>関数の引数リストを配列として返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>func_get_args</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     各要素がユーザ定義関数の引数リストの各メンバーに対応する配列を
     返します。
     <function>func_get_args</function>は関数定義部以外でコールされた
     場合に警告を発生します。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
   $numargs = func_num_args();
   echo "Number of arguments: $numargs&lt;br&gt;\n";
   if ( $numargs &gt;= 2 ) {
      echo "Second argument is: " . func_get_arg( 1 ) . "&lt;br&gt;\n";
   }
   $arg_list = func_get_args();
   for ( $i = 0; $i &lt; $numargs; $i++ ) {
      echo "Argument $i is: " . $arg_list[$i] . "&lt;br&gt;\n";
   }
} 

foo( 1, 2, 3 );
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_args</function>は<function>func_num_args</function>
     および<function>func_get_arg</function>と組み合わせて使用され、
     これによりユーザ定義の章において可変長の引数リストを使用することが
     できるようになります。
    </simpara>
    <note>
     <simpara>
      この関数はPHP4で追加されました。
     </simpara>
    </note>
   </refsect1>
  </refentry>
 
  <refentry id="function.func-num-args">
   <refnamediv>
    <refname>func_num_args</refname>
    <refpurpose>関数に渡された引数の数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>func_num_args</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     カレントのユーザ定義関数に渡された引数の数を返します。
     <function>func_num_args</function>は関数定義部以外でコールされた
     場合に警告を発生します。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
   $numargs = func_num_args();
   echo "Number of arguments: $numargs\n";
} 
 
foo( 1, 2, 3 );  // 'Number of arguments: 3'を出力します。
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_num_args</function>は<function>func_get_arg</function>
     および<function>func_get_args</function>と組み合わせて使用され、
     ユーザ定義関数において可変長の引数リストを使用することができるようになります。
    </simpara>
    <note>
     <simpara>
      この関数はPHP4で追加されました。
     </simpara>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.function-exists">
   <refnamediv>
    <refname>function_exists</refname>
    <refpurpose>
     指定した関数が定義されている場合に&true;を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>function_exists</function></funcdef>
      <paramdef>string <parameter>function_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>function_name</parameter> について定義された関数のリス
     トを確認します。指定した関数名がある場合に&true;、他の場合に&false;を
     返します。
     <informalexample>
      <programlisting role="php">
if (function_exists('imap_open')) {
    echo "IMAP 関数が利用可能です。&lt;br&gt;\n";
} else {
    echo "IMAP 関数は利用できません。&lt;br&gt;\n";
}
      </programlisting>
     </informalexample>
     ある関数がそれ自体設定やコンパイルオプションの問題で使用できない
     場合でもその関数の名前が存在する可能性があることに注意して下さい。
    </para>
    <para>
     <function>method_exists</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.get-defined-functions">
   <refnamediv>
    <refname>get_defined_functions</refname>
    <refpurpose>
     定義済みの全ての関数を配列で返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_defined_functions</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、組込(内部)関数およびユーザ定義関数を共に含む定義済み
     の全ての関数のリストを有する多次元配列を返します。内部関数は、
     <varname>$arr["internal"]</varname>、ユーザ定義関数は
     <varname>$arr["user"]</varname> によりアクセス可能となります。(以
     下の例を参照)
     <informalexample>
      <programlisting role="php">
function myrow($id, $data) {
    return "&lt;tr&gt;&lt;th&gt;$id&lt;/th&gt;&lt;td&gt;$data&lt;/td&gt;&lt;/tr&gt;\n";
}

$arr = get_defined_functions();

print_r($arr);
     </programlisting>
     </informalexample>
    </para>
    <para>
     この例の出力は、以下のようになります。
     <informalexample>
      <programlisting>
Array
(
    [internal] =&gt; Array
        (
            [0] =&gt; zend_version
            [1] =&gt; func_num_args
            [2] =&gt; func_get_arg
            [3] =&gt; func_get_args
            [4] =&gt; strlen
            [5] =&gt; strcmp
            [6] =&gt; strncmp
            ...
            [750] =&gt; bcscale
            [751] =&gt; bccomp
        )

    [user] =&gt; Array
        (
            [0] =&gt; myrow
        )

)
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>get_defined_vars</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.register-shutdown-function">
   <refnamediv>
    <refname>register_shutdown_function</refname>
    <refpurpose>シャットダウン時に実行する関数を登録する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>register_shutdown_function</function></funcdef>
      <paramdef>string <parameter>func</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     スクリプト処理が完了した際に実行される <parameter>func</parameter> 
     という名前の関数を登録します。
    </simpara>
    <para>
     陥りやすいミス:
    </para>
    <simpara>
     この関数ではブラウザへの出力は許可されないので、
     printまたはechoのような文を使用してデバッグを行うことはできません。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.register-tick-function">
   <refnamediv>
    <refname>register_tick_function</refname>
    <refpurpose>
     各tickで実行する関数を登録する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void
       <function>register_tick_function</function>
      </funcdef>
      <paramdef>string <parameter>func</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>arg</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <link linkend="control-structures.declare">tick</link>がコールさ
     れた際に実行される<parameter>func</parameter>という名前の関数を登
     録します。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.unregister-tick-function">
   <refnamediv>
    <refname>unregister_tick_function</refname>
    <refpurpose>
     各tickの実行用の関数の登録を解除する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void
       <function>unregister_tick_function</function>
      </funcdef>
      <paramdef>string <parameter>func</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>arg</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>func</parameter> という名前の関数の登録を解除します。
     これにより、<link
     linkend="control-structures.declare">tick</link>がコールされた場
     合でもこの関数は実行されなくなります。
    </simpara>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
