<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
 <reference id="ref.dio">
  <title>ダイレクトIO(DIO)関数</title>
  <titleabbrev>DIO関数</titleabbrev>

  <partintro>
   <section id="dio.intro">
    <title>ダイレクトI/O関数</title>
    <para>
     PHPは、POSIX標準(第6章)に記述されたダイレクトIO関数をサポートしま
     す。これらは、C言語のストリームI/O関数(fopen, fread,..)よりも低レ
     ベルのI/O関数の実装です。
    </para>
   </section>

   <section id="dio.installation">
    <title>インストール</title>
    <para>
     これらの関数を動作させるには、<option
     role="configure">--enable-dio</option>を付けてPHPのconfigureを行
     う必要があります。
    </para>
   </section>
  </partintro>
 
  <refentry id="function.dio-open">
   <refnamediv>
    <refname>dio_open</refname>
    <refpurpose>
     許可属性flagsと作成許可属性modeを指定して新規にfilenameをオープン
     する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>dio_open</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int <parameter>flags</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>mode</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dio_open</function>は、ファイルをオープンし、そのファイ
     ル記述子を返します。何らかのエラーが発生した場合は、-1を返します。
     <parameter>flags</parameter>がO_CREATの場合、オプションの3番目の
     パラメータ<parameter>mode</parameter>がファイルのモード(作成許可
     属性)を設定します。<parameter>flags</parameter>パラメータは、以下
     のオプションのどれかとします。
     <itemizedlist>
      <listitem>
       <para>O_RDONLY - 読み込みアクセスでファイルをオープン</para>
      </listitem>
      <listitem>
       <para>O_WRONLY - 書き込みアクセスでファイルをオープン</para>
      </listitem>
      <listitem>
       <para>
        O_RDWR - 読み書き両用でファイルをオープン
       </para>
      </listitem>
     </itemizedlist>
     <parameter>flags</parameter>パラメータには、以下のフラグの組み合
     わせを含めることができます。
     <itemizedlist>
      <listitem>
       <para>
        O_CREAT - ファイルが存在しない場合は作成します。
       </para>
      </listitem> 
      <listitem>
       <para>
        O_EXCL - O_CREATとO_EXCLが両方とも設定された場合、ファイルが既
        に存在すると<function>dio_open</function>は失敗します。
       </para>
      </listitem> 
      <listitem>
       <para>
        O_TRUNC - ファイルが存在し、書き込みアクセスでオープンされる場
        合には、ファイルは長さゼロに丸められます。
       </para>
      </listitem>
      <listitem>
       <para>
        O_APPEND - ファイルの後端にデータを書き込みます。
       </para>
      </listitem> 
      <listitem>
       <para>
        O_NONBLOCK - 非ブロッキングモードに設定します。
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-read">
   <refnamediv>
    <refname>dio_read</refname>
    <refpurpose>
     fdからnバイト読みこんで返す。nが指定されない場合は、1kブロックを
     読みこむ
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dio_read</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
      <paramdef>int <parameter><optional>n</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_read</function>は、記述子
     <parameter>resource</parameter>から<parameter>n</parameter>バイト
     を読み込んで返します。<parameter>n</parameter>が指定されない場合、
     <function>dio_read</function>は1kサイズのブロックを読み込んで返し
     ます。
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-write">
   <refnamediv>
    <refname>dio_write</refname>
    <refpurpose>
     オプションで丸め長さを指定してデータを書き込む
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dio_write</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter><optional>len</optional></parameter>
     </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_write</function>は、<parameter>data</parameter>
     からファイル<parameter>fd</parameter>に最大
     <parameter>len</parameter>バイトを書き込みます。
     <parameter>len</parameter>が指定されない場合、
     <function>dio_write</function>は指定したファイルに
     <parameter>data</parameter>を全て書き込みます。
     <function>dio_write</function>は、<parameter>fd</parameter>に書き
     込んだバイト数を返します。
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-truncate">
   <refnamediv>
    <refname>dio_truncate</refname>
    <refpurpose>
     ファイル記述子fdをオフセットバイトへ丸める
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dio_truncate</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_truncate</function>は、
     <parameter>fd</parameter>で参照されるファイルを最大
     <parameter>offset</parameter>バイトの大きさに丸めます。このファイ
     ルが指定した大きさよりも大きかった場合には、余分なデータが失われ
     ます。ファイルがより小さかった場合、変更されないか、拡張されるか
     は不確定です。後者の場合、拡張される部分は、ゼロバイトとして読ま
     れます。成功時に0、その他の場合に-1を返します。
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-stat">
   <refnamediv>
    <refname>dio_stat</refname>
    <refpurpose>
     ファイル記述子fdに関するstat情報を取得する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>dio_stat</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_stat</function>は、ファイル記述子
     <parameter>fd</parameter>に関する情報を返します。
     <function>dio_stat</function>は、以下のキーを有する連想配列を返し
     ます。
     <itemizedlist>
      <listitem><para>"device" - device</para></listitem>
      <listitem><para>"inode" - inode</para></listitem>
      <listitem><para>"mode" - mode</para></listitem>
      <listitem><para>"nlink" - ハードリンクの数</para></listitem>
      <listitem><para>"uid" - ユーザID</para></listitem>
      <listitem><para>"gid" - グループID</para></listitem>
      <listitem>
       <para>
        "device_type" - デバイス型 (inodeデバイスの場合)
       </para>
      </listitem>
      <listitem><para>"size" - バイト数単位のサイズ</para></listitem>
      <listitem><para>"blocksize" - ブロック長</para></listitem>
      <listitem><para>"blocks" - 確保されたブロックの数</para></listitem>
      <listitem><para>"atime" - 直近のアクセス時刻</para></listitem>
      <listitem><para>"mtime" - 直近の修整時刻</para></listitem>
      <listitem><para>"ctime" - 直近の変更時刻</para></listitem>
     </itemizedlist>
     エラー時に<function>dio_stat</function>は、NULLを返します。
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-seek">
   <refnamediv>
    <refname>dio_seek</refname>
    <refpurpose>fd上でwhenceからposに移動する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dio_seek</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
      <paramdef>int <parameter>pos</parameter></paramdef>
      <paramdef>int <parameter>whence</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_seek</function>は、記述子
     <parameter>resource</parameter>を有するファイルのファイル位置を変
     更する際に使用されます。パラメータ<parameter>whence</parameter>は、
     位置<parameter>pos</parameter>の記述方式を指定します。
     <itemizedlist>
      <listitem>
       <para>
        SEEK_SET - <parameter>pos</parameter>がファイル先頭からの位置
        であることを指定します。
       </para>
      </listitem>
      <listitem>
       <para>
        SEEK_CUR - <parameter>pos</parameter>がカレントのファイル位置
        からの文字数であることを指定します。このカウントは正または負で
        す。
       </para>
      </listitem>
      <listitem>
       <para>
        SEEK_END - <parameter>pos</parameter>がファイル終端からの文字
        数であることを指定します。負のcountは、カレントのファイルの範
        囲内に位置を指定します。正のcountは、カレントの終端を過ぎた位
        置を指定します。カレントの終端を位置を指定し、データを実際に書
        き込んだ場合、ファイルはその位置までゼロバイトで埋めて拡張され
        ます。
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-fcntl">
   <refnamediv>
    <refname>dio_fcntl</refname>
    <refpurpose>fdについてCライブラリのfcntlを実行する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>dio_fcntl</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
      <paramdef>int <parameter>cmd</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>arg</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_fcntl</function>は、ファイル記述子
     <parameter>fd</parameter>において<parameter>cmd</parameter>で指定
     された処理を行います。いくつかのコマンドでは、オプションの引数
     <parameter>args</parameter>の指定が必要となります。
    </para>
    <para>
     <parameter>cmd</parameter>がF_SETLKまたはF_SETLLWの場合、
     <parameter>arg</parameter>は連想配列で、以下のキーを有します。
     <itemizedlist>
      <listitem>
       <para>
        "start" - ロック開始場所からのオフセット
       </para>
      </listitem>
      <listitem>
       <para>
        "length" - ロック領域の大きさ。0はファイル終端を意味します。
       </para>
      </listitem>
      <listitem>
       <para>
        "wenth" - l_startの相対位置指定: SEEK_SET, SEEK_END, SEEK_CUR
        のどれかとします。
       </para>
      </listitem>
      <listitem>
       <para>
        "type" - ロックの種類: F_RDLCK (読み込みロック), F_WRLCK
        (書き込みロック),  F_UNLCK (ロック解除)のどれかとします。
       </para>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <parameter>cmd</parameter>は以下の処理のどれかとします。
     <itemizedlist>
      <listitem>
       <para>
        F_SETLK - ロックは設定またはクリアされます。lockが他の誰かに設
        定されている場合、<function>dio_fcntl</function>は-1を返します。
       </para>
      </listitem>
      <listitem>
       <para>
        F_SETLKW - F_SETLKと似ていますが、ロックが他の誰かに設定されて
        いる場合、<function>dio_fcntl</function>はそのロックが解放され
        るまで待ちます。
       </para>
      </listitem>
      <listitem>
       <para>
        F_GETLK - <function>dio_fcntl</function>は、他の誰かがロックを
        妨げる場合、(上記の)連想配列を返します。妨げるものがない場合、
        キー"type"はF_UNLCKに設定されます。
       </para>
      </listitem>
      <listitem>
       <para>
        F_DUPFD - <parameter>arg</parameter>以上で最小の数値の利用可能
        なファイル記述子を探して返します。
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>
	
  <refentry id="function.dio-close">
   <refnamediv>
    <refname>dio_close</refname>
    <refpurpose>fdで指定したファイル記述子を閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>dio_close</function></funcdef>
      <paramdef>resource <parameter>fd</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>dio_close</function>は、ファイル記述子
     <parameter>resource</parameter>を閉じます。
    </para>
   </refsect1>
  </refentry>
	
 </reference>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

