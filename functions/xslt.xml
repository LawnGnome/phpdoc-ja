<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.13 $ -->
 <reference id="ref.xslt">
  <title>XSLT 関数</title>
  <titleabbrev>XSLT</titleabbrev>
  
  <partintro>
   <sect1 id="xslt.partintro">
    <title>導入</title>

    <sect2 id="xslt.intro">
     <title>XSLT と Sablotronについて</title>
     <para>
      XSLT (Extensible Stylesheet Language (XSL)
      Transformations) は、XMLドキュメントを他のXMLドキュメントに変換
      する言語です。XSLTは、World Wide Web コンソーシアム (W3C) により
      標準化されています。XSLTに関する情報と関連技術については、
      <ulink url="&url.xslt;">&url.xslt;</ulink> から得ることができま
      す。
     </para>
    </sect2>

    <sect2 id="xslt.install">
     <title>インストール</title>
     <para>
      この拡張モジュールは、<productname>Sabloton</productname>および
      <productname>expat</productname> を使用します。これらは、共に
      <ulink url="&url.sablotron;">&url.sablotron;</ulink>から得ること
      が可能です。 実行バイナリがソースコードと同様に配布されています。
     </para>
     <para>
      UNIXでは、オプション <option
      role="configure">--enable-xslt --with-xslt-sablot</option>を指定
      して<command>configure</command> を実行します。ライブラリ
      <productname>Sablotron</productname> をコンパイラが見付けられる
      場所にインストールする必要があります。
     </para>
    </sect2>
    
    <sect2 id="xslt.about">
     <title>この拡張モジュールについて</title>
     <para>
      このPHP拡張モジュールは、APIに独立なXSLT変換を提供します。現在、
      この拡張モジュールは、Ginger AllianceによるSablotronライブラリの
      みをサポートします。Xalanライブラリまたはlibxsltライブラリのよう
      な他のライブラリのサポートも計画されています。
     </para>
     <note>
      <simpara>
       この拡張は、PHP 4.1より前のバージョンPHPで配布されていた
       sablotron拡張モジュールとは異なっており、現在、PHP 4.1の新しい
       XSLT拡張モジュールのみがサポートされています。古い拡張モジュー
       ルのサポートが必要な場合は、メーリングリスト
       php-general@lists.php.netに質問して下さい。
      </simpara>
     </note>
    </sect2>

   </sect1>
  </partintro>

  <refentry id="function.xslt-set-log">
   <refnamediv>
    <refname>xslt_set_log</refname>
    <refpurpose>Set the log file to write log messages to</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_log</methodname>
      <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>log</parameter></methodparam>
     </methodsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>xh</parameter></term>
       <listitem>
    <simpara>
     A reference to the XSLT parser.
    </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>log</parameter></term>
       <listitem>
       <simpara>
       This parameter is either a boolean value which toggles logging on and off, or a
       string containing the logfile in which log errors too.
       </simpara>
       </listitem>
      </varlistentry> 
     </variablelist></para>
    <para>
    This function allows you to set the file in which you want XSLT log messages to, 
    XSLT log messages are different than error messages, in that log messages are not 
    actually error messages but rather messages related to the state of the XSLT processor.
    They are useful for debugging XSLT, when something goes wrong.
    </para>
    <para>
    By default logging is disabled, in order to enable logging you must first call 
    <function>xslt_set_log</function> with a boolean parameter which enables logging, then if 
    you want to set the log file to debug to, you must then pass it a string containing the 
    filename:
     <example>
      <title>
      Using the XSLT Logging features
      </title>
      <programlisting role="php">
<![CDATA[
<?php

$xh = xslt_create();
xslt_set_log($xh, true);
xslt_set_log($xh, getcwd() . 'myfile.log');

$result = xslt_process($xh, 'dog.xml', 'pets.xsl');
print($result);

xslt_free($xh);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-create">
   <refnamediv>
    <refname>xslt_create</refname>
    <refpurpose>新規のXSLTプロセッサを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>resource</type><methodname>xslt_create</methodname>
      <void/>
     </methodsynopsis>
    <para>
     新規にXSLTプロセッサリソースを作成し、返します。このリソースは、
     他のXSLT関数による処理で使用されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-errno">
   <refnamediv>
    <refname>xslt_errno</refname>
    <refpurpose>カレントエラー番号を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>xslt_errno</methodname>
      <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
     </methodsynopsis>
    <para>
     XSLTプロセッサで発生した直近のエラーを記述するエラーコードを返し
     ます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-error">
   <refnamediv>
    <refname>xslt_error</refname>
    <refpurpose>カレントのエラー文字列を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>xslt_error</methodname>
      <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
     </methodsynopsis>
    <para>
     指定したXSLTプロセッサで発生した直近のエラーを説明する文字列を返
     します。
    </para>
    <para>
     <example>
      <title>
       関数<function>xslt_error</function>および
       <function>xslt_errno</function>を用いてエラーを処理する
      </title>
      <programlisting role="php">
<![CDATA[
<?php

$xh = xslt_create();
$result = xslt_process($xh, 'dog.xml', 'pets.xsl');
if (!$result) {
    die(sprintf("Cannot process XSLT document [%d]: %s", 
                xslt_errno($xh), xslt_error($xh)));
}

print($result);

xslt_free($xh);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-free">
   <refnamediv>
    <refname>xslt_free</refname>
    <refpurpose>XSLT プロセッサを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_free</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
     </methodsynopsis>
    <para>
     ハンドルで指定したXSLTプロセッサを開放します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-process">
   <refnamediv>
    <refname>xslt_process</refname>
    <refpurpose>XSLデータを有する文字列によりXMLデータを変換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>xslt_process</methodname>
      <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
      <methodparam><type>string</type><parameter>xml</parameter></methodparam>
      <methodparam><type>string</type><parameter>xsl</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>result</parameter></methodparam>
       <methodparam choice="opt"><type>array</type><parameter>arguments</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>xslt_process</function>関数は、新規XSLT拡張の中心関数で
     す。引数バッファの概念により、ほとんど全ての型の入力ソースを用い
     てXSLT変換を実行可能です。引数バッファは、Sablotron XSLTプロセッ
     サ(現在、この拡張モジュールがサポートする惟一のXSLTプロセッサ)か
     ら得た概念です。
    </para>
    <para>
     <function>xslt_process</function>関数で変換する最も簡単な方法は、
     XMLファイルをXSLTファイルで変換し、結果を新しいXMLドキュメント(ま
     たはHTMLドキュメント)を含む3番目のファイルに出力することです。
     これをsablotronを行うのは、かなり簡単です。
    </para>
    <example>
     <title>
      XMLファイルとXSLファイルを新規XMLファイルに変換するために
      <function>xslt_process</function>を使用する
     </title>
     <programlisting role="php">
<![CDATA[
<?php

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document
if (xslt_process($xh, 'sample.xml', 'sample.xsl', 'result.xml')) {
    print "SUCCESS, sample.xml was transformed by sample.xsl into result.xml";
    print ", result.xml has the following contents\n<br>\n";
    print "<pre>\n";
    readfile('result.xml');
    print "</pre>\n";
}
else {
    print "Sorry, sample.xml could not be transformed by sample.xsl into";
    print "  result.xml the reason is that " . xslt_error($xh) . " and the ";
    print "error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
     </programlisting>
    </example>
    <para>
     この機能は優れていますが、特にWeb環境では、結果を直接出力したい場
     合があります。そこで、<function>xslt_process</function>の3番目の
     引数を省略した場合(またはその引数にNULL値を指定した場合)、ファイ
     ルに書き込む替わりに自動的にXSLT変換後の出力を返します。
    </para>
    <para>
     <example>
      <title>
       XMLファイルとXSLファイルを結果XMLデータを含む変数に変換するため
       に<function>xslt_process</function>を使用する
      </title>
     <programlisting role="php">
<![CDATA[
<?php

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document, returning the result into the $result variable
$result = xslt_process($xh, 'sample.xml', 'sample.xsl');
if ($result) {
    print "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    print " variable, the \$result variable has the following contents\n<br>\n";
    print "<pre>\n";
    print $result;
    print "</pre>\n";
}
else {
    print "Sorry, sample.xml could not be transformed by sample.xsl into";
    print "  the \$result variable the reason is that " . xslt_error($xh) . 
    print " and the error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     上の二つのケースは、XSLT変換の最も簡単な場合です。これは、多くの
     場合には通用しますが、時々、データベースまたはソケットのような外
     部ソースからXMLとXSLTコードを取得する場合があります。このような場
     合、XMLまたはXSLTデータを変数に有することになります。
     実用アプリケーションでは、これらをファイルにダンプする際のオーバー
     ヘッドは大きいと言えます。このような場合こそ、XSLT
     &quot;argument&quot; 構文が役に立ちます。
     <function>xslt_process</function>関数のXMLおよびXSLT引数としてファ
     イルの替わりに引数配列(<function>xslt_process</function>関数の5番
     目のパラメータ)で指定した値に置換される&quot;argument place
     holders&quot;を指定することが可能です。
     以下にファイルを全く使用せずにXMLおよびXSLTを結果変数に処理する例
     を示します。
    </para>
    <para>
     <example>
      <title>
       XMLデータを含む変数とXSLTデータを含む変数をXMLデータ出力結果を
       含む変数に変換するために<function>xslt_process</function>を使用
       する
      </title>
     <programlisting role="php">
<![CDATA[
<?php
// $xml and $xsl contain the XML and XSL data

$arguments = array(
     '/_xml' => $xml,
     '/_xsl' => $xsl
);

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document
$result = xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments); 
if ($result) {
    print "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    print " variable, the \$result variable has the following contents\n<br>\n";
    print "<pre>\n";
    print $result;
    print "</pre>\n";
}
else {
    print "Sorry, sample.xml could not be transformed by sample.xsl into";
    print "  the \$result variable the reason is that " . xslt_error($xh) . 
    print " and the error code is " . xslt_errno($xh);
}
xslt_free($xh);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     最後に、<function>xslt_process</function>関数の最後の引数は、XSLT
     ドキュメントに渡したいあらゆる引数です。これらのパラメータは、
     &lt;xsl:param name=&quot;parameter_name&quot;&gt;命令を用いて
     XSLファイルの中でアクセスすることが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-set-sax-handler">
   <refnamediv>
    <refname>xslt_set_sax_handler</refname>
    <refpurpose>XSLTプロセッサに SAX ハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_sax_handler</methodname>
      <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
      <methodparam><type>array</type><parameter>handlers</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>xh</parameter>で指定したリソースハンドルにSAX ハンドラ
     を設定します。SAXハンドラは、フォーマットの2次元配列とする必要が
     あります。(全てのトップレベル要素はオプションです)
     <informalexample>
      <programlisting role="php">
<![CDATA[
array(
[document] => 
    array(
        start document handler,
        end document handler
    ),
[element] => 
    array(
        start element handler,
        end element handler
    ),
[namespace] => 
    array(
        start namespace handler,
        end namespace handler
    ),
[comment] => comment handler,
[pi] => processing instruction handler,
[character] => character data handler
)
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-set-scheme-handler">
   <refnamediv>
    <refname>xslt_set_scheme_handler</refname>
    <refpurpose>XSLTプロセッサ用にスキーマハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_scheme_handler</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
       <methodparam><type>array</type><parameter>handlers</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>xh</parameter>で指定したリソースハンドルにスキーマハン
     ドラを設定します。スキーマハンドラは、フォーマットの配列とする必
     要があります。(全ての要素はオプションです)
     <informalexample>
      <programlisting role="php">
<![CDATA[
array(
[get_all] => get all handler,
[open] => open handler,
[get] => get handler,
[put] => put handler,
[close] => close handler
)
]]>
     </programlisting>
    </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-set-error-handler">
   <refnamediv>
    <refname>xslt_set_error_handler</refname>
    <refpurpose>XSLTプロセッサ用のエラーハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_error_handler</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
       <methodparam><type>mixed</type><parameter>handler</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>xh</parameter>で指定したXSLTプロセッサ用にエラーハンド
     ラ関数を設定します。この関数は、XSLT変換においてエラーが発生する
     度にコールされます。(この関数は通知のためにもコールされます)
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-set-base">
   <refnamediv>
    <refname>xslt_set_base</refname>
    <refpurpose>全てのXSLT変換用の基準URIを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_base</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
       <methodparam><type>string</type><parameter>uri</parameter></methodparam>
     </methodsynopsis>
    <para>
     全てのXSLT変換の基準URIを設定します。基準URIは、外部リソースにア
     クセスするdocument()及び他のコマンドを解決する際にXpath命令に関し
     て使用されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xslt-set-encoding">
   <refnamediv>
    <refname>xslt_set_encoding</refname>
    <refpurpose>
     XMLドキュメントをパースするエンコーディングを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_encoding</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
       <methodparam><type>string</type><parameter>encoding</parameter></methodparam>
     </methodsynopsis>
    <para>
     XSLT変換の出力エンコーディングを設定します。
     Sablotronバックエンドを使用する際、このオプションは、Sablotronに
     エンコーディングサポートを付けてコンパイルした場合のみ利用可能で
     す。
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.xslt-set-sax-handlers'>
   <refnamediv>
    <refname>xslt_set_sax_handlers</refname>
    <refpurpose>
     XMLドキュメントを処理する際にコールされるSAXハンドラを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_sax_handlers</methodname>
      <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
      <methodparam><type>array</type><parameter>handlers</parameter></methodparam>
     </methodsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.xslt-set-scheme-handlers'>
   <refnamediv>
    <refname>xslt_set_scheme_handlers</refname>
    <refpurpose>
     XSLTプロセッサに関するスキーマハンドラを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_scheme_handlers</methodname>
      <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
      <methodparam><type>array</type><parameter>handlers</parameter></methodparam>
     </methodsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

