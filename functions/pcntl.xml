<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
 <reference id="ref.pcntl">
  <title>プロセス制御関数</title>
  <titleabbrev>PCNTL</titleabbrev>
  <partintro>
   <para>
    PHPがサポートするプロセス制御関数は、UNIX形式のプロセス生成、プロ
    セス実行、シグナル処理、プロセス終了機能を実装しています。
    プロセス制御は、Webサーバ環境で有効にするべきではなく、プロセス制
    御関数のどれかがWebサーバ環境で使用された場合には、予期しない結果
    を生じる可能性があります。
   </para>
   <para>
    この文書は、プロセス制御関数の一般的な使用法を説明しようとするもの
    です。UNIXのプロセス制御に関する詳細な情報については、fork(2),
    waitpid(2) and signal(2)のようなシステムのドキュメントや、
    <citation>Advanced Programming in the UNIX Environment by
    W. Richard Stevens (Addison-Wesley)</citation>のような優れた参考書
    を読まれることを推奨します。
   </para>
   <para>
    PHPがサポートするプロセス制御機能は、デフォルトでは有効となってい
    ません。プロセス制御機能を有効にするには、PHPをコンパイルする際に
    configure のオプションに <link
    linkend="install.configure.enable-pcntl">--enable-pcntl</link>
    を付ける必要があります。
   </para>
   <note>
    <para>
     現在、このモジュールは非UNIX環境(Windows)では動作しません。
    </para>
   </note>
   <para>
    以下のシグナルのリストは、プロセス制御関数でサポートされているもの
    です。これらのシグナルのデフォルト動作の詳細については、 signal(7)
    のマニュアルを参照下さい。
   <table>
    <title>サポートされるシグナル</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry><literal>SIGFPE</literal></entry>
       <entry><literal>SIGCONT</literal></entry>
       <entry><literal>SIGKILL</literal></entry>
      </row>
      <row>
       <entry><literal>SIGSTOP</literal></entry>
       <entry><literal>SIGUSR1</literal></entry>
       <entry><literal>SIGTSTP</literal></entry>
      </row>
      <row>
       <entry><literal>SIGHUP</literal></entry>
       <entry><literal>SIGUSR2</literal></entry>
       <entry><literal>SIGTTIN</literal></entry>
      </row>
      <row>
       <entry><literal>SIGINT</literal></entry>
       <entry><literal>SIGSEGV</literal></entry>
       <entry><literal>SIGTTOU</literal></entry>
      </row>
      <row>
       <entry><literal>SIGQUIT</literal></entry>
       <entry><literal>SIGPIPE</literal></entry>
       <entry><literal>SIGURG</literal></entry>
      </row>
      <row>
       <entry><literal>SIGILL</literal></entry>
       <entry><literal>SIGALRM</literal></entry>
       <entry><literal>SIGXCPU</literal></entry>
      </row>
      <row>
       <entry><literal>SIGTRAP</literal></entry>
       <entry><literal>SIGTERM</literal></entry>
       <entry><literal>SIGXFSZ</literal></entry>
      </row>
      <row>
       <entry><literal>SIGABRT</literal></entry>
       <entry><literal>SIGSTKFLT</literal></entry>
       <entry><literal>SIGVTALRM</literal></entry>
      </row>
      <row>
       <entry><literal>SIGIOT</literal></entry>
       <entry><literal>SIGCHLD</literal></entry>
       <entry><literal>SIGPROF</literal></entry>
      </row>
      <row>
       <entry><literal>SIGBUS</literal></entry>
       <entry><literal>SIGCLD</literal></entry>
       <entry><literal>SIGWINCH</literal></entry>
      </row>
      <row>
       <entry><literal>SIGPOLL</literal></entry>
       <entry><literal>SIGIO</literal></entry>
       <entry><literal>SIGPWR</literal></entry>
      </row>
      <row>
       <entry><literal>SIGSYS</literal></entry>
       <entry><literal></literal></entry>
       <entry><literal></literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   </para>

   <sect1 id="pcntl-example">
    <title>プロセス制御の例</title>
    <para>
     この例は、シグナルハンドラを有するデーモンプロセスをフォークオフ
     します。
    </para>
    <example>
     <title>プロセス制御の例</title>
     <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die("could not fork"); 
} else if ($pid) {
     exit(); // 親プロセスの場合
} else {
     // 子プロセスの場合
}

// 制御側の端末からデタッチ
if (!posix_setsid()) {
    die("could not detach from terminal");
}

// シグナルハンドラを設定
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

// 無限ループでタスク実行
while(1) {

    // 何か面白いことをここで行う

}


function sig_handler($signo) {

     switch($signo) {
         case SIGTERM:
             // 終了タスクを処理
             exit;
             break;
         case SIGHUP:
             // 再起動タスクを処理
             break;
         default:
             // その他の全てのシグナルを処理
     }

}


?>
]]>
     </programlisting>
    </example>
   </sect1>
  </partintro>
  
  <refentry id="function.pcntl-fork">
   <refnamediv>
    <refname>pcntl_fork</refname>
    <refpurpose>現在実行中のプロセスをフォークする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_fork</methodname>
      <void/>
     </methodsynopsis>
    <para>
     <function>pcntl_fork</function> 関数は、親プロセスとそのPIDおよび
     PPIDのみが異なる子プロセスを生成します。システム上でのフォークの
     動作の具体的な詳細については、実行するシステムのfork(2)のマニュア
     ルを参照下さい。
    </para>
    <para>
     成功時に、子プロセスのPIDが親プロセスの実行スレッドに返され、子プ
     ロセスの実行スレッドには0が返されます。失敗した場合、親プロセスの
     コンテキストに-1が返され、子プロセスは生成されずに、PHPのエラーが
     出力されます。
    </para>
    <example>
     <title><function>pcntl_fork</function> の例</title>
     <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die("could not fork");
} else if ($pid) {
     // 親プロセスの場合
} else {
     // 子プロセスの場合
}

?>
]]>
     </programlisting>
    </example>
    <para>
     <function>pcntl_waitpid</function>および
     <function>pcntl_signal</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.pcntl-signal">
   <refnamediv>
   <refname>pcntl_signal</refname>
    <refpurpose>シグナルハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>pcntl_signal</methodname>
      <methodparam><type>int</type><parameter>signo</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>handle</parameter></methodparam>
     </methodsynopsis>
    <para>
     The <function>pcntl_signal</function> function installs a new
     signal handler for the signal indicated by
     <parameter>signo</parameter>.  The signal handler is set to
     <parameter>handler</parameter> which may be the name of a user
     created function, or either of the two global constants SIG_IGN
     or SIG_DFL.
    </para>
    <para>
     <function>pcntl_signal</function> returns &true; on success or
      &false; on failure.
    </para>
    <example>
     <title><function>pcntl_signal</function> Example</title>
     <programlisting role="php">
<![CDATA[
<?php

// signal handler function
function sig_handler($signo) {

     switch($signo) {
         case SIGTERM:
             // handle shutdown tasks
             exit;
             break;
         case SIGHUP:
             // handle restart tasks
             break;
         case SIGUSR1:
             print "Caught SIGUSR1...\n";
             break;
         default:
             // handle all other signals
     }

}


print "Installing signal handler...\n";

// setup signal handlers
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");
pcntl_signal(SIGUSR1, "sig_handler");

print "Generating signal SIGTERM to self...\n";

// send SIGUSR1 to current process id
posix_kill(posix_getpid(), SIGUSR1);

print "Done\n"

?>
]]>
     </programlisting>
    </example>
    <para>
     <function>pcntl_fork</function>および
     <function>pcntl_waitpid</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  
  <refentry id="function.pcntl-waitpid">
   <refnamediv>
    <refname>pcntl_waitpid</refname>
    <refpurpose>待つかフォークした子プロセスのステータスを返す</refpurpose>
   </refnamediv>
   <refsect1>
   <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_waitpid</methodname>
      <methodparam><type>int</type><parameter>pid</parameter></methodparam>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>
     <methodparam><type>int</type><parameter>options</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>pcntl_waitpid</function>関数は、
     引数<parameter>pid</parameter>で指定した子プロセスが終了するか、
     カレントのプロセスを終了するかシグナル処理関数をコールするシグナ
     ルが送信されるまでカレントのプロセスの実行を中断します。
     <parameter>pid</parameter>でリクエストされた子プロセスが、 コール
     時に既に終了している場合("ゾンビ"プロセスと呼ばれます)、この関数
     は直ちに処理を返します。子プロセスにより使用される全てのシステム
     リソースは、解放されます。waitpidがシステムでの動作に関する詳細に
     ついては、システムのwaitpid(2)マニュアルページを参照下さい。
    </para>
    <para>
     <function>pcntl_waitpid</function>は、終了した子プロセスのプロセ
     スIDを返します。エラーの場合は-1、WNOHANGが使用され、子プロセスが
     利用できない場合に0を返します。
    </para>
    <para>
     <parameter>pid</parameter>の値は次のどれかとなります。
     <table>
      <title><parameter>pid</parameter>の値</title>
      <tgroup cols="2">
       <tbody>
	<row>
	 <entry><literal>&lt; -1</literal></entry>
	 <entry>
          <parameter>pid</parameter>の絶対値に等しいプロセスグループID
          が等しい子プロセスを待ちます。
	 </entry>
	</row>
	<row>
	 <entry><literal>-1</literal></entry>
	 <entry>
          全ての子プロセスを待つ。これは、wait関数の動作と同じです。
	 </entry>
	</row>
       <row>
	 <entry><literal>0</literal></entry>
	 <entry>
          プロセスグループIDがコール側のプロセスと等しい子プロセスを待
	  ちます。
	 </entry>
	</row>
	<row>
	 <entry><literal>&gt; 0</literal></entry>
	 <entry>
          プロセスIDが<parameter>pid</parameter>の値に等しい子プロセス
	  を待ちます。
	 </entry>
	</row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     <function>pcntl_waitpid</function>は、パラメータ
     <parameter>status</parameter>の中にステータス情報を保存します。こ
     のステータスは、次の関数を用いて評価可能です。
     <function>pcntl_wifexited</function>,
     <function>pcntl_wifstopped</function>,
     <function>pcntl_wifsignaled</function>,
     <function>pcntl_wexitstatus</function>,
     <function>pcntl_wtermsig</function> and
     <function>pcntl_wstopsig</function>.
    </para>
    <para>
     <parameter>options</parameter>の値は、次の2つのグローバル定数のゼ
     ロまたはそれ以上の論理和です。
     <table>
      <title><parameter>options</parameter>の値</title>
      <tgroup cols="2">
       <tbody>
	<row>
	 <entry><literal>WNOHANG</literal></entry>
	 <entry>
          子プロセスが終了していない場合に直ちに処理を返します。
	 </entry>
	</row>
	<row>
	 <entry><literal>WUNTRACED</literal></entry>
	 <entry>
          停止した子プロセスの場合に処理を返します。そして、ステータス
	  はリポートされません。
	 </entry>
	</row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     <function>pcntl_fork</function>,
     <function>pcntl_signal</function>,
     <function>pcntl_wifexited</function>,
     <function>pcntl_wifstopped</function>,
     <function>pcntl_wifsignaled</function>,
     <function>pcntl_wexitstatus</function>,
     <function>pcntl_wtermsig</function>,
     <function>pcntl_wstopsig</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.pcntl-wexitstatus">
   <refnamediv>
    <refname>pcntl_wexitstatus</refname>
    <refpurpose>
     終了した子プロセスのリターンコードを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_wexitstatus</methodname>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>      
     </methodsynopsis>
    <para>
     終了した子プロセスのリターンコードを返します。この関数は、
     <function>pcntl_wifexited</function>が&true;を返す場合のみ有用で
     す。
    </para>
    <para>
     パラメータ<parameter>status</parameter>は、
     <function>pcntl_waitpid</function>のコール時に指定されるステータ
     スパラメータです。
    </para>
    <para>
     <function>pcntl_waitpid</function>および
     <function>pcntl_wifexited</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pcntl-wifexited">
   <refnamediv>
    <refname>pcntl_wifexited</refname>
    <refpurpose>
     ステータスコードが正常終了を表す場合に &true; を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_wifexited</methodname>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>
     </methodsynopsis>
    <para>
     子プロセスのステータスコードが終了に成功した場合に&true;を返しま
     す。
    </para>
    <para>
     パラメータ<parameter>status</parameter>は、
     <function>pcntl_waitpid</function>のコール時に指定されるステータ
     スパラメータです。
    </para>
    <para>
     <function>pcntl_waitpid</function>および
     <function>pcntl_wexitstatus</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pcntl-wifsignaled">
   <refnamediv>
    <refname>pcntl_wifsignaled</refname>
    <refpurpose>
     ステータスコードがシグナルによる終了を表す場合に &true; を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_wifsignaled</methodname>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>
     </methodsynopsis>
    <para>
     捕捉されなかったシグナルのせいで子プロセスが終了した場合に&true;
     を返します。
    </para>
    <para>
     パラメータ<parameter>status</parameter>は、
     <function>pcntl_waitpid</function>のコール時に指定されるステータ
     スパラメータです。
    </para>
    <para>
     <function>pcntl_waitpid</function>および
     <function>pcntl_signal</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.pcntl-wifstopped">
   <refnamediv>
    <refname>pcntl_wifstopped</refname>
    <refpurpose>
     子プロセスが現在停止している場合、&true; を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_wifstopped</methodname>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>
     </methodsynopsis>
    <para>
     リターンを生じた子プロセスが現在停止している場合に&true;を返しま
     す。この関数は、<function>pcntl_waitpid</function>のコールがオプ
     ション<literal>WUNTRACED</literal>を用いている場合のみ使用可能で
     す。
    </para>
    <para>
     パラメータ<parameter>status</parameter>は、
     <function>pcntl_waitpid</function>のコール時に指定されるステータ
     スパラメータです。
    </para>
    <para>
     <function>pcntl_waitpid</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.pcntl-wstopsig">
   <refnamediv>
    <refname>pcntl_wstopsig</refname>
    <refpurpose>
     子プロセスを停止させたシグナルを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_wstopsig</methodname>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>
     </methodsynopsis>
    <para>
     子プロセスを停止させたシグナル番号を返します。この関数は、
     <function>pcntl_wifstopped</function>が&true;を返す場合のみ有用で
     す。
    </para>
    <para>
     パラメータ<parameter>status</parameter>は、
     <function>pcntl_waitpid</function>のコール時に指定されるステータ
     スパラメータです。
    </para>
    <para>
     <function>pcntl_waitpid</function>、
     <function>pcntl_wifstopped</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pcntl-wtermsig">
   <refnamediv>
    <refname>pcntl_wtermsig</refname>
    <refpurpose>
     子プロセスの終了を生じたシグナルを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pcntl_wtermsig</methodname>
      <methodparam><type>int</type><parameter>status</parameter></methodparam>
     </methodsynopsis>
    <para>
     子プロセスを終了させたシグナルの数を返します。この関数は、
     <function>pcntl_wifsignaled</function>が&true;を返す場合のみ有用
     です。
    </para>
    <para>
     パラメータ<parameter>status</parameter>は、
     <function>pcntl_waitpid</function>のコール時に指定されるステータ
     スパラメータです。
    </para>
    <para>
     <function>pcntl_waitpid</function>,
     <function>pcntl_signal</function>,
     <function>pcntl_wifsignaled</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id='function.pcntl-exec'>
   <refnamediv>
    <refname>pcntl_exec</refname>
    <refpurpose>
     カレントのプロセス空間で指定したプログラムを実行する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>pcntl_exec</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>args</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>envs</parameter></methodparam>
     </methodsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

