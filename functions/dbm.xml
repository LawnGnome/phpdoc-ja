<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
 <reference id="ref.dbm">
  <title>DBM関数</title>
  <titleabbrev>DBM</titleabbrev>

  <partintro>
  <simpara>
    これらの関数により、レコードを dbm 形式 のデータベースに格納
    できるようになります。この形式のデータベース（組み込みのフラット
    ファイル・ライブラリと同様に、Berkeley DB, GDBMその他のシステム・
    ライブラリによりサポートされています）は、(リレーショナル・データ
    ベースによりサポートされる事細かなレコード形式ではなく、)
    キーと値の組み合わせを格納します。
   </simpara>
   <para>
    <example>
     <title>dbm の例</title>
     <programlisting role="php">
<![CDATA[
$dbm = dbmopen ("lastseen", "w");
if (dbmexists ($dbm, $userid)) {
  $last_seen = dbmfetch ($dbm, $userid);
} else {
  dbminsert ($dbm, $userid, time());
}
do_stuff();
dbmreplace ($dbm, $userid, time());
dbmclose ($dbm);
]]>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.dbmopen">
   <refnamediv>
    <refname>dbmopen</refname>
    <refpurpose>DBMデータベースをオープンします</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>dbmopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
    <para>
     第1引数はオープンされるDBMファイルのフルパス名で、第2引数は
     ファイルオープンモードです。これは "r", "n", "c", "w" のうちのいずれかで、
     順に読み込み用、新規ファイル（読み書き可能。既に存在する同名のファイルを
     上書きする可能性があります。）、作成（読み書き可能。既に存在する同名の
     ファイルを上書きしません）および読み書き用を示します。
    </para>
    <para>
     成功すると他のDBM関数に渡すIDを返し、失敗すると&false;を返します。
    </para>
    <para>
     NDBMサポートが有効な場合、実際にNDBMが filename.dir と
     filename.pag ファイルを作成します。GDBMは、
     PHP 組込のフラット・ファイル機能と同様に 1 つのファイルしか
     使いません。Berkeley db は、filename.db ファイルを作成します。
     PHP では、DBMライブラリ自体が行うファイルロックに加えて、
     自分自身でもファイルロックを行うということに注意して下さい。
     PHP では自分で生成した .lck ファイルを削除しません。
     PHP では単純にこれらの
     ファイルをファイルロックのための固定 inode として使用します。
     dbm ファイルに関する詳細情報は、Unix の man ページを参照するか、
     <ulink url="&url.gdbm;">GNUのgdbm</ulink>を取得してください。
    </para>
    &note.sm.uidcheck;
   </refsect1>
  </refentry>

  <refentry id="function.dbmclose">
   <refnamediv>
    <refname>dbmclose</refname>
    <refpurpose>dbm データベースを閉じます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmclose</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
     </methodsynopsis>
    <para>
     指定したデータベースをアンロックして閉じます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmexists">
   <refnamediv>
    <refname>dbmexists</refname>
    <refpurpose>dbm データベースにキー検索を行います</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmexists</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     キー <parameter>key</parameter> が指す値が存在すれば &true;
     を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmfetch">
   <refnamediv>
    <refname>dbmfetch</refname>
    <refpurpose>
     dbm データベースからキーの値を取り出します
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>dbmfetch</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     キー <parameter>key</parameter> が指す値を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbminsert">
   <refnamediv>
    <refname>dbminsert</refname>
    <refpurpose>dbm データベースへの値の挿入</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>dbminsert</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
      <methodparam><type>string</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <para>
     データベースに、指定したキー(key)に対応する値を追加します。
    </para>
    <para>
     データベースがリードオンリーでオープンされていた場合は -1 を返し、
     挿入が成功すれば 0 を返します。指定されたキーが存在する場合は 1 を
     返します（値を置き換えるには <function>dbmreplace</function> を
     使って下さい）。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmreplace">
   <refnamediv>
    <refname>dbmreplace</refname>
    <refpurpose>dbm データベース中の値を置き換えます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmreplace</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
      <methodparam><type>string</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <para>
     データベース中の、指定されたキーに対応する値を置き換えます。
    </para>
    <para>
     データベース中にキーが存在しない場合は、この関数もキーを追加
     します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmdelete">
   <refnamediv>
    <refname>dbmdelete</refname>
    <refpurpose>dbm データベースから値を削除します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>dbmdelete</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     データベース中の、指定されたキーに対応する値を削除します。
    </para>
    <para>
     データベース中にキーが存在しない場合は &false; を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmfirstkey">
   <refnamediv>
    <refname>dbmfirstkey</refname>
    <refpurpose>dbm データベースから最初のキーを取り出します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>dbmfirstkey</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
     </methodsynopsis>
    <para>
     データベースから最初のキーを取り出します。データベースは順序を
     保証しないハッシュテーブルを使って構築されている可能性があるので、
     返される値の順序は保証されないことに注意してください。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmnextkey">
   <refnamediv>
    <refname>dbmnextkey</refname>
    <refpurpose>dbm データベースから次のキーを取り出します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>dbmnextkey</methodname>
      <methodparam><type>int</type><parameter>dbm_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>key</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>key</parameter> の次のキーを返します。まず <function>
      dbmfirstkey</function> をコールし、引き続き <function>dbmnextkey
     </function> をコールすれば、dbm データベース上のすべてのキー/値
     の組み合わせを取り出すことができます。たとえば、以下のように
     コーディングします。
     <example>
      <title>
       ある dbm データベース上のすべてのキー/値の組み合わせを取り出します。
      </title>
      <programlisting role="php">
<![CDATA[
$key = dbmfirstkey ($dbm_id);
while ($key) {
    echo "$key = " . dbmfetch ($dbm_id, $key) . "\n";
    $key = dbmnextkey ($dbm_id, $key);
}
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dblist">
   <refnamediv>
    <refname>dblist</refname>
    <refpurpose>使用されているDBM互換ライブラリの一覧を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>dblist</methodname>
      <void/>
     </methodsynopsis>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

