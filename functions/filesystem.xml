<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.38 $ -->
 <reference id="ref.filesystem">
  <title>ファイルシステム関数</title>
  <titleabbrev>ファイルシステム</titleabbrev>

  <refentry id="function.basename">
   <refnamediv>
    <refname>basename</refname>
    <refpurpose>
     パス中のファイル名の部分を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>basename</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>suffix</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、ファイルへのパスを有する文字列を引数とし、
     ファイルのベース名を返します。ファイル名が、
     <parameter>suffix</parameter>で終了する場合、この部分もカットされ
     ます。
    </para>
    <para>
     Windows では、スラッシュ(<literal>/</literal>)とバックスラッシュ
     (<literal>\</literal>)の両方がパス区切り文字として使われます。
     その他の環境ではスラッシュ(<literal>/</literal>)になります。
    </para>
    <para>
     <example><title><function>basename</function>の例</title>
      <programlisting role="php">
<![CDATA[
$path = "/home/httpd/html/index.php";
$file = basename ($path);        // $file is set to "index.php"
$file = basename ($path,".php"); // $file is set to "index"
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      パラメータ<parameter>suffix</parameter>は、PHP 4.1.0で追加されま
      した。
     </para>
    </note>
    <para>
     <function>dirname</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chgrp">
   <refnamediv>
    <refname>chgrp</refname>
    <refpurpose>ファイルのグループを変更する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>chgrp</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>group</parameter></methodparam>
     </methodsynopsis>
    <para>
     (名前または番号で指定した)ファイル<parameter>filename</parameter>
     のグループを<parameter>group</parameter>に変更しようと試みます。
     スーパーユーザのみがファイルのグループを任意に変更できます。
     その他のユーザは、ファイルのグループをそのユーザがメンバーとして
     属しているグループに変更できます。
    </para>
    <para>
     成功すると&true;を返し、そうでなければ&false;を返します。
    </para>
    <para>
     <function>chown</function>および<function>chmod</function>
     も参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.chmod">
   <refnamediv>
    <refname>chmod</refname>
    <refpurpose>ファイルのモードを変更する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>chmod</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>int</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>で指定されたファイルのモードを
     <parameter>mode</parameter>で指定したものに変更しようと試みます。
    </para>
    <para>
     <parameter>mode</parameter>は自動的には8進数と見なされないので
     注意して下さい。このため、("g+w"のような)文字列は正常に動作しませ
     ん。意図した操作を行うには、<parameter>mode</parameter>の前にゼロ
     (0)を付ける必要があります。
     <informalexample>
      <programlisting role="php">
<![CDATA[
chmod ("/somedir/somefile", 755);   // 10 進数; おそらく間違い
chmod ("/somedir/somefile", "u+rwx,go+rx"); // 文字列; 正しくない
chmod ("/somedir/somefile", 0755);  // 8 進数; 正しいモードの値
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     成功すると&true;、そうでなければ&false;を返します。
    </para>
    <para>
     <function>chown</function>および<function>chgrp</function>
     も参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.chown">
   <refnamediv>
    <refname>chown</refname>
    <refpurpose>ファイルの所有者を変更する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>chown</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>user</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイル<parameter>filename</parameter>の所有者を(名前または番号
     で指定した)ユーザ<parameter>user</parameter>に変更しようと試みま
     す。スーパーユーザのみがファイルの所有者を変更できます。
    </para>
    <para>
     成功すると&true;を返し、そうでなければ&false;を返します。
    </para>
    <para>
     <function>chown</function>および<function>chmod</function>
     も参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.clearstatcache">
   <refnamediv>
    <refname>clearstatcache</refname>
    <refpurpose>ファイルstatのキャッシュをクリアする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>clearstatcache</methodname>
      <void/>
     </methodsynopsis>
    <para>
     <systemitem>stat</systemitem>または<systemitem>lstat</systemitem>
     システムコールは、ほとんどのシステムにおいて
     かなりのコストがかかるものです。そのため、ステータス関連の関数
     （後述）への最後のコールの結果はキャッシュされ、同名のファイル
     に対する同じような関数コールに際してそのキャッシュが使われます。
     強制的に新たなステータスチェックを行いたい場合、たとえばファイルが
     何度もチェックされその間に変更されたり消えたりする可能性がある
     場合、この関数をコールすることにより最後のコールの結果がメモリから
     クリアされます。
    </para>
    <para>
     単一のリクエストが持続している間のみ、この値のキャッシュが
     行われます。
    </para>
    <para>
     影響を受ける関数を以下に示します。
     <function>lstat</function>,
     <function>stat</function>,
     <function>file_exists</function>,
     <function>is_writable</function>,
     <function>is_readable</function>,
     <function>is_executable</function>,
     <function>is_file</function>,
     <function>is_dir</function>,
     <function>is_link</function>,
     <function>filectime</function>,
     <function>fileatime</function>,
     <function>filemtime</function>,
     <function>fileinode</function>,
     <function>filegroup</function>,
     <function>fileowner</function>,
     <function>filesize</function>,
     <function>filetype</function>,
     <function>fileperms</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.copy">
   <refnamediv>
    <refname>copy</refname>
    <refpurpose>ファイルをコピーする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>copy</methodname>
      <methodparam><type>string</type><parameter>source</parameter></methodparam>
      <methodparam><type>string</type><parameter>dest</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルのコピーを作成します。コピーが成功すると&true;、
     そうでなければ&false;を返します。
     <example>
      <title><function>copy</function>の例</title>
      <programlisting role="php">
<![CDATA[
if (!copy($file, $file.'.bak')) {
    print ("failed to copy $file...<br>\n");
}
]]>
      </programlisting>
     </example>
    </para>
    <warning>
     <para>
      コピー先のファイルが既に存在する場合、上書きされます。
     </para>
    </warning>
    <para>
     <function>move_uploaded_file</function>、
     <function>rename</function>、
     <link linkend="features.file-upload">ファイルアップロード処理
     </link>に関するマニュアルのセクションも参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.delete">
   <refnamediv>
    <refname>delete</refname>
    <refpurpose>ダミーの関数エントリ</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>delete</methodname>
      <methodparam><type>string</type><parameter>file</parameter></methodparam>
     </methodsynopsis>
     <para>
     この関数はダミーの関数エントリであり、間違った場所で
     <function>unlink</function> または<function>unset</function>を
     要求する人の要求を満足させるためのものです。
    </para>
     <para>
     ファイルを削除するには<function>unlink</function>、変数を削除するには
     <function>unset</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dirname">
   <refnamediv>
    <refname>dirname</refname>
    <refpurpose>パス中のディレクトリ名の部分を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>dirname</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、ファイルへのパス名を有する文字列を引数とし、
     ディレクトリの名前を返します。
    </para>
    <para>
     Windows では、スラッシュ(<literal>/</literal>)とバックスラッシュ
     (<literal>\</literal>)の両方がパス区切り文字として使われます。
     その他の環境ではスラッシュ(<literal>/</literal>)になります。
    </para>
    <para>
     <example>
      <title><function>dirname</function>の例</title>
      <programlisting role="php">
<![CDATA[
$path = "/etc/passwd";
$file = dirname ($path); // $file は "/etc" にセットされる
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>basename</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-free-space">
   <refnamediv>
    <refname>disk_free_space</refname>
    <refpurpose>ディレクトリの利用可能なスペースを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>float</type><methodname>disk_free_space</methodname>
      <methodparam><type>string</type><parameter>directory</parameter></methodparam>
     </methodsynopsis>
    <para>
     ディレクトリを指定することにより、この関数は対応するファイルシス
     テムまたはディスクパーティションで利用可能なバイト数を返します。
    </para>
    <para>
     <example>
      <title><function>disk_free_space</function>の例</title>
      <programlisting role="php">
<![CDATA[
$df = disk_free_space("/"); // $dfは"/"で利用可能なバイト数となります。
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.diskfreespace">
   <refnamediv>
    <refname>diskfreespace</refname>
    <refpurpose><function>disk_free_space</function>へのエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>float</type><methodname>diskfreespace</methodname>
      <methodparam><type>string</type><parameter>directory</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、<function>disk_free_space</function>への古いエイリア
     スです。替わりにこの関数を使用して下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-total-space">
   <refnamediv>
    <refname>disk_total_space</refname>
    <refpurpose>ディレクトリの全体サイズを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>float</type><methodname>disk_total_space</methodname>
      <methodparam><type>string</type><parameter>directory</parameter></methodparam>
     </methodsynopsis>
    <para>
     ディレクトリを含む文字列を指定して下さい。この関数は、ファイルシ
     ステムまたはディスクパーティションに対応する全体バイト数を返しま
     す。
    </para>
    <para>
     <example>
      <title><function>disk_total_space</function>の例</title>
      <programlisting role="php">
<![CDATA[
$df = disk_total_space("/"); // $dfは、"/"で利用可能な全体バイト数
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fclose">
   <refnamediv>
    <refname>fclose</refname>
    <refpurpose>オープンされたファイルポインタをクローズする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>fclose</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>fp</parameter>が指しているファイルがクローズされます。
    </para>
    <para>
     成功すると&true;、そうでなければ&false;を返します。
    </para>
    <para>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>または<function>fsockopen</function>
     で正常にオープンされたファイルを指している必要があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.feof">
   <refnamediv>
    <refname>feof</refname>
    <refpurpose>
     ファイルポインタがファイル終端に達しているかどうか調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>feof</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルポインタがEOFに達しているかエラーの場合に&true;、
     その他の場合に&false;を返します。
    </para>
    <para>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>または<function>fsockopen</function>
     で正常にオープンされたファイルを指している必要があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fflush">
   <refnamediv>
    <refname>fflush</refname>
    <refpurpose>出力をファイルにフラッシュする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fflush</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、バッファリングされた全ての出力をファイルファイルハン
     ドル <parameter>fp</parameter> が指すリソースに強制的に書き込みま
     す。成功時に &true;、その他の場合に &false; を返します。
    </para>
    <para>
     ファイルポインタは有効なポインタである必要があり、
     <function>fopen</function>、<function>popen</function>、
     <function>fsockopen</function> で正しくオープンされたファイルを指
     している必要があります、
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetc">
   <refnamediv>
    <refname>fgetc</refname>
    <refpurpose>ファイルポインタから1文字取り出す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>fgetc</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>fp</parameter>が指すファイルポインタから1文字読み出し、
     その文字からなる文字列を返します。EOFの場合に&false;を返します。
    </para>
    <para>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>、<function>popen</function>
     または<function>fsockopen</function>
     で正常にオープンされたファイルを指している必要があります。
    </para>
    <para> 
     <function>fread</function>,<function>fopen</function>,
    <function>popen</function>, <function>fsockopen</function>,
    <function>fgets</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetcsv">
   <refnamediv>
    <refname>fgetcsv</refname>
    <refpurpose>
     ファイルポインタから行を取得し、CSVフィールドを処理する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>fgetcsv</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam><type>string</type><parameter>
	<replaceable><optional>delimiter</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>fgets</function>に動作は似ていますが、
     <function>fgetcsv</function>は行を<acronym>CSV</acronym>フォーマッ
     トのフィールドとして読込み処理を行い、読み込んだフィールドを含む
     配列を返すという違いがあります。フィールドのデリミタは、オプショ
     ンの3番目のパラメータで別のデリミタを指定した場合を除きカンマです。
    </simpara>
    <simpara>
     <parameter>fp</parameter>は、<function>fopen</function>、
     <function>popen</function>、<function>fsockopen</function>で正常
     にオープンされたファイルへのファイルポインタである必要があります。
    </simpara>
    <simpara> 
     <parameter>length</parameter>は、(行末文字を考慮して)CSVファイル
     にある最も長い行よりも大きい必要があります。
    </simpara>
    <simpara>
     <function>fgetcsv</function>はファイルの終端に達した場合を含み、
     エラー時に&false;を返します。
    </simpara>
    <simpara>
     CSVファイルの空行はヌルフィールドを一つだけ含む配列として返され、
     エラーにはなりません。
    </simpara>
    <example>
     <title>
      <function>fgetcsv</function> によりCSV ファイルの内容全体を読み
      込み、出力します。
     </title>
     <programlisting role="php">
<![CDATA[
$row = 1;
$fp = fopen ("test.csv","r");
while ($data = fgetcsv ($fp, 1000, ",")) {
    $num = count ($data);
    print "<p> $num fields in line $row: <br>";
    $row++;
    for ($c=0; $c < $num; $c++) {
        print $data[$c] . "<br>";
    }
}
fclose ($fp);
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.fgets">
   <refnamediv>
    <refname>fgets</refname>
    <refpurpose>ファイルポインタから1行取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>fgets</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <para>
     fpで指定したファイルポインタから最大length-1バイト読み出し、その
     文字列を返します。読み出しは、length-1バイト読み出したか、(返り値
     に含まれる)改行文字を検出したか、EOFに達したかのいずれかが起こっ
     た時点で終了します。lengthが指定されない場合、デフォルトは1kまた
     は1024バイトとなります。
    </para>
    <para> 
     エラーが起こった場合、&false;を返します。
    </para>
    <para>
     陥りやすい罠:
    </para>
    <simpara>
     C言語のfgetsの動作に慣れている人は、EOFを返す条件の違いについて
     注意する必要があります。
    </simpara>
    <simpara>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>、<function>popen</function>、
     <function>fsockopen</function>で正常にオープンされたファイルを
     指している必要があります。
    </simpara>
    <para>
     簡単な例を以下に示します。
     <example> 
      <title>行毎にファイルを読み込む</title>
      <programlisting role="php">
<![CDATA[
$fd = fopen ("/tmp/inputfile.txt", "r");
while (!feof ($fd)) {
  $buffer = fgets($fd, 4096);
  echo $buffer;
}
fclose ($fd);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      <parameter>length</parameter>パラメータは、PHP 4.2.0でオプション
      となりました。
     </simpara>
    </note>
    <para>
     <function>fread</function>,
     <function>fopen</function>, <function>popen</function>, 
     <function>fgetc</function>, <function>fsockopen</function>,
     <function>socket_set_timeout</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetss">
   <refnamediv>
    <refname>fgetss</refname>
    <refpurpose>ファイルポインタから1行取り出し、HTMLタグを取り除く
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>fgetss</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam><type>string</type><parameter>
        <replaceable><optional>allowable_tags</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>fgets</function>と同じですが、fgetssは読み込んだテキスト
     からHTMLおよびPHPのタグを取り除こうとすることが異なります。
    </para>
    <para>
     オプションの3番目の引数を使用して、取り除く必要がないタグを指定する
     ことができます。
     <note>
      <para>
       <parameter>allowable_tags</parameter>は、PHP 3.0.13、PHP 4.0.0
       で追加されました。
      </para>
     </note>
    </para>
    <para>
     <function>fgets</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>strip_tags</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.file">
   <refnamediv>
    <refname>file</refname> 
    <refpurpose>ファイル全体を読み込んで配列に格納する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>use_include_path</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>readfile</function>と同じですが、<function>file</function>
     はファイルを配列に入れて返すところが異なります。
     配列の各要素はファイルの各行に対応します。改行記号はついたままと
     なります。
    </para>
    <para> 
     オプションの2番目の引数を使用して、これに"1"を設定することにより、
     <link linkend="ini.include-path">include_path</link>
     のファイルの検索も行うことができます。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// Webページを配列として取得し、出力します。
$fcontents = file ('http://www.php.net/');
while (list ($line_num, $line) = each ($fcontents)) {
    echo "<b>Line $line_num:</b>; ", htmlspecialchars ($line), "<br>\n";
}

// Webページを文字列として取得します。
$fcontents = join ('', file ('http://www.php.net/'));
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    &note.not-bin-safe;
    &tip.fopen-wrapper;
    <para> 
     <function>readfile</function>,<function>fopen</function>,
     <function>fsockopen</function>,<function>popen</function>も参照下
     さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.file-exists">
   <refnamediv>
    <refname>file_exists</refname>
    <refpurpose>ファイルの存在をチェックする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>file_exists</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>filename</parameter>で指定したファイルが存在
     すれば&true;を返し、そうでなければ&false;を返します。
    </simpara>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link>では動作しません。調査を行うファイルはそのサーバーのファ
     イルシステムからアクセス可能である必要があります。
    </simpara>
    <simpara>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fileatime">
   <refnamediv>
    <refname>fileatime</refname>
    <refpurpose>ファイルの最終アクセス時刻を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fileatime</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     ファイルの最終アクセス時刻を返し、エラーの場合は&false;を返します。
     時間はUNIXタイムスタンプとして返されます。
    </simpara>
    <simpara>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </simpara>
    <simpara>
     注意: ファイルのatimeは、ファイルのデータブロックが読み込まれる度
     に変更されるとみなされます。この仕様は、アプリケーションが非常に
     多くのファイルまたはディレクトリに常にアクセスする場合に性能上の
     負荷となる可能性があります。いくつかのUNIXファイルシステムでは、
     このようなアプリケーションの性能を向上させるためにatimeの更新を無
     効としてマウントすることが可能です。USENETのニューススプールが一
     般的な例です。このようなファイルシステムでは、この関数は使用でき
     ません。
    </simpara>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filectime">
   <refnamediv>
    <refname>filectime</refname>
    <refpurpose>ファイルのinode変更時刻を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>filectime</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルの最終更新時刻を返し、エラーの場合は&false;を返します。
     時間はUNIXタイムスタンプとして返されます。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function> を参照下さい。
    </para>
    <para>
     注意: 多くのUNIXファイルシステムでは、i-ノードが変更された際、つ
     まり、パーミッション、所有者、グループ、または他のメタデータが書
     き込まれた際に、ファイルが変更されたとみなされます。
     <function>filemtime</function>(この関数はWebページ上で"Last
     Modified"フッタを作成したい場合に使用するものです。)および
     <function>fileatime</function>も参照下さい。
    </para>
    <para>
     いくつかのUNIXでは、ファイルのctimeはファイルの作成時間として参照
     されます。これは間違っています。多くのUNIXファイルシステムでは
     UNIXファイルの作成時間は存在しません。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filegroup">
   <refnamediv>
    <refname>filegroup</refname>
    <refpurpose>ファイルのグループを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>filegroup</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルの所有者のグループIDを返し、エラーの場合は&false;を返します。
     グループIDは数値で返されます。グループ名に変換するには
     <function>posix_getgrgid</function>を使用して下さい。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    &note.no-windows;
    <note>
     <simpara>
      この関数は、<link linkend="features.remote-files">リモートファイ
       ル</link> では動作しません。評価するファイルはサーバのファイルシ
      ステムによりアクセス可能である必要があります。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fileinode">
   <refnamediv>
    <refname>fileinode</refname>
    <refpurpose>ファイルのinodeを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fileinode</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルのinode番号を返し、エラーの場合は&false;エ?します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
      ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.filemtime">
   <refnamediv>
    <refname>filemtime</refname>
    <refpurpose>ファイルの更新時刻を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>filemtime</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルの最終更新時刻を返し、エラーの場合は&false;
     を返します。時間はUNIXタイムスタンプとして返されます。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
      ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
    <para>
     注意:この関数は、ファイルのブロックデータが書き込まれた時間を返し
     ます。これは、ファイルの内容が変更された際の時間です。ページのフッ
     タで使用するために出力可能な修正時刻を取得するには、この関数の結
     果を<function>date</function>に使用して下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fileowner">
   <refnamediv>
    <refname>fileowner</refname>
    <refpurpose>ファイルの所有者を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fileowner</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルの所有者のユーザIDを返し、エラーの場合は&false;を返します。
     ユーザIDは数値で返されます。ユーザー名に変換するには
     <function>posix_getpwuid</function>を使用して下さい。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
      ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.fileperms">
   <refnamediv>
    <refname>fileperms</refname>
    <refpurpose>ファイルの許可属性を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fileperms</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルの許可属性を返し、エラーの場合は&false;を返します。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
      ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.filesize">
   <refnamediv>
    <refname>filesize</refname>
    <refpurpose>ファイルのサイズを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>filesize</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルのサイズを返し、エラーの場合は&false;を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
      ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filetype">
   <refnamediv>
    <refname>filetype</refname>
    <refpurpose>ファイルタイプを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>filetype</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルのサイズを返します。返される値は fifo, char, dir,
     block, link, file, unknown のいずれかです。
    </para>
    <para>
     エラーが起こった場合&false;を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function> を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
      ル</link> では動作しません。評価するファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.flock">
   <refnamediv>
    <refname>flock</refname>
    <refpurpose>汎用のファイルロックを行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>flock</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>operation</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>wouldblock</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     PHP は、恣意的にファイルをロックする汎用の手段を提供します。
     (これは、アクセスする全プログラムが同一のロックの方法を使用する
     必要があり、そうでない場合は動作しないことを意味します)
    </simpara>
    <simpara>
     <function>flock</function>は、<parameter>fp</parameter>を用いて
     操作を行います。これは、オープンされたファイルポインタである必要が
     あります。<parameter>operation</parameter>は、次の値のどれかとな
     ります。
    </simpara>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
	共有ロック(読み手)とするには、<parameter>operation</parameter>に
	LOCK_SH(PHP 4.0.1より前の場合は1に設定します)をセットします。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	排他的ロック(書き手)とするには、
	<parameter>operation</parameter>にLOCK_EX(PHP 4.0.1より前の場
	合は2に設定します)をセットします。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	(共有または排他的)ロックを開放するには、
	<parameter>operation</parameter>にLOCK_UN(PHP 4.0.1より前の場
	合は3に設定します)をセットします。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	ロック中に <function>flock</function>でブロックを行いたくない場
	合は、<parameter>operation</parameter> に LOCK_NB ( PHP 4.0.1
	より前の場合は 4 に設定します)を加えます。
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <simpara>
     <function>flock</function>により、(ほとんどのUNIXやWindowsさえ含む)
     ほとんど全てのプラットフォームで使用可能な簡易な読み手/書き手モデ
     ルが実現されます。ロックをブロックモードとする場合(EWOULDBLOCK
     errno 条件)にオプションの3番目の引数に&true;を設定します。
    </simpara>
    <simpara>
     <function>flock</function> は成功時に&true;、
     (例えばロックが確保できなかった場合等の)エラー時に&false;を返します。
    </simpara>
    <note>
     <para>
      <function>flock</function>は、ファイルポインタを必要とするため、
      (<function>fopen</function>へ引数"w"または"w+"を指定して)書き込
      みモードでオープンすることにより丸めるファイルにアクセス保護する
      特別なロックファイルを使用する必要があるかもしれません。
     </para>
    </note>
    <warning>
     <para>
      <function>flock</function>はNFS及び他の多くのネットワークファイ
      ルシステムでは動作しません。詳細についてはオペレーティングシステ
      ムのドキュメントを確認下さい。
     </para>
     <para>
      いくつかのオーペレーティングシステムで<function>flock</function>
      はプロセスレベルで実装されています。ISAPIのようなマルチスレッド
      型のサーバーAPIを使用している場合、同じサーバーインスタンスの並
      列スレッドで実行されている他のPHPスクリプトに対してファイルを保
      護する際に <function>flock</function>を使用することはできません!
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.fopen">
   <refnamediv>
    <refname>fopen</refname>
    <refpurpose>ファイルまたはURLをオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>use_include_path</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <parameter>filename</parameter>が"http://"(大文字小文字は区別しません)
     で始まっている場合、指定されたサーバに対するHTTP 1.0コネクションが
     オープンされ、HTTP　GETメソッドを用いてそのページがリクエストされ、
     返された応答の本体の先頭を指すファイルポインタが返されます。
     名前に基づく仮想ホストを処理するために'Host:' ヘッダが、リクエストで
     送信されます。
    </simpara>
    <simpara>
     ファイルポインタによりレスポンスの<emphasis>本体</emphasis>のみを
     取得することが可能であることに注意して下さい。この関数を用いて
     HTTPレスポンスにアクセスすることはできません。
    </simpara>
    <simpara>
     PHP 4.0.5 より前のバージョンは、HTTPリダイレクトを処理しませんでし
     た。このため、ディレクトリは末尾にスラッシュを含む必要がありました。
    </simpara>
    <simpara>
     <parameter>filename</parameter>が"ftp://"(大文字小文字は区別しません)
     で始まっている場合、指定されたサーバに対する
     FTPコネクションがオープンされ、要求したファイルへのポインタが
     返されます。そのサーバがパッシブ・モードFTPをサポートして
     いない場合は、この関数は失敗します。
     ftp経由で読みこみまたは書きこみのどちらかでファイルオープンする
     ことが可能です、(しかし、同時に両方を行うことはできません。)
    </simpara>
    <simpara>
     <parameter>filename</parameter>が"php://stdin","php://stdout",
     "php://stderr"のどれかで始まっている場合、対応するstdioストリームが
     オープンされます。
     (この機能はPHP 3.0.13で導入されました。これ以前のバージョンでは、
     stdioストリームにアクセスするために
     "/dev/stdin"または"/dev/fd/0"のようなファイル名を使用する必要があります。)
    </simpara>
    <simpara>
     <parameter>filename</parameter>が上記以外の場合、指定された
     ファイルがファイルシステムよりオープンされ、そのオープンされた
     ファイルへのファイルポインタが返されます。
    </simpara>
    <simpara>
     オープンに失敗すると、この関数は&false;を返します。
    </simpara>
    <para>
     <parameter>mode</parameter>は次のどれかになります。
     <itemizedlist>
      <listitem>
       <simpara>
	 'r' - 読みこみのみでオープンします。ファイルポインタをファイルの
	先頭に置きます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'r+' - 読みこみ・書きこみ用にオüプンします。ファイルポインタを
	ファイルの先頭に置きます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'w' - 書きこみの?gオープンします。ファイルポインタをファイルの
	先頭に置き、ファイルサイズをゼロにします。ファイルが存在しない
	場合には、作成を試みます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'w+' - 読みこみ・書きこみ用でオープンします。ファイルポインタを
	ファイルの先頭に置き、ファイルサイズをゼロにします。
	ファイルが存在しない場合には、作成を試みます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'a' - 書きこみのみでオープンします。ファイルポインタをファイルの
	終端に置きます。ファイルが存在しない場合には、作成を試みます。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'a+' - 読みこみ・書きこみ用でオープンします。ファイルポインタを
	ファイルの終端に置きます。ファイルが存在しない場合には、作成を
	試みます。
       </simpara>
      </listitem>
     </itemizedlist>
     <parameter>mode</parameter> は文字'b'を指定することもできます。
     これはバイナリとテキストのファイル形式が異なるシステムでのみ有効です。
     (Windowsの場合です。UNIXでは不要です。)不要の場合、無視されます。
    </para>
    <para>
     オプションの2番目の引数を使用して、これに"1"を設定する
     ことにより、<link linkend="ini.include-path">include_path</link>
     のファイルの検索も行うこともできます。
    </para>
    <para>
     <example>
      <title><function>fopen</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("/home/rasmus/file.txt", "r");
$fp = fopen ("/home/rasmus/file.gif", "wb");
$fp = fopen ("http://www.php.net/", "r");
$fp = fopen ("ftp://user:password@example.com/", "w");
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     ファイルの読みこみ・書きこみ時に問題が発生し、
     サーバーモジュール版のPHPを使用している場合、
     使用するファイル・ディレクトリがサーバープロセスからアクセス可能
     かどうかを確認してみてください。
    </simpara>
    <para>
     Windows 環境では、ファイルパスで用いる全てのバックスラッシュを
     エスケープするかフォワードスラッシュを使用することに注意して下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("c:\\data\\info.txt", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>fclose</function>,<function>fsockopen</function>, 
     <function>socket_set_timeout</function>,<function>popen</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fpassthru">
   <refnamediv>
    <refname>fpassthru</refname>
    <refpurpose>
     ファイルポインタ上に残っているすべてのデータを出力する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fpassthru</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     与えられたファイルポインタをEOFまで読み、結果を標準出力に書き出し
     ます。
    </simpara>
    <simpara>
     エラーが起こった場合、<function>fpassthru</function>は
      &false;を返します。
    </simpara>
    <simpara>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>, <function>popen</function>
     または<function>fsockopen</function>
     で正常にオープンされたファイルを指している必要があります。
     <function>fpassthru</function>はファイルを読み終えると
     そのファイルをクローズします（残った<parameter>fp</parameter>
     はもはや使用できません）。
    </simpara>
    <simpara>
     ファイルの内容を標準出力にダンプしたいだけの場合、
     <function>readfile</function>を使用することが可能です。
     この場合、<function>fopen</function>コールは必要ありません。
    </simpara>
    <note>
     <para>
      <function>fpassthru</function>をWindowsシステムのバイナリファイ
      ルで使用する場合、<function>fopen</function>をコールする際に
      モードに<literal>b</literal>を追加してバイナリモードでファイルを
      オープンするようにして下さい。
     </para>
    </note>
    <simpara>
     <function>readfile</function>, <function>fopen</function>,
     <function>popen</function>, <function>fsockopen</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fputs">
   <refnamediv>
    <refname>fputs</refname>
    <refpurpose>ファイルポインタに書き込む </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fputs</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>length</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>fputs</function> は<function>fwrite</function>
     の別名で、すべての面で同一です。
     <parameter>length</parameter> パラメータはオプションであり、
     指定されない場合、文字列全体が書かれることに注意して下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fread">
   <refnamediv>
    <refname>fread</refname>
    <refpurpose>バイナリ・モードでファイルを読み込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>fread</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>fread</function>は<parameter>fp</parameter>が指す
     ファイルポインタから最高<parameter>length</parameter>バイト
     読み込みます。読み込みは、<parameter>length</parameter>バイト分
     読み込まれたか、EOFに達したかのいずれか早い方の事象により中止
     されます。
    </simpara>
    <para>
    <informalexample>
      <programlisting role="php">
<![CDATA[
// ファイルの中身を読んで文字列に格納する
$filename = "/usr/local/something.txt";
$fd = fopen ($filename, "r");
$contents = fread ($fd, filesize ($filename));
fclose ($fd);
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      バイナリとテキストファイルの形式が異なるシステム(すなわち
      Windows)では、<function>fopen</function>の mode パラメータに'b'
      を指定してファイルをオープンする必要があります。
     </para>
    </note>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$filename = "c:\\files\\somepic.gif";
$fd = fopen ($filename, "rb");
$contents = fread ($fd, filesize ($filename));
fclose ($fd);
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>fwrite</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>fgets</function>, <function>fgetss</function>,
     <function>fscanf</function>,
     <function>file</function>, <function>fpassthru</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fscanf">
   <refnamediv>
    <refname>fscanf</refname>
    <refpurpose>フォーマットに基づきファイルからの入力を処理する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>fscanf</methodname>
      <methodparam><type>int</type><parameter>handle</parameter></methodparam>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam><type>string</type><parameter>
	<replaceable><optional>var1</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     関数<function>fscanf</function> は <function>sscanf</function> に
     似ていますが、<parameter>handle</parameter>が指すファイルから入力
     を取得し、指定したフォーマット <parameter>format</parameter>に基
     づき解釈を行います。この関数のパラメータが二つだけの場合、処理さ
     れた値は配列として返されます。他方、オプションのパラメータが指定
     された場合、この関数は、代入された値の数を返します。オプション引
     数は参照渡しとする必要があります。
     <example>
      <title><function>fscanf</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("users.txt","r");
while ($userinfo = fscanf ($fp,"%s\t%s\t%s\n")) {
	list ($name, $profession, $countrycode) = $userinfo;
	//... 値を用いた処理
}
fclose($fp);
]]>
      </programlisting>
     </example>
     <example>
      <title>users.txt</title>
      <programlisting>
<![CDATA[
javier	argonaut	pe
hiroshi	sculptor	jp
robert	slacker	us
luigi	florist	it
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>fread</function>, 
     <function>fgets</function>, <function>fgetss</function>,
     <function>sscanf</function>, <function>printf</function>,
     <function>sprintf</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fseek">
   <refnamediv>
    <refname>fseek</refname>
    <refpurpose>ファイルポインタを移動する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fseek</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>offset</parameter></methodparam>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>whence</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>fp</parameter>が指しているファイルのファイル位置識別子
     をファイル・ストリーム中の<parameter>offset</parameter>バイト目
     にセットします。新規位置は、ファイルの先頭からのバイト数で
     計られます。これは<parameter>whence</parameter>で指定した位置に
     <parameter>offset</parameter>を追加することにより得られます。
     この値は、以下のように定義されっYり     <simplelist>
      <member>
       SEEK_SET - 位置を<parameter>offset</parameter>バイト目に設定する
      </member> 
      <member>
       SEEK_CUR -現在の位置に<parameter>offset</parameter>を加えた位置に
       設定する。
      </member> 
      <member>
       SEEK_END - ファイル終端に<parameter>offset</parameter>を加えた位置に
       設定する。
      </member>
     </simplelist>
    </para>
    <para>
     <parameter>whence</parameter>を指定しない場合、SEEK_SETが指定された
     と仮定します。
    </para>
    <para>
     成功すると0を返し、そうでなければ-1を返します。EOFより先の
     位置にシークしてもエラーとはならないので注意して下さい。</para>
    <para>
     "http://"または"ftp://"フォーマット指定の<function>fopen
     </function>により返されたファイルポインタに対しては使わないで下さい。
    </para>
    <note>
     <para>
      引数<parameter>whence</parameter>はPHP 4.0.0以降で追加されました。
     </para>
    </note>
    <para>
     <function>ftell</function>および<function>rewind</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fstat">
   <refnamediv>
    <refname>fstat</refname>
    <refpurpose>
     オープンしたファイルポインタからファイルに関する情報を得ます
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>fstat</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルポインタftpによりオープンされたファイルの統計情報を取得し
     ます。この関数は関数<function>stat</function>に似ていますが、 ファ
     イル名の代わりにオープンされたファイルポインタを指定するところが
     異なります。
    </para>
    <para>
     次の要素を有するファイルの統計情報の配列を返します。
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>number of links</simpara></listitem>
      <listitem><simpara>user id of owner</simpara></listitem>
      <listitem><simpara>group id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>size in bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - st_blksize型をサポートするシステムでのみ有効。(Windowsのよう
     な)他のシステムは -1 を返します。
    </para>
    <para>
     この結果はキャッシュされます。より詳細な情報については、
     <function>clearstatcache</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftell">
   <refnamediv>
    <refname>ftell</refname>
    <refpurpose>ファイルポインタから読み書きの位置を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>ftell</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>fp</parameter>が示すファイルポインタの位置、
     すなわちファイル・ストリーム上のオフセットを返します。
    </para>
    <para>
     エラーが起こった堥Ј&false;を返します。
    </para>
    <para>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>、<function>popen</function>
     で正常にオープンされたファイルを指している必要があります。
    </para>
    <para>
     <function>fopen</function>,
     <function>popen</function>, <function>fseek</function>,
     <function>rewind</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftruncate">
   <refnamediv>
    <refname>ftruncate</refname>
    <refpurpose>
     ファイルを指定した長さに丸める
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>ftruncate</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>size</parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルポインタfpを引数とし、ファイルを指定した長さ、サイズに丸めます。
     この関数は成功時に&true;、失敗時に&false;を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fwrite">
   <refnamediv>
    <refname>fwrite</refname>
    <refpurpose>バイナリ・モードによるファイル書き込み</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>fwrite</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>length</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
    <function>fwrite</function>は<parameter>string</parameter>の内容を
     <parameter>fp</parameter>が指しているファイル・ストリームに書き込み
     ます。<parameter>length</parameter>パラメータが与えられている場合、
     <parameter>length</parameter>バイト数分の書き込みが完了したか、
     <parameter>string</parameter>が終わりに達したかのいずれか早い方の
     事象により書き込みは中止されます。
    </simpara>
    <simpara>
     <function>fwrite</function>は書き込んだバイト数、またはエラー時に-
     1を返します。
    </simpara>
    <simpara>
     <parameter>length</parameter> パラメータが指定されている場合、
     <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>
     構成オプションは無視され、<parameter>string</parameter>からの
     スラッシュ文字の取り除きは行われないことに注意して下さい。
    </simpara>
    <note>
     <para>
      (Windowsのように)バイナリとテキストファイルの形式が異なるシステ
      ムにおいては、ファイルをオープンする際に
      <function>fopen</function>の mode パラメータに 'b' を指定する必
      要があります。
     </para>
    </note>
    <simpara>
     <function>fread</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>fputs</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.set-file-buffer">
   <refnamediv>
    <refname>set_file_buffer</refname>
    <refpurpose>
     指定したファイルポインタのファイルバッファを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>set_file_buffer</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>buffer</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>fwrite</function>を使用した出力には、通常8kバイトのバッ
     ファが設けられます。これは、同じ出力ストリーム(ファイル)への書き
     込みを待つ二つのプロセスがある場合に、書くプロセスは8kバイトのデー
     タを書き込んだ後に待機状態になり、他のプロセスが書き込めるように
     します。<function>set_file_buffer</function>は、指定したファイル
     ポインタ <parameter>fp</parameter>への書き込み時のバッファを
     <parameter>buffer</parameter>バイトに設定します。
     <parameter>buffer</parameter>を0とした場合、書き込み操作は、
     バッファリングされません。この設定により、他のプロセスによる出力
     ストリームへの書き込みが許可される前に<function>fwrite</function>
     による書き込みが全て完了することが保証されます。
    </simpara>
     <simpara>
     この関数は成功時に0、要求が受け入れられない場合にEOFを返します。
    </simpara>
    <para>
     次の例は、<function>set_file_buffer</function>は、バッファリング
     されないストリームを作成する方法を示すものです。
     <example>
      <title><function>set_file_buffer</function>の例</title>
      <programlisting role="php">
<![CDATA[
$fp=fopen($file, "w");
if($fp){
  set_file_buffer($fp, 0);
  fputs($fp, $output);
  fclose($fp);
}
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>fopen</function>, <function>fwrite</function> も参照下
     さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-dir">
   <refnamediv>
    <refname>is_dir</refname>
    <refpurpose>ファイルがディレクトリかどうかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_dir</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>が存在して、かつそれが
     ディレクトリであれば&true;を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link>では動作しません。評価されるファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
    <para>
     <function>is_file</function>, <function>is_link</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-executable">
   <refnamediv>
    <refname>is_executable</refname>
    <refpurpose>ファイルが実行可能かどうかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_executable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>が存在しかつ実行可能であれば
     &true;を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function> を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link>では動作しません。評価されるファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
    <para>
     <function>is_dir</function>および<function>is_link</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-file">
   <refnamediv>
    <refname>is_file</refname>
    <refpurpose>通常ファイルかどうかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
    <parameter>filename</parameter>が存在して、かつそれが
     通常ファイルであれば&true;を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function> を参照下さい。
    </para>
    <para>
     <function>is_dir</function>および<function>is_link</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-link">
   <refnamediv>
    <refname>is_link</refname>
    <refpurpose>
     ファイルがシンボリックリンクかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_link</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>が存在し、かつシンボリックリンクで
     あれば&true;を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function> を参照下さい。
    </para>
    <para>
     <function>is_dir</function>, <function>is_file</function>
     も参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link>では動作しません。評価されるファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.is-readable">
   <refnamediv>
    <refname>is_readable</refname>
    <refpurpose>ファイルが読み込み可能かどうかを知る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_readable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>が存在し、それが読み込み可能であれ
     ば&true;を返します。
    </para>
    <para>
     PHPは、Webサーバが実行されているユーザ ID('nobody' が多い)でファ
     イルにアクセスすることを覚えておいて下さい。セーフモードの制限は
     働きません。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link>では動作しません。評価されるファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
    <para>
     <function>is_writable</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writable">
   <refnamediv>
    <refname>is_writable</refname>
    <refpurpose>ファイルが書き込み可能かどうかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_writable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>が存在して、かつそれが
     書き込み可能であれば&true;を返します。引数filenameは
     ディレクトリの名前とすることができ、
     ディレクトリが書き込み可能であることを調べることが寨ýです。
    </para>
    <para>
     PHP は、Web サーバが実行されているユーザ ID('nobody' が多い)
     でファイルにアクセスすることを覚えておいて下さい。
     セーフモードの制限は働きません。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
    <simpara>
     この関数は、<link linkend="features.remote-files">リモートファイ
     ル</link>では動作しません。評価されるファイルはサーバのファイルシ
     ステムによりアクセス可能である必要があります。
    </simpara>
    <para>
     <function>is_readable</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writeable">
   <refnamediv>
    <refname>is_writeable</refname>
    <refpurpose>ファイルが書き込み可能かどうか確認する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_writeable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、<function>is_writable</function>のエイリアスです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-uploaded-file">
   <refnamediv>
    <refname>is_uploaded_file</refname>
    <refpurpose>
     HTTP POSTによりアップロードされたファイルかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_uploaded_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、PHP 3.0.16 より後のバージョンの PHP 3 および 4.0.2 以
     降のバージョンの PHP 4 でのみ利用可能です。
    </para>
    <para>
     <varname>filename</varname>という名前のファイルがHTTP POSTにより
     アップロードされた場合に&true;を返します。この関数は、悪意のあるユー
     ザーがスクリプトをだまして動作しなくなるようなファイル、例えば、
     <filename>/etc/passwd</filename> を指定することを防止したい場合に
     有用です。
    </para>
    <para>
     この種の確認は、アップロードされたファイルに関して何でもできる場
     合には、その内容をユーザ、または同じシステム上の他のユーザにさえ
     暴かれる可能性があるため、特に重要です。
    </para>
    <para>
     簡単な使用例に関しては、<function>move_uploaded_file</function>お
     よび<link linkend="features.file-upload">ファイルアップロードの処
     理</link>の節も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.link">
   <refnamediv>
    <refname>link</refname>
    <refpurpose>ハードリンクを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>link</methodname>
      <methodparam><type>string</type><parameter>target</parameter></methodparam>
      <methodparam><type>string</type><parameter>link</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>link</function>はハードリンクを作成します。
    </para>
    <para>
     シンボリックリンクを作成する<function>symlink</function>や
     <function>linkinfo</function>、<function>readlink</function> 
     も参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.linkinfo">
   <refnamediv>
    <refname>linkinfo</refname>
    <refpurpose>リンクk関する情報を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>linkinfo</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
    <function>linkinfo</function>は、lstatシステムコールで返された
     UNIX C言語のstat構造体のst_devフィールドを返します。この関数は、
     (<parameter>path</parameter>が指している)リンクが実際に存在
     するかどうかを、(stat.hで定義されているS_ISLNKマクロと同じ
     方法で)チェックするために使われます。0を返し、エラーの場合に
     &false;を返します。
    </para>
    <para>
     <function>symlink</function>, <function>link</function>,
     <function>readlink</function>も参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.mkdir">
   <refnamediv>
    <refname>mkdir</refname>
    <refpurpose>ディレクトリを作る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mkdir</methodname>
      <methodparam><type>string</type><parameter>pathname</parameter></methodparam>
      <methodparam><type>int</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>pathname</parameter>で指定されたディレクトリを
     作成しようと試みます。
    </para>
    <para>
     モードを8進数で指定する必要があり、このため、先頭にゼロを付ける必
     要があることに注意して下さい。modeは、カレントのumaskでも修正され
     ます。umaskは、<function>umask</function>により変更可能です。
     <informalexample>
      <programlisting role="php">
<![CDATA[
mkdir ("/path/to/my/dir", 0700);
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     成功すると&true;を返し、失敗すると&false;を返します。
    </para>
    <para>
     <function>rmdir</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.move-uploaded-file">
   <refnamediv>
    <refname>move_uploaded_file</refname>
    <refpurpose>新しい位置にアップロードされたファイëを移動する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>move_uploaded_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>destination</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、<parameter>filename</parameter>で指定されたファイルが
     (PHPのHTTP POSTアップロード機構によりアップロードされたという意味
     で)有効なアップロードファイルであるかどうかを確認します。そのファ
     イルが有効な場合、<parameter>destination</parameter>で指定したファ
     イル名に移動されます。
    </para>
    <para>
     <parameter>filename</parameter> が有効なアップロードファイルでな
     い場合、処理は行われず、<function>move_uploaded_file</function>
     は &false;を返します。
    </para>
    <para>
     <parameter>filename</parameter> が有効なアップロードファイルであ
     るが、何らかの理由により、移動できない場合、処理は行われず、
     <function>move_uploaded_file</function> は
     &false;を返します。加えて、警告が出力されます。
    </para>
    <para>
     この種の確認は、アップロードされたファイルに関して何でもできる場
     合には、その内容をユーザ、または同じシステム上の他のユーザにさえ
     暴かれる可能性があるため、特に重要です。
    </para>
    &note.sm.uidcheck;
    <warning>
     <para>
      コピー先のファイルが既に存在する場合、上書きされます。
     </para>
    </warning>
    <para>
     簡単な使用例については、
     <function>is_uploaded_file</function>および<link
     linkend="features.file-upload">アップロードファイルの処理</link>
     の節を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-ini-file">
   <refnamediv>
    <refname>parse_ini_file</refname>
    <refpurpose>設定ファイルをパースする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>parse_ini_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>
        process_sections
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>parse_ini_file</function> は、
     <parameter>filename</parameter>で指定したiniファイルをロードし、
     連想配列としてその設定値を返します。
     直近の<parameter>process_sections</parameter>パラメータに&true;
     を設定することにより、セクション名と設定が含まれた多次元の配列を
     得ることができます。デフォルトでは、
     <parameter>process_sections</parameter>は、&false;です。
    </para>
    <note>
     <para>
      この関数は、<filename>php.ini</filename>ファイルには何もしません。
      このファイルはスクリプトを実行している時には既に処理されています。
      この関数は、アプリケーション個有の設定ファイルを読み込む際に使用
      可能です。
     </para>
    </note>
    <para>
     初期ファイルの構造は、<filename>php.ini</filename>の構造に似てい
     ます。
    </para>
    <para>
     <example>
      <title>sample.iniの内容</title>
      <programlisting>
<![CDATA[
; This is a sample configuration file
; Comments start with ';', as in php.ini

[first_section]
one = 1
five = 5

[second_section]
path = /usr/local/bin
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>parse_ini_file</function>の例</title>
      <programlisting>
<![CDATA[
<?php

// Parse without sections
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Parse with sections
$ini_array = parse_ini_file("sample.ini", TRUE);
print_r($ini_array);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     出力は以下のようになります:
     <informalexample>
      <programlisting>
<![CDATA[
Array
(
    [one] => 1
    [five] => 5
    [path] => /usr/local/bin
)
Array
(
    [first_section] => Array
        (
            [one] => 1
            [five] => 5
        )

    [second_section] => Array
        (
            [path] => /usr/local/bin
        )

)
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pathinfo">
   <refnamediv>
    <refname>pathinfo</refname>
    <refpurpose>ファイルパスに関する情報を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>pathinfo</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>pathinfo</function> は、<parameter>path</parameter> に
     関する情報を有する連想配列を返します。次の配列要素が返されます。
     <parameter>dirname</parameter>, <parameter>basename</parameter>,
     <parameter>extension</parameter>
    </para>
    <para>
     <example>
      <title><function>pathinfo</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php

$path_parts = pathinfo("/www/htdocs/index.html");

echo $path_parts["dirname"] . "\n";
echo $path_parts["basename"] . "\n";
echo $path_parts["extension"] . "\n";

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     出力は次のようになります。
     <informalexample>
      <programlisting>
<![CDATA[
/www/htdocs
index.html
html
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>dirname</function>, <function>basename</function>,
     <function>parse_url</function>, <function>realpath</function>も参
     照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pclose">
   <refnamediv>
    <refname>pclose</refname>
    <refpurpose>プロセスのファイルポインタをクローズする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>pclose</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>popen</function>によってオープンされたパイプへの
     ファイルポインタをクローズします。
    </para>
    <para>
     ファイルポインタは有効なものでなければならず、また
     <function>popen</function>で正常にオープンされたものである
     必要があります。
    </para>
    <para>
     実行していたプロセスの終了ステータスを返します。
    </para>
    <para>
     <function>popen</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.popen">
   <refnamediv>
    <refname>popen</refname>
    <refpurpose>プロセスへのファイルポインタをオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>popen</methodname>
      <methodparam><type>string</type><parameter>command</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>command</parameter>で与えられたコマンドを
     fork()して実行し、そのプロセスへのパイプをオープンします。
    </para>
    <para>
     <function>fopen</function>により返されたファイルポインタ
     と同様のものを返しますが、それは(読み書きのいずれか一方で
     のみ使われる)片方向ストリームであり、<function>pclose</function>
     によりクローズされなければならないところが異なります。この
     ポインタは、<function>fgets</function>, <function>fgetss</function>
     および<function>fputs</function>のいずれかで使うことができます。
    </para>
    <para>
     エラーが起こった場合&false;を返します。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = popen ("/bin/ls", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>pclose</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readfile">
   <refnamediv>
    <refname>readfile</refname>
    <refpurpose>ファイルを出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>readfile</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>use_include_path</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     ファイルを読んで標準出力に書き出します。
    </para>
    <para>
     ファイルから読み込んだバイト数を返します。エラーが起こると
     &false;を返し、また@readfileという名前でコールされない限り、
     エラーメッセージが表示されます。
    </para>
    <para>
     <parameter>filename</parameter>が"http://"(大文字小文字は区別されません)
     で始まっている場合、指定されたサーバに対してHTTP 1.0コネクションが
     オープンされ、返されたテキストが標準出力に書き出されます。
    </para>
    <para>
     PHP 4.0.5より前のバージョンは、HTTPリダイレクトを処理しません。こ
     のため、ディレクトリには末尾のスラッシュを含める必要があります。
    </para>
    <para>
     <parameter>filename</parameter>が "ftp://"(大文字小文字は区別されません)
     で始まっている場合、指定されたサーバに対してFTPコネクションが
     オープンされ、要求したファイルが標準出力に書き出されます。
     サーバがパッシブ・モードをサポートしていない場合、これは失敗します。
    </para>
    <para>
     <parameter>filename</parameter>が上記のいずれでもない
     場合、ファイルはファイルシステムからオープンされ、その内容が
     標準出力に書き出されます。
    </para>
    <para>
     オプションの2番目の引数を使用して、これに"1"を設定することにより、
     <link linkend="ini.include-path">include_path</link>
     のファイルの検索も行うことができます。
    </para>
    <para>
     <function>fpassthru</function>, <function>file</function>,
     <function>fopen</function>, <function>include</function>,
     <function>require</function>, <function>virtual</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readlink">
   <refnamediv>
    <refname>readlink</refname>
    <refpurpose>シンボリックリンク先を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>readlink</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>readlink</function>は同名のC関数と同じ動作をして、
     シンボリックリンク・パスの内容を返します。エラーの場合0を
     返します。
    </para>
    <para>
     <function>symlink</function>,<function>readlink</function>,
     <function>linkinfo</function>も参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.rename">
   <refnamediv>
    <refname>rename</refname>
    <refpurpose>ファイルをリネームする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>rename</methodname>
      <methodparam><type>string</type><parameter>oldname</parameter></methodparam>
      <methodparam><type>string</type><parameter>newname</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>oldname</parameter>を
     <parameter>newname</parameter>にリネームしようと試みっY。
    </para>
    <para>
     成功すると&true;、失敗すると&false;を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rewind">
   <refnamediv>
    <refname>rewind</refname>
    <refpurpose>ファイルポインタの位置を先頭に戻す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>rewind</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>fp</parameter>のファイル位置指示子をファイル
     ストリームの先頭にセットします。
    </para>
    <para>
     エラーが起こった場合 0 を返します。
    </para>
    <para>
     ファイルポインタは有効なものでなければならず、また
     <function>fopen</function>で正常にオープンされたファイルを
     指している必要があります。
    </para>   
    <note>
     <para>
      追記("a")モードでファイルをオープンした場合、ファイル位置によら
      ずファイルに書き込まれるデータは常に追加されます。
     </para>
    </note>
    <para>
     <function>fseek</function>, <function>ftell</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rmdir">
   <refnamediv>
    <refname>rmdir</refname>
    <refpurpose>ディレクトリを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>rmdir</methodname>
      <methodparam><type>string</type><parameter>dirname</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>dirname</parameter>で指定されたディレクトリを
     削除しようと試みます。ディレクトリは空でなくてはならず、また
     適切なパーミッションが設定されていなければなりません。
    </para>
    <para>
     エラーが起こった場合に0を返します。
    </para>
    <para>
     <function>mkdir</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.stat">
   <refnamediv>
    <refname>stat</refname>
    <refpurpose>ファイルに関する情報を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>stat</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>で指定されたファイルに
     ついての統計情報を取得します。
    </para>
    <para>
     ファイルの統計情報を、以下の要素を持つ配列として
     返します。
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>inode protection mode</simpara></listitem>
      <listitem><simpara>number of links</simpara></listitem>
      <listitem><simpara>user id of owner</simpara></listitem>
      <listitem><simpara>gourp id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>size in bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - st_blksizeタイプをサポートしているシステムでのみ有効です。
         (Windowsのような)その他のシステムでは-1を返します。
    </para>
    <para>
     エラーの場合は、&false;を返します。
    </para>
    <para>
     <function>stat</function>は、<function>fopen</function>のように
     URLを処理しません。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.lstat">
   <refnamediv>
    <refname>lstat</refname>
    <refpurpose>
     ファイルまたはシンボリックリンクに関する情報を与えます
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>lstat</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     filenameという名前のファイルまたはシンボリックリンクの情報を得ます。
     この関数の動作は<function>stat</function>関数と同じですが、
     パラメータ<parameter>filename</parameter>がシンボリックリンクで
     あった場合に、シンボリック先のファイルのステータスではなく、
     シンボリックリンクのステータスが返されるところが異なります。
    </para>
    <para>
     次の要素を有するファイル情報の配列を返します。
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>inode protection mode</simpara></listitem>
      <listitem><simpara>number of links</simpara></listitem>
      <listitem><simpara>user id of owner</simpara></listitem>
      <listitem><simpara>group id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>size in bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - st_blksize 型をサポートしているシステムでのみ有効--
     他のシステム (例えば、Windows) では -1 を返します。
    </para>
    <para>
     この関数の結果はキャッシュされます。詳細は、
     <function>clearstatcache</function>を参照下さい。 
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.realpath">
   <refnamediv>
    <refname>realpath</refname>
    <refpurpose>絶対パス名を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>realpath</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>realpath</function>は、シンボリックリンクを全て展開し、
     入力<parameter>path</parameter>の'/./'、'/../'、'/'が指すものを調
     べます。返されるパスはシンボリックリンクや'/./'、'/../'要素を含み
     ません。
    </para>
    <para>
     <example>
      <title><function>realpath</function>の例</title>
      <programlisting role="php">
<![CDATA[
$real_path = realpath ("../../index.php");
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.symlink">
   <refnamediv>
    <refname>symlink</refname>
    <refpurpose>シンボリックリンクを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>symlink</methodname>
      <methodparam><type>string</type><parameter>target</parameter></methodparam>
      <methodparam><type>string</type><parameter>link</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>symlink</function>は、指定されたリンク名
     <parameter>link</parameter>で既存のファイル<parameter>target</parameter>
     へのシンボリックリンクを作成します。
    </para>
    <para>
     ハードリンクを作るには<function>link</function>、そして
     <function>readlink</function>と<function>linkinfo</function>
     を参照下さい。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.tempnam">
   <refnamediv>
    <refname>tempnam</refname>
    <refpurpose>ユニークなファイル名を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>tempnam</methodname>
      <methodparam><type>string</type><parameter>dir</parameter></methodparam>
      <methodparam><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <para>
     ユニークなテンポラリファイル名を指定したディレクトリに作成します。
     指定したディレクトリが存在しない場合、
     <function>tempnam</function> は、システムのテンポラリディレクトリ
     にあるファイル名を生成し、その名前を返します。
    </para>
    <para>
     PHP 4.0.6より前では、関数<function>tempnam</function>の動作はシス
     テムに依存していました。WindowsにおいてTMP環境変数は
     <parameter>dir</parameter>パラメータを上書きします。Linuxにおいて
     は、TMPDIR環境変数が優先されます。一方、SVR4においては指定したディ
     レクトリが存在する場合は、常に<parameter>dir</parameter>パラメー
     タを使用します。疑問がある場合は、tempnam(3)に関するシステムドキュ
     メントを参照下さい。
    </para>
    <para>
     新しいテンポラリファイル名を返し、失敗時にはすると&false;文字列を
     返します。
     <example>
      <title><function>tempnam</function>の例</title>
      <programlisting role="php">
<![CDATA[
$tmpfname = tempnam ("/tmp", "FOO");

$fp = fopen($tmpfname, "w");
fwrite($fp, "writing to tempfile");
fclose($fp);

// ここで何か行う

unlink($tmpfname);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      この関数の動作は、4.0.3 で変更され、文字列が生成された時間の間や
      スクリプトがファイルの作成にとりかかる前にファイルシステムに現れ
      る可能性がある場合のファイルとの競合を回避するためにもテンポラリ
      ファイルは作成されます。このファイルは自動的に削除されないため、
      不要となった場合にはこのファイルを削除する必要があることに注意し
      て下さい。
     </simpara>
    </note>
    <para>
     <function>tmpfile</function>, <function>unlink</function>も参照下
     さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.tmpfile">
   <refnamediv>
    <refname>tmpfile</refname>
    <refpurpose>テンポラリファイルを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>tmpfile</methodname>
      <void/>
     </methodsynopsis>
    <para>
     書き込み可のモードでユニークな名前を有するテンポラリファイルを作
     成し、ファイルハンドルを返します。これは、
     <function>fopen</function>により返されるハンドルと同じものです。
     ファイルは、(<function>fclose</function>を用いて)クローズされた際
     またはスクリプトが終了された際に自動的に削除されます。
    </para>
    <para>
     詳細については、関数<literal>tmpfile(3)</literal>のシステムドキュ
     メントおよびヘッダファイル<filename>stdio.h</filename>を参照下さ
     い。
    </para>
    <para>
     <example>
      <title><function>tmpfile</function>の例</title>
      <programlisting role="php">
<![CDATA[
$temp = tmpfile();
fwrite($temp, "writing to tempfile");
fclose($temp); // ファイルを削除します
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>tempnam</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.touch">
   <refnamediv>
    <refname>touch</refname>
    <refpurpose>ファイルの最終更新日をセットする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>touch</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>int</type><parameter>time</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>で指定されたファイルの
     最終更新日を、<parameter>time</parameter>で指定された値に
     セットしようと試みます。オプションのtimeが指定されない場合、
     現在時刻を使用します。
    </para>
    <para>
     ファイルが存在しない場合、ファイルが生成されます。
    </para>
    <para>
     成功すると&true;、そうでない場合に&false;を返します。
     <example>
      <title><function>touch</function>の例</title>
      <programlisting role="php">
<![CDATA[
if (touch ($FileName)) {
    print "$FileName modification time has been 
           changed to todays date and time";
} else {
    print "Sorry Could Not change modification time of $FileName";
}
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.umask">
   <refnamediv>
    <refname>umask</refname>
    <refpurpose>現在のumaskを変更する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>umask</methodname>
      <methodparam><type>int</type><parameter>mask</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>umask</function>はPHPのumaskをmask &amp; 0777にセットし、
     元のumask値を返します。PHPがサーバ・モジュールとして動作中の場合、
     各リクエストが終了するたびにumaskは元の値に戻されます。
    </para>
    <para>
     <function>umask</function>を引数無しで実行すると、単に現在の
     umask値を返します。
    </para>
     &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.unlink">
   <refnamediv>
    <refname>unlink</refname>
    <refpurpose>ファイルを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>unlink</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     <parameter>filename</parameter>を削除します。Unix C言語の関数unlink()
     と動作は同じです。
    </para>
    <para>
     &return.success;
    </para>
    <para>
     ディレクトリの削除には、<function>rmdir</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

