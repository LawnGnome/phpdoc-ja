<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.11 $ -->
 <reference id="ref.sockets">
  <title>ソケット関数</title>
  <titleabbrev>ソケット</titleabbrev>

  <partintro>
   &warn.experimental;
   <simpara>
    ソケット拡張により、ソケット通信関数への低レベルなインターフェース
    が実装され、クライアントとしてだけでなく、ソケットサーバーとして動
    作することが可能となります。
   </simpara>
   <para>
    ここに既述されたソケット関数はPHP拡張モジュールの一部であり、コン
    パイル時に<command>configure</command>にオプション<option
    role="configure">--enable-sockets</option>を指定することにより使用
    可能となります。
   </para>
   <para>
    より一般的なクライアントサイドのソケットインターフェースについては、
    <function>fsockopen</function> および
    <function>pfsockopen</function>を参照下さい。
   </para>
   <para>
    ここで説明するソケット関数を使用する場合、多くの関数は、C言語に同
    じ名前の関数が存在しますが、定義が異なっていることに注意して下さい。
    混乱を避けるには、説明をよく読んで下さい。
   </para>
   <para>
    このようにソケットソケットプログラミングと異なっている点はあります
    が、それでも有用な多くのUNIX man ページを参照することができます。
    Web上にC言語のソケットプログラミングのチュートリアル情報が存在し、
    その多くは、若干の修正により、PHPにおけるソケットプログラミングに
    適当することが可能です。
   </para>
   <para>
    <example>
     <title>ソケットの例: 簡易TCP/IPサーバー</title>
     <para>
      この例は、簡単な応答サーバーです。変数<varname>address</varname>
      と<varname>port</varname>を設定と実行環境に合うように変更して下
      さい。このサーバーに次のようなコマンドで接続することが可能です。
      : <command>telnet 192.168.1.53 10000</command> (ただし、アドレス
      とポートは設定に合わせます)入力したものは、サーバー側の出力とな
      り、エコーバックされます。接続を閉じるには、'quit'を入力します。
     </para>
     <programlisting role="php">
<![CDATA[
<?php
error_reporting (E_ALL);

/* Allow the script to hang around waiting for connections. */
set_time_limit (0);

$address = '192.168.1.53';
$port = 10000;

if (($sock = socket_create (AF_INET, SOCK_STREAM, 0)) < 0) {
    echo "socket_create() failed: reason: " . socket_strerror ($sock) . "\n";
}

if (($ret = socket_bind ($sock, $address, $port)) < 0) {
    echo "socket_bind() failed: reason: " . socket_strerror ($ret) . "\n";
}

if (($ret = socket_listen ($sock, 5)) < 0) {
    echo "socket_listen() failed: reason: " . socket_strerror ($ret) . "\n";
}

do {
    if (($msgsock = socket_accept($sock)) < 0) {
        echo "socket_accept() failed: reason: " . socket_strerror ($msgsock) . "\n";
        break;
    }
    do {
        $buf = socket_read ($msgsock, 2048);
        if ($buf == FALSE) {
            echo "socket_read() failed: reason: " . socket_strerror ($ret) . "\n";
            break 2;
        }
        if (!$buf) {
            break 2;
        }
        $buf = trim ($buf);
        if ($buf == 'quit') {
            socket_close ($msgsock);
            break 2;
        }
        $talkback = "PHP: You said '$buf'.\n";
        socket_write ($msgsock, $talkback, strlen ($talkback));
        echo "$buf\n";
    } while (true);
    socket_close ($msgsock);
} while (true);

socket_close ($sock);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>ソケットの例: 簡易 TCP/IP クライアント</title>
     <para>
      この例は、簡単な一回限りのHTTPクライアントです。ここでは、あるペー
      ジに接続し、HEADリクエストを送信し、応答を出力た後、終了します。
     </para>
     <programlisting role="php">
<![CDATA[
<?php
error_reporting (E_ALL);

echo "<h2>TCP/IP Connection</h2>\n";

/* Get the port for the WWW service. */
$service_port = getservbyname ('www', 'tcp');

/* Get the IP address for the target host. */
$address = gethostbyname ('www.php.net');

/* Create a TCP/IP socket. */
$socket = socket_create (AF_INET, SOCK_STREAM, 0);
if ($socket < 0) {
    echo "socket_create() failed: reason: " . socket_strerror ($socket) . "\n";
} else {
    "socket_create() successful: " . socket_strerror ($socket) . "\n";
}

echo "Attempting to connect to '$address' on port '$service_port'...";
$result = socket_connect ($socket, $address, $service_port);
if ($result < 0) {
    echo "socket_connect() failed.\nReason: ($result) " . socket_strerror($result) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.0\r\n\r\n";
$out = '';

echo "Sending HTTP HEAD request...";
socket_write ($socket, $in, strlen ($in));
echo "OK.\n";

echo "Reading response:\n\n";
while ($out = socket_read ($socket, 2048)) {
    echo $out;
}

echo "Closing socket...";
socket_close ($socket);
echo "OK.\n\n";
?>
]]>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.socket-accept">
   <refnamediv>
    <refname>socket_accept</refname>
    <refpurpose>ソケットへの接続を許可する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_accept</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     <function>socket_create</function>を使用してソケット
     <parameter>socket</parameter>を作成した後、
     <function>socket_bind</function>で名前に関連付け、
     <function>socket_listen</function>で接続をモニタします。この関数
     は、このソケットへの接続を許可します。接続に成功すると、新規のソ
     ケット記述子が返されます。この記述子は、通信の際に使用可能です。
     ソケット上に複数の接続がキューで待っている場合、最初の接続が使用
     されます。接続待ちがない場合、<function>socket_accept</function>
     は接続が存在するまでブロックされます。
     <parameter>socket</parameter>が
     <function>socket_set_blocking</function>または
     <function>socket_set_nonblock</function>により非ブロックモードで
     作成された場合、エラーコードが返されます。
    </para>
    <para>
     <function>socket_accept</function>により返されたソケット記述子は、
     新規接続を許可するために使用することはできません。この場合でも元
     の接続待ちのソケット <parameter>socket</parameter>は、オープンさ
     れたままであり、再使用可能です。
    </para>
    <para>
     成功時に新規ソケット記述子を返し、失敗時に負のエラーコードを返し
     ます。このコードは、エラーの内容を文字列で取得するために
     <function>socket_strerror</function>に渡すことが可能です。
    </para>
    <para>
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_create</function>,
     <function>socket_get_status</function>,
     <function>socket_strerror</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-bind">
   <refnamediv>
    <refname>bind</refname>
    <refpurpose>ソケットに名前をバインドする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_bind</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>address</parameter></methodparam>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>port</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     <function>socket_bind</function>は、
     <parameter>address</parameter>で指定した名前を
     <parameter>socket</parameter>で指定したソケットにバインドします。
     このソケットは、<function>socket</function>で作成した有効なソケッ
     ト記述子である必要があります。
    </para>
    <para>
     ソケットの種類が<constant>AF_INET</constant>の場合、パラメータ
     <parameter>address</parameter> は、4-ドット表記のIPアドレス(例:
     <literal>127.0.0.1</literal>)であり、<constant>AF_UNIX</constant>
     の場合はUNIXドメインソケットのパス名です。
    </para>
    <para>
     パラメータ<parameter>port</parameter>は、
     <constant>AF_INET</constant>ソケットに接続する場合にのみ使用され、
     接続するリモートホストのポートを指定します。
    </para>
    <para>
     成功時にゼロを返し、失敗時に負のエラーコードを返します。このコー
     ドは、エラーの内容を文字列で取得するために
     <function>socket_strerror</function>に渡すことが可能です。
    </para>
    <para>
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_create</function>,
     <function>socket_get_status</function>,
     <function>socket_strerror</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-close">
   <refnamediv>
    <refname>socket_close</refname>
    <refpurpose>ファイル記述子を閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_close</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     <function>socket_close</function> は、
     <parameter>socket</parameter>で指定したファイル(またはソケット)記
     述子を閉じます。
    </para>
    <para>
     <function>socket_close</function> で、<function>fopen</function>,
     <function>popen</function>, <function>fsockopen</function>, 
     <function>psockopen</function>で作成されたPHPのファイル記述子を
     使用してはならないことに注意して下さい。この関数は、
     <function>socket_create</function>、または
     <function>socket_accept</function>で作成されたソケット用です。
    </para>
    <para>
     成功時に &true; 、エラー発生時(すなわち<parameter>socket</parameter>
     が無効の場合)に &false; を返します。
    </para>
    <para>
     <function>socket_bind</function>,
     <function>socket_listen</function>,
     <function>socket_create</function>,
     <function>socket_get_status</function>,
     <function>socket_strerror</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-connect">
   <refnamediv>
    <refname>socket_connect</refname>
    <refpurpose>ソケット上の接続を初期化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_connect</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>address</parameter></methodparam>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>port</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    &warn.experimental.func;
    <para>
     ソケット記述子<parameter>socket</parameter>を用いて接続を初期化し
     ます。この記述子は、<function>socket_create</function>で作成した
     有効なソケット記述子である必要があります。
    </para>
    <para>
     ソケットの種類が<constant>AF_INET</constant>の場合、パラメータ
     <parameter>address</parameter> は、4-ドット表記のIPアドレス(例:
     <literal>127.0.0.1</literal>)であり、<constant>AF_UNIX</constant>
     の場合はUNIXドメインソケットのパス名です。
    </para>
    <para>
     パラメータ<parameter>port</parameter>は、
     <constant>AF_INET</constant>ソケットに接続する場合にのみ使用され、
     接続するリモートホストのポートを指定します。
    </para>
    <para>
     成功時にゼロを返し、失敗時に負のエラーコードを返します。このコー
     ドは、エラーの内容を文字列で取得するために
     <function>strerror</function>に渡すことが可能です。
    </para>
    <para>
     <function>socket_bind</function>,
     <function>socket_listen</function>,
     <function>socket_create</function>,
     <function>socket_get_status</function>,
     <function>socket_strerror</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-listen">
   <refnamediv>
    <refname>socket_listen</refname>
    <refpurpose>ソケット上で接続待ち(listen)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_listen</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>int</type><parameter>backlog</parameter></methodparam>
     </methodsynopsis>
    &warn.experimental.func;
    <para>
     ソケット<parameter>socket</parameter>が
     <function>socket_create</function>を用いて作成され、
     <function>socket_bind</function>で名前が付けられた後、
     <parameter>socket</parameter>上の接続要求を待つための通信ができる
     ようになります。最大<parameter>backlog</parameter>個の接続を処理
     用のキューで待ち受けることが可能です。
    </para>
    <para>
     <function>listen</function>はソケットが
     <literal>SOCK_STREAM</literal>型または
     <literal>SOCK_SEQPACKET</literal>型の場合のみ利用可能です。
    </para>
    <para>
     成功時にゼロ、失敗時に負のエラーコードを返します。このコードを
     <function>socket_strerror</function>に指定することによりエラーの
     内容を文字列として取得可能です。
    </para>
    <para>
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_create</function>,
     <function>socket_get_status</function>,
     <function>socket_strerror</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-read">
   <refnamediv>
    <refname>socket_read</refname>
    <refpurpose>ソケットから読みこむ</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>socket_read</methodname>
      <methodparam><type>resource</type><parameter>socket_des</parameter></methodparam>
      <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     関数 <function>socket_read</function> は、関数
     <function>socket_accept</function> により作成されたソケット
     <parameter>socket_des</parameter> から
     <parameter>length</parameter> に設定されたバイト数分、
     <parameter>buffer</parameter> に読み込みます。これ以外に読み込み
     を終了するために \n、\t、\0 を使用することが可能です。この関数は、
     データを返します。<function>socket_read</function>が失敗した場合
     に&false;を返します。
    </para>
    <para>
     オプションのパラメータ <parameter>type</parameter> は、名前のある
     定数です。
     <itemizedlist>
      <listitem>
       <simpara>
        PHP_BINARY_READ - システムの<function>socket_read</function>を
        使用する (PHP &gt;= 4.1.0でデフォルト)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        PHP_NORMAL_READ - デフォルト。読み込みは、\r、\nで中断される。
	(PHP &lt;= 4.0.6でデフォルト)
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_strerror</function>,
     <function>socket_get_status</function>,
     <function>socket_write</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-create">
   <refnamediv>
    <refname>socket_create</refname>
    <refpurpose>ソケットを作成する(通信時の終端)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>resource</type><methodname>socket_create</methodname>
      <methodparam><type>int</type><parameter>domain</parameter></methodparam>
      <methodparam><type>int</type><parameter>type</parameter></methodparam>
      <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     通信用の終端(ソケット)を作成し、そのソケットへの記述子を返します。
    </para>
    <para>
     パラメータ<parameter>domain</parameter>はドメインを設定します。現
     在、<constant>AF_INET</constant>および
     <constant>AF_UNIX</constant>が使用可轣Uれます。
    </para>
    <para>
     <parameter>type</parameter>パラメータはソケット型を選択します。
     これは、<constant>SOCK_STREAM</constant>,
     <constant>SOCK_DGRAM</constant>,
     <constant>SOCK_SEQPACKET</constant>,
     <constant>SOCK_RAW</constant>, <constant>SOCK_RDM</constant>, 
     <constant>SOCK_PACKET</constant>のどれかです。
    </para>
    <para>
     <parameter>protocol</parameter> はプロトコルを設定します。
    </para>
    <para>
     成功時に有効な記述子を返し、失敗時に負のエラーコードを返します。
     このコードを<function>socket_strerror</function>に渡すことにより、
     エラーの内容を文字列で取得することが可能です。
    </para>
    <para>
     <function>socket_create</function>の使用法に関するより詳しい情報
     や種々のパラメータの意味については、UNIXマニュアルページ
     <filename>socket (2)</filename>を参照下さい。
    </para>
    <para>
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_strerror</function>,
     <function>socket_get_status</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-strerror">
   <refnamediv>
    <refname>socket_strerror</refname>
    <refpurpose>ソケットエラーの内容を文字列として返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>socket_strerror</methodname>
      <methodparam><type>int</type><parameter>errno</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     <function>socket_strerror</function> は、パラメータ
     <parameter>errno</parameter>にソケット関数の返り値の一つを引数と
     して指定し、対応する内容を文字列で返します。これは、動作しない原
     因を明らかにする際に便利です。例えば、システムのインクルードファ
     イルを探し'-111'が意味することを探す代わりに、これを
     <function>socket_strerror</function>に渡すだけで、原因を知ること
     ができます。
    </para>
    <para>
     <example>
      <title><function>strerror</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php
if (($socket = socket_create (AF_INET, SOCK_STREAM, 0)) < 0) {
   echo "socket_create() failed: reason: " . socket_strerror ($socket) . "\n";
} 

if (($ret = socket_bind ($socket, '127.0.0.1', 80)) < 0) {
   echo "socket_bind() failed: reason: " . socket_strerror ($ret) . "\n";
}
?>
]]>
      </programlisting>
      <para>
       上記の例の出力はおそらく次のようになります。(このスクリプトがルー
       ト権限で実行されていないことを仮定します)
       <screen>
        bind() failed: reason: Permission denied
       </screen>
      </para>
     </example>
    </para>
    <para>
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_create</function>,
     <function>socket_get_status</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-write">
   <refnamediv>
    <refname>socket_write</refname>
    <refpurpose>ソケットに書き込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_write</methodname>
      <methodparam><type>resource</type><parameter>socket_des</parameter></methodparam>
      <methodparam><type>string</type><parameter>&amp;buffer</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     関数 <function>socket_write</function> は、
     <parameter>length</parameter>で指定されたバイト数分、
     <parameter>&amp;buffer</parameter> の内容をソケット
     <parameter>socket_des</parameter> に書き込みます。
    </para>
    <para>
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_read</function>,
     <function>socket_strerror</function>,
     <function>socket_get_status</function>.も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-fd-alloc">
   <refnamediv>
    <refname>socket_fd_alloc</refname>
    <refpurpose>ファイル記述子集合を確保する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>resource</type><methodname>socket_fd_alloc</methodname>
      <void/>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-fd-free">
   <refnamediv>
    <refname>socket_fd_free</refname>
    <refpurpose>ファイル記述子集合を解放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_fd_free</methodname>
      <methodparam><type>resource</type><parameter>set</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-fd-set">
   <refnamediv>
    <refname>socket_fd_set</refname>
    <refpurpose>集合にファイル記述子を追加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_fd_set</methodname>
      <methodparam><type>resource</type><parameter>set</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-fd-clear">
   <refnamediv>
    <refname>socket_fd_clear</refname>
    <refpurpose>ある集合からファイル記述子をクリアする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_fd_clear</methodname>
      <methodparam><type>resource</type><parameter>set</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-fd-isset">
   <refnamediv>
    <refname>socket_fd_isset</refname>
    <refpurpose>
     あるファイル記述子が、ファイル記述子集合の中で設定されているかど
     うかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_fd_isset</methodname>
      <methodparam><type>resource</type><parameter>set</parameter></methodparam>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-fd-zero">
   <refnamediv>
    <refname>socket_fd_zero</refname>
    <refpurpose>ファイル記述子集合をクリアする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_fd_zero</methodname>
      <methodparam><type>resource</type><parameter>set</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-select">
   <refnamediv>
    <refname>socket_select</refname>
    <refpurpose>
     tv_secとtv_usec で指定した有効時間でselect()システムコールを実行
     する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_select</methodname>
      <methodparam><type>resource</type><parameter>read_fd</parameter></methodparam>
      <methodparam><type>resource</type><parameter>write_fd</parameter></methodparam>
      <methodparam><type>resource</type><parameter>except_fd</parameter></methodparam>
      <methodparam><type>int</type><parameter>tv_sec</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>tv_usec</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-create-listen">
   <refnamediv>
    <refname>socket_create_listen</refname>
    <refpurpose>
     接続を受けつけるためにポートにソケットをオープンする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>resource</type><methodname>socket_create_listen</methodname>
      <methodparam><type>int</type><parameter>port</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>backlog</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-set-nonblock">
   <refnamediv>
    <refname>socket_set_nonblock</refname>
    <refpurpose>ファイル記述子fdを非ブロックモードに設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_set_nonblock</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-getsockname">
   <refnamediv>
    <refname>socket_getsockname</refname>
    <refpurpose>
     fdを指定、ソケットのローカル側を既述するsa.sin_addrおよび
     sa.sin_portの値をaddrおよびportの文字列に保存する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_getsockname</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>&amp;addr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>&amp;port</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-getpeername">
   <refnamediv>
    <refname>socket_getpeername</refname>
    <refpurpose>
     fdを指定、ソケットのリモート側を既述するsa.sin_addrおよび
     sa.sin_portの値をaddrおよびportの文字列に保存する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_getpeername</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>&amp;addr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>&amp;port</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-iovec-alloc">
   <refnamediv>
    <refname>socket_iovec_alloc</refname>
    <refpurpose>
     sendmsg, recvmsg, writev, readvで使用するよう'struct iovec'を構築する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>resource</type><methodname>socket_iovec_alloc</methodname>
      <methodparam><type>int</type><parameter>num_vectors</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter/></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-iovec-fetch">
   <refnamediv>
    <refname>socket_iovec_fetch</refname>
    <refpurpose>
     iovec_id[iovec_position] で指定したiovecに保存されたデータを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>socket_iovec_fetch</methodname>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
      <methodparam><type>int</type><parameter>iovec_position</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-iovec-set">
   <refnamediv>
    <refname>socket_iovec_set</refname>
    <refpurpose>
     iovec_id[iovec_position]に保持されたデータにnew_valを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_iovec_set</methodname>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
      <methodparam><type>int</type><parameter>iovec_position</parameter></methodparam>
      <methodparam><type>string</type><parameter>new_val</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-iovec-add">
   <refnamediv>
    <refname>socket_iovec_add</refname>
    <refpurpose>新規ベクトルを収集用配列に追加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_iovec_add</methodname>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
      <methodparam><type>int</type><parameter>iov_len</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-iovec-delete">
   <refnamediv>
    <refname>socket_iovec_delete</refname>
    <refpurpose>ベクトルの配列からベクトルを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_iovec_delete</methodname>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
      <methodparam><type>int</type><parameter>iov_pos</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-iovec-free">
   <refnamediv>
    <refname>socket_iovec_free</refname>
    <refpurpose>iovec_idで指定したiovecを解放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_iovec_free</methodname>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-readv">
   <refnamediv>
    <refname>socket_readv</refname>
    <refpurpose>
     iovec_idで定義した収集用配列を用いてfdから読み込む
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_readv</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>resource</type><parameter>iovec_id</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-writev">
   <refnamediv>
    <refname>socket_writev</refname>
    <refpurpose>
     iovec_idで定義した収集用配列を用いてファイル記述子fdに書き込む
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_writev</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>resource</type><parameter>iovec_id</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-recv">
   <refnamediv>
    <refname>socket_recv</refname>
    <refpurpose>接続したソケットからデータを受信する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>socket_recv</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>int</type><parameter>len</parameter></methodparam>
      <methodparam><type>int</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-send">
   <refnamediv>
    <refname>socket_send</refname>
    <refpurpose>接続したソケットにデータを送信する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_send</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>buf</parameter></methodparam>
      <methodparam><type>int</type><parameter>len</parameter></methodparam>
      <methodparam><type>int</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-recvfrom">
   <refnamediv>
    <refname>socket_recvfrom</refname>
    <refpurpose>
     接続しているかどうかによらず、ソケットからデータを受信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_recvfrom</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>&amp;buf</parameter></methodparam>
      <methodparam><type>int</type><parameter>len</parameter></methodparam>
      <methodparam><type>int</type><parameter>flags</parameter></methodparam>
      <methodparam><type>string</type><parameter>&amp;name</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>&amp;port</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-sendto">
   <refnamediv>
    <refname>socket_sendto</refname>
    <refpurpose>
     接続しているかどうかによらずソケットにメッセージを送信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_sendto</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>string</type><parameter>buf</parameter></methodparam>
      <methodparam><type>int</type><parameter>len</parameter></methodparam>
      <methodparam><type>int</type><parameter>flags</parameter></methodparam>
      <methodparam><type>string</type><parameter>addr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>port</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-recvmsg">
   <refnamediv>
    <refname>socket_recvmsg</refname>
    <refpurpose>
     接続用であるかどうかにかかわらずソケットのメッセージを受信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_recvmsg</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
      <methodparam><type>array</type><parameter>&amp;control</parameter></methodparam>
      <methodparam><type>int</type><parameter>&amp;controllen</parameter></methodparam>
      <methodparam><type>int</type><parameter>&amp;flags</parameter></methodparam>
      <methodparam><type>string</type><parameter>&amp;addr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>&amp;port</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-sendmsg">
   <refnamediv>
    <refname>socket_sendmsg</refname>
    <refpurpose>
     接続用であるかどうかにかかわらずソケットにメッセージを送信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_sendmsg</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>resource</type><parameter>iovec</parameter></methodparam>
      <methodparam><type>int</type><parameter>flags</parameter></methodparam>
      <methodparam><type>string</type><parameter>addr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>port</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-getopt">
   <refnamediv>
    <refname>socket_getopt</refname>
    <refpurpose>ソケットのオプションを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>socket_getopt</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>int</type><parameter>level</parameter></methodparam>
      <methodparam><type>int</type><parameter>optname</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-setopt">
   <refnamediv>
    <refname>socket_setopt</refname>
    <refpurpose>ソケットのオプションを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_setopt</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam><type>int</type><parameter>level</parameter></methodparam>
      <methodparam><type>int</type><parameter>optname</parameter></methodparam>
      <methodparam><type>int</type><parameter/></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-create-pair">
   <refnamediv>
    <refname>socket_create_pair</refname>
    <refpurpose>
     区別できないソケットの組を作成し、fdに保存する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_create_pair</methodname>
      <methodparam><type>int</type><parameter>domain</parameter></methodparam>
      <methodparam><type>int</type><parameter>type</parameter></methodparam>
      <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
      <methodparam><type>array</type><parameter>&amp;fd</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-shutdown">
   <refnamediv>
    <refname>socket_shutdown</refname>
    <refpurpose>
     受信、送信、または送受信用のソケットをシャットダウンする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>socket_shutdown</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>how</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.socket-last-error">
   <refnamediv>
    <refname>socket_last_error</refname>
    <refpurpose>ソケットの直近のエラーを返す/クリアする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_last_error</methodname>
      <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
 

