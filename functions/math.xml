
 <reference id="ref.math">
  <title>数学関数</title>
  <titleabbrev>Math.</titleabbrev>

  <partintro>
   <sect1>
    <title>導入</title>
    <para>
     これらの数学関数は、実行するコンピューターの倍精度整数(long)およ
     び倍精度実数(double)の範囲でのみ値を処理します。より大きな数を処
     理する必要がある場合には、<link linkend="ref.bc">任意精度数学関数
     </link>の使用をお勧めします。
    </para>
    <sect2>
     <title>数学定数</title>
     <para>
      以下の値は PHP の数学拡張機能により定数として定義されています。
      <table>
       <title>数学定数</title>
       <tgroup cols="3">
 	<thead>
 	 <row>
 	  <entry>定数</entry>
 	  <entry>値</entry>
 	  <entry>説明</entry>
 	 </row>
 	</thead>
 	<tbody>
 	 <row>
 	  <entry>M_PI</entry>
 	  <entry>3.14159265358979323846</entry>
 	  <entry>円周率 (pi)</entry>
 	 </row>
	 <row>
	  <entry>M_E</entry>
	  <entry>2.7182818284590452354</entry>
	  <entry>e</entry>
	 </row>
	 <row>
	  <entry>M_LOG2E</entry>	
	  <entry>1.4426950408889634074</entry>	
	  <entry>log_2 e</entry>
	 </row>
	 <row>
	  <entry>M_LOG10E</entry>
	  <entry>0.43429448190325182765</entry>	
	  <entry>log_10 e</entry>
	 </row>
	 <row>
	  <entry>M_LN2</entry>	
	  <entry>0.69314718055994530942</entry>		
	  <entry>log_e 2</entry>
	 </row>
	 <row>
	  <entry>M_LN10</entry>	
	  <entry>2.30258509299404568402</entry>	
	  <entry>log_e 10</entry>
	 </row>
	 <row>
	  <entry>M_PI_2</entry>
	  <entry>1.57079632679489661923</entry>	
	  <entry>pi/2</entry>
	 </row>
	 <row>
	  <entry>M_PI_4</entry>
	  <entry>0.78539816339744830962</entry>	
	  <entry>pi/4</entry>
	 </row>
	 <row>
	  <entry>M_1_PI</entry>
	  <entry>0.31830988618379067154</entry>	
	  <entry>1/pi</entry>
	 </row>
	 <row>
	  <entry>M_2_PI</entry>
	  <entry>0.63661977236758134308</entry>	
	  <entry>2/pi</entry>
	 </row>
	 <row>
	  <entry>M_SQRTPI</entry>	
	  <entry>1.77245385090551602729</entry>	
	  <entry>sqrt(pi) [4.0.2]</entry>
	 </row>
	 <row>
	  <entry>M_2_SQRTPI</entry>	
	  <entry>1.12837916709551257390</entry>	
	  <entry>2/sqrt(pi)</entry>
	 </row>
	 <row>
	  <entry>M_SQRT2</entry>	
	  <entry>1.41421356237309504880</entry>	
	  <entry>sqrt(2)</entry>
	 </row>
	 <row>
	  <entry>M_SQRT3</entry>	
	  <entry>1.73205080756887729352</entry>	
	  <entry>sqrt(3) [4.0.2]</entry>
	 </row>
	 <row>
	  <entry>M_SQRT1_2</entry>	
	  <entry>0.70710678118654752440</entry>	
	  <entry>1/sqrt(2)</entry>
	 </row>
	 <row>
	  <entry>M_LNPI</entry>	
	  <entry>1.14472988584940017414</entry>	
	  <entry>log_e(pi) [4.0.2]</entry>
	 </row>
	 <row>
	  <entry>M_EULER</entry>	
	 <entry>0.57721566490153286061</entry>	
	  <entry>オイラー定数 [4.0.2]</entry>
	 </row>
 	</tbody>
       </tgroup>
      </table>
      PHP4RC1までのバージョンのPHPでは、M_PIのみが使用可能です。他の全
      ての定数は、PHP 4.0 で使用可能となりました。[4.0.2] とラベルのつい
      た定数はPHP4のCVSコードでのみ使用可能です。
     </para>
    </sect2>

   </sect1>
  </partintro>
 
  <refentry id="function.abs">
   <refnamediv>
    <refname>Abs</refname>
    <refpurpose>絶対値</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>abs</function></funcdef>
      <paramdef>mixed <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     numberの絶対値を返します。引数numberがfloatの場合はfloat、その他
     の場合はintを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.acos">
   <refnamediv>
    <refname>Acos</refname>
    <refpurpose>アークコサイン</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>acos</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数argのアークコサインをラジアンで返します。
    </para>
    <para>
     <function>asin</function>と<function>atan</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.asin">
   <refnamediv>
    <refname>Asin</refname>
    <refpurpose>アークサイン</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>asin</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数argのアークサインをラジアンで返します。
    </para>
    <para>
     <function>acos</function>と<function>atan</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.atan">
   <refnamediv>
    <refname>Atan</refname>
    <refpurpose>アークタンジェント</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>atan</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数argのアークタンジェントをラジアンで返します。
    </para>
    <para>
     <function>acos</function>と<function>atan</function>も見てください。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.atan2">
   <refnamediv>
    <refname>Atan2</refname>
    <refpurpose>2変数のアークタンジェント</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>atan2</function></funcdef>
      <paramdef>float <parameter>y</parameter></paramdef>
      <paramdef>float <parameter>x</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、変数 x,y のアークタンジェントを計算します。
     y / x のアークタンジェントを計算するのに似ていますが、
     2つの引数の符号を用いて結果の4象元位置を定義する
     ことが異なっています。
    </simpara>
    <simpara>
     この関数は、結果を -PI から PI の間(両端を含む)のラジアンで返しま
     す。
    </simpara>
    <para>
     <function>acos</function> および <function>atan</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.base-convert">
   <refnamediv>
    <refname>base_convert</refname>
    <refpurpose>任意の基底に変換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>strin <function>base_convert</function></funcdef>
      <paramdef>string <parameter>number</parameter></paramdef>
      <paramdef>int <parameter>frombase</parameter></paramdef>
      <paramdef>int <parameter>tobase</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>number</parameter> を基底 <parameter>tobase</parameter> 
     で表した文字列を返します。
     <parameter>number</parameter> の基底は、
     <parameter>frombase</parameter> で指定します。
     <parameter>frombase</parameter> および <parameter>tobase</parameter>
     は共に2から36までである必要があります。
     10 より大きな基底を有する数の各桁は、文字 a-z で表されます。
     この場合、a は 10、b は 11、z は 36 を意味します。
     <example>
      <title><function>base_convert</function></title>
      <programlisting role="php">
$binary = base_convert($hexadecimal, 16, 2);
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.bindec">
   <refnamediv>
    <refname>BinDec</refname>
    <refpurpose> 2進数 を 10 進数に変換します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bindec</function></funcdef>
      <paramdef>string <parameter>binary_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数 binary_string により指定された 2進数 と等価な 10 進数を返し
     ます。
    </para>
    <para>
     OctDec は、2進数 を 10進数に変換します。変換可能な最も大きな数字
     は 1 が 31 ビット並んだ 2進数 であり、10進数 の 2147483647 です。
    </para>
    <para>
     <function>decbin</function> 関数も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ceil">
   <refnamediv>
    <refname>Ceil</refname>
    <refpurpose>切り上げ</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ceil</function></funcdef>
      <paramdef>float <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>number</parameter> の次に大きい整数を返します。整数に
     <function>ceil</function> を使うことは全くの時間の無駄です。
    </simpara>
    <note>
     <para>
      PHP/FI 2 での <function>ceil</function> は浮動小数 (float) を返
      しました。<literal>$new = (double)ceil($number);</literal>とする
      ことで従来と同じ結果を得ることが出来ます。
     </para>
    </note>
    <simpara>
     <function>floor</function> と <function>round</function> も参照
     下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.cos">
   <refnamediv>
    <refname>Cos</refname>
    <refpurpose>コサイン</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>cos</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     argのコサインをラジアンで返します。
    </para>
    <para>
     <function>sin</function> と <function>tan</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.decbin">
   <refnamediv>
    <refname>DecBin</refname>
    <refpurpose> 10 進数を 2進数 に変換します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>decbin</function></funcdef>
      <paramdef>int <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数numberを2進数表現した文字列を返します。変換することが出来る最
     大の数は 10 進数の 2147483647 であり、31 ビット 1 が並んだ 2進数
     となります。
    </para>
    <para>
     <function>bindec</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dechex">
   <refnamediv>
    <refname>DecHex</refname>
    <refpurpose> 10 進数を 16 進数に変換します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dechex</function></funcdef>
      <paramdef>int <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数numberを 16 進数表現した文字列を返します。変換できる最大の数
     字は 2147483647 であり、"7ffffffff"を返します。
    </para>
    <para>
     <function>hexdec</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.decoct">
   <refnamediv>
    <refname>DecOct</refname>
    <refpurpose>10 進数を 8 進数に変換します。</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>decoct</function></funcdef>
      <paramdef>int <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数numberを 8 進数表現した文字列を返します。変換出来る最大の数字
     は 10 進数の 2147483647 であり、"17777777777" を返します。
     <function>octdec</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.deg2rad">
   <refnamediv>
    <refname>deg2rad</refname>
    <refpurpose>
     度単位の数値をラジアン単位に変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>deg2rad</function></funcdef>
      <paramdef>double <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<parameter>number</parameter>を度単位からラジアンに変
     換します。
    </para>
    <para>
     <function>rad2deg</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.exp">
   <refnamediv>
    <refname>Exp</refname>
    <refpurpose>自然対数 e の累乗を計算します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>exp</function> </funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     e を <parameter>arg</parameter> 乗した値を返します。
    </para>
    <para>
     <function>pow</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.floor">
   <refnamediv>
    <refname>Floor</refname>
    <refpurpose>切捨て</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>floor</function></funcdef>
      <paramdef>float <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>number</parameter> から最も近い最小の整数の値を返しま
     す。整数値に <function>floor</function> を使うことは全くの時間の
     無駄です。
    </simpara>
    <note>
     <para>
      PHP/FI 2 での <function>floor</function>は浮動点整数値を返します。
      <literal>$new = (double)floor($number);</literal> のようにするこ
      とで従来と同じ結果を得られます。
     </para>
    </note>
    <simpara>
     <function>ceil</function> と <function>round</function> も参照下
     さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.getrandmax">
   <refnamediv>
    <refname>getrandmax</refname>
    <refpurpose>乱数の最大値を示します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>getrandmax</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    
    <simpara>
     <function>rand</function> をコールすることにより得られる
     最大の値を返します。
    </simpara>
    <simpara>
     <function>rand</function>,
     <function>srand</function>, 
     <function>mt_rand</function>,
     <function>mt_srand</function>,
     <function>mt_getrandmax</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.hexdec">
   <refnamediv>
    <refname>HexDec</refname>
    <refpurpose>16 進数を 10 進数に変換します。</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hexdec</function></funcdef>
      <paramdef>string <parameter>hex_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数 hex_string により指定された 16進数に等価な 10 進数を返します。
     HexDec は 16 進数を表す文字列を 10 進数に変換します。
     変換できる最大の数字は16進数の 7fffffff もしくは 
     10 進数の 2147483647 です。 
    </para>
    <para>
     <function>dechex</function> 関数も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.lcg-value">
   <refnamediv>
    <refname>lcg_value</refname>
    <refpurpose>複合型の線形合同発生器(LCG)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>lcg_value</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>lcg_value</function> は、(0, 1)の範囲の疑似乱数を返しま
     す。この関数は、周期が2^31 - 85および2^31 - 249の2つの CG を組み
     合わせます。この颦հの周期はこれら2つの素数の積と等価です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.log">
   <refnamediv>
    <refname>Log</refname>
    <refpurpose>自然対数</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>log</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     arg の自然対数を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.log10">
   <refnamediv>
    <refname>Log10</refname>
    <refpurpose>底数 10 の対数</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>log10</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     arg の底数 10 の対数を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.max">
   <refnamediv>
    <refname>max</refname>
    <refpurpose>最も大きい数値を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>max</function></funcdef>
      <paramdef>mixed <parameter>arg1</parameter></paramdef>
      <paramdef>mixed <parameter>arg2</parameter></paramdef>
      <paramdef>mixed <parameter>argn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>max</function>は変数値の最も大きい数値を返します。
    </para>
    <para>
     最初の変数が配列の場合は、 <function>max</function> は
     配列の中で最も大きい数値を返します。
     始めの変数が整数、文字列、倍精度実数の場合、少なくとも
     2 つの変数が必要であり、 <function>max</function>
     はそれらの数値の最も大きいものを返します。
     比較する数値の数に制限はありません。
    </para>
    <para>
     数値の 1 つ以上が倍精度実数の場合は、全ての数値が倍精度実数として
     扱われ、倍精度実数で返されます。
     数値に倍精度実数が全く無い場合、全ては整数として扱われ、
     整数を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.min">
   <refnamediv>
    <refname>min</refname>
    <refpurpose>最も小さい値を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>min</function></funcdef>
      <paramdef>mixed <parameter>arg1</parameter></paramdef>
      <paramdef>mixed <parameter>arg2</parameter></paramdef>
      <paramdef>mixed <parameter>argn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>min</function> は変数の中で最も小さい数字を
     返します。
    </para>
    <para>
     最初の変数が配列の場合、 <function>min</function>配列の中の最も小
     さい数値を返します。最初の変数が整数、文字列、倍精度実数の場合、
     少なくとも2つの変数が必要であり、 <function>min</function> はそれ
     らの数値の最も小さい値を返します。
    </para>
    <para>
     1つ以上の値が倍精度実数の場合、全ての値は倍精度実数で扱われ、倍精
     度実数で返されます。倍精度実数の値が全く無い場合、全て整数として
     扱われ、整数を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mt-rand">
   <refnamediv>
    <refname>mt_rand</refname>
    <refpurpose>改良型乱数値を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mt_rand</function></funcdef>
      <paramdef>
       <parameter><optional>int min</optional></parameter>
      </paramdef>
      <paramdef>
       <parameter><optional>int max</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     古いlibcの多くの乱数発生器は、怪しげであるか特性が不明であったり
     し、また低速でした。デフォルトでは、PHP は
     <function>rand</function> においてlibcの乱数発生器を使用します。
     <function>mt_rand</function> 関数は、その代替品となるものです。
     この関数は、既知の特性を有する乱数生成器である Mersenne Twister 
     を使用し、暗号用途に適した乱数を生成します。
     この関数は、平均的な libc の相当品よりも 4 倍高速です。
     Mersenne Twister のホームページは、<ulink
     url="&url.mersenne;">&url.mersenne;</ulink> にあります。
     MT ソースの最適化された版は、<ulink 
     url="&url.mersenne.twister;">&url.mersenne.twister;</ulink> 
     にて入手可能です。
    </simpara>
    <simpara>
     オプションの引数
     <parameter>min</parameter>,<parameter>max</parameter>を付けずにコー
     ルした場合、<function>mt_rand</function> は 0 から
     <constant>RAND_MAX</constant>の間の擬似乱数値を返します。
     例えば、5から15まで(端点を含む)の間の乱数値を得たい場合には、
     <literal>mt_rand(5,15)</literal> として下さい。
    </simpara>
    <simpara>
     使用する前に<function>mt_srand</function> により乱数生成器にシー
     ドを与えることを忘れないようにして下さい。
    </simpara>
    <note>
     <para>
      3.0.7より前のバージョンでは、<parameter>max</parameter>の意味は
      <parameter>range</parameter>でした。これらのバージョンにおいて
      同じ結果を得るために簡単な例を示すと、5から15までの乱数を得たい
      場合には <literal>mt_rand (5, 11)</literal>とする必要があります。
     </para>
    </note>
    <simpara>
     <function>mt_srand</function>,
     <function>mt_getrandmax</function>,
     <function>srand</function>,
     <function>rand</function> ,
     <function>getrandmax</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.mt-srand">
   <refnamediv>
    <refname>mt_srand</refname>
    <refpurpose>改良型乱数生成器にシードを与える</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>mt_srand</function></funcdef>
      <paramdef>int <parameter>seed</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>seed</parameter> で乱数生成器にシードを与えます。
     <informalexample>
      <programlisting>
// マイクロ秒で表した時間によりシードを与えます。
mt_srand((double)microtime()*1000000);
$randval = mt_rand();
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>mt_rand</function>,
     <function>mt_getrandmax</function>,
     <function>srand</function>,
     <function>rand</function> ,
     <function>getrandmax</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.mt-getrandmax">
   <refnamediv>
    <refname>mt_getrandmax</refname>
    <refpurpose>乱数値の最大値を表示する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mt_getrandmax</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>mt_rand</function> のコールにより返される最大の値を返し
     ます。
    </simpara>
    <simpara>
     <function>mt_rand</function>,
     <function>mt_srand</function>,
     <function>rand</function>,
     <function>srand</function>,
     <function>getrandmax</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.number-format">
   <refnamediv>
    <refname>number_format</refname>
    <refpurpose>1,000 単位で数字をフォーマットする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>number_format</function></funcdef>
      <paramdef>float <parameter>number</parameter></paramdef>
      <paramdef>int <parameter>decimals</parameter></paramdef>
      <paramdef>string <parameter>dec_point</parameter></paramdef>
      <paramdef>string <parameter>thousands_sep</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>number_format</function>は<parameter>number</parameter>
     をフォーマットしたものを返します。この関数は、以下に示すような
     1個,2個または 4個の引数を取ります(3個というのはありません):
     </para>
     <para>
     引数が1つだけ与えられた場合は、<parameter>number</parameter>が
     各々1000の位ごとにカンマ(",")区切りでフォーマットされますが、
     小数部は出力されません。
    </para>
    <para>
     引数が2つ与えられた場合は、<parameter>number</parameter>が各々
     1000の位ごとにカンマ(",")区切りででフォーマットされ、さらにドッ
     ト(".")1つを置いて、その後に小数部が<parameter>decimals
     </parameter>桁数分出力されます。
    </para>
    <para>
     4つの引数すべてが与えられた場合は、<parameter>number</parameter>
     が<parameter>decimals</parameter>桁数分の小数部を含んだ形でフォ
     ーマットされます。その際、各々1000の位ごとの区切り文字として、
     カンマ(",")の代わりに<parameter>thousands_sep</parameter>で与
     えられた文字列を使い、小数部の前のドット(".")の代わりに
     <parameter>dec_point</parameter>で与えられた文字列を使います。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.octdec">
   <refnamediv>
    <refname>OctDec</refname>
    <refpurpose>8進数を10進数に変換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>octdec</function></funcdef>
      <paramdef>string <parameter>octal_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     octal_string により指定された8進数を10進数表現した数値を返します。
     OctDec は 8 進数を 10 進数に変換します。変換可能な最も大きな数値
     は 8進数の 17777777777 もしくは 10進数の 2147483647 です。
    </para>
    <para>
     <function>decoct</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pi">
   <refnamediv>
    <refname>pi</refname>
    <refpurpose>円周率の値を得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>pi</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     円周率の近似値を返します。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.pow">
   <refnamediv>
    <refname>pow</refname>
    <refpurpose>指数関数値</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>pow</function></funcdef>
      <paramdef>float <parameter>base</parameter></paramdef>
      <paramdef>float <parameter>exp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     base の exp 乗を返します。
    </para>
    <para> 
     <function>exp</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rad2deg">
   <refnamediv>
    <refname>rad2deg</refname>
    <refpurpose>
     ラジアン単位の数を等価な度単位の数に変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>rad2deg</function></funcdef>
      <paramdef>double <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、ラジアン単位から度単位に<parameter>number</parameter>
     に変換します。
    </para>
    <para>
     <function>deg2rad</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rand">
   <refnamediv>
    <refname>rand</refname>
    <refpurpose>乱数を生成します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rand</function></funcdef>
      <paramdef>
       <parameter><optional>int min</optional></parameter>
      </paramdef>
      <paramdef>
       <parameter><optional>int max</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     オプションの引数
     <parameter>min</parameter>,<parameter>max</parameter>
     を省略してコールした場合、<function>rand</function>は0と
     <constant>RAND_MAX</constant>の間の擬似乱数を返します。 
     例えば、5から15までの乱数を得たい場合、
     <literal>rand(5,15)</literal>とします。
    </simpara>
    <simpara>
     使用する前に <function>srand</function> により乱数生成器を
     初期化することを忘れないようにして下さい。
    </simpara>
    <note>
     <para>
      3.0.7より前のバージョンでは、<parameter>max</parameter>の意味は
      <parameter>range</parameter>でした。これらのバージョンにおいて
      同じ結果を得るために簡単な例を示すと、
      5から15までの乱数を得たい場合には <literal>mt_rand (5, 11)</literal> 
      とする必要があります。
     </para>
    </note>
    <simpara>
     <function>srand</function>,<function>getrandmax</function>,
     <function>mt_rand</function>,<function>mt_srand</function>,
     <function>mt_getrandmax</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.round">
   <refnamediv>
    <refname>round</refname>
    <refpurpose>浮動点整数を整数値に丸める</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>round</function></funcdef>
      <paramdef>double <parameter>val</parameter></paramdef>
      <paramdef>
       <parameter><optional>int precision</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>val</parameter>を整数値に丸めた値を返します。
     <informalexample>
      <programlisting role="php">
$foo = round( 3.4 );   // $foo == 3.0
$foo = round( 3.5 );   // $foo == 4.0
$foo = round( 3.6 );   // $foo == 4.0

$foo = round( 1.95583 , 2 );  // $foo == 1.96
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      (訳注：内部的な2進数表現と10進数表現の差により生じる丸め誤差の影響により
      必ずしも小数点以下を四捨五入した結果を返さないことに注意して下さい。)
     </para>
    </note>
    <simpara>
     <function>ceil</function> と
     <function>floor</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.sin">
   <refnamediv>
    <refname>Sin</refname>
    <refpurpose>サイン</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>sin</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     サインをラジアンで返します。
    </para>
    <para>
     <function>cos</function> と 
     <function>tan</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sqrt">
   <refnamediv>
    <refname>Sqrt</refname>
    <refpurpose>平方根</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>sqrt</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数 arg の平方根を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.srand">
   <refnamediv>
    <refname>srand</refname>
    <refpurpose>乱数ジェネレータを初期化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>srand</function></funcdef>
      <paramdef>int <parameter>seed</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     シード <parameter>seed</parameter> で乱数ジェネレータを
     初期化します。
     <informalexample>
      <programlisting role="php">
// マイクロでシードを設定する
srand((double)microtime()*1000000);
$randval = rand();
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>rand</function>,<function>getrandmax</function>,
     <function>mt_rand</function>,<function>mt_srand</function>,
     <function>mt_getrandmax</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.tan">
   <refnamediv>
    <refname>Tan</refname>
    <refpurpose>タンジェント</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>tan</function></funcdef>
      <paramdef>float <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     argのタンジェントをラジアンで返します。
    </para>
    <para>
     <function>sin</function>と<function>cos</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
