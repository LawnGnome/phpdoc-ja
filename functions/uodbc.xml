 <reference id="ref.odbc">
  <title>ODBC 関数</title>
  <titleabbrev>ODBC</titleabbrev>

  <refentry id="function.odbc-autocommit">
   <refnamediv>
    <refname>odbc_autocommit</refname>
    <refpurpose>autocommit の動作をオンまたはオフにします</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_autocommit</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>int <parameter><optional>OnOff</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
      <parameter>OnOff</parameter> パラメータを指定しない場合、
      この関数は、<parameter>connection_id</parameter> に関する
      auto-commit ステータスを返します。auto-commit がオンの場合に
      TRUE 、オフまたはエラーを生じた場合に FALSE を返します。</para>
      <para>
      <parameter>OnOff</parameter> が TRUE の場合は auto-commit が
      可能であり、FALSE の場合は auto-commit が使用不可となっています。
      成功時に、<literal>TRUE</literal>、失敗したときに 
      <literal>FALSE</literal> となります。</para>
     <para>
     デフォルトで接続の auto-commit はオンとなっています。
     auto-commit を使用不可にするのは、トランザクションを開始することと
     等価です。</para>
    <simpara>
     <function>odbc_commit</function> および
     <function>odbc_rollback</function> も参照下さい。</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-binmode">
   <refnamediv>
    <refname>odbc_binmode</refname>
   <refpurpose>バイナリカラムデータを処理する</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_binmode</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>(関係するODBC SQL型: BINARY, VARBINARY, LONGVARBINARY)
    </para>
    <itemizedlist>
      <listitem><simpara>
      ODBC_BINMODE_PASSTHRU: BINARY データとして通過
      </simpara></listitem> 
      <listitem><simpara>
      ODBC_BINMODE_RETURN: そのまま返す
      </simpara></listitem>
      <listitem><simpara>
      ODBC_BINMODE_CONVERT: char に変換し返す
      </simpara></listitem>
    </itemizedlist>
    <para>
     バイナリSQL データが、文字データに変換される時、
     ソースデータの各バイト(8ビット)は、2つのアスキー文字で表現されます。
     これらの文字は、16 進表現で数値をアスキー文字で表現したものです。
     例えば、2進数 000000001 は、"01" に変換され、11111111 は、
     "FF" に変換されます。

     <table>
      <title>LONGVARBINARY 処理</title>
      <tgroup cols="3">
       <thead>
	<row>
	 <entry>binmode</entry>
	 <entry>longreadlen</entry>
	 <entry>結果</entry>
	</row>
       </thead>
       <tbody>
	<row>
 	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>>0</entry>
	 <entry>通過</entry>
	</row>
	<row>
 	 <entry>ODBC_BINMODE_RETURN</entry>
	 <entry>>0</entry>
	 <entry>そのまま返す</entry>
	</row>
	<row>
 	 <entry>ODBC_BINMODE_CONVERT</entry>
	 <entry>>0</entry>
	 <entry>char として返す</entry>
	</row>
       </tbody>
      </tgroup>
     </table></para>

    <para>
     <function>odbc_fetch_into</function> を使用した場合、
     passthru は空文字列が対応するカラムに返されることを意味します。</para>

    <para>
     <parameter>result_id</parameter> に <literal>0</literal> を指定した場合、
     ここで設定した値は、新規の結果に関するデフォルト値として用いられます。

      <note><simpara> longreadlen のデフォルト値は
      <literal>4096</literal> で、
      binmode のデフォルト値は <literal>ODBC_BINMODE_RETURN</literal> です。
      バイナリロングカラムの処理は、
      <function>odbc_longreadlen</function> 
      の影響も受けます。
    </simpara>
    </note></para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-close">
   <refnamediv>
    <refname>odbc_close</refname>
    <refpurpose>ODBC 接続を閉じます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>void <function>odbc_close</function></funcdef>
     <paramdef>int <parameter>connection_identifier</parameter></paramdef>
    </funcsynopsis>

    <para>
     <function>odbc_close</function> は、指定された接続 ID が指す
     データベースサーバーへの接続を閉じます。

     <note><simpara>
     この関数の処理は、この接続に関してオープンされたトランザクションが
     ある場合に失敗します。
     この場合、接続はオープンされたままとなります。
      </simpara></note></para>

   </refsect1>
  </refentry>

  <refentry id="function.odbc-close-all">
   <refnamediv>
    <refname>odbc_close_all</refname>
    <refpurpose>全ての ODBC 接続を閉じます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>void <function>odbc_close_all</function></funcdef>
     <void/>
    </funcsynopsis>

    <para>
     <function>odbc_close_all</function> は、データベースサーバーへの
     全ての接続を閉じます。

     <note><simpara>
     この関数は、ある接続においてオープンされたトランザクションがある場合に
     失敗します。
     この場合、この接続はオープンされたままとなります。
      </simpara></note></para>

   </refsect1>
  </refentry>

  <refentry id="function.odbc-commit">
   <refnamediv>
    <refname>odbc_commit</refname>
    <refpurpose>ODBC トランザクションをコミットします</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_commit</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
<para>返り値:   成功の場合に <literal>true</literal> 、失敗の場合に <literal>false</literal> となります。

<parameter>connection_id</parameter> に関する全ての実行中の
トランザクションは、コミットされます。</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-connect">
   <refnamediv>
    <refname>odbc_connect</refname>
    <refpurpose>データソースに接続します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_connect</function></funcdef>
     <paramdef>string <parameter>dsn</parameter></paramdef>
     <paramdef>string <parameter>user</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
     <paramdef>int <parameter><optional>cursor_type</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
    ODBC 接続 ID またはエラーの場合に 0 (<literal>false</literal>) を返します。</para>
    <simpara>
    この関数により返される接続 ID は、他の ODBC 関数により使用されます。
    複数の接続を同時にオープンすることができます。
    オプションの4番目のパラメータは、この接続で使用されるカーソルの型を
    設定します。
    このパラメータは、通常は必要ありませんが、いくつかの ODBC ドライバ
    の問題に対処する際には有用です。</simpara>
    <simpara>
    いくつかの ODBC ドライバでは、複雑なストアド・プロシージャの
    実行時に次のようなエラーにより失敗する可能性があります。
    "Cannot open a cursor on a stored
     procedure that has anything other than a single select statement
     in it"
     SQL_CUR_USE_ODBC を使用することにより、このようなエラーを
     回避できる可能性があります。
     また、いくつかのドライバは、<function>odbc_fetch_row</function> 
     においてオプションの row_number パラメータをサポートしません。
     この場合でも、SQL_CUR_USE_ODBC により解決できる可能性があります。</simpara>
    <simpara>
    次のような定数がカーソル型として定義されています。</simpara>
    <para>
     <itemizedlist>
      <listitem><simpara>
      SQL_CUR_USE_IF_NEEDED
      </simpara></listitem> 
      <listitem><simpara>
      SQL_CUR_USE_ODBC
      </simpara></listitem> 
      <listitem><simpara>
      SQL_CUR_USE_DRIVER
      </simpara></listitem> 
      <listitem><simpara>
      SQL_CUR_DEFAULT
      </simpara></listitem> 
    </itemizedlist></para>
	<simpara>
    持続的な接続を行うには、
    <function>odbc_pconnect</function> を参照下さい。</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-cursor">
   <refnamediv>
    <refname>odbc_cursor</refname>
    <refpurpose>カーソル名を得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_cursor</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     odbc_cursor は、指定された接続ID(result_id)に関するカーソル名を返します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-do">
   <refnamediv>
    <refname>odbc_do</refname>
    <refpurpose><function>odbc_exec</function>の同義語</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_do</function></funcdef>
     <paramdef>int <parameter>conn_id</parameter></paramdef>
     <paramdef>string <parameter>query</parameter></paramdef>
    </funcsynopsis>
    <para>
     odbc_do は、指定した接続においてクエリー(query)を実行します。</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-exec">
   <refnamediv>
    <refname>odbc_exec</refname>
    <refpurpose>SQL 文を準備し、実行します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_exec</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>string <parameter>query_string</parameter></paramdef>
    </funcsynopsis>
    <para>
     エラー時には、<literal>false</literal> を返します。SQL コマンドの実行に
     成功した場合には、ODBC 結果ID を返します。</para>
    <para>
     <function>odbc_exec</function> は、SQL 命令を
     <parameter>connection_id</parameter> で指定されたデータベースサーバーに
     送ります。このパラメータは、<function>odbc_connect</function> または
     <function>odbc_pconnect</function> より返された有効なIDでなければ
     なりません。</para>
    <simpara> 
    複数の SQL 命令を実行するためには、
     <function>odbc_prepare</function> および
     <function>odbc_execute</function> も参照下さい。</simpara>
   </refsect1>
  </refentry>

<refentry id="function.odbc-execute">
 <refnamediv>
  <refname>odbc_execute</refname>
   <refpurpose>準備された文を実行します</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_execute</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
    <paramdef>array
      <parameter><optional>parameters_array</optional></parameter></paramdef>
   </funcsynopsis>
   <para>
     <function>odbc_prepare</function> で準備された命令を実行します。
     実行に成功した場合は <literal>true</literal> 、その他の場合は、
     <literal>false</literal> を返します。配列
     <parameter>parameters_array</parameter> は、
     命令の中にパラメータを有する場合にのみ指定する必要があります。</para>
  </refsect1>
</refentry>


  <refentry id="function.odbc-fetch-into">
   <refnamediv>
    <refname>odbc_fetch_into</refname>
    <refpurpose>1行文の結果を配列に取り込みます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fetch_into</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter><optional>rownumber</optional></parameter></paramdef>
     <paramdef>array <parameter>result_array</parameter></paramdef>
    </funcsynopsis>
    <para>
    結果におけるカラム番号を返します。また、エラーの場合に
     <literal>false</literal> を返します。
     <parameter>result_array</parameter> は参照渡しとする必要があります。
     しかし、このポインタは配列型に変換されるのでどんな型であっても
     構いません。この配列には、添字0から始まるカラム番号が代入されます。
     </para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-fetch-row">
   <refnamediv>
    <refname>odbc_fetch_row</refname>
    <refpurpose>行を取り込みます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fetch_row</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter><optional>row_number</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_fetch_row</function> が成功した場合(行があった場合)、
     <literal>true</literal> が返されます。もう行がない場合、
     <literal>false</literal> が返されます。</para>

     <para>
     <function>odbc_fetch_row</function> は、<function>odbc_do</function> や 
     <function>odbc_exec</function> から返された行データを取り込みます。
     <function>odbc_fetch_row</function> がコールされた後、
     この行のフィールドは、
     <function>odbc_result</function> でアクセス可能となります。</para>

    <para>
     <parameter>row_number</parameter> が指定されない場合、
     <function>odbc_fetch_row</function> は、結果セットにおける
     次の行を取り込もうと試みます。
     <parameter>row_number</parameter> を指定した
     <function>odbc_fetch_row</function> のコールと
     指定しないコールを混用することができます。</para>

    <para>
    結果を複数回走査したい場合、<function>odbc_fetch_row</function> を
    <parameter>row_number</parameter>に1を指定してコールし、
    続いて結果を再度見るために
    <parameter>row_number</parameter>を指定せずに
     <function>odbc_fetch_row</function> を実行しつづけます。
    ドライバが、行を番号で取り込むことをサポートしていない場合、
     <parameter>row_number</parameter> パラメータは無視されます。</para>

   </refsect1>
  </refentry>


  <refentry id="function.odbc-field-name">
   <refnamediv>
    <refname>odbc_field_name</refname>
    <refpurpose>カラム名を得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_field_name</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_field_name</function> は、指定されたODBC 結果IDにおいて
     指定されたカラム番号にあるフィールドの名前を返します。
     フィールド番号は、1 から始まります。エラーの場合、
     <literal>false</literal> を返します。</para>
     
   </refsect1>
  </refentry>

<!--
  <refentry id="function.odbc-field-num">
   <refnamediv>
    <refname>odbc_field_num</refname>
    <refpurpose>カラム番号を返します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_field_num</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter>field_name</parameter></paramdef>
    </funcsynopsis>
   <para>
     <function>odbc_field_num</function> は、
     指定した ODBC 結果 ID におけるフィールド名に対応する
     カラムスロットの数を返します。
      フィールド番号は、1 から始まります。エラーの場合、
     <literal>false</literal> を返します。

   </refsect1>
  </refentry>
-->

  <refentry id="function.odbc-field-type">
   <refnamediv>
    <refname>odbc_field_type</refname>
    <refpurpose>フィールドのデータ型を返します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_field_type</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_field_type</function> は、指定された ODBC 結果 ID に
     おいて指定番号で参照されるフィールドの SQL 型を返します。
     フィールド番号は 1 から始まります。</para>
 
   </refsect1>
  </refentry>

   <refentry id="function.odbc-field-len">
    <refnamediv>
     <refname>odbc_field_len</refname>
     <refpurpose>フィールドの長さを得る</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>string <function>odbc_field_len</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcsynopsis>
     <para>
      <function>odbc_field_len</function> は、
      指定したODBC 結果 ID(result_id)の番号で参照されるフィールドの長さを返します。
      フィールド番号は、1 から始まります。</para>

   </refsect1>
  </refentry>

  <refentry id="function.odbc-free-result">
   <refnamediv>
    <refname>odbc_free_result</refname>
    <refpurpose>結果を保持するリソースを開放します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_free_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     常に <literal>true</literal> を返します。</para>
    <para>
     <function>odbc_free_result</function> は、
     スクリプトのメモリ消費量が多すぎることが懸念される場合
     にのみコールする必要があります。
     全ての結果保持用メモリは、スクリプト実行が終了した際に自動的に
     開放されます。
     しかし、結果データをスクリプトでもはや必要としないことが確実な場合、
     <function>odbc_free_result</function> をコールして、
     <parameter>result_id</parameter> が指すメモリを開放することができます。</para>
    <para>
     <note><simpara>
     自動コミット(auto-commit)が無効 
     (<function>odbc_autocommit</function> を
     参照下さい) な時にコミットの前に
       <function>odbc_free_result</function> をコールすると、
       全ての未解決のトランザクションは、ロールバックされます。
      </simpara></note></para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-longreadlen">
   <refnamediv>
    <refname>odbc_longreadlen</refname>
   <refpurpose>LONG カラムを処理します</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_longreadlen</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>length</parameter></paramdef>
    </funcsynopsis>
    <para>(影響する ODBC SQL 型: LONG, LONGVARBINARY)
    PHP に返されるバイト数は、パラメータ length により制御されます。
    これを 0 をセットした場合、ロングカラムデータは、クライアントに
    そのまま渡されます。</para>
    <note><simpara>
      LONGVARBINARY カラムの処理は、
      <function>odbc_binmode</function> にも影響を受けます。
    </simpara>
    </note>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-num-fields">
   <refnamediv>
    <refname>odbc_num_fields</refname>
    <refpurpose>結果のカラム数を返します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_num_fields</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_num_fields</function> は、ODBC 結果におけるフィールド
     (カラム) の数を返します。
     この関数は、エラー時に -1 を返します。
     引数は、<function>odbc_exec</function> より返された
     有効な結果 ID です。</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-pconnect">
   <refnamediv>
    <refname>odbc_pconnect</refname>
    <refpurpose>持続的なデータベース接続を開きます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_pconnect</function></funcdef>
     <paramdef>string <parameter>dsn</parameter></paramdef>
     <paramdef>string <parameter>user</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
     <paramdef>int <parameter><optional>cursor_type</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
    ODBC 接続 ID またはエラー時に 0 (<literal>false</literal>) を返します。
    この関数は、スクリプトが終了した時に接続が閉じられないということ以外は
    <function>odbc_connect</function> に非常に似ています。
    同じ <parameter>dsn</parameter>、<parameter>user</parameter>、
     <parameter>password</parameter> の組み合わせ (
     <function>odbc_connect</function> および
     <function>odbc_pconnect</function> による) 接続の場合は、
     持続的な接続を再利用することが可能です。</para>
    <para>
     <note><simpara>
     持続的な接続は、PHP が CGI プログラムとして使用される場合は、
     使用できません。
      </simpara></note></para>
    <para>
    オプションの cursor_type パラメータに関する情報については、
    <function>odbc_connect</function> 関数を参照下さい。
    持続的接続に関する更に詳細な情報については、PHP FAQ を参照下さい。</para>
   </refsect1>
</refentry>

<refentry id="function.odbc-prepare">
 <refnamediv>
  <refname>odbc_prepare</refname>
   <refpurpose>実行用に文を準備します</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_prepare</function></funcdef>
    <paramdef>int <parameter>connection_identifier</parameter></paramdef>
     <paramdef>string <parameter>query_string</parameter></paramdef>
    </funcsynopsis>
    <para>
     エラー時には、<literal>false</literal> を返します。</para>
    <para>
     SQL コマンドの実行に成功した場合は、ODBC 結果 ID を返します。
     結果 ID は、この後、<function>odbc_execute</function> で命令を実行する
     際に使用することができます。</para>
  </refsect1>
</refentry>

  <refentry id="function.odbc-num-rows">
   <refnamediv>
    <refname>odbc_num_rows</refname>
    <refpurpose>結果における行数を返します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_num_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_num_rows</function> は、ODBC 結果における行の数を
     返します。この関数は、エラー時に -1 を返します。
     INSERT、UPDATE および DELETE 命令に関しては、
     <function>odbc_num_rows</function> は、
     変更された行の数を返します。
     SELECT 文の場合、この関数は利用可能な行の数を返します。</para>
    <para>
     注意: SELECT の後に利用可能な行の数を定義するために
     <function>odbc_num_rows</function> を使用した場合、
     多くのドライバにおいて、-1 が返されます。</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result">
   <refnamediv>
    <refname>odbc_result</refname>
    <refpurpose>結果データを得ます</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>mixed <parameter>field</parameter></paramdef>
    </funcsynopsis>
    <para>
    フィールドの内容を返します。</para>
    <para>
      <parameter>field</parameter> には、
      取得するフィールドのカラム番号を表す整数または
      フィールド名を表す文字列のどちらを指定できます。例えば次のようにします。
      <informalexample><programlisting>
      $item_3 = odbc_result($Query_ID, 3 );
      $item_val = odbc_result($Query_ID, "val");
 </programlisting></informalexample></para>
     <para>
     最初の <function>odbc_result</function> コールにより、
     クエリー結果の現在のレコードにおける
     3 番目のフィールドの値が返されます。
     2 番目の <function>odbc_result</function> コールにより、
     クエリーの結果の現在のレコードにおける
     "val" というフィールド名のフィールドの値を返します。
     あるフィールドのカラム番号パラメータが 1 より小さいか
     現在のレコードのカラム(またはフィールド)の数を超える場合、
     エラーを生じます。同様に、クエリーを行ったテーブルのフィールド名には
     ない名前をフィールドとして指定した場合にもエラーを生じます。</para>
 
     <para>
    フィールドインデックスは、1 から始まります。
    バイナリまたはロングカラムデータの返し方に関しては、
    <function>odbc_binmode</function> および 
    <function>odbc_longreadlen</function> を参照下さい。

<!--

要求されたフィールドが、バイナリデータまたは 4096 バイト以上の LONG データ型
を有している場合、その内容は返されません。代わりに、
その内容はクライアントに直接送られます。
ヒント: バイナリデータを返す必要がある場合、
フィールドの内容を 16 進数で得るために SQL 関数
HEX() を使用してください。
例えば、
"SELECT HEX(binary_col) FROM mytable"
--></para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result-all">
   <refnamediv>
    <refname>odbc_result_all</refname>
    <refpurpose>HTML テーブルとして結果を出力します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_result_all</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter><optional>format</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
    成功の場合に結果の行数を、エラーの場合に <literal>false</literal> を
    返します。</para>

    <para>
     <function>odbc_result_all</function> は、
     <function>odbc_exec</function> により作成された結果 ID から全ての行を
     出力します。
     結果は、HTML テーブル形式で出力されます。
     オプションの <parameter>フォーマット</parameter> 文字列により、
     テーブルのあらゆるフォーマット指定が可能です。</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-rollback">
   <refnamediv>
    <refname>odbc_rollback</refname>
    <refpurpose>トランザクションをロールバックします</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_rollback</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <parameter>connection_id</parameter> における全ての未解決の命令を
     ロールバックします。
    成功時に <literal>true</literal> を失敗の時には <literal>false</literal> 
    を返します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-setoption">
   <refnamediv>
    <refname>odbc_setoption</refname> 
    <refpurpose>
    ODBC の設定を行います。エラーが発生した場合にfalse、
    その他の場合にtrueを返します。
    </refpurpose>
   </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>int <function>odbc_setoption</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>function</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
      <paramdef>int <parameter>param</parameter></paramdef>
     </funcsynopsis>
     <para>
     この関数により特定の接続またはクエリー結果に関する ODBC オプション
     を変更することが可能となります。
     この関数は、気まぐれな ODBC ドライバの問題に対処する際の
     道具として作成されたものです。     
     自分がODBCプログラマであり、様々なオプションが有する効果を理解している
     場合にのみこの関数を使用するべきでしょう。
     使用可能な全てのオプションおよび値を理解するためには、
     良いODBC リファレンスが必要です。
     ドライバーのバージョンが違うと、サポートされるオプションも異なります。</para>
     <para>
     この関数の効果は ODBC ドライバに依存する可能性があるので、
     この関数を一般に公開するスクリプトで使用することは、
     必ず避けるべきです。
     また、いくつかの ODBC オプションはこの関数では利用できません。
     それは、これらを接続の確立またはクエリーの準備の前に設定する
     必要があるからです。
     しかし、特定の業務において自分の上司が商用製品の使用を指示しなかった
     ために、PHP を使用する場合、このことは実際的な問題となります。</para>
     <para>
      <parameter>Id</parameter> は設定を変更する接続 ID または
      結果 ID です。
      SQLSetConnectOption() の場合、これは接続 ID です。
      SQLSetStmtOption() の場合、これは結果 ID です。</para>
     <para>
      <parameter>function</parameter> は使用する ODBC 関数です。
      値は SQLSetConnectOption() の場合 1、
      SQLSetStmtOption() の場合 2 である必要があります。</para>
     <para>
      パラメータ<parameter>option</parameter> は設定するオプションです。</para>
     <para>
      パラメータ<parameter>param</parameter> は指定した
      <parameter>option</parameter> の値です。

     <example>
      <title>ODBC Setoption の例</title>
      <programlisting role="php">
// 1. SQLSetConnectOption() のオプション 102 は SQL_AUTOCOMMIT です。
//    SQL_AUTOCOMMIT の値 1 は SQL_AUTOCOMMIT_ON です。
//    この例は odbc_autocommit($conn, true); と同じ結果
//    となります。

odbc_setoption ($conn, 1, 102, 1);

// 2. SQLSetStmtOption() のオプション 0 は SQL_QUERY_TIMEOUT です。
//    この例は 30 秒後に時間切れとなるクエリーを設定します。

$result = odbc_prepare ($conn, $sql);
odbc_setoption ($result, 2, 0, 30);
odbc_execute ($result);
       </programlisting>
     </example></para>
    </refsect1>
   </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->



