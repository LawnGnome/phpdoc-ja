
 <reference id="ref.oci8">
  <title>Oracle 8 関数</title>
  <titleabbrev>OCI8</titleabbrev>
  <partintro>
   <simpara>
   以下の関数により Oracle8 および Oracle7 データベースへのアクセスが
   可能となります。
   この関数は、Oracle8 Call-Interface (OCI8) を使用します。
   この拡張機能を使用するには、Oracle8 クライアントライブラリが必要です。
   </simpara>
   <simpara>
    この拡張機能は、通常のOracle拡張機能より柔軟性があります。
    この拡張機能は、グローバルおよびローカルの PHP 変数の Ocacle 
    プレースホルダーへのバインドをサポートします。
    この拡張機能は、LOB,FILE,ROWID を完全にサポートしており、ユーザー定義の
    変数が使用可能です。
   </simpara>
  </partintro>
	
<!--

OCIBindByName
OCIDefineByName
OCIColumnIsNULL
OCIColumnName
OCIColumnSize
OCIColumnType
OCIExecute
OCIFetch
OCIFetchInto
OCIFetchStatement
OCIInternalDebug
OCILogoff
OCILogon
OCIPLogon
OCINLogon
OCIError
OCICommit
OCIRollback
OCINewCursor
OCINewDescriptor
OCIRowCount
OCINumCols
OCIParse
OCIResult
OCIServerVersion
OCIStatementType
OCIFreeStatement
OCIFreeCursor
-->

  <refentry id="function.ocidefinebyname">
   <refnamediv>
    <refname>OCIDefineByName</refname>
    <refpurpose>SELECT 実行中、定義用の PHP 変数を使用する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIDefineByName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>string <parameter>Column-Name</parameter></paramdef>
      <paramdef>mixed &<parameter>variable</parameter></paramdef>
      <paramdef>int <parameter><optional>type</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIDefineByName</function> は、SQL カラムを
     ユーザー定義の PHP 変数に取得します。
     Oracle は、全ての大文字のカラム名を使用しますが、
     select の中で小文字も書くことが可能であることに注意して下さい。
     <function>OCIDefineByName</function> は、
     the <parameter>Column-Name</parameter> が大文字であることを仮定します。
     select 文にない変数を定義する場合は、エラーは発生しないでしょう!
    </para>
    <para>
    抽象 Datatype (LOB/ROWID/BFILE) を定義する必要がある場合、
    まず <function>OCINewDescriptor</function> 関数を用いてその
    領域を確保する必要があります。
    <function>OCIBindByName</function> 関数も参照下さい。

    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
&lt;?php
/* OCIDefineByPos の例 thies@digicol.de (980219) */

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"select empno, ename from emp");

/* the define MUST be done BEFORE ociexecute! */

OCIDefineByName($stmt,"EMPNO",&$empno);
OCIDefineByName($stmt,"ENAME",&$ename);

OCIExecute($stmt);

while (OCIFetch($stmt)) {
    echo "empno:".$empno."\n";
    echo "ename:".$ename."\n";
}

OCIFreeStatement($stmt);
OCILogoff($conn);
?></programlisting></example>

   </refsect1>
  </refentry>

  <refentry id="function.ocibindbyname">
   <refnamediv>
    <refname>OCIBindByName</refname>
    <refpurpose>Oracle プレースホルダーに PHP 変数をバインドする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIBindByName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>string <parameter>ph_name</parameter></paramdef>
      <paramdef>mixed &<parameter>variable</parameter></paramdef>
      <paramdef>int<parameter>length</parameter></paramdef>
      <paramdef>int <parameter><optional>type</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIBindByName</function> は、PHP 変数 <parameter>variable</parameter> を
      Oracle プレースホルダー <parameter>ph_name</parameter> にバインドします。
     実行時に入力用、出力用に使用されるによらず、必要な記憶領域が確保されます。
     <parameter>length</parameter> パラメータは、バインド時の最大長を設定します。
     <parameter>length</parameter> を -1 に設定した場合、
     <function>OCIBindByName</function> は <parameter>variable</parameter> の現在の長さを
     最大長として設定します。
    </para>
    <para>
    抽象データ型 (LOB/ROWID/BFILE) をバインドする必要がある場合、
    まず <function>OCINewDescriptor</function> 関数を使用してこれを確保する
    必要があります。
     <parameter>length</parameter> は抽象データ型用には使用されず、-1 を設定する必要があります。
     <parameter>type</parameter> 変数は使用したいディスクリプタの種類を Oracle に伝えます。
     使用可能な値は次のようになります。: OCI_B_FILE (Binary-File), OCI_B_CFILE
     (Character-File), OCI_B_CLOB (Character-LOB), OCI_B_BLOB
     (Binary-LOB) ,OCI_B_ROWID (ROWID)
    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
&lt;?php
/* OCIBindByPos の例 thies@digicol.de (980221)

  3 レコードを emp に挿入し、挿入の直後にレコードを更新するために ROWID を使用します。
*/

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"insert into emp (empno, ename) ".
					   "values (:empno,:ename) ".
					   "returning ROWID into :rid");

$data = array(1111 => "Larry", 2222 => "Bill", 3333 => "Jim");

$rowid = OCINewDescriptor($conn,OCI_D_ROWID);

OCIBindByName($stmt,":empno",&$empno,32);
OCIBindByName($stmt,":ename",&$ename,32);
OCIBindByName($stmt,":rid",&$rowid,-1,OCI_B_ROWID);

$update = OCIParse($conn,"update emp set sal = :sal where ROWID = :rid");
OCIBindByName($update,":rid",&$rowid,-1,OCI_B_ROWID);
OCIBindByName($update,":sal",&$sal,32);

$sal = 10000;

while (list($empno,$ename) = each($data)) {
	OCIExecute($stmt);
	OCIExecute($update);
} 

$rowid->free();

OCIFreeStatement($update);
OCIFreeStatement($stmt);

$stmt = OCIParse($conn,"select * from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
while (OCIFetchInto($stmt,&$arr,OCI_ASSOC)) {
	var_dump($arr);
}
OCIFreeStatement($stmt);

/* テーブル emp から "junk" を削除する.... */
$stmt = OCIParse($conn,"delete from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
OCIFreeStatement($stmt);

OCILogoff($conn);
?></programlisting></example>
   </refsect1>
  </refentry>

  <refentry id="function.ocilogon">
   <refnamediv>
    <refname>OCILogon</refname>
    <refpurpose>Oracle への接続を確立する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCILogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string <parameter><optional>db</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCILogon</function> は他のほとんどの OCI コールで必要な
     接続 ID を返します。
     オプションの3番目のパラメータには、ローカルOracleインスタンスの名前か
     tnsnames.ora における接続先のエントリ名を指定することができます。
     オプションの3番目のパラメータが指定されない場合、
     PHP は接続先のデータベースを定義するために環境変数 ORACLE_SID (Oracle 
     インスタンス)または TWO_TASK (tnsnames.ora) を使用します。
     </para>
     <para>
     <function>OCILogon</function> を使用した場合、接続はページレベルで共有
     されます。
     このことは、多重接続を行った場合でも、コミット及びロールバックは
     そのページの全てのオープンされたトランザクションに適用されることを
     意味します。
    </para>
    <para>
    この例は、接続がどのように共有されるかをデモします。
     <example>
      <title>OCILogon</title>
      <programlisting>
&lt;?php
print "&lt;HTML>&lt;PRE>";
$db = "";

$c1 = ocilogon("scott","tiger",$db);
$c2 = ocilogon("scott","tiger",$db);

function create_table($conn)
{ 
  $stmt = ociparse($conn,"create table scott.hallo (test varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ 
  $stmt = ociparse($conn,"insert into scott.hallo
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ ocicommit($conn);
  echo $conn." commited\n\n";
}

function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." &lt;".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);   // c1 を用いて行を挿入
insert_data($c2);   // c2 を用いて行を挿入

select_data($c1);   // 両方の挿入の結果を返す
select_data($c2);   

rollback($c1);      // c1 を用いてロールバック

select_data($c1);   // 両方の挿入がロールバックされた
select_data($c2);   

insert_data($c2);   // c2 を用いて行を挿入
commit($c2);        // c2 を用いてコミット

select_data($c1);   // 挿入 c2 の結果が返される

delete_data($c1);   // c1 を用いてテーブルの全ての行を削除
select_data($c1);   // 行を返さない
select_data($c2);   // 行を返さない
commit($c1);        // c1 を用いてコミット

select_data($c1);   // 行を返さない
select_data($c2);   // 行を返さない


drop_table($c1);
print "&lt;/PRE>&lt;/HTML>";
?></programlisting></example></para>
    <simpara>
     <function>OCIPLogon</function> および
     <function>OCINLogon</function> も参照下さい。</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociplogon">
   <refnamediv>
    <refname>OCIPLogon</refname>
    <refpurpose>
    持続的接続を使用してOracle データベースに接続、ログオンする。
    新しいセッションを返す。
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIPLogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string <parameter><optional>db</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIPLogon</function> は、Oracle 8 データベースへの持続的接続を
     オープンし、ログオンします。
     オプションの3番目のパラメータには、ローカルOracleインスタンスの名前か
     tnsnames.ora における接続先のエントリ名を指定することができます。
     オプションの3番目のパラメータが指定されない場合、
     PHP は接続先のデータベースを定義するために環境変数 ORACLE_SID (Oracle 
     インスタンス)または TWO_TASK (tnsnames.ora) を使用します。
    </para>
    <simpara>
     <function>OCILogon</function> および
     <function>OCINLogon</function> も参照下さい。</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocinlogon">
   <refnamediv>
    <refname>OCINLogon</refname>
    <refpurpose>Oracle データベースに接続し、新規接続にログオン、
    新規セッションを返す
</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCINLogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>db</optional></parameter>
      </paramdef>    
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINLogon</function>は、Oracle 8 データベースへの新規接続を
     作成し、ログオンします。
     オプションの3番目のパラメータには、ローカルOracleインスタンスの名前か
     tnsnames.ora における接続先のエントリ名を指定することができます。
     オプションの3番目のパラメータが指定されない場合、
     PHP は接続先のデータベースを定義するために環境変数 ORACLE_SID (Oracle 
     インスタンス)または TWO_TASK (tnsnames.ora) を使用します。
    </para>
    <para>
     <function>OCINLogon</function> は強制的に新規接続を作成します。
     一連のトランザクションを独立して実行する必要がある場合にこの関数を
     使用する必要があります。デフォルトでは、接続は、     
     <function>OCILogon</function> を使用した場合はページレベルで共有され、
     <function>OCIPLogon</function> を使用した場合は Web サーバープロセス
     レベルで共有されます。
     <function>OCINLogon</function> を使用して複数の接続をオープンした場合、
     コミットおよびロールバックは指定した接続のみに適用されます。
    </para>
    <para>
    以下の例は、接続がどのように分割されるかを示すものです。
     <example>
      <title>OCINLogon</title>
      <programlisting role="php">
&lt;?php
print "&lt;HTML>&lt;PRE>";
$db = "";

$c1 = ocilogon ("scott", "tiger", $db);
$c2 = ocinlogon ("scott", "tiger", $db);

function create_table($conn)
{ 
  $stmt = ociparse ($conn, "create table scott.hallo (test
      varchar2(64))");
  ociexecute ($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ 
  $stmt = ociparse ($conn,"drop table scott.hallo");
  ociexecute ($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ 
  $stmt = ociparse($conn,"insert into scott.hallo values('$conn' ||
    ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute ($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ 
  $stmt = ociparse ($conn,"delete from scott.hallo");
  ociexecute ($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ 
  ocicommit($conn);
  echo $conn." commited\n\n";
}

function rollback($conn)
{ 
  ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ 
  $stmt = ociparse ($conn, "select * from scott.hallo");
  ociexecute ($stmt, OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." &lt;".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}

create_table ($c1);
insert_data ($c1);

select_data ($c1);   
select_data ($c2);   

rollback ($c1);      

select_data ($c1);   
select_data ($c2);   

insert_data ($c2);   
commit ($c2);        

select_data ($c1);   

delete_data ($c1);   
select_data ($c1);   
select_data ($c2);   
commit ($c1);        

select_data ($c1);
select_data ($c2);


drop_table ($c1);
print "&lt;/PRE>&lt;/HTML>";
?>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>OCILogon</function> および
     <function>OCIPLogon</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocilogoff">
   <refnamediv>
    <refname>OCILogOff</refname>
    <refpurpose>Oracleとの接続を切る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCILogOff</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCILogOff</function> は、Oracle 接続を閉じます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ociexecute">
   <refnamediv>
    <refname>OCIExecute</refname>
    <refpurpose>文を実行する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIExecute</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>mode</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIExecute</function> は以前処理された文を実行します。
     (<function>OCIParse</function> を参照下さい) 
     オプションの<parameter>mode</parameter>により実行モードを指定することが
     可能とです。(デフォルトはOCI_COMMIT_ON_SUCCESSです) 
     自動的にコミットされたくない場合は、OCI_DEFAULTをモードとして指定します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocicommit">
   <refnamediv>
    <refname>OCICommit</refname>
    <refpurpose>未解決のトランザクションをコミットする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCICommit</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCICommit</function>は、
     Oracle接続<parameter>connection</parameter>に関する
     全ての未解決の文をコミットします。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocirollback">
   <refnamediv>
    <refname>OCIRollback</refname>
    <refpurpose>未解決のトランザクションをロールバックする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIRollback</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIRollback</function>は、
     Oracle接続<parameter>connection</parameter>に関する
     全ての未解決の文をロールバックします。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>OCINewDescriptor</refname>
    <refpurpose>
     空の新規ディスクリプタLOB/FILE(LOBがデフォルト)を初期化する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCINewDescriptor</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINewDescriptor</function> は、固定したディスクリプタまたは
     LOBロケータに記憶領域を確保します。
     <parameter>type</parameter> で指定可能な値は、OCI_D_FILE, OCI_D_LOB, 
     OCI_D_ROWIDです。
     LOBディスクリプタの場合、メソッドload, save, savefileがディスクリプタに
     関連付けられています。BFILE の場合、load メソッドのみが存在します。2番目の
     例に使用の際のヒントを示します。
    </para>
    <example>
     <title>OCINewDescriptor</title>
     <programlisting role="php">
&lt;?php
    /* このスクリプトは HTML フォームからコールされる前提で作成
     * されており、$user, $passwor, $table, $where, $commitsize
     * がフォームから渡されることを前提にしています。
     * このスクリプトは、ROWID を用いて選択された行を削除し、
     * $commitsize 行毎にコミットします。
     * (ロールバックがないので、注意して使用してください。)
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn,"select rowid from $table $where");
    $rowid = OCINewDescriptor($conn,OCI_D_ROWID);
    OCIDefineByName($stmt,"ROWID",&$rowid);   
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {      
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn,"delete from $table where ROWID = :rid");
       OCIBindByName($delete,":rid",&$rowid,-1,OCI_B_ROWID);
       OCIExecute($delete);      
       print "$nrows\n";
       if ( ($nrows % $commitsize) == 0 ) {
           OCICommit($conn);      
       }   
    }
    $nrows = OCIRowCount($stmt);   
    print "$nrows deleted...\n";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);
?>  
     </programlisting>
     <programlisting>
&lt;?php
    /* このスクリプトやLOB カラムにファイルをアップロードする例を示します。
     * LOBカラムにアップロードを行うこの例に関するフォームは、
     * &lt;input type="file" name="lob_upload"> 
     * ... のようなものが使用されます。
     */
  if(!isset($lob_upload) || $lob_upload == 'none'){
?>
&lt;form action="upload.php3" method="post" enctype="multipart/form-data">
Upload file: &lt;input type="file" name="lob_upload">&lt;br>
&lt;input type="submit" value="Upload"> - &lt;input type="reset">
&lt;/form>
&lt;?php
  } else {
     // $lob_upload はアップロードファイルのテンポラリファイル名を有しています
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn,"insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt);
     if($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo "Blob のアップロードは成功しました\n";
     }else{
        echo "Blob をアップロードできませんでした\n";
     }
     OCIFreeDescriptor($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ocirowcount">
   <refnamediv>
    <refname>OCIRowCount</refname>
    <refpurpose>作用された行の数を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIRowCount</function></funcdef>
       <paramdef>int <parameter>statement</parameter></paramdef>
     </funcprototype>
      </funcsynopsis>
    <para>
     <function>OCIRowCount</function> はupdate文に影響された行の数を返します。
     この関数は、select が返す行の数は通知しません!
    </para>
    <para>
     <example>
      <title>OCIRowCount</title>
      <programlisting role="php">
&lt;?php
    print "&lt;HTML>&lt;PRE>";
    $conn = OCILogon("scott","tiger");
    $stmt = OCIParse($conn,"create table emp2 as select * from emp");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows inserted.&lt;BR>";
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"delete from emp2");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows deleted.&lt;BR>";
    OCICommit($conn);
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"drop table emp2");
    OCIExecute($stmt);
    OCIFreeStatement($stmt);
    OCILogOff($conn);
    print "&lt;/PRE>&lt;/HTML>";
?> 
      </programlisting>
     </example>
    </para>
    </refsect1>
  </refentry>

  <refentry id="function.ocinumcols">
   <refnamediv>
    <refname>OCINumCols</refname>
    <refpurpose>ある文における結果のカラム数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCINumCols</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINumCols</function>は、文におけるカラムの数を
     返します。
    </para>
    <example>
     <title>OCINumCols</title>
     <programlisting role="php">
&lt;?php   
print "&lt;HTML>&lt;PRE>\n";   
$conn = OCILogon ("scott", "tiger");
$stmt = OCIParse ($conn,"select * from emp");
OCIExecute ($stmt);
while (OCIFetch ($stmt)) {
  print "\n";   
  $ncols = OCINumCols ($stmt);
  for ( $i = 1; $i <= $ncols; $i++ ) {
     $column_name  = OCIColumnName ($stmt, $i);
     $column_value = OCIResult ($stmt, $i);
     print $column_name . ': ' . $column_value . "\n";
  }
  print "\n";
}
OCIFreeStatement ($stmt);  
OCILogoff ($conn);   
print "&lt;/PRE>";
print "&lt;/HTML>\n"; 
?>   
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ociresult">
   <refnamediv>
    <refname>OCIResult</refname>
    <refpurpose>取得された行におけるカラムの値を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>OCIResult</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIResult</function>は、現在の行におけるカラム
     <parameter>column</parameter>のデータを返します。
     (<function>OCIFetch</function>を参照)
     <function>OCIResult</function> は抽象型(ROWID, LOB, FILE)を除き、
     全て文字列として値を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetch">
   <refnamediv>
    <refname>OCIFetch</refname>
    <refpurpose>結果バッファーの次の行を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFetch</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFetch</function>は、(SELECT文の)次の行を内部結果バッファ
     に取得します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetchinto">
   <refnamediv>
    <refname>OCIFetchInto</refname>
    <refpurpose>結果配列の次の行を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFetchInto</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>array &<parameter>result</parameter></paramdef>
      <paramdef>int <parameter><optional>mode</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFetchInto</function>は(SELECT 文の)次の行を<parameter>result</parameter>
     配列に取得します。
     <function>OCIFetchInto</function> は、以前の <parameter>result</parameter> の内容を
     上書きします。
     デフォルトで <parameter>result</parameter> は NULL でない全カラムの1次元配列を
     有します。
    </para>
    <para>
     <parameter>mode</parameter>パラメータによりデフォルト動作の変更を可能となります。
     フラグを追加することにより簡単に一つ以上のフラグを指定することが可能です。
     (例 OCI_ASSOC+OCI_RETURN_NULLS)
     指定可能なフラグを次に示します。

     <simplelist>
      <member><literal>OCI_ASSOC</literal> 連想配列を返す。</member>
      <member><literal>OCI_NUM</literal> 添字 1 から始まる配列を返す。(デフォルト)</member>
      <member><literal>OCI_RETURN_NULLS</literal> 空のカラムを返す。</member>
      <member><literal>OCI_RETURN_LOBS</literal> ディスクリプタの代わりに LOB の値を返す。</member>
     </simplelist>

	</para>
	<para>
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetchstatement">
   <refnamediv>
    <refname>OCIFetchStatement</refname>
    <refpurpose>結果データの全ての行を配列に取得する</refpurpose>
   </refnamediv>
   <refsect1>
     <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFetchStatement</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>array &<parameter>variable</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFetchStatement</function> 結果から全ての行をユーザが
     定義した配列に取得します。
     <function>OCIFetchStatement</function> は取得した行の数を返します。
    </para>
    <example>
     <title>OCIFetchStatement</title>
     <programlisting role="php">
&lt;?php
/* OCIFetchStatement example mbritton@verinet.com (990624) */

$conn = OCILogon ("scott", "tiger");

$stmt = OCIParse ($conn, "select * from emp");

OCIExecute ($stmt);

$nrows = OCIFetchStatement ($stmt,$results);
if ($nrows > 0) {
   print "&lt;TABLE BORDER=\"1\">\n";
   print "&lt;TR>\n";
   while ( list( $key, $val ) = each( $results ) ) {
      print "&lt;TH>$key&lt;/TH>\n";
   }
   print "&lt;/TR>\n";
   
   for ( $i = 0; $i &lt; $nrows; $i++ ) {
      reset ($results);
      print "&lt;TR>\n";
      while ( $column = each ($results) ) {   
         $data = $column['value'];
         print "&lt;TD>$data[$i]&lt;/TD>\n";
      }
      print "&lt;/TR>\n";
   }
   print "&lt;/TABLE>\n";
} else {
   echo "No data found&lt;BR>\n";
}      
print "$nrows Records Selected&lt;BR>\n";
 
OCIFreeStatement ($stmt);
OCILogoff ($conn);

?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnisnull">
   <refnamediv>
    <refname>OCIColumnIsNULL</refname>
    <refpurpose>結果カラムが NULL であるかどうかを確認する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIColumnIsNULL</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIColumnIsNULL</function>は、
     文<parameter>stmt</parameter>の結果として返されたカラムがNULLである
     場合にTRUEを返します。
     <parameter>column</parameter> パラメータに(1から始まる)カラム番号または
     カラム名のどちらかを使用可能です。
    </para>
  </refsect1>
  </refentry>

  <refentry id="function.ocicolumnsize">
   <refnamediv>
    <refname>OCIColumnSize</refname>
    <refpurpose>結果カラムサイズを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIColumnSize</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIColumnSize</function>はOracleにより指定されたカラムのサイズを
     返します。
     <parameter>col</parameter>パラメータに(1から始まる)カラム番号または
     カラム名のどちらかを使用可能です。
    </para>
    <para>
     <example>
      <title>OCIColumnSize</title>
      <programlisting role="php">
&lt;?php   
print "&lt;HTML>&lt;PRE>\n";   
$conn = OCILogon ("scott", "tiger");
$stmt = OCIParse ($conn, "select * from emp");
OCIExecute ($stmt);
print "&lt;TABLE BORDER=\"1\">";
print "&lt;TR>";
print "&lt;TH>Name&lt;/TH>";
print "&lt;TH>Type&lt;/TH>";
print "&lt;TH>Length&lt;/TH>";
print "&lt;/TR>";
$ncols = OCINumCols ($stmt);
for ( $i = 1; $i <= $ncols; $i++ ) {
   $column_name  = OCIColumnName ($stmt, $i);
   $column_type  = OCIColumnType ($stmt, $i);
   $column_size  = OCIColumnSize ($stmt, $i);
   print "&lt;TR>";
   print "&lt;TD>$column_name&lt;/TD>";
   print "&lt;TD>$column_type&lt;/TD>";
   print "&lt;TD>$column_size&lt;/TD>";
   print "&lt;/TR>";
}
OCIFreeStatement ($stmt);  
OCILogoff ($conn);   
print "&lt;/PRE>";
print "&lt;/HTML>\n"; 
?>   
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>OCINumCols</function>, <function>OCIColumnName</function>, 
     <function>OCIColumnSize</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociserverversion">
   <refnamediv>
    <refname>OCIServerVersion</refname>
    <refpurpose>サーバーのバージョン情報を有する文字列を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIServerVersion</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <example>
      <title>OCIServerVersion</title>
      <programlisting role="php">
&lt;?php
$conn = OCILogon ("scott", "tiger");
print "Server Version: " . OCIServerVersion($conn);
OCILogOff ($conn);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocistatementtype">
   <refnamediv>
    <refname>OCIStatementType</refname>
    <refpurpose>OCI 命令の型を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIStatementType</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIStatementType</function> は次の値のどれかを返します。
     <orderedlist>
      <listitem>
       <simpara>
	"SELECT"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"UPDATE"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"DELETE"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"INSERT"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"CREATE"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"DROP"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"ALTER"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"BEGIN"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"DECLARE"
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"UNKNOWN"
       </simpara>
      </listitem>
     </orderedlist>
    </para>
    <para>
     <example>
      <title>コーディング例</title>
      <programlisting role="php">
&lt;?php
print "&lt;HTML>&lt;PRE>";
$conn = OCILogon ("scott", "tiger");
$sql  = "delete from emp where deptno = 10";
   
$stmt = OCIParse ($conn,$sql);
if (OCIStatementType ($stmt) == "DELETE" ) {
    die "You are not allowed to delete from this table&lt;BR>";
}
   
OCILogoff ($conn);
print "&lt;/PRE>&lt;/HTML>";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ocinewcursor">
   <refnamediv>
    <refname>OCINewCursor</refname>
    <refpurpose>
     新規カーソル(命令ハンドル)を返す -
     参照カーソルをバインドするために使用する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCINewCursor</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINewCursor</function> は、新規の命令ハンドル
     を指定した接続に確保します。
    </para>
    <para>
     <example>
      <title>ストアドプロシージャからの参照カーソルの使用例</title>
      <programlisting role="php">
&lt;?php   
// ストアドプロシージャ info.output が :data の参照カーソルを返すと仮定する
 
$conn = OCILogon ("scott", "tiger");
$curs = OCINewCursor ($conn);
$stmt = OCIParse ($conn, "begin info.output(:data); end;");
 
ocibindbyname ($stmt,"data",&$curs,-1,OCI_B_CURSOR);
ociexecute ($stmt);
ociexecute ($curs);
 
while (OCIFetchInto($curs,&$data)) {
    var_dump($data);
}
  
OCIFreeCursor ($stmt);
OCIFreeStatement ($curs);
OCILogoff ($conn);
 ?>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>select文における参照カーソルの使用例</title>
      <programlisting role="php">
&lt;?php   
print "&lt;HTML>&lt;BODY>";
$conn = OCILogon ("scott","tiger");
$count_cursor = "CURSOR(select count(empno) num_emps from emp " .
                "where emp.deptno = dept.deptno) as EMPCNT from dept";
$stmt = OCIParse ($conn,"select deptno,dname,$count_cursor");
 
ociexecute ($stmt);
print "&lt;TABLE BORDER=\"1\">";
print "&lt;TR>";
print "&lt;TH>DEPT NAME&lt;/TH>";
print "&lt;TH>DEPT #&lt;/TH>";
print "&lt;TH># EMPLOYEES&lt;/TH>";
print "&lt;/TR>";

while (OCIFetchInto($stmt,&$data,OCI_ASSOC)) {
    print "&lt;TR>";
    $dname  = $data["DNAME"];
    $deptno = $data["DEPTNO"];
    print "&lt;TD>$dname&lt;/TD>";
    print "&lt;TD>$deptno&lt;/TD>";
    ociexecute($data[ "EMPCNT" ]);
    while (OCIFetchInto($data[ "EMPCNT" ],&$subdata,OCI_ASSOC)) {
        $num_emps = $subdata["NUM_EMPS"];
        print  "&lt;TD>$num_emps&lt;/TD>";
    }
    print "&lt;/TR>";
}
print "&lt;/TABLE>";
print "&lt;/BODY>&lt;/HTML>";
OCIFreeStatement($stmt);
OCILogoff($conn);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreestatement">
   <refnamediv>
    <refname>OCIFreeStatement</refname>
    <refpurpose>ある文に関連する全リソースを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>int <function>OCIFreeStatement</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFreeStatement</function>は成功時にtrue、失敗した場合に
     falseを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreecursor">
   <refnamediv>
    <refname>OCIFreeCursor</refname>
    <refpurpose>カーソルに関連づけられた全リソースを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFreeCursor</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFreeCursor</function>は成功時にtrue、失敗した時に
     falseを返します。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ocicolumnname">
   <refnamediv>
    <refname>OCIColumnName</refname>
    <refpurpose>カラムの名前を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIColumnName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIColumnName</function> は指定した(1から始まる)カラム
     番号に対応するカラムの名前を返します。
    </simpara>
    <para>
     <example>
      <title>OCIColumnName</title>
      <programlisting role="php">
&lt;?php   
print "&lt;HTML>&lt;PRE>\n";   
$conn = OCILogon ("scott", "tiger");
$stmt = OCIParse ($conn,"select * from emp");
OCIExecute ($stmt);
print "&lt;TABLE BORDER=\"1\">";
print "&lt;TR>";
print "&lt;TH>Name&lt;/TH>";
print "&lt;TH>Type&lt;/TH>";
print "&lt;TH>Length&lt;/TH>";
print "&lt;/TR>";
$ncols = OCINumCols ($stmt);
for ($i = 1; $i <= $ncols; $i++) {
   $column_name  = OCIColumnName ($stmt, $i);
   $column_type  = OCIColumnType ($stmt, $i);
   $column_size  = OCIColumnSize ($stmt, $i);
   print "&lt;TR>";
   print "&lt;TD>$column_name&lt;/TD>";
   print "&lt;TD>$column_type&lt;/TD>";
   print "&lt;TD>$column_size&lt;/TD>";
   print "&lt;/TR>";
}
OCIFreeStatement ($stmt);  
OCILogoff ($conn);   
print "&lt;/PRE>";
print "&lt;/HTML>\n"; 
?>   
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>OCINumCols</function>, <function>OCIColumnType</function>, 
     <function>OCIColumnSize</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.ocicolumntype">
   <refnamediv>
     <refname>OCIColumnType</refname>
    <refpurpose>カラムのデータ型を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>OCIColumnType</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIColumnType</function>は、指定した(1から始まる)カラム
     番号に対応するカラムのデータ型を返します。
    </simpara>
    <para>
     <example>
      <title>OCIColumnType</title>
      <programlisting role="php">
&lt;?php   
    print "&lt;HTML>&lt;PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "&lt;/PRE>";
    print "&lt;/HTML>\n"; 
?>   
      </programlisting>
     </example>
    </para>
    <simpara>
      <function>OCINumCols</function>, <function>OCIColumnName</function>, 
     <function>OCIColumnSize</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociparse">
   <refnamediv>
    <refname>OCIParse</refname>
    <refpurpose>クエリーを処理し、文を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIParse</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>strint <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIParse</function>は、<parameter>conn</parameter>を
     使用して<parameter>query</parameter>を処理します。クエリーが有効
     な場合にステートメントID、無効な場合にfalseを返します。
     <parameter>query</parameter>は、有効なSQL文である必要があります。
    </simpara>
    </refsect1>
   </refentry>

  <refentry id="function.ocierror">
   <refnamediv>
    <refname>OCIError</refname>
    <refpurpose>
     stmt|conn|globalに関する直近のエラーを返す。
     エラーが生じていない場合はfalseを返す。
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>OCIError</function></funcdef>
      <paramdef>int 
       <parameter><optional>stmt|conn|global</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIError</function>は、直近のエラーを返します。
     オプションの <parameter>stmt|conn|global</parameter>が指定されない場合、
     直近のエラーが返されます。エラーが見つからない場合、
     <function>OCIError</function>はfalseを返します。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.ociinternaldebug">
   <refnamediv>
    <refname>OCIInternalDebug</refname>
    <refpurpose>
     内部デバッグ用出力有効または無効にする。デフォルトでは無効
    </refpurpose>
   </refnamediv>
    <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>OCIInternalDebug</function></funcdef>
      <paramdef>int <parameter>onoff</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIInternalDebug</function>は内部デバッグ用出力を
     有効にします。デバッグ出力をオフにする場合は0、
     オンにする場合は1を<parameter>onoff</parameter>に設定します。
    </simpara>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
