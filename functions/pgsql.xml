<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.31 $ -->
 <reference id="ref.pgsql">
  <title>PostgreSQL 関数</title>
  <titleabbrev>PostgreSQL</titleabbrev>

  <partintro>
   <warning>
    <para>
     PHP 4.0.6の通知メッセージ処理にはバグがあるため、PHP 4.0.6で
     PostgreSQLモジュールを使用することは推奨されません。
    </para>
   </warning>
   <warning>
    <para>
     PostgreSQLの関数名は、現在のコード規約に沿うようにバージョン4.2.0
     で変更されます。新しい名前の多くにはアンダースコアが追加されます。
     例えば、pg_exec()からpg_query()のようにいくつかの関数は、統一性を
     持たせるために異なる名前に変更されます。以前の名前は、4.2.0以降の
     何回かのリリースでも使用可能ですが、将来的に削除される可能性があ
     ります。CVSバージョンには、新しい関数名が付けられています。
    </para>
    <para>
     従来のpg_connect()/pg_pconnect() は、将来的に同期接続機能をサポー
     トするために過去のものとなる可能性があります。
    </para>
   </warning>
   <para>
    Postgresは元々UCB(カリフォルニア大学バークレイ校)コンピュータ・サ
    イエンス学部で開発されたものです。このPostgresは、いくつかの商用デー
    タベースにおいてサポートされつつあるオブジェクトリレーショナルデー
    タベース的概念の多くの先駆けでした。PostgreSQLは、SQL92/SQL3言語サ
    ポート、トランザクション機能、拡張可能な型を提供しています。
    PostgreSQLは、パブリック・ドメイン、オープンソースで、オリジナルの
    バークレイ・コードから発展してきた子孫にあたります。
   </para>
   <para>
    PostgreSQLデータベースはオープンソースのプロダクツであり、無料で使
    用可能できます。PostgreSQLサポートを使用するには、PostgreSQL 6.5以
    降が必要です。PostgreSQL 7.0以降ではPostgreSQLモジュールの全ての機
    能が使用可能です。PostgreSQLは、マルチバイト文字エンコーディングを
    含む多くの文字エンコーディングをサポートしています。現在のバージョ
    ン及びPostgreSQLに関するより詳細な情報は、<ulink
    url="&url.pgsql;">www.postgresqlL.org</ulink>で入手可能です。
   </para>
   <para>
    PostgreSQLサポートを利用可能とするには、PHPコンパイル時に
    &quot;--enable-pgsql[=DIR]&quot; を指定することが必要です。共有オ
    ブジェクトモジュールが利用可能な場合、PostgreSQLはphp.iniの
    <link linkend="ini.extension">extension</link>または
    <function>dl</function>関数を使用してロードすることが可能です。
    サポートされるini命令は、配布ソースに付属するphp.ini-distファイル
    に記述されています。
   </para>
   <para>
    全ての関数が全ての構築環境でサポートされるわけではありません。サポー
    トされる関数は、使用するlibpq(PostgreSQLのCクライアントインターフェ
    イス)のバージョンとlibpqのコンパイル方法に依存します。足りない関数
    がある場合、libpqはその関数を必要とする機能をサポートしません。
   </para>
   <para>
    接続するPostgreSQLサーバーよりも新しいlibpqを使用することも重要で
    す。使用するlibpqのバージョンがPostgreSQLサーバが期待するよりも古
    い場合、問題を生じる可能性があります。
   </para>
   <para>
    バージョン6.3(1998/3/2)以降、PostgreSQLはUNIXドメインソケットを
    使用しています。これらの新しいコネクションの使用例を以下に示す表に
    示します。このソケットは<filename>/tmp/.s.PGSQL.5432</filename>にあります。
    このオプションは<command>postmaster</command>に対して'-i'フラグを
    指定することで有効となります。これは "Unixドメインソケット以外のTCP/IP
    ソケットもlisten する"という意味です。
    <table>
     <title>postmasterとPHP</title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>postmaster</entry>
	<entry>PHP</entry>
	<entry>ステータス</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>postmaster &amp;</entry>
	<entry>pg_connect("dbname=MyDbName");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster -i &amp;</entry>
<!--	<entry>pg_connect("", "", "", "", "dbname");</entry> -->
	<entry>pg_connect("dbname=MyDbName");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster &amp;</entry>
	<entry>pg_connect("host=localhost dbname=MyDbName");</entry>
	<entry>
	 Unable to connect to PostgreSQL server: connectDB() failed: 
	 Is the postmaster running and accepting TCP/IP (with -i) 
	 connection at 'localhost' on port '5432'? in 
	 /path/to/file.php3 on line 20.
	</entry>
       </row>
       <row>
	<entry>postmaster -i &amp;</entry>
	<entry>pg_connect("host=localhost dbname=MyDbName");</entry>
	<entry>OK</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    次のコマンドでも接続を確立することができます。
    <command>$conn = pg_Connect("host=myHost port=myPort tty=myTTY
    options=myOptions dbname=myDB user=myUser password=myPassword");
    </command>
   </para>
   <para>
    以前の構文:
    <command>
     $conn = pg_connect ("host", "port", "options", "tty", "dbname")
    </command>
    は推奨されません。
   </para>
   <para>
    環境変数は、PostgreSQLサーバ/クライアントの動作に影響を与えます。
    例えば、PostgreSQLモジュールは、ホスト名が接続文字列で省略された場
    合、環境変数PGHOSTを探します。サポートされる環境変数は、バージョン
    毎に異なります。詳細は、PostgreSQLプログラマ用マニュアル(libpq -
    環境変数)を参照下さい。
   </para>
   <para>
    PostgreSQL 7.1.0から、textデータ型の最大サイズは1GBとなっています。
    古いPostgreSQLのtextデータ型はブロックサイズ(デフォルトは8KB、最大
    32KBをコンパイル時に定義可能)の制限を受けていました。
   </para>
   <para>
    ラージオブジェクト(lo)インターフェースを使用するには、そのクエリーを
    トランザクション・ブロックの中に入れてやる必要があります。
    トランザクション・ブロックは<command>begin</command>で始まり、
    そのトランザクションが有効な場合は<command>commit</command>または
    <command>end</command>で終わります。トランザクションが失敗した場合、
    そのトランザクションは<command>rollback</command>または
    <command>abort</command>により閉じる必要があります。
    <example>
     <title>ラージオブジェクトの使用例</title>
     <programlisting role="php">
<![CDATA[
<?php
   $database = pg_connect ("dbname=jacarta");
    pg_exec ($database, "begin");
    $oid = pg_locreate ($database);
    echo ("$oid\n");
    $handle = pg_loopen ($database, $oid, "w");
    echo ("$handle\n");
    pg_lowrite ($handle, "large object data");
    pg_loclose ($handle);
    pg_exec ($database, "commit");
?>
]]>
     </programlisting>
    </example>
    ラージオブジェクトリソースを閉じる前に接続リソースを閉じないように
    して下さい。
   </para>
  </partintro>

  <refentry id="function.pg-close">
   <refnamediv>
    <refname>pg_close</refname>
    <refpurpose>PostgreSQL接続を閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_close</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_close</function> は、
     <parameter>connection</parameter>リソースで指定したPostgreSQLデー
     タベースへの持続的でない接続を閉じます。
     <parameter>connection</parameter>が有効な接続リソースの場合、この
     関数は、&true;を返し、そうでない場合は &false;を返します。
    </para>
    <note>
     <para>
      持続的でない接続はスクリプトの実行終了時に時動的にクローズされる
      ため、<function>pg_close</function>は通常は必要ありません。
      <function>pg_close</function> は、
      <function>pg_pconnect</function>で生成された持続的なリンクは閉じ
      ません。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.pg-cmdtuples">
   <refnamediv>
    <refname>pg_cmdtuples</refname>
    <refpurpose>影響を受けたタプル(レコード)数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_cmdtuples</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_cmdtuples</function>は、INSERT, UPDATE,DELETEクエリー
     により影響を受けたタプル(インスタンス/レコード/行)の数を返します。
     影響を受けたタプルがない場合は0を返します。
     <example>
      <title>pg_cmdtuples</title>
      <programlisting role="php">
<![CDATA[
<?php
$result = pg_exec ($conn, "INSERT INTO verlag VALUES ('Autor')");
$cmdtuples = pg_cmdtuples ($result);
echo $cmdtuples . " <- タプルが影響を受けました。";
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>pg_numfields</function> および
     <function>pg_numrows</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-connect">
   <refnamediv>
    <refname>pg_connect</refname>
    <refpurpose>PostgreSQL接続を開く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>pg_connect</function></funcdef>
      <paramdef>string <parameter>connection_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_connect</function> は、他のPostgreSQL関数で必要とさ
     れる接続リソースを返します。
    </para>
    <para>
     <function>pg_connect</function>は、
     <parameter>connection_string</parameter>で指定したPostgreSQLデー
     タベースへの接続をオープンします。この関数は、成功時に接続リソー
     スを返します。接続できなかった場合には、&false;が返されます。
     <parameter>connection_string</parameter>は、引用符で括った文字列
     とする必要があります。
     <example>
      <title><function>pg_connect</function>の使用法</title>
      <programlisting role="php">
<![CDATA[
<?php
$dbconn = pg_connect ("dbname=mary");
// "mary"という名前のデータベースに接続
$dbconn2 = pg_connect ("host=localhost port=5432 dbname=mary");
// "localhost"のポート"5432"にて"mary"という名前のデータベースに接続
$dbconn3 = pg_connect ("host=sheep port=5432 dbname=mary user=lamb password=baaaa");
// ユーザ名とパスワードを指定してホスト"sheep"上の"mary"という名前のデー
// タベースに接続
$conn_string = "host=sheep port=5432 dbname=test user=lamb password=bar";
$dbconn4 = pg_connect ($conn_string);
// ユーザ名とパスワードを指定してホスト"sheep"上の"test"という名前のデー
// タベースへ接続
?>
]]>
     </programlisting>
     </example>
      <parameter>connection_string</parameter>で利用可能な引数には、
      <parameter>dbname</parameter>, <parameter>port</parameter>,
      <parameter>host</parameter>, <parameter>tty</parameter>,
      <parameter>options</parameter>, <parameter>user</parameter>,
      <parameter>password</parameter>が含まれます。
    </para>
    <para>
     同じ<parameter>connection_string</parameter>引数で2回
     <function>pg_connect</function>関数がコールされた場合、新規の接続
     はオープンされません。代わりに既にオープンされている接続リソース
     が返されます。異なる接続パラメータ(すなわち別のユーザ名)を使用す
     る場合には、同じデータベースに対して複数の接続をオープンすること
     が可能です。
    </para>
    <para>
     複数のパラメータをサポートする構文:
     <command>$conn = pg_connect ("host", "port", "options", "tty", "dbname")
     </command>
     は過去のものであり、推奨されません。
    </para>
    <para>
     <function>pg_pconnect</function>,
     <function>pg_close</function>, <function>pg_host</function>,
     <function>pg_port</function>, <function>pg_tty</function>,
     <function>pg_options</function>, <function>pg_dbname</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-dbname">
   <refnamediv>
    <refname>pg_dbname</refname>
    <refpurpose>データベース名の取得</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_dbname</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定したPostgreSQL接続IDが接続しているデータベースの名前を返しま
     す。connectionが有効な接続IDでない場合は&false;を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-end-copy">
   <refnamediv>
    <refname>pg_end_copy</refname>
    <refpurpose>PostgreSQLバックエンドに同期する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_end_copy</function></funcdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_end_copy</function> は、copy命令を実行した後で、
     PostgreSQLフロントエンドをバックエンドに同期します。
     この関数を発行する必要があり、さもなくばそのフロントエンドに関し
     てバックエンドに"out of sync"が発生する可能性があります。成功時に
     &true;、その他の場合に&false;を返します。
    </para>
    <para>
     詳細な情報と例については、<function>pg_put_line</function>も参照
     下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-errormessage">
   <refnamediv>
    <refname>pg_errormessage</refname>
    <refpurpose>直近のエラーメッセージ文字列を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_errormessage</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     エラーメッセージを保持する文字列を返します。失敗すると&false;を返し
     ます。有効な接続が存在し、かつその接続において最後のデータベース
     操作でエラーが発生した場合、そのエラーに関する詳細情報は関数
     <function>pg_errormessage</function>を使っても取得できない可能性
     があります。この関数は、バックエンドサーバで生成されたエラーメッ
     セージを保持する文字列を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-exec">
   <refnamediv>
    <refname>pg_exec</refname>
    <refpurpose>クエリーを実行する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>pg_exec</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     クエリーに失敗したり、connectionが有効な接続IDでない場合は&false;を
     返します。connectionが有効な値であれば、
     <function>pg_errormessage</function>関数によりエラーの詳細
     を得ることができます。<function>pg_exec</function>関数は、接続IDにより
     指定されたPostgreSQLデータベースに対してSQLステートメントを送信します。
     connectionは<function>pg_connect</function>により返された有効なID
     でなければなりません。この関数の返り値はインデックス値であり、
     その他のPostgreSQL関数から結果をアクセスする際に使われます。
     <note>
      <simpara>
       PHP/FIでは、クエリーがデータを返すことが期待されない場合
       (たとえばINSERTやUPDATE)は1を返し、また何も返さなかったSELECTの
       場合でも1より大きな値を返します。PHPではそのような仮定は行いません。
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-array">
   <refnamediv>
    <refname>pg_fetch_array</refname>
    <refpurpose>行を配列として取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pg_fetch_array</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>result_type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     返り値: 取得された行を保持する配列、行がもうない場合は&false;。
    </para>
    <para>
     <function>pg_fetch_array</function>は拡張版の
     <function>pg_fetch_row</function>です。
     データを結果配列の数値インデックスに保持することに加えて、
     フィールド名をキーとしてデータを連想インデックスにも保存します。
    </para>
    <para>
     <function>pg_fetch_array</function>の
     3番目の引数(オプション)<parameter>result_type</parameter>は
     定数であり、PGSQL_ASSOC、PGSQL_NUM、PGSQL_BOTHのどれかとなります。
     <note>
      <para>
       <parameter>result_type</parameter>はPHP4.0で追加されました。
      </para>
     </note>
    </para>
    <para>
     注意すべき重要な点として、<function>pg_fetch_array</function>を
     使用しても、かなりの付加価値があるにもかかわらず
     <function>pg_fetch_row</function>を使用した場合に比べて
     極端に遅くなるわけではないということがあげられます。
    </para>
    <para>
     更に詳細な情報は、<function>pg_fetch_row</function>を参照下さい。
    </para>
    <example>
     <title>PostgreSQLによる配列の取得</title>
     <programlisting role="php">
     <![CDATA[
<?php 
$conn = pg_pconnect ("dbname=publisher");
if (!$conn) {
    echo "エラーが発生しました。\n";
    exit;
}
 
$result = pg_exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "エラーが発生しました。\n";
    exit;
}
 
$arr = pg_fetch_array ($result, 0, PGSQL_NUM);
echo $arr[0] . " <- array\n";
 
$arr = pg_fetch_array ($result, 1, PGSQL_ASSOC);
echo $arr["author"] . " <- array\n";
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
 
  <refentry id="function.pg-fetch-object">
   <refnamediv>
    <refname>pg_fetch_object</refname>
    <refpurpose>行をオブジェクトとして得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>pg_fetch_object</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>result_type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     返り値: 取得した行に対応するプロパティを有するオブジェクト。
     行がもうない場合は&false;。
    </para>
    <para> 
     <function>pg_fetch_object</function>は<function>pg_fetch_array</function>
     に似ていますが、配列の代わりにオブジェクトが返されという違いがあります。
     間接的に、このことはデータがオフセットではなく
     フィールド名によってのみアクセス可能であることを意味します。
     (数字はプロパティ名として使用できません。)
    </para>
    <para>
     <function>pg_fetch_array</function>の3番目の引数(オプション)
     <parameter>result_type</parameter>は定数であり、
     PGSQL_ASSOC、PGSQL_NUM、PGSQL_BOTHのどれかとなります。
     <note>
      <para>
       <parameter>result_type</parameter>はPHP4.0で追加されました。
      </para>
     </note>
    </para>
    <para>
     速度面では、この関数は、<function>pg_fetch_array</function>と同じであり、
     <function>pg_fetch_row</function>とほとんど同じ程度です。
     (違いはわずかです)
    </para>
    <para>
     <function>pg_fetch_array</function>、<function>pg_fetch_row</function>
     も参照下さい。
     <example>
      <title>Postgres によりオブジェクトを取得する</title>
      <programlisting role="php">
<![CDATA[
<?php 
$database = "verlag";
$db_conn = pg_connect ("host=localhost port=5432 dbname=$database");
if (!$db_conn): ?>
    <H1>Failed connecting to postgres database <? echo $database ?></H1> <?php
    exit;
endif;
 
$qu = pg_exec ($db_conn, "SELECT * FROM verlag ORDER BY autor");
$row = 0; // Postgresでは他のデータベースと異なり、行カウンタが必要
 
while ($data = pg_fetch_object ($qu, $row)) {
    echo $data->autor." (";
    echo $data->jahr ."): ";
    echo $data->titel."<BR>";
    $row++;
}
?>
<PRE>
<?php
$fields[] = Array ("autor", "Author");
$fields[] = Array ("jahr",  "  Year");
$fields[] = Array ("titel", " Title");
 
$row= 0; // Postgresでは他のデータベースと異なり、行カウンタが必要
while ($data = pg_fetch_object ($qu, $row)) {
    echo "----------\n";
    reset ($fields);
    while (list (,$item) = each ($fields)):
        echo $item[1].": ".$data->$item[0]."\n";
    endwhile;
    $row++;
}
echo "----------\n"; ?>
</PRE> 
<?php
pg_freeresult ($qu);
pg_close ($db_conn);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.pg-fetch-row">
   <refnamediv>
    <refname>pg_fetch_row</refname>
    <refpurpose>数字をインデックスとする配列として行を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pg_fetch_row</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     返り値: 取得された行を有する配列、行がもうない場合に&false;。
    </para>
    <para>
     <function>pg_fetch_row</function>は指定した結果IDが指す結果から
     1行分のデータを取得します。行は配列として返されます。
     各結果カラムは、オフセット値0から始まる配列に保存されます。
    </para>
    <para>
     <function>pg_fetch_array</function>,
     <function>pg_fetch_object</function>,
     <function>pg_result</function> も参照下さい。
     <example>
      <title>Postgresにより行を取得する</title>
      <programlisting role="php">
<![CDATA[
<?php 
$conn = pg_pconnect ("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}
 
$result = pg_exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}
 
$num = pg_numrows($result); 
 
for ($i=0; $i < $num; $i++) {
  $r = pg_fetch_row($result, $i);

  for ($j=0; $j < count($r); $j++) {
    echo "$r[$j]&nbsp;";
  }

  echo "<BR>";

}
 
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.pg-fieldisnull">
   <refnamediv>
    <refname>pg_FieldIsNull</refname>
    <refpurpose>フィールドが&null;かどうか調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldisnull</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>mixed <parameter>field</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     フィールドが&null;かどうか調べます。rowで指定した行のフィールドが
     &null;でない場合は0を返し、&null;だった場合は1を返します。fieldは番号
     またはフィールド名で指定します。rowの番号付けは0から始まります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldname">
   <refnamediv>
    <refname>pg_fieldname</refname>
    <refpurpose>フィールドの名前を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_fieldname</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_fieldname</function>は、指定したPostgreSQL結果IDの中の
     カラム番号に対応するフィールドの名前を返します。フィールド番号は
     0から始まります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldnum">
   <refnamediv>
    <refname>pg_fieldnum</refname>
    <refpurpose>カラム番号を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldnum</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_fieldnum</function>は、指定したPostgreSQLの結果IDの中の
     フィールド名に対応するカラム番号を返します。フィールド番号は0から
     始まります。この関数は、エラーの場合に-1を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldprtlen">
   <refnamediv>
    <refname>pg_fieldprtlen</refname>
    <refpurpose>表示される長さを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldprtlen</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_fieldprtlen</function>は、PostgreSQLの結果の
     指定した値に関して実際に表示した場合の長さ(文字の数)を返します。
     行番号(row_number)は0から始まります。この関数は、エラーの場合に-1を
     返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldsize">
   <refnamediv>
    <refname>pg_fieldsize</refname> 
    <refpurpose>
     指定したフィールドの内部記憶領域におけるサイズを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldsize</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_fieldsize</function>は、指定したPostgreSQLの結果にお
     いて指定したフィールド番号の内部記憶領域のサイズを(バイト数で)返
     します。フィールド番号は0から始まります。
     フィールドサイズが-1の場合、その項目は可変長フィールドであることを
     示します。この関数は、エラーの場合は&false;を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldtype">
   <refnamediv>
    <refname>pg_fieldtype</refname> 
    <refpurpose>
     フィールド番号に対応する型名を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_fieldtype</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_fieldtype</function>は、指定したPostgreSQLの結果において、
     指定フィールドの型名を保持する文字列を返します。フィールド番号
     (field_number)は0から始まります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-freeresult">
   <refnamediv>
    <refname>pg_freeresult</refname> 
    <refpurpose>メモリを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_freeresult</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>pg_freeresult</function>は、スクリプト実行中のメモリ使用量
     を抑制したい場合にのみコールする必要があります。すべての結果保持用
     メモリは、スクリプトが終了する際に自動的に開放されます。
     しかしながら、そのスクリプトにおいて、それ以上の結果データを
     必要としないことが確実であれば、結果ID(result_id)を引数として
     <function>pg_freeresult</function>をコールすることが可能です。
     これにより、関連するメモリは開放されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-getlastoid">
   <refnamediv>
    <refname>pg_getlastoid</refname> 
    <refpurpose>直近のオブジェクトIDを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_getlastoid</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_getlastoid</function>は、<function>pg_Exec</function>で
     実行された直近のコマンドがSQLのINSERTだった場合、挿入されたタプルに割
     り当てられたoid(オブジェクト ID)を取り出します。有効なoidがあれば、
     この関数は正の整数を返します。エラーが起こったり、
     <function>pg_exec</function>で実行された最後のコマンドがSQLの
     INSERTでなかった場合は-1を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-host">
   <refnamediv>
    <refname>pg_host</refname> 
    <refpurpose>ホスト名を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_host</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_host</function>は、指定したPostgreSQL接続IDが接続している
     ホストの名前を返します。
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.pg-last-notice">
   <refnamediv>
    <refname>pg_last_notice</refname> 
    <refpurpose>
     PostgreSQLサーバからの直近の通知メッセージを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_last_notice</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_last_notice</function> は、
     <parameter>connection</parameter>で指定したPostgreSQLサーバーから
     の直近の通知メッセージを返します。PostgreSQLサーバは、トランザク
     ションが継続できない時に通知メッセージを設定します。このため、
     <function>pg_exec</function>による無意味なSQLの発行を
     <function>pg_last_notice</function>により回避することが可能です。
     他にもPostgreSQLサーバが通知メッセージを設定する場合があります。
     プログラマは、トランザクションに関連するかによらず通知メッセージ
     の内容をチェックするべきです。
    </para>
    <warning>
     <para>
      この関数は実験的なものであり、まだ完全に実装されていません。
      <function>pg_last_notice</function> は、PHP 4.0.6で追加されまし
      た。しかし、PHP 4.0.6 には通知メッセージ処理の問題があります。
      <function>pg_last_notice</function>を使用しない場合でも
      PHP 4.0.6 で PostgreSQLモジュールを使用することは推奨されません。
     </para>
    </warning>
    <para>
     <function>pg_exec</function> および
     <function>pg_errormessage</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loclose">
   <refnamediv>
    <refname>pg_loclose</refname>
    <refpurpose>ラージオブジェクトをクローズする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_loclose</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loclose</function>はInversion Large Objectをクローズ
     します。<parameter>large_object</parameter>は、
     <function>pg_loopen</function>でオープンされたラージオブジェクト
     のリソースです。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_loopen</function>,
     <function>pg_locreate</function>,
     <function>pg_loimport</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-locreate">
   <refnamediv>
    <refname>pg_locreate</refname>
    <refpurpose>ラージオブジェクトを生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_locreate</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_locreate</function>はInversion Large Objectを生成し、
     そのラージオブジェクトのoidを返します。
     <parameter>connection</parameter>には
     <function>pg_connect</function> または
     <function>pg_pconnect</function>でオープンした有効なデータベース
     接続を指定します。PostgreSQLはモードINV_READ,INV_WRITEでアクセス
     します。INV_ARCHIVEはサポートされていません。オブジェクトは常に読
     み書き可のアクセス権で生成されます。INV_ARCHIVEはPostgreSQL自身
     (バージョン6.3以降)からも削除されました。この関数はラージオブジェ
     クトoidを返します。エラーが発生した場合は&false;を返します。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loexport">
   <refnamediv>
    <refname>pg_loexport</refname>
    <refpurpose>ラージオブジェクトをファイルにエクスポートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_loexport</function></funcdef>
      <paramdef>int <parameter>oid</parameter></paramdef>
      <paramdef>string <parameter>pathname</parameter></paramdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数<parameter>oid</parameter>によりエクスポートするラージオブジェクトの
     オブジェクトIDを指定し、引数<parameter>pathname</parameter>により
     ファイルのパス名を指定します。エラーを発生した場合は&false;、それ以外
     は&true;を返します。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_loimport</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loimport">
   <refnamediv>
    <refname>pg_loimport</refname>
    <refpurpose>ファイルからラージオブジェクトをインポートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_loimport</function></funcdef>
      <paramdef>string <parameter>pathname</parameter></paramdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     引数<parameter>pathname</parameter>でラージオブジェクトとして
     インポートするファイルのパス名を指定します。エラーを発生した場合に
     &false;、それ以外の場合は新規に作成したラージオブジェクトのoidを
     返します。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
     &note.sm.uidcheck;
    <para>
     <function>pg_loexport</function>および
     <function>pg_loopen</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loopen">
   <refnamediv>
    <refname>pg_loopen</refname>
    <refpurpose>ラージオブジェクトをオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>pg_loopen</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>oid</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loopen</function>はインバージョンラージオブジェクトを
     オープンし、ラージオブジェクトのリソースを返します。このリソース
     は接続に関する情報をカプセル化します。<parameter>oid</parameter>
     には、有効なラージオブジェクトのoidを指定し、
     <parameter>mode</parameter>には"r","w","rw"のうちのいずれかを指定
     します。この関数はエラーの場合に &false;を返します。
    </para>
    <warning>
     <para>
      ラージオブジェクトのリソースを閉じる前にデータベースへの接続を閉
      じないで下さい。
     </para>
    </warning>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_loclose</function>および
     <function>pg_locreate</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loread">
   <refnamediv>
    <refname>pg_loread</refname>
    <refpurpose>ラージオブジェクトを読み込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_loread</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
      <paramdef>int <parameter>len</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loread</function>は、ラージオブジェクトから最大
     <parameter>len</parameter>バイト分読み込み、文字列として返します。
     <parameter>large_object</parameter>には有効なラージオブジェクトの
     リソースを指定し、<parameter>len</parameter>にはラージオブジェク
     トセグメントで利用可能な最大サイズを指定します。エラーの場合には、
     &false;が返されます。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_loreadall</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loreadall">
   <refnamediv>
    <refname>pg_loreadall</refname>
    <refpurpose>
     ラージオブジェクト全体を読み込みブラウザに直接送信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_loreadall</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loreadall</function> はラージオブジェクトを読み込み、
     未送信のヘッダを全て送信した後、ブラウザに直接ラージオブジェクト
     を送信します。これは主に、イメージや音などのバイナリデータを送信
     するために使用します。この関数は送信したバイト数を返します。エラー
     の場合には、&false;が返されます。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_loread</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lounlink">
   <refnamediv>
    <refname>pg_lounlink</refname>
    <refpurpose>ラージオブジェクトを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_lounlink</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>oid</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_lounlink</function>は、<parameter>oid</parameter>で
     関連付けられたラージオブジェクトを削除します。成功時に&true;、そ
     の他の場合は&false;が返されます。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_locreate</function> および
     <function>pg_loimport</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lowrite">
   <refnamediv>
    <refname>pg_lowrite</refname>
    <refpurpose>ラージオブジェクトを書く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_lowrite</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_lowrite</function>は、変数
     <parameter>data</parameter>からラージオブジェクトに書き込み、実際
     に書きこんだバイト数を返します。エラーを生じた場合は&false;を返し
     ます。<parameter>large_object</parameter>は、
     <function>pg_loopen</function>でオープンされたラージオブジェクト
     のリソースです。
    </para>
    <para>
     ラージオブジェクト(lo)インターフェイスを使用するには、トランザク
     ションブロックの中に括る必要があります。
    </para>
    <para>
     <function>pg_locreate</function>および
     <function>pg_loopen</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numfields">
   <refnamediv>
    <refname>pg_numfields</refname> 
    <refpurpose>フィールド数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_numfields</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_numfields</function>は、PostgreSQL
     <parameter>result</parameter>におけるフィールド(カラム)数を返しま
     す。引数は、<function>pg_exec</function>により返された結果リソー
     スです。この関数はエラーの場合-1を返します。
    </para>
    <para>
     <function>pg_numrows</function> および
     <function>pg_cmdtuples</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numrows">
   <refnamediv>
    <refname>pg_numrows</refname> 
    <refpurpose>行数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_numrows</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_numrows</function>はPostgreSQLの
     <parameter>result</parameter>リソースにおける行数を返します。引数
     は、<function>pg_exec</function>で返されたクエリ結果リソースです。
     この関数は、エラーの際に-1を返します。
    </para>
    <note>
     <para>
      INSERT、UPDATE、DELETEクエリで変更されたレコード数を得るには、
      <function>pg_cmdtuples</function> を使用して下さい。
     </para>
    </note>
    <para>
     <function>pg_numfields</function> および
     <function>pg_cmdtuples</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-options">
   <refnamediv>
    <refname>pg_options</refname> 
    <refpurpose>接続に関連するオプションを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_options</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_options</function>は、指定した
     PostgreSQL<parameter>connection</parameter>リソースで指定したオプ
     ションを保持する文字列を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-pconnect">
   <refnamediv>
    <refname>pg_pconnect</refname>
    <refpurpose>持続的なデータベース接続をオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_pconnect</function></funcdef>
      <paramdef>string <parameter>connection_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_pconnect</function> はPostgreSQLへの接続をオープンし
     ます。この関数は、他のPostgreSQL関数により必要とされる接続リソー
     スを返します。
    </para>
    <para>
     この関数は、成功すると接続IDを返し、接続ができなかった場合は
     &false;を返します。引数は、引用符で括った文字列とする必要がありま
     す。引数としては、<parameter>dbname</parameter> 
     <parameter>port</parameter>, <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter>, <parameter>password</parameter>が使
     用可能です。
    </para>
     <example>
     <title>pg_pconnectの使用</title>
     <programlisting role="php">
<![CDATA[
<?php
$dbconn = pg_pconnect ("dbname=mary");
// "mary"という名前のデータベースに接続
$dbconn2 = pg_pconnect ("host=localhost port=5432 dbname=mary");
// "localhost"上のポート"5432"で"mary"という名前のデータベースに接続
$dbconn3 = pg_connect ("host=sheep port=5432 dbname=mary user=lamb password=foo");
// ユーザ名をパスワードを指定してホスト"sheep"上の"mary"という名前のデータベースに接続
$conn_string = "host=sheep port=5432 dbname=test user=lamb password=bar";
$dbconn4 = pg_pconnect ($conn_string);
// ユーザ名とパスワードを指定してホスト"sheep"上の"test"という名前のデータベースに接続
?>
]]>
     </programlisting>
    </example>
    <para>
     同じ引数で<function>pg_pconnect</function>への２回目のコールが行
     われた場合、新規の接続はオープンされず、代わりに既にオープンされ
     ている接続リソースが返されます。異なった接続パラメータ(すなわち別
     のユーザ名)を使用する場合には、同じデータベースに複数の接続を行う
     ことが可能です。
    </para>
    <para>
     <function>pg_pconnect</function>の複数のパラメータを使用する構文
     <command>$conn = pg_pconnect ("host", "port", "options", "tty",
    "dbname")
     </command>
     は過去のものです。
    </para>
    <para>
     持続的接続を有効にするには、php.iniのディレクティブ<link
     linkend="ini.pgsql.allow-persistent">pgsql.allow_persistent</link>
     を &quot;On&quot;に設定する必要があります。 (デフォルトはOnです)
     持続的接続の最大数をphp.iniディレクティブ<link
     linkend="ini.pgsql.max-persistent">pgsql.max_persistent</link>
     で指定することも可能です。(デフォルトは制限無しを意味する-1です)
     接続全体の数をphp.iniディレクティブ<link
     linkend="ini.pgsql.max-links">pgsql.max_links</link> で設定可能で
     す。
    </para>
    <para>
     <function>pg_close</function> は、
     <function>pg_pconnect</function>によりオープンされた持続的接続は
     閉じません。 
    </para>
    <para>
     <function>pg_connect</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-port">
   <refnamediv>
    <refname>pg_port</refname>
    <refpurpose>接続に関連するポート番号を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_port</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_port</function>は、指定したPostgreSQL
     <parameter>connection</parameter>リソースが接続しているポートの番
     号を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-put-line">
   <refnamediv>
    <refname>pg_put_line</refname>
    <refpurpose>
     &null;で終る文字列をPostgreSQLバックエンドに送信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_put_line</function></funcdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_put_line</function> は、&null;で終る文字列をPostgreSQL
     バックエンドサーバーに送信します。この関数は、例えば、PostgreSQL
     のcopy命令を開始することにより開始されたデータのテーブルへの高速
     挿入の際に有用です。最後の&null;文字は自動的に追加されます。成功時
     に&true;、その他の場合に&false;を返します。
    </para>
    <note>
     <para> 
      アプリケーションは、データの送信が終了したことをバックエンドに知
      らせるために最後の行に明示的に2つの文字"\."を送信する必要があり
      ます。
     </para>
    </note>
    <para>
     <function>pg_end_copy</function>も参照下さい。
     <example>
      <title>データのテーブルへの高速挿入</title>
      <programlisting role="php">
<![CDATA[
<?php 
    $conn = pg_pconnect ("dbname=foo");
    pg_exec($conn, "create table bar (a int4, b char(16), d float8)");
    pg_exec($conn, "copy bar from stdin");
    pg_put_line($conn, "3\thello world\t4.5\n");
    pg_put_line($conn, "4\tgoodbye world\t7.11\n");
    pg_put_line($conn, "\\.\n");
    pg_end_copy($conn);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-result">
   <refnamediv>
    <refname>pg_result</refname>
    <refpurpose>結果IDから実際の値を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>pg_result</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
      <paramdef>mixed <parameter>field</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_result</function>は、<function>pg_exec</function>で
     返された結果リソース<parameter>result</parameter>から実際の値を返
     します。<parameter>row_number</parameter>は整数です。
     <parameter>field</parameter>は、フィールド名(文字列)またはフィー
     ルド番号(整数)です。<parameter>row_number</parameter>と
     <parameter>field</parameter>は、結果のテーブルのどのセルを返すか
     を指定します。行(row)番号は0から始まります。フィールドを名前で指定す
     る代わりに、フィールド番号を引用符で括らずに指定することもできま
     す。フィールド番号は0から始まります。
    </para>
    <para>
     PostgreSQLには数多くの組込み型がありますが、ここでは直接に
     は基本型のみがサポートされます。すべての整数型／ブール型／oid
     型は整数値として返されます。すべての浮動小数点型と実数型は、
     倍精度の値として返されます。配列型を含むその他のすべての型は、
     <command>psql</command>プログラムで出力されるような PostgreSQL
     のデフォルトの規約によるものと同じ文字列フォーマットで返されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-set-client-encoding">
   <refnamediv>
    <refname>pg_set_client_encoding</refname>
    <refpurpose>
     PostgreSQLクライアントのエンコーディングを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>      
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_set_client_encoding</function></funcdef>
      <paramdef>resource 
       <parameter><optional>connection</optional></parameter>
      </paramdef>
      <paramdef>string <parameter>encoding</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、PostgreSQLクライアントのエンコーディングを設定し、成
     功した場合に0、失敗した際に-1を返します。
    </para>
    <para>
     <parameter>encoding</parameter>には、設定するクライアントのエンコー
     ディングとして次の中から指定します。:
     SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,
     MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT,
     SJIS, BIG5, WIN1250
    </para>
    <note>
     <para>
      この関数を使用するには、PHP-4.0.3以降とPostgreSQL-7.0以降が必要
      です。サポートされるエンコーディングはPostgreSQLのバージョンに依
      存します。詳細はPostgreSQLのマニュアルを参照下さい。
     </para>
     <para>
      この関数は、<function>pg_setclientencoding</function>とコールす
      ることも可能です。
     </para>
    </note>
    <para>
     <function>pg_client_encoding</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-client-encoding">
   <refnamediv>
    <refname>pg_client_encoding</refname>
    <refpurpose>
     PostgreSQLクライアントのエンコーディングを取得する
    </refpurpose>
   </refnamediv>
   <refsect1>      
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_client_encoding</function></funcdef>
      <paramdef>resource 
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_client_encoding</function>は、PostgreSQLクライアント
     のエンコーディングを文字列として返します。返り値は、次のどれかと
     なります。:
     SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,
     MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5,
     WIN1250
    </para>
    <note>
     <para>
      この関数を使用するには、PHP-4.0.3以降とPostgreSQL-7.0以降が必要
      です。libpqがマルチバイトエンコーディングサポートを有効にせずに
      コンパイルされている場合、
      <function>pg_set_client_encoding</function>は常に
      &quot;SQL_ASCII&quot;を返します。サポートされるエンコーディング
      はPostgreSQLのバージョンに依存します。マルチバイトを有効にする方
      法とサポートされるエンコーディングに関する詳細はPostgreSQLのマニュ
      アルを参照下さい。
     </para>
     <para>
      この関数は、<function>pg_clientencoding</function>とコールするこ
      とも可能です。
     </para>
    </note>
    <para>
     <function>pg_set_client_encoding</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-trace">
   <refnamediv>
    <refname>pg_trace</refname>
    <refpurpose>PostgreSQLサーバーへの接続をトレースする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_trace</function></funcdef>
      <paramdef>string
       <parameter>filename</parameter>
      </paramdef>
      <paramdef>string
       <parameter>
	<replaceable><optional>mode</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     PostgreSQLフロントエンド/バックエンド間のコミュニケーションの
     デバック用のファイルへのトレースを有効にします。
     このトレース結果を完全に理解するためには、PostgreSQLコミュニケーション
     プロトコルの詳細に精通している必要があります。
     そうでない人にとってもサーバーに送られたクエリーのエラーをトレースする
     ことは有用です。試しに'grep '^To backend' trace.log'を実行し、
     実際にPostgreSQLサーバーに送信されるクエリーを見てみて下さい。
    </para>
    <para>
     <parameter>filename</parameter>および<parameter>mode</parameter>は
     <function>fopen</function>と同じです。
     (<parameter>mode</parameter>のデフォルトは'w'です)
     <parameter>connection</parameter>によりトレースする接続を指定しま
     す。デフォルトは最後にオープンされた接続です。
    </para>
    <para>
     <parameter>filename</parameter>をロギング用にオープンできた場合に
     &true;、その他の場合に&false;を返します。
    </para>
    <para>
     <function>fopen</function>および<function>pg_untrace</function>も
     参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-tty">
   <refnamediv>
    <refname>pg_tty</refname>
    <refpurpose>tty名を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_tty</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_tty</function>は、指定した
     PostgreSQL<parameter>connection</parameter>リソースで、サー
     バ側のデバッグ出力が送られるtty名を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-untrace">
   <refnamediv>
    <refname>pg_untrace</refname>
    <refpurpose>
     PostgreSQLサーバーへの接続のトレースを無効にする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_untrace</function></funcdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_trace</function>により開始したトレースを停止します。
     <parameter>connection</parameter>によりトレースされている接続を指
     定します。デフォルトは最後にオープンされた接続です。
    </para>
    <para>
     常に&true;を返します。
    </para>
    <para>
     <function>pg_trace</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-get-result'>
   <refnamediv>
    <refname>pg_get_result</refname>
    <refpurpose>
     Get asynchronous query result
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>pg_get_result</function></funcdef>
      <paramdef>resource <parameter><optional>connection</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-request-cancel'>
   <refnamediv>
    <refname>pg_request_cancel</refname>
    <refpurpose>
     Cancel request
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_request_cancel</function></funcdef>
      <paramdef>resource <parameter><optional>connection</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-is-busy'>
   <refnamediv>
    <refname>pg_is_busy</refname>
    <refpurpose>
     Get connection is busy or not
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_is_busy</function></funcdef>
      <paramdef>resource <parameter><optional>connection</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-send-query'>
   <refnamediv>
    <refname>pg_send_query</refname>
    <refpurpose>
     同期クエリを送信する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_send_query</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>qeury</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>bool <function>pg_send_query</function></funcdef>
      <paramdef>string <parameter>qeury</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-cancel-query'>
   <refnamediv>
    <refname>pg_cancel_query</refname>
    <refpurpose>
     リクエストをキャンセルする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_cancel_query</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-connection-busy'>
   <refnamediv>
    <refname>pg_connection_busy</refname>
    <refpurpose>
     接続がビジーかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_connection_busy</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-connection-reset'>
   <refnamediv>
    <refname>pg_connection_reset</refname>
    <refpurpose>
     接続をリセット(再接続)する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_connection_reset</function></funcdef>
      <paramdef>resource <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-connection-status'>
   <refnamediv>
    <refname>pg_connection_status</refname>
    <refpurpose>
     接続ステータスを取得する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_connection_status</function></funcdef>
      <paramdef>resource <parameter>connnection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-copy-from'>
   <refnamediv>
    <refname>pg_copy_from</refname>
    <refpurpose>
     No description given yet
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_copy_from</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>table_name</parameter></paramdef>
      <paramdef>array <parameter>rows</parameter></paramdef>
      <paramdef>string <parameter><optional>delimiter</optional></parameter></paramdef>
      <paramdef>string <parameter><optional>null_as</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-copy-to'>
   <refnamediv>
    <refname>pg_copy_to</refname>
    <refpurpose>
     Send null-terminated string to backend server
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_copy_to</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>table_name</parameter></paramdef>
      <paramdef>string <parameter><optional>delimiter</optional></parameter></paramdef>
      <paramdef>string <parameter><optional>null_as</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-escape-bytea'>
   <refnamediv>
    <refname>pg_escape_bytea</refname>
    <refpurpose>
     Escape binary for bytea type
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_escape_bytea</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-escape-string'>
   <refnamediv>
    <refname>pg_escape_string</refname>
    <refpurpose>
     Escape string for text/char type
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_escape_string</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-lo-close'>
   <refnamediv>
    <refname>pg_lo_close</refname>
    <refpurpose>
     Close a large object
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_lo_close</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-lo-seek'>
   <refnamediv>
    <refname>pg_lo_seek</refname>
    <refpurpose>
     Seeks position of large object
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_lo_seek</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int <parameter><optional>whence</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-lo-tell'>
   <refnamediv>
    <refname>pg_lo_tell</refname>
    <refpurpose>
     Returns current position of large object
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_lo_tell</function></funcdef>
      <paramdef>resource <parameter>large_object</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-result-error'>
   <refnamediv>
    <refname>pg_result_error</refname>
    <refpurpose>
     Get error message associated with result
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_result_error</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.pg-result-status'>
   <refnamediv>
    <refname>pg_result_status</refname>
    <refpurpose>
     Get status of query result
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_result_status</function></funcdef>
      <paramdef>resource <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
