<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
 <reference id="ref.w32api">
  <title>W32api関数</title>
  <titleabbrev>W32api関数</titleabbrev>

  <partintro>
   <para>
   </para>
  </partintro>


  <refentry id="function.w32api-set-call-method">
   <refnamediv>
    <refname>w32api_set_call_method</refname>
    <refpurpose>カレントメソッドの使用値を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>w32api_set_call_method</function></funcdef>
      <paramdef>int <parameter>method</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.w32api-register-function">
   <refnamediv>
    <refname>w32api_register_function</refname>
    <refpurpose>
     PHPを保持するライブラリから関数function_nameを登録する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>w32api_register_function</function></funcdef>
      <paramdef>string <parameter>libary</parameter></paramdef>
      <paramdef>string <parameter>function_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.w32api-invoke-function">
   <refnamediv>
    <refname>w32api_invoke_function</refname>
    <refpurpose>
     関数名の後ろで指定された引数を指定して関数funcnameを実行する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>w32api_invoke_function</function></funcdef>
      <paramdef>string <parameter>funcname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.w32api-deftype">
   <refnamediv>
    <refname>w32api_deftype</refname>
    <refpurpose>他のw32api_functionsで使用するために型を定義する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>w32api_deftype</function></funcdef>
      <paramdef>string <parameter>typename</parameter></paramdef>
      <paramdef>string <parameter>member1_type</parameter></paramdef>
      <paramdef>string <parameter>member1_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.w32api-init-dtype">
   <refnamediv>
    <refname>w32api_init_dtype</refname>
    <refpurpose>
     データ型typenameのインスタンスを作成し、val1, val2, 関数の値で埋
     める
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>w32api_init_dtype</function></funcdef>
      <paramdef>string <parameter>typename</parameter></paramdef>
      <paramdef>mixed <parameter>val1</parameter></paramdef>
      <paramdef>mixed <parameter>val2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

