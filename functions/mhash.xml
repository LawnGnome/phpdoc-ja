 <reference id="ref.mhash">
  <title>Mhash関数</title>
  <titleabbrev>mhash</titleabbrev>
  
  <partintro>
   <para>
    これらの関数は、<ulink url="&url.mhash;">mhash</ulink>と組み合わせ
    て動作することを前提としています。
   </para>
   <para>
    この関数は、mhashライブラリへのインターフェースです。
    mhashは、MD5,SHAl,GOSTや他の多くの方法といった広範なハッシュ
    アルゴリズムをサポートします。
   </para>
   <para>
    これを使用するには、mhashの配布ファイルを
    <ulink url="&url.mhash;">mhashのWebサイト</ulink>から
    ダウンロードし、その中のインストール用の指示に従って下さい。
    この拡張機能を使用するには、PHPに
    <option role="configure">--with-mhash</option>パラメータを付けて
    コンパイルする必要があります。
   </para>
   <para>
    mhash は、チェックサム, メッセージダイジェスト、メッセージ認証コー
    ド等を作成するために使用可能です。
   </para>
   <para>
    <example>
     <title>MD5ダイジェストとhmacを計算し、16進数で出力する</title>
     <programlisting role="php">
&lt;?php
$input = "what do ya want for nothing?";
$hash = mhash (MHASH_MD5, $input);
print "The hash is ".bin2hex ($hash)."\n&lt;br>";
$hash = mhash (MHASH_MD5, $input, "Jefe");
print "The hmac is ".bin2hex ($hash)."\n&lt;br>";
?&gt;
     </programlisting>
    </example>
    この例の出力は次のようになります。
    <programlisting>
The hash is d03cb659cbf9192dcd066272249f8412 
The hmac is 750c783e6ab0b503eaa86e310a5db738 
    </programlisting>
    サポートされるハッシュの完全なリストについては、mhashのドキュメントを
    参照下さい。
    PHPから特定のハッシュアルゴリズムにアクセスするには、「MHASH_ハッシュ名」
    を指定します。例えば、TIGERにアクセスするには、PHP定数 MHASH_TIGER
    を使用します。
   </para>
   <para>
    以下に現在mhashによりサポートされているハッシュの一覧を示します。
    mhashにサポートされているハッシュが、このリストにない場合は、
    このドキュメントが古いと仮定して下さい。
    <itemizedlist>
     <listitem>
      <simpara>
       MHASH_MD5
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_SHA1
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL256
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL192
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL160
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_RIPEMD160
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_GOST
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_TIGER
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32B
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </partintro>
  
  <refentry id="function.mhash-get-hash-name">
   <refnamediv>
    <refname>mhash_get_hash_name</refname>
    <refpurpose>指定したハッシュの名前を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash_get_hash_name</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mhash_get_hash_name</function>は指定した(hash)の
     名前を得るために使用されます。
    </para>
    <para>
     <function>mhash_get_hash_name</function>は引数としてハッシュIDをとり、
     ハッシュの名前を返します。そのハッシュが存在しない場合は、falseを
     返します。
    </para>
    <para>
     <example>
      <title><function>mhash_get_hash_name</function>の例</title>
      <programlisting>
&lt;?php
$hash = MHASH_MD5;

print mhash_get_hash_name ($hash);
?&gt;
      </programlisting>
     </example>
     上の例の出力は次のようになります。
     <programlisting>
MD5
     </programlisting>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mhash-get-block-size">
   <refnamediv>
    <refname>mhash_get_block_size</refname>
    <refpurpose>指定したハッシュのブロックサイズを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mhash_get_block_size</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mhash_get_block_size</function>は、
     指定した<parameter>hash</parameter>のブロックサイズを得るために
     使用します。
    </para>
    <para>
     <function>mhash_get_block_size</function>は、引数 
     <parameter>hash</parameter>をとり、サイズをバイト数で返します。
     <parameter>hash</parameter>が存在しない場合には、falseを返します。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mhash-count">
   <refnamediv>
    <refname>mhash_count</refname>
    <refpurpose>利用可能なハッシュIDの最大値を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mhash_count</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mhash_count</function> は、利用可能なハッシュIDの最大値を
     返します。ハッシュは、0からこのハッシュIDまでの数字となります。
    </para>
    <para>
     <example>
      <title>全ハッシュをループする</title>
      <programlisting role="php">
&lt;?php

$nr = mhash_count();

for ($i = 0; $i &lt;= $nr; $i++) {
    echo sprintf ("The blocksize of %s is %d\n", 
            mhash_get_hash_name ($i),
            mhash_get_block_size ($i));
}
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
    
  <refentry id="function.mhash">
   <refnamediv>
    <refname>mhash</refname>
    <refpurpose>ハッシュ値を計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>key</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mhash</function>は、<parameter>data</parameter>に
     <parameter>hash</parameter>で指定したハッシュ関数を適用し、
     (ダイジェストとも呼ばれる)ハッシュを返します。
     <parameter> key</parameter> が指定されていた場合、結果としてHMAC
     が返されます。HMACは、メッセージ認証時はキーに基づくハッシュ、また
     は指定したキーに基づく単なるメッセージダイジェストです。mhashでサ
     ポートされている全てのアルゴリズムがHMACモードで使用できるわけで
     はありません。エラーの場合はエラーが返されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mhash-keygen-s2k">
   <refnamediv>
    <refname>mhash_keygen_s2k</refname>
    <refpurpose>キーを生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash_keygen_s2k</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string <parameter>salt</parameter></paramdef>
      <paramdef>int <parameter>bytes</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mhash_keygen_s2k</function> は、指定したパスワードから
     長さが <parameter>bytes</parameter> のキーを生成します。これは、
     OpenPGP のドキュメント (RFC 2440) で規定された Salted S2K アルゴ
     リズムによります。このアルゴリズムは、キーを生成する際に指定した
     <parameter>hash</parameter> アルゴリズムを使用します。異なったキー
     を生成するためにキーを生成する度毎に <parameter>salt</parameter>
     は毎回異なり十分にランダムである必要があります。 キーを調べる際に
     salt を知っている必要があるため、キーを salt に付加するというのは
     良い発想です。salt は8バイト固定長で、これより少ない場合はゼロで
     埋められます。ユーザが指定したパスワードが暗号化アルゴリズムのキー
     として実際には使用できないことに注意して下さい。これは、ユーザは
     通常キーボードから入力可能なキーを選択するからです。これらのパス
     ワードは文字当たり6から7ビットのみ(もしくはそれ以下)を使用してい
     ます。このようなパスワードは、ユーザの指定したキーに(この関数のよ
     うな)ある種の変換を行うことが強く推奨されます。
    </para>
   </refsect1>
  </refentry>

 </reference> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
