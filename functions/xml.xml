<?xml version="1.0" encoding="utf-8"?>
 <reference id="ref.xml">
  <title>XML パーサ関数</title>
  <titleabbrev>XML</titleabbrev>

  <partintro>
   <sect1 id="xml.partintro">
    <title>導入</title>
    <sect2 id="xml.intro">
     <title>XML について</title>
     <para>
      XML (eXtensible Markup Language) は、Web における構造化された
      ドキュメント交換用のデータフォーマットです。XML は、World Wide
      Web consortium (W3C) で規定された規格です。XML に関する情報およ
      び関連する技術は、<ulink url="&url.xml;">&url.xml;</ulink>
      で参照することができます。
     </para>
    </sect2>

    <sect2 id="xml.install">
     <title>インストール</title>
     <para>
      この拡張機能は、<productname>expat</productname> を使用します。これは、
      <ulink url="&url.expat;">&url.expat;</ulink>にあります。expatに
      付属のMakefileは、デフォルトでライブラリを構築しません。これを行
      うmakeルールを次のように指定できます。
      <programlisting role="makefile">
libexpat.a: $(OBJS)
	ar -rc $@ $(OBJS)
	ranlib $@
      </programlisting>
      expat のソース RPM パッケージが 
      <ulink url="&url.expat.rpm;">&url.expat.rpm;</ulink> にあります。
     </para>
     <para>
      Apache-1.3.7 以降を使用している場合、すでに必要なexpatライブラリ
      はインストールされていることに注意して下さい。(パスを追加設定せず
      に) <option role="configure">--with-xml</option>を付けてPHPの
      configureを実行して下さい。これにより Apache に組み込まれたexpat
      ライブラリが自動的に使用されます。
     </para>
     <para>
      UNIXでは、<option role="configure">--with-xml</option>オプション
      を付けて<command>configure</command> を実行して下さい。
      <productname>expat</productname>ライブラリをコンパイラのパスが通っ
      た場所にインストールする必要があります。Apache 1.3.9 以降のモジュー
      ルとして PHP をコンパイルする場合、PHP は自動的に Apache にバン
      ドルされた<productname>expat</productname> ライブラリを使用しま
      す。expat を通常と異なる場所にインストールした場合は、configure
      を実行する前に環境変数に <envar>CPPFLAGS</envar> および
      <envar>LDFLAGS</envar>を設定する必要があるかもしれません。
     </para>
     <para>
      PHP を構築して下さい。<emphasis>そう!</emphasis> 再構築は、当然
      必要です。
     </para>
    </sect2>

    <sect2 id="xml.about">
     <title>この拡張機能について</title>
     <para>
      このPHP拡張機能は、James Clark氏の
      <productname>expat</productname>のサポートをPHPに付加します。
      このツールキットは、XML ドキュメントの構文解析をしますが、
      検証は行いません。3種類のソース
      <link linkend="xml.encoding">文字エンコーディング</link>、
      <literal>US-ASCII</literal>,
      <literal>ISO-8859-1</literal> ,<literal>UTF-8</literal>
      がPHPでサポートされます。<literal>UTF-16</literal> はサポートさ
      れません。
     </para>
     <para>
      この拡張機能は、<link
      linkend="function.xml-parser-create">XML パーサの作成</link>
      を行い、異なった XML イベントに関して<emphasis>ハンドラ
      </emphasis> を定義します。各XMLパーサーには、設定可能な小数の
      <link linkend="function.xml-parser-set-option">パラメータ</link> 
      もあります。
     </para>
     <para>
      XML イベントハンドラは次のように定義されます。
      <table>
       <title>サポートされる XML ハンドラ</title>
       <tgroup cols="2">
	<thead>
	 <row>
	  <entry>ハンドラ設定用の PHP 関数</entry>
	  <entry>イベントの説明</entry>
	 </row>
	</thead>
	<tbody>
	 <row>
	  <entry><function>xml_set_element_handler</function></entry>
	  <entry>
	   要素イベントは、XML パーサーが開始または終了タグに出会うたび
	   に発行されます。開始タグと終了タグについて別のハンドラがあり
	   ます。
	  </entry>
	 </row>
	 <row>
	  <entry>
	   <function>xml_set_character_data_handler</function>
	  </entry>
	  <entry>
	   文字データは、タグの間の空白を含めて XML ドキュメントにおけ
	   るほぼ全ての非マークアップ部分の内容です。XML パーサーは、
	   空白を加えたり削除したりしないことに注意して下さい。空白が
	   意味を有するかどうかを決めるのは、アプリケーション側の責任
	   です。
	  </entry>
	 </row>
	 <row>
	  <entry>
	   <function>xml_set_processing_instruction_handler</function>
	  </entry>
	  <entry>
	   PHP プログラマは、既に処理用命令 (PI) に既に慣れているに違
	   いありません。&lt;?php ?&gt; は処理用命令であり、この場合、
	   <replaceable>php</replaceable> は "PI ターゲット"と呼ばれます。
	   これらの処理はアプリケーション依存ですが、全ての PI ターゲッ
	   トが "XML" から始まることだけは、規定されています。
	  </entry>
	 </row>
	 <row>
	  <entry>
	   <function>xml_set_default_handler</function>
	  </entry>
	  <entry>
	   別のハンドラでしないことをデフォルトのハンドラで行います。
	   XML およびドキュメント型の宣言のようなことをデフォルトハンドラで
	   行います。
	  </entry>
	 </row>
	 <row>
	  <entry>
	   <function>xml_set_unparsed_entity_decl_handler</function>
	  </entry>
	  <entry>
	   このハンドラは、処理されない (NDATA) エンティティの宣言用に
	   コールされます。
	  </entry>
	 </row>
	 <row>
	  <entry>
	   <function>xml_set_notation_decl_handler</function>
	  </entry>
	  <entry>
	   このハンドラは、表記の宣言用にコールされます。
	  </entry>
	 </row>
	 <row>
	  <entry>
	   <function>xml_set_external_entity_ref_handler</function>
	  </entry>
	  <entry>
	   このハンドラは、XML パーサーが外部処理された通常のエンティティ
	   への参照を見つけた際にコールされます。これは、例えば、ファ
	   イルまたは URL への参照とすることが可能です。例としては、
	   <link linkend="example.xml-external-entity">外部エンティティ
	   の例</link> を参照下さい。
	  </entry>
	 </row>
	</tbody>
       </tgroup>
      </table>
     </para>
    </sect2>

    <sect2 id="xml.case-folding">
     <title>大文字変換(Case Folding)</title>
     <para>
      要素ハンドラ関数は、その要素に<glossterm>大文字小文字を変換する
      (case-folded)</glossterm>の名前をつけることができます。
      大文字変換(case-folding) は、XML標準により "大文字でないものは等
      価な大文字に置換される一連の文字に適用されるプロセス" として定義
      されています。言い替えると、XML に関しては単に大文字変換は大文字
      にすることを意味します。
     </para>
     <para>
      デフォルトで、ハンドラ関数に渡される全ての要素名は、大文字変換さ
      れます。この動作は、<function>xml_parser_get_option</function>
      および<function>xml_parser_set_option</function> 関数でXMLパーサー
      毎にそれぞれ問い合わせ、制御することが可能です。
     </para>
    </sect2>

    <sect2 id="xml.error-codes">
     <title>エラーコード</title>
     <para>
      (<function>xml_parse</function> により返されるものとして)
      XMLエラーコードとして次のような定数が定義されています。:
      <simplelist>
       <member>XML_ERROR_NONE</member>
       <member>XML_ERROR_NO_MEMORY</member>
       <member>XML_ERROR_SYNTAX</member>
       <member>XML_ERROR_NO_ELEMENTS</member>
       <member>XML_ERROR_INVALID_TOKEN</member>
       <member>XML_ERROR_UNCLOSED_TOKEN</member>
       <member>XML_ERROR_PARTIAL_CHAR</member>
       <member>XML_ERROR_TAG_MISMATCH</member>
       <member>XML_ERROR_DUPLICATE_ATTRIBUTE</member>
       <member>XML_ERROR_JUNK_AFTER_DOC_ELEMENT</member>
       <member>XML_ERROR_PARAM_ENTITY_REF</member>
       <member>XML_ERROR_UNDEFINED_ENTITY</member>
       <member>XML_ERROR_RECURSIVE_ENTITY_REF</member>
       <member>XML_ERROR_ASYNC_ENTITY</member>
       <member>XML_ERROR_BAD_CHAR_REF</member>
       <member>XML_ERROR_BINARY_ENTITY_REF</member>
       <member>XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF</member>
       <member>XML_ERROR_MISPLACED_XML_PI</member>
       <member>XML_ERROR_UNKNOWN_ENCODING</member>
       <member>XML_ERROR_INCORRECT_ENCODING</member>
       <member>XML_ERROR_UNCLOSED_CDATA_SECTION</member>
       <member>XML_ERROR_EXTERNAL_ENTITY_HANDLING</member>
      </simplelist>
     </para>
    </sect2>

    <sect2 id="xml.encoding">
     <title>文字エンコーディング</title>
     <para>
      PHPのXML拡張機能は、異なった<glossterm>文字エンコーディング
      </glossterm>を通じて<ulink url="&url.unicode;">Unicode</ulink> 
      文字セットをサポートします。<glossterm>ソースエンコーディング
      </glossterm>および<glossterm>ターゲットエンコーディング
      </glossterm>という2種類の文字エンコーディングがあります。
      PHP におけるドキュメントの内部表現は、常に
      <literal>UTF-8</literal>でエンコードされます。
     </para>
     <para>
      ソースエンコーディングは、XMLドキュメントが 
      <link linkend="function.xml-parse">構文解析</link>された際に行わ
      れます。<link linkend="function.xml-parser-create">XML パーサの
      作成</link>を行う際に、ソースエンコードを指定することができます。
       (このエンコーディングは、その XML パーサーが存在する間、後で変更す
      ることはできません)サポートされるソースエンコーディングは、
      <literal>ISO-8859-1</literal>, <literal>US-ASCII</literal> ,
      <literal>UTF-8</literal> です。前の二つは、シングルバイトエンコー
      ディングです。これは、各文字がシングルバイトで表現されることを意
      味します。<literal>UTF-8</literal> は、1から4バイトの可変ビット
      数(最大21ビット)で構成された文字をエンコードすることが可能です。
      PHP で用いられるデフォルトのソースエンコーディングは、
      <literal>ISO-8859-1</literal>です。
     </para>
     <para>
      ターゲットエンコーディングは、PHPがデータをXMLハンドラ関数に
      渡す時に行われます。あるXMLパーサが作成された際、ターゲットエン
      コーディングは、ソースエンコーディングと同様に設定されます。
      しかし、これは、いつでも変更可能です。ターゲットエンコーディング
      は、タグ名と同様に文字データに作用し、命令を処理します。
     </para>
     <para>
      XML パーサがソースエンコーディングが表現できる範囲の外側の文字に
      出会った場合、エラーが返されます。
     </para>
     <para>
      解釈するXMLドキュメントにおいてPHPが文字に出会った際に、選択した
      ターゲットエンコーディングで表現できない文字に出会った場合、問題
      の文字は "降格" されます。現在、このことはこのような文字が疑問符
      で置換されることを意味します。
     </para>
    </sect2>
   </sect1>

   <sect1 id="xml.examples">
    <title>いくつかの例</title>
    <para>
     以下にXMLドキュメントを処理するPHPスクリプトの例をいくつか示しま
     す。
    </para>
    <sect2 id="example.xml-structure">
     <title>XML エレメント構造の例</title>
     <para>
      この最初の例は、あるドキュメント中のstart エレメントの構造をイン
      デントを付けて表示します。
      <example>
       <title>XML エレメント構造を表示</title>
       <programlisting role="php">
$file = "data.xml";
$depth = array();

function startElement($parser, $name, $attrs){
    global $depth;
    for ($i = 0; $i &lt; $depth[$parser]; $i++) {
        print "  ";
    }
    print "$name\n";
    $depth[$parser]++;
}

function endElement($parser, $name){
    global $depth;
    $depth[$parser]--;
}

$xml_parser = xml_parser_create();
xml_set_element_handler($xml_parser, "startElement", "endElement");
if (!($fp = fopen($file, "r"))) {
    die("could not open XML input");
}
while ($data = fread($fp, 4096)) {
    if (!xml_parse($xml_parser, $data, feof($fp))) {
        die(sprintf("XML error: %s at line %d",
                    xml_error_string(xml_get_error_code($xml_parser)),
                    xml_get_current_line_number($xml_parser)));
    }
}
xml_parser_free($xml_parser);

       </programlisting>
      </example>
     </para>
    </sect2>

    <sect2 id="example.xml-map-tags">
     <title>XMLタグのマッピングの例</title>
     <para>
      <example>
       <title>XMLをHTMLにマップする</title>
       <para>
	この例は、XMLドキュメントのタグを直接HTMLタグにマップします。
	"map array" にないエレメントは無視されます。もちろん、この例は、
	特定の XML ドキュメント型を有する場合のみ動作します。
	<programlisting role="php">
$file = "data.xml";
$map_array = array(
    "BOLD"     =&gt; "B",
    "EMPHASIS" =&gt; "I",
    "LITERAL"  =&gt; "TT"
);

function startElement($parser, $name, $attrs){
    global $map_array;
    if ($htmltag = $map_array[$name]) {
        print "&lt;$htmltag&gt;";
    }
}

 function endElement($parser, $name){
    global $map_array;
    if ($htmltag = $map_array[$name]) {
        print "&lt;/$htmltag&gt;";
    }
}

function characterData($parser, $data){
    print $data;
}

$xml_parser = xml_parser_create();
// $map_array の中のタグをみつけられるように大文字変換を行う
xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, true);
xml_set_element_handler($xml_parser, "startElement", "endElement");
xml_set_character_data_handler($xml_parser, "characterData");
if (!($fp = fopen($file, "r"))) {
    die("could not open XML input");
}
while ($data = fread($fp, 4096)) {
    if (!xml_parse($xml_parser, $data, feof($fp))) {
        die(sprintf("XML error: %s at line %d",
                    xml_error_string(xml_get_error_code($xml_parser)),
                    xml_get_current_line_number($xml_parser)));
    }
}
xml_parser_free($xml_parser);
	</programlisting>
       </para>
      </example>
     </para>
    </sect2>

    <sect2 id="example.xml-external-entity">
     <title>XML 外部エンティティの例</title>
     <para>
      この例は、XML コードに焦点を当てます。この例は、他のドキュメント
      をインクルードし処理するための外部エンティティリファレンスのハン
      ドラの使用法およびPIの処理方法、PIが含むコードに関する"信頼度"
      を定義する手段を説明します。
     </para>
     <para>
      この例で使用される XML ドキュメントは、例題ファイル
      (<filename>xmltest.xml</filename> および
      <filename>xmltest2.xml</filename>) にあります。
     </para>
     <para>
      <example>
       <title>外部エンティティの例</title>
       <programlisting role="php">
$file = "xmltest.xml";

function trustedFile($file){
    // 自己所有のローカルファイルのみを信頼する
    if (!eregi("^([a-z]+)://", $file) &amp;&amp; fileowner($file) == getmyuid()) {
        return true;
    }
    return false;
}

function startElement($parser, $name, $attribs){
    print "&amp;lt;&lt;font color=\"&num;0000cc\"&gt;$name&lt;/font&gt;";
    if (sizeof($attribs)) {
        while (list($k, $v) = each($attribs)) {
            print " &lt;font color=\"&num;009900\"&gt;$k&lt;/font&gt;=\"&lt;font
	           color=\"&num;990000\"&gt;$v&lt;/font&gt;\"";
        }
    }
    print "&amp;gt;";
}

function endElement($parser, $name){
    print "&amp;lt;/&lt;font color=\"&num;0000cc\"&gt;$name&lt;/font&gt;&amp;gt;";
}

function characterData($parser, $data){
    print "&lt;b&gt;$data&lt;/b&gt;";
}

function PIHandler($parser, $target, $data){
    switch (strtolower($target)) {
        case "php":
            global $parser_file;
            // 処理されるドキュメントが "信頼されている" 場合、
	    // PHP コードをその内部で実行します。
	    // そうでない場合、そのコードが代わりに表示されます。
            if (trustedFile($parser_file[$parser])) {
                eval($data);
            } else {
                printf("Untrusted PHP code: &lt;i&gt;%s&lt;/i&gt;", htmlspecialchars($data));
            }
            break;
    }
}

function defaultHandler($parser, $data){
    if (substr($data, 0, 1) == "&amp;" &amp;&amp; substr($data, -1, 1) == ";") {
        printf('&lt;font color="&num;aa00aa"&gt;%s&lt;/font&gt;', htmlspecialchars($data));
    } else {
        printf('&lt;font size="-1"&gt;%s&lt;/font&gt;', htmlspecialchars($data));
    }
}

function externalEntityRefHandler($parser, $openEntityNames, $base, $systemId,
                                  $publicId){
    if ($systemId) {
        if (!list($parser, $fp) = new_xml_parser($systemId)) {
            printf("Could not open entity %s at %s\n", $openEntityNames,
                   $systemId);
            return false;
        }
        while ($data = fread($fp, 4096)) {
            if (!xml_parse($parser, $data, feof($fp))) {
                printf("XML error: %s at line %d while parsing entity %s\n",
                       xml_error_string(xml_get_error_code($parser)),
                       xml_get_current_line_number($parser), $openEntityNames);
                xml_parser_free($parser);
                return false;
            }
        }
        xml_parser_free($parser);
        return true;
    }
    return false;
}


function new_xml_parser($file) {
    global $parser_file;

    $xml_parser = xml_parser_create();
    xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, 1);
    xml_set_element_handler($xml_parser, "startElement", "endElement");
    xml_set_character_data_handler($xml_parser, "characterData");
    xml_set_processing_instruction_handler($xml_parser, "PIHandler");
    xml_set_default_handler($xml_parser, "defaultHandler");
    xml_set_external_entity_ref_handler($xml_parser, "externalEntityRefHandler");
    
    if (!($fp = @fopen($file, "r"))) {
        return false;
    }
    if (!is_array($parser_file)) {
        settype($parser_file, "array");
    }
    $parser_file[$xml_parser] = $file;
    return array($xml_parser, $fp);
}

if (!(list($xml_parser, $fp) = new_xml_parser($file))) {
    die("could not open XML input");
}

print "&lt;pre&gt;";
while ($data = fread($fp, 4096)) {
    if (!xml_parse($xml_parser, $data, feof($fp))) {
        die(sprintf("XML error: %s at line %d\n",
                    xml_error_string(xml_get_error_code($xml_parser)),
                    xml_get_current_line_number($xml_parser)));
    }
}
print "&lt;/pre&gt;";
print "parse complete\n";
xml_parser_free($xml_parser);

?>

        </programlisting>
      </example>
     </para>
     <para id="example.xml-xmltest.xml">
      <example>
       <title>xmltest.xml</title>
       <programlisting role="xml">
&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE chapter SYSTEM "/just/a/test.dtd" [
&lt;!ENTITY plainEntity "FOO entity"&gt;
&lt;!ENTITY systemEntity SYSTEM "xmltest2.xml"&gt;
]&gt;
&lt;chapter&gt;
 &lt;TITLE&gt;Title &amp;plainEntity;&lt;/TITLE&gt;
 &lt;para&gt;
  &lt;informaltable&gt;
   &lt;tgroup cols="3"&gt;
    &lt;tbody&gt;
     &lt;row&gt;&lt;entry&gt;a1&lt;/entry&gt;&lt;entry morerows="1"&gt;b1&lt;/entry&gt;&lt;entry&gt;c1&lt;/entry&gt;&lt;/row&gt;
     &lt;row%gt;&lt;entry&gt;a2&lt;/entry&gt;&lt;entry&gt;c2&lt;/entry&gt;&lt;/row&gt;
     &lt;row&gt;&lt;entry&gt;a3&lt;/entry&gt;&lt;entry&gt;b3&lt;/entry&gt;&lt;entry&gt;c3&lt;/entry&gt;&lt;/row&gt;
    &lt;/tbody&gt;
   &lt;/tgroup&gt;
  &lt;/informaltable&gt;
 &lt;/para&gt;
 &amp;systemEntity;
 &lt;sect1 id="about"&gt;
  &lt;title&gt;About this Document&lt;/title&gt;
  &lt;para&gt;
   &lt;!-- this is a comment --&gt;
   &lt;?php print 'Hi!  This is PHP version '.phpversion(); ?&gt;
  &lt;/para&gt;
 &lt;/sect1&gt;
&lt;/chapter&gt;
       </programlisting>
      </example>
     </para>
     <para id="example.xml-xmltest2.xml">
      This file is included from <filename>xmltest.xml</filename>:
      <example>
       <title>xmltest2.xml</title>
       <programlisting role="xml">
&lt;?xml version="1.0"?>
&lt;!DOCTYPE foo [
&lt;!ENTITY testEnt "test entity">
]>
&lt;foo>
 &lt;element attrib="value"/>
 &amp;testEnt;
 &lt;?php print "This is some more PHP code being executed."; ?>
&lt;/foo>
       </programlisting>
      </example>
     </para>
    </sect2>
   </sect1>
  </partintro>

  <refentry id="function.xml-parser-create">
   <refnamediv>
    <refname>xml_parser_create</refname>
    <refpurpose>XML パーサを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>xml_parser_create</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>encoding</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>encoding</parameter> (optional)</term>
       <listitem>
	<para>
	 パーサが使用するエンコーディング。次の文字エンコーディングが
	 サポートされます。
	 <simplelist>
	  <member><literal>ISO-8859-1</literal> (デフォルト)</member>
	  <member><literal>US-ASCII</literal></member>
	  <member><literal>UTF-8</literal></member>
	 </simplelist>
	</para>
       </listitem>
      </varlistentry>
     </variablelist>
     この関数は、XML パーサーを作成し、他の XML 関数が使用するハンドル
     を返します。失敗した場合、&false; を返します。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.xml-set-object">
   <refnamediv>
    <refname>xml_set_object</refname>
    <refpurpose>オブジェクト内部でXMLパーサを使用する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>xml_set_object</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>object <parameter>&amp;object</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<parameter>object</parameter>の内部から
     <parameter>parser</parameter> を使用可能にします。
     <function>xml_set_element_handler</function> 等により設定される
     全てのコールバック関数は、<parameter>object</parameter>
     のメソッドであると仮定されます。
    </para>
    <programlisting role="php">
&lt;?php
class xml  {
var $parser;

function xml() {
    $this->parser = xml_parser_create();
    xml_set_object($this->parser,&amp;$this);
    xml_set_element_handler($this->parser,"tag_open","tag_close");
    xml_set_character_data_handler($this->parser,"cdata");
}
 
function parse($data) { 
    xml_parse($this->parser,$data);
}
 
function tag_open($parser,$tag,$attributes) { 
    var_dump($parser,$tag,$attributes); 
}
 
function cdata($parser,$cdata) { 
     var_dump($parser,$cdata);
 }
 
function tag_close($parser,$tag) { 
    var_dump($parser,$tag); 
}
 
} // クラス xmlの終わり
 
$xml_parser = new xml();
$xml_parser->parse("&lt;A ID=\"hallo\">PHP&lt;/A>");
?>
    </programlisting>
   </refsect1>
  </refentry>

  <refentry id="function.xml-set-element-handler">
   <refnamediv>
    <refname>xml_set_element_handler</refname>
    <refpurpose>start および end 要素のハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_element_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string 
       <parameter>startElementHandler</parameter>
      </paramdef>
      <paramdef>string 
       <parameter>endElementHandler</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XMLパーサー<parameter>parser</parameter>の要素ハンドラ関数を設定
     します。<parameter>startElementHandler</parameter> および
     <parameter>endElementHandler</parameter>は、
     <function>xml_parse</function>が<parameter>parser</parameter>をコー
     ルした際に存在している必要がある関数の名前を有する文字列です。
    </para>
    <para>
     <parameter>startElementHandler</parameter> という名前の関数は、
     次の3つのパラメータをとります。
     <funcsynopsis>
      <funcprototype>
       <funcdef><replaceable>startElementHandler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>name</parameter></paramdef>
       <paramdef>string <parameter>attribs</parameter></paramdef>
      </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term> 
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable>はハンドラ
	 をコールする XML パーサーへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
	<simpara>
	 2番目のパラメータ、<parameter>name</parameter> は、
	 このハンドラがコールされた要素の名前を有しています。
	 <link linkend="xml.case-folding">大文字変換</link> がこのパーサー
	 に関して有効な場合、要素の名前は大文字になります。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>attribs</parameter></term>
       <listitem>
	<simpara>
	 第3のパラメータ、<parameter>attribs</parameter>はその要素の
	 (全)属性に関する連想配列です。この配列のキーは属性の名前であ
	 り、値は属性の値です。属性の名前は、要素名と同様に <link
	 linkend="xml.case-folding">大文字変換</link> となります。
	 属性の値は、大文字変換 <emphasis>されません</emphasis>。
	</simpara> 
	<simpara>
	 この属性は、<function>each</function> を使用して
	 <parameter>attribs</parameter> を順次アクセスすることにより
	 元の順序で取得することができます。配列の最初のキーは最初の属
	 性であり、後も同様です。
	</simpara> 
       </listitem>
      </varlistentry>
     </variablelist>
    </para> 
    <para>
     <parameter>endElementHandler</parameter>という名前の関数は、2つの
     パラメータをとります。
     <funcsynopsis>
      <funcprototype>
       <funcdef><replaceable>endElementHandler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>name</parameter></paramdef>
      </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は
	 ハンドラをコールする XML パーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
	 2番目のパラメータ、<parameter>name</parameter> はこのハンドラ
	 がコールされた要素の名前を有しています。このパーサにおいて
	 <link linkend="xml.case-folding">大文字変換</link> 
	 が有効な場合、要素名は大文字になります。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     あるハンドラ関数が空の文字列または &false;
     に設定されている場合、そのハンドラは無効です。
    </para>
    <para>
     ハンドラが設定されている場合に&true;、
     <parameter>parser</parameter>がパーサでない場合に
     &false;が返されます。
    </para>
    <para>
     オブジェクト/メソッドのハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function> を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-set-character-data-handler">
   <refnamediv>
    <refname>xml_set_character_data_handler</refname>
    <refpurpose>文字データハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_character_data_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XMLパーサ<parameter>parser</parameter>の文字データ用ハンドラ関数
     を設定します。<parameter>handler</parameter> は、
     <parameter>parser</parameter>に関して
     <function>xml_parse</function>がコールされた際に必要な関数の名前
     を有する文字列です。
    </para>
    <para>
     <parameter>handler</parameter> という名前の関数は、次の 2 つのパ
     ラメータをとります。
     <funcsynopsis>
      <funcprototype>
       <funcdef><replaceable>handler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は
	 ハンドラをコールする XML パーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>data</parameter></term>
       <listitem>
	<simpara>
	 2番目のパラメータ、<parameter>data</parameter> は
	 文字データを文字列として有しています。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     あるハンドラ関数が空の文字列または、
     &false; に設定されている場合、そのハンドラ
     無効です。
    </para>
    <para>
     ハンドラが設定されている場合に&true;、<parameter>parser</parameter>
     がパーサでない場合に&false;が返されます。
    </para>
    <para>
     オブジェクト/メソッドのハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function> を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-set-processing-instruction-handler">
   <refnamediv>
    <refname>xml_set_processing_instruction_handler</refname>
    <refpurpose>
     処理命令 (PI) 用ハンドラを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_processing_instruction_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XML パーサ <parameter>parser</parameter> の処理命令 (PI) 用ハンド
     ラ関数を設定しますり     <parameter>handler</parameter>は、<parameter>parser</parameter>
     に関して<function>xml_parse</function>がコールされた際に必要な関
     数の名前を有する文字列です。
    </para>
    <para>
    処理命令は、次のフォーマットを有しています。
     <informalexample>
      <programlisting>&lt;?
       <replaceable>target</replaceable> 
       <replaceable>data</replaceable>?>
      </programlisting>
     </informalexample>
     このようなタグに PHP コードを入れることが可能ですが、一つの制約に
     注意して下さい。XML PIにおいて、PI終了タグ
     (<literal>?&gt;</literal>)は引用符で括ることができません。
     このため、この文字の並びを XML ドキュメント中にPIにより埋め込んだ
     PHPコードの中で使用することはできません。これを使用した場合、残り
     の PHP コードは、"真の" PI終了タグと同じく、文字データとして処理
     されます。
    </para>
    <para>
     <parameter>handler</parameter> という名前の関数は、次の3 つの
     パラメータを引数とします。
     <funcsynopsis>
     <funcprototype>
       <funcdef><replaceable>handler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>target</parameter></paramdef>
       <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は
	 ハンドラをコールする XML パーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>target</parameter></term>
       <listitem>
	<simpara>
	 第2のパラメータ、<parameter>target</parameter> は
	 PI のターゲットを有しています。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>data</parameter></term>
       <listitem>
	<simpara>
	 第3のパラメータ、<parameter>data</parameter> は PI データを
	 有しています。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     あるハンドラ関数が空の文字列または、&false; に設
     定されている場合、そのハンドラ無効です。
    </para>
    <para>
     ハンドラが設定されている場合に&true;、<parameter>parser</parameter>
     がパーサでない場合に&false;が返されます。
    </para>
    <para>
     オブジェクト/メソッドのハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.xml-set-default-handler">
   <refnamediv>
    <refname>xml_set_default_handler</refname>
    <refpurpose>デフォルトのハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_default_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XMLパーサ <parameter>parser</parameter>のデフォルトのハンドラ関数
     を設定します。<parameter>handler</parameter> は、
     <parameter>parser</parameter>に関して<function>xml_parse</function> 
     がコールされた際に必要な関数の名前を有する文字列です。
    </para>
    <para>
     <parameter>handler</parameter> という名前の関数は、次の 2つの
     パラメータをとる必要があります。
     <funcsynopsis>
     <funcprototype>
       <funcdef><replaceable>handler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は、
	 ハンドラをコールしたXMLパーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>data</parameter></term>
       <listitem>
	<simpara>
	 2番目のパラメータ、<parameter>data</parameter> は文字データを
	 有しています。これは、XML 宣言またはドキュメント型宣言、エンティティ、
	 他にハンドラがない別のデータとすることが可能です。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     あるハンドラ関数が空の文字列または、&false;に設
     定されている場合、そのハンドラ無効です。
    </para>
    <para>
     ハンドラが設定されている場合に&true;、<parameter>parser</parameter>
     がパーサでない場合に&false;が返されます。
    </para>
    <para>
     オブジェクト/メソッドのハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-set-unparsed-entity-decl-handler">
   <refnamediv>
    <refname>xml_set_unparsed_entity_decl_handler</refname>
    <refpurpose>
     処理されないエンティティ宣言用ハンドラを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_unparsed_entity_decl_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XML パーサ <parameter>parser</parameter> の処理されないエンティティ
     宣言用ハンドラ関数を設定します。<parameter>handler</parameter>は、
     <parameter>parser</parameter> に関して <function>xml_parse</function> 
     がコールされた際に必要な関数の名前を有する文字列です。
    </para>
    <para>
     このハンドラは、XML パーサが次のようなNDATA宣言を有する外部エンティ
     ティ宣言を処理する際にコールされます。
     <programlisting role="xml">
&lt;!ENTITY <parameter>name</parameter> {<parameter>publicId</parameter> | <parameter>systemId</parameter>} 
        NDATA <parameter>notationName</parameter>&gt;
     </programlisting>
    </para>
    <para>
     外部エンティティ宣言の記述用定義に関しては、
     <ulink url="&url.rec-xml;&num;sec-external-ent">XML 1.0 仕様の 4.2.2
     節</ulink>を参照下さい。
    </para>
    <para>     
     <parameter>handler</parameter> という名前の関数は次のような
     6つのパラメータをとります。
     <funcsynopsis>
     <funcprototype>
       <funcdef><replaceable>handler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>entityName</parameter></paramdef>
       <paramdef>string <parameter>base</parameter></paramdef>
       <paramdef>string <parameter>systemId</parameter></paramdef>
       <paramdef>string <parameter>publicId</parameter></paramdef>
       <paramdef>string <parameter>notationName</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は
	 ハンドラをコールする XML パーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>entityName</parameter></term>
       <listitem>
	<simpara>
	 宣言しようとするエンティティの名前
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>base</parameter></term>
       <listitem>
	<simpara>
	 外部エンティティのシステムID(<parameter>systemId</parameter>)
	 を取得する際の基本となります。現在、このパラメータは、常に空
	 の文字列に設定されています。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>systemId</parameter></term>
       <listitem>
	<simpara>
	 外部エンティティのシステム ID。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>publicId</parameter></term>
       <listitem>
	<simpara>
	 外部エンティティのパブリック ID。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>notationName</parameter></term>
       <listitem>
	<simpara>
	 このエンティティの表記法の名前
	 (<function>xml_set_notation_decl_handler</function> を参照下
	 さい)
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     あるハンドラ関数が空の文字列または &false;に設定
     されていた場合、そのハンドラは無効となります。
    </para>
    <para>
     ハンドラが設定されている場合に&true;、<parameter>parser</parameter>
     がパーサでない場合に&false;を返します。
    </para>
    <para>
     オブジェクト/メソッド用ハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-set-notation-decl-handler">
   <refnamediv>
    <refname>xml_set_notation_decl_handler</refname>
    <refpurpose>表記法宣言ハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_notation_decl_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XMLパーサ<parameter>parser</parameter>の表記法宣言用ハンドラ関数
     を設定します。<parameter>handler</parameter> は、
     <parameter>parser</parameter>に関して<function>xml_parse</function> 
     がコールされた際に必要な関数の名前を有する文字列です。
    </para>
    <para>
     表記法の宣言は、ドキュメントの DTD の部分であり、次のようなフォー
     マットを有しています。
     <programlisting role="xml"
      >&lt;!NOTATION <parameter>name</parameter
       > {<parameter>systemId</parameter
       > | <parameter>publicId</parameter
       >}&gt;</programlisting>
     表記法宣言の定義に関しては、
     <ulink url="&url.rec-xml;&num;Notations">XML 1.0 仕様の 4.7 節</ulink> 
     を参照下さい。
    </para>
    <para>
     <parameter>handler</parameter> という名前の関数は、5つのパラメータを
     とります。
     <funcsynopsis>
     <funcprototype>
       <funcdef><replaceable>handler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>notationName</parameter></paramdef>
       <paramdef>string <parameter>base</parameter></paramdef>
       <paramdef>string <parameter>systemId</parameter></paramdef>
       <paramdef>string <parameter>publicId</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は
	 ハンドラをコールする XML パーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>notationName</parameter></term>
       <listitem>
	<simpara>
	 これは、前記の表記用フォーマットに示すように表記法の
	 <parameter>名前</parameter> です。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>base</parameter></term>
       <listitem>
	<simpara>
	 外部エンティティのシステムID(<parameter>systemId</parameter>)を
	 取得する際の基本となります。現在、このパラメータは、常に空の文
	 字列に設定されています。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>systemId</parameter></term>
       <listitem>
	<simpara>
	 外部表記用宣言のシステム ID
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>publicId</parameter></term>
       <listitem>
	<simpara>
	 外部表記用宣言のパブリック ID
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     あるホンドラ関数が空の文字列または&false;に設
     定されていた場合、そのハンドラは無効となります。
    </para>
    <para>
     ハンドラが設定されている場合に&true;、<parameter>parser</parameter>
     がパーサでない場合に&false;を返します。
    </para>
    <para>
     オブジェクト/メソッド用ハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-set-external-entity-ref-handler">
   <refnamediv>
    <refname>xml_set_external_entity_ref_handler</refname>
    <refpurpose>外部リファレンスハンドラを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_set_external_entity_ref_handler</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     XML パーサ <parameter>parser</parameter> の表記宣言用ハンドラ関数
     を設定します。<parameter>handler</parameter> は、
     <parameter>parser</parameter> に関して <function>xml_parse</function> 
     がコールされた際に必要な関数の名前を有する文字列です。
    </para>
    <para>
     <parameter>handler</parameter> という名前の関数は 5つのパラメータをとり、
     整数値を返す必要があります。ハンドラから返された値が&false;の場合
     (これは値が返されない場合に相当します)、XML パーサは処理を中断し、
     <function>xml_get_error_code</function> は <systemitem
     class="constant">XML_ERROR_EXTERNAL_ENTITY_HANDLING</systemitem>
     を返します。
     <funcsynopsis>
      <funcprototype>
       <funcdef>int <replaceable>handler</replaceable></funcdef>
       <paramdef>int <parameter>parser</parameter></paramdef>
       <paramdef>string <parameter>openEntityNames</parameter></paramdef>
       <paramdef>string <parameter>base</parameter></paramdef>
       <paramdef>string <parameter>systemId</parameter></paramdef>
       <paramdef>string <parameter>publicId</parameter></paramdef>
      </funcprototype>
     </funcsynopsis>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 最初のパラメータ、<replaceable>parser</replaceable> は
	 ハンドラをコールする XML パーサへのリファレンスです。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>openEntityNames</parameter></term>
       <listitem>
	<simpara>
	 2番目のパラメータ、<parameter>openEntityNames</parameter> は、
	 エンティティの処理を行うためにオープンされたエンティティの
	 名前のスペース区切りのリストです。
	 (参照されるエンティティの名前を含みます)
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>base</parameter></term>
       <listitem>
	<simpara>
	 これは外部エンティティのシステム
	 ID(<parameter>systemid</parameter>)を有しています。
	 現在このパラメータは常に空の文字列に設定されています。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>systemId</parameter></term>
       <listitem>
	<simpara>
	 4番目のパラメータ、<parameter>systemId</parameter> は
	 エンティティ宣言で指定されたシステム ID です。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>publicId</parameter></term>
       <listitem>
	<simpara>
	 5番目のパラメータ、<parameter>publicId</parameter>はエンティ
	 ティ宣言で指定されたパブリック IDまたは指定されない場合は空の
	 文字列です。パブリック ID の中の空白文字は、XML 仕様で規定さ
	 れた正規化を行っています。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     ハンドラ関数は、空の文字列またはハンドラが無効の場合
     &false; に設定します。
    </para>
    <para>
     ハンドラが設定されている場合、&true;が返され、
     <parameter>parser</parameter> がパーサでない場合に&false;が
     返されます。
    </para>
    <para>
     オブジェクト/メソッド用ハンドラは現在サポートされていません。
     オブジェクト内でのXMLパーサの使用法については、
     <function>xml_set_object</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-parse">
   <refnamediv>
    <refname>xml_parse</refname>
    <refpurpose>XML ドキュメントの処理を開始する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>xml_parse</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>isFinal</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 使用する XML パーサへのリファレンス
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>data</parameter></term>
       <listitem>
	<simpara>
	 処理するデータ。ドキュメントは、
	 <parameter>isFinal</parameter> パラメータが設定され、
	 最後のデータが処理され &true; になるまで、新規のデータに関して
	 複数回 <function>xml_parse</function> をコールすることにより、
	 部分毎で処理することが可能です。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>isFinal</parameter> (optional)</term>
       <listitem>
	<simpara>
	 &true;が設定された場合、<parameter>data</parameter> は
	 この処理の間に送られた最後のデータということになります。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     XML ドキュメントが処理された際、必要な回数だけ設定されたイベント
     のハンドラがコールされます。この後、この関数は&true;または&false;を返
     します。
    </para>
    <para>
     処理が成功した場合に&true;が返され、成功しなかった場合、または、
     <parameter>parser</parameter> が有効なパーサを参照できなかった場
     合に&false;が返されます。処理が成功しなかった場合、エラー情報を
     <function>xml_get_error_code</function>,
     <function>xml_error_string</function>,
     <function>xml_get_current_line_number</function>,
     <function>xml_get_current_column_number</function>,
     <function>xml_get_current_byte_index</function>
     により取得可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-get-error-code">
   <refnamediv>
    <refname>xml_get_error_code</refname>
    <refpurpose>XML パーサのエラーコードを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>xml_get_error_code</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 エラーコードを得る XML パーサへのリファレンス。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサを参照していない
     場合に&false;を返します。その他の場合、
     <link linkend="xml.error-codes">エラーコードセクション</link> に
     一覧が示されたエラーコードを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-error-string">
   <refnamediv>
    <refname>xml_error_string</refname>
    <refpurpose>XML パーサのエラー文字列を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>xml_error_string</function></funcdef>
      <paramdef>int <parameter>code</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>code</parameter></term>
       <listitem>
	<simpara>
	 <function>xml_get_error_code</function>からのエラーコード。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     エラーコード <parameter>code</parameter>の説明を有する文字列を返
     します。説明がない場合に&false;を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-get-current-line-number">
   <refnamediv>
    <refname>xml_get_current_line_number</refname>
    <refpurpose>XML パーサのカレントの行番号を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_get_current_line_number</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 行番号を得る XML パーサへのリファレンス。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサでない場
     合に&false;、それ以外の場合にデータバッファの中で現在パーサが処理中
     の行番号を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-get-current-column-number">
   <refnamediv>
    <refname>xml_get_current_column_number</refname>
    <refpurpose>XML パーサのカレントのカラム番号を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_get_current_column_number</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 カラム番号を得る XML パーサへのリファレンス。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサを参照しない
     場合に&false;、それ以外の場合にパーサが処理中の
     (<function>xml_get_current_line_number</function> で得ることができる)
     カレント行のカラムを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-get-current-byte-index">
   <refnamediv>
    <refname>xml_get_current_byte_index</refname>
    <refpurpose>カレントの XML パーサのバイトインデックスを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>xml_get_current_byte_index</function>
      </funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 バイトインデックスを得るXML パーサへのリファレンス。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサを
     参照しない場合に&false;、そうでない場合にデータバッファにおいてパー
     サが現在処理中のバイトインデックス(先頭が0)を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-parse-into-struct">
   <refnamediv>
    <refname>xml_parse_into_struct</refname>
    <refpurpose>配列構造体にXMLデータを処理する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>xml_parse_into_struct</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>array <parameter>&amp;values</parameter></paramdef>
      <paramdef>array <parameter>&amp;index</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、XMLファイルを処理し、2つの配列構造体に代入します。1
     つ目の配列(<parameter>index</parameter>)は、配列
     <parameter>values</parameter>にある適当な値の位置を指すポインタを
     有しています。これら最後の二つのパラメータは参照渡しとする必要が
     あります。
    </para>
    <para>
     以下の例は、この関数により生成された配列の内部構造を示すものです。
     <literal>note</literal>タグを<literal>para</literal>タグの中に埋
     め込んで使用した後、これをパースし、生成された構造体を出力します。
     <informalexample>
      <programlisting role="php">
$simple = &quot;&lt;para&gt;&lt;note&gt;simple note&lt;/note&gt;&lt;/para&gt;&quot;;
$p = xml_parser_create();
xml_parse_into_struct($p,$simple,$vals,$index);
xml_parser_free($p);
echo "Index array\n";
print_r($index);
echo "\nVals array\n";
print_r($vals);
      </programlisting>
     </informalexample>
     このコードを実行した場合、出力は次のようになります。
     <informalexample>
      <programlisting>
Index array
Array
(
    [PARA] =&gt; Array
        (
            [0] =&gt; 0
            [1] =&gt; 2
        )

    [NOTE] =&gt; Array
        (
            [0] =&gt; 1
        )

)

Vals array
Array
(
    [0] =&gt; Array
        (
            [tag] =&gt; PARA
            [type] =&gt; open
            [level] =&gt; 1
        )

    [1] =&gt; Array
        (
            [tag] =&gt; NOTE
            [type] =&gt; complete
            [level] =&gt; 2
            [value] =&gt; simple note
        )

    [2] =&gt; Array
        (
            [tag] =&gt; PARA
            [type] =&gt; close
            [level] =&gt; 1
        )

)
      </programlisting>
     </informalexample>
    </para>
    <para>
     (expatライブラリを使用した)イベント駆動型パーサによる処理は、XML
     ドキュメントが複雑な場合に複雑になる場合があります。この関数は、
     DOM形式のオブジェクトを生成しませんが、ツリー風に一連の処理を行い
     得る構造体を生成します。つまり、XMLのファイルを表すオブジェクトを
     容易に作成することが可能です。次のXMLファイルを見てみましょう。こ
     のファイルでは、アミノ酸の情報に関する小さなデータベースを表しま
     す。
     <example>
      <title>moldb.xml - 分子情報の小さなデータベース</title>
      <programlisting>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;moldb&gt;

	&lt;molecule&gt;
		&lt;name&gt;Alanine&lt;/name&gt;
		&lt;symbol&gt;ala&lt;/symbol&gt;
		&lt;code&gt;A&lt;/code&gt;
		&lt;type&gt;hydrophobic&lt;/type&gt;
	&lt;/molecule&gt;

	&lt;molecule&gt;
		&lt;name&gt;Lysine&lt;/name&gt;
		&lt;symbol&gt;lys&lt;/symbol&gt;
		&lt;code&gt;K&lt;/code&gt;
		&lt;type&gt;charged&lt;/type&gt;
	&lt;/molecule&gt;

&lt;/moldb&gt;
      </programlisting>
     </example>
     ドキュメントを処理し、適当なオブジェクトを生成するいくつかのコー
     ド
     <example>
      <title>
       parsemoldb.php - moldb.xml を処理し、分子オブジェクトの配列に代
       入
      </title>
      <programlisting role="php">
&lt;?php

class AminoAcid {
	var $name;	// aa の名前
	var $symbol;	// 3文字のシンボル
	var $code;	// 1文字の文字コード
	var $type;	// hydrophobic, charged or neutral
	
	function AminoAcid ($aa) {
		foreach ($aa as $k=&gt;$v)
			$this-&gt;$k = $aa[$k];
	}
}

function readDatabase($filename) {
	// アミノ酸のXMLデータベースの読み込み
	$data = implode(&quot;&quot;,file($filename));
	$parser = xml_parser_create();
	xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);
	xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,1);
	xml_parse_into_struct($parser,$data,$values,$tags);
	xml_parser_free($parser);

	// 構造体を処理するループ
	foreach ($tags as $key=&gt;$val) {
               if ($key == &quot;molecule&quot;) {
			$molranges = $val;
			// each contiguous pair of array entries are the 
			// lower and upper range for each molecule definition
			for ($i=0; $i &lt; count($molranges); $i+=2) {
			    	$offset = $molranges[$i] + 1;
				$len = $molranges[$i + 1] - $offset;
				$tdb[] = parseMol(array_slice($values, $offset, $len));
			}
		} else {
			continue;
		}
	}
	return $tdb;
}

function parseMol($mvalues) {
	for ($i=0; $i &lt; count($mvalues); $i++)
		$mol[$mvalues[$i][&quot;tag&quot;]] = $mvalues[$i][&quot;value&quot;];
	return new AminoAcid($mol);
}

$db = readDatabase(&quot;moldb.xml&quot;);
echo "** Database of AminoAcid objects:\n";
print_r($db);

?&gt;
      </programlisting>
     </example>
     <filename>parsemoldb.php</filename>を実行した後、変数
     <varname>$db</varname> は、オブジェクト
     <classname>AminoAcid</classname>の配列を有しており、スクリプトの
     出力は、次のようになります。
     <informalexample>
      <programlisting>
** Database of AminoAcid objects:
Array
(
    [0] =&gt; aminoacid Object
        (
            [name] =&gt; Alanine
            [symbol] =&gt; ala
            [code] =&gt; A
            [type] =&gt; hydrophobic
        )

    [1] =&gt; aminoacid Object
        (
            [name] =&gt; Lysine
            [symbol] =&gt; lys
            [code] =&gt; K
            [type] =&gt; charged
        )

)
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-parser-free">
   <refnamediv>
    <refname>xml_parser_free</refname>
    <refpurpose>XML パーサを解放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>xml_parser_free</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 解放したい XML パーサへのリファレンス。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサを参照し
     ない場合に&false;、それ以外の場合にパーサを解放し、&true;を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-parser-set-option">
   <refnamediv>
    <refname>xml_parser_set_option</refname>
    <refpurpose>XML パーサのオプションを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>xml_parser_set_option</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 オプションを設定する XML パーサへのリファレンス。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>option</parameter></term>
       <listitem>
	<simpara>
	 設定するオプション。以下を参照して下さい。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>value</parameter></term>
       <listitem>
	<simpara>
	 そのオプションの新しい設定値。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサを参照し
     ないか、オプションが設定出来なかった場合に&false;を返します。
     それ以外の場合、そのオプションが設定され、&true;が返されます。
    </para>
    <para>
     次のオプションが利用可能です。
     <table>
      <title>XML パーサオプション</title>
      <tgroup cols="3">
       <thead>
	<row>
	 <entry>オプション定数</entry>
	 <entry>データ型</entry>
	 <entry>説明</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>XML_OPTION_CASE_FOLDING</entry>
	 <entry>integer</entry>
	 <entry> 
	  XMLパーサの<link linkend="xml.case-folding">大文字変換
	 </link> を有効にするかどうかを制御する。デフォルトで有効。
	 </entry>
	</row>
	<row>
	 <entry>XML_OPTION_TARGET_ENCODING</entry>
	 <entry>string</entry> 
	 <entry>
	  XML パーサについてどの<link linkend="xml.encoding">ターゲッ
	  トエンコーディング</link> を使用するかを設定する。デフォルトでは、
	  <function>xml_parser_create</function> により使用されたソース
	  エンコーディングと同じエンコーディングが設定されます。
	  サポートされるターゲットエンコーディングは、
	  <literal>ISO-8859-1</literal>, <literal>US-ASCII</literal>
	  ,<literal>UTF-8</literal> です。
	 </entry>
	</row>
       </tbody>
      </tgroup>
     </table>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.xml-parser-get-option">
   <refnamediv>
    <refname>xml_parser_get_option</refname>
    <refpurpose>XML パーサからオプションを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>xml_parser_get_option</function></funcdef>
      <paramdef>int <parameter>parser</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parser</parameter></term>
       <listitem>
	<simpara>
	 オプションを取得する XML パーサへのリフィìンス。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>option</parameter></term>
       <listitem>
	<simpara>
	 取得するオプション。オプションのリストについては、
	 <function>xml_parser_set_option</function> を参照下さい。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     この関数は、<parameter>parser</parameter> が有効なパーサを参照し
     ないか、オプションが設定できない場合に &false; を返します。
     それ以外の場合、そのオプションの値が返されます。
    </para>
    <para>
     オプションのリストについては、
     <function>xml_parser_set_option</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.utf8-decode">
   <refnamediv>
    <refname>utf8_decode</refname>
    <refpurpose>
     UTF-8 エンコードされたISO-8859-1文字列をシングルバイトの
     ISO-8859-1 に変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>utf8_decode</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<literal>UTF-8</literal> エンコードされたデータを
     <literal>ISO-8859-1</literal> への変換するものとして、
     <parameter>data</parameter> をデコードします。
    </para>
    <para>
     UTF-8 エンコード法の説明については、<function>utf8_encode</function> 
     を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.utf8-encode">
   <refnamediv>
    <refname>utf8_encode</refname>
    <refpurpose>ISO-8859-1 文字列を UTF-8 にエンコードする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>utf8_encode</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、文字列 <parameter>data</parameter> を
     <literal>UTF-8</literal> にエンコードし、エンコードされた文字列を
     返します。<literal>UTF-8</literal> は、
     <glossterm>wide character</glossterm> の値をバイトストリームに
     エンコードするために <acronym>Unicode</acronym> で使用される
     標準的な仕組みです。<literal>UTF-8</literal> は、プレーンな
     <abbrev>ASCII</abbrev>文字を通し、自己同期(これは、バイトストリー
     ムの開始地点をプログラムが見積もることが可能であることを意味しま
     す)します。また、ソートのような標準的な文字列比較関数を使用可能で
     す。PHP は、<literal>UTF-8</literal> 文字を次のように最大4バイト
     でエンコードします。
     <table>
      <title>UTF-8エンコーディング</title>
      <tgroup cols="3">
       <thead>
	<row>
	 <entry>バイト</entry>
	 <entry>ビット</entry>
	 <entry>表現形式</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>1</entry>
	 <entry>7</entry>
	 <entry>0bbbbbbb</entry>
	</row>
	<row>
	 <entry>2</entry>
	 <entry>11</entry>
	 <entry>110bbbbb 10bbbbbb</entry>
	</row>
	<row>
	 <entry>3</entry>
	 <entry>16</entry>
	 <entry>1110bbbb 10bbbbbb 10bbbbbb</entry>
	</row>
	<row>
	 <entry>4</entry>
	 <entry>21</entry>
	 <entry>11110bbb 10bbbbbb 10bbbbbb 10bbbbbb</entry>
	</row>
       </tbody>
      </tgroup>
     </table>
     各 <replaceable>b</replaceable> は、文字列データを保存可能なビッ
     トを示します。
    </para>
   </refsect1>
  </refentry>

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
