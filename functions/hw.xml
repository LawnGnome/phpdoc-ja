 <reference id="ref.hyperwave">
  <title>Hyperwave 関数</title>
  <titleabbrev>Hyperwave</titleabbrev>

  <partintro>

   <sect1 id="hw-intro">
    <title>導入</title>
    <para>
     <productname>Hyperwave</productname> は、Graz の <ulink
     url="http://www.iicm.edu">IICM</ulink> において開発されました。
     当初は <acronym>Hyper-G</acronym> という名前でしたが、
     商品化された際(恐らく 1996 年でした)に Hyperwave に変更されました。</para>
    <para>
     Hyperwave はフリーソフトウエアではありません。
     最新版は4.1で、<ulink url="&url.hyperwave;">www.hyperwave.com</ulink>
     から得ることができます。30 日間試用可能な版を注文することができます。
    </para>
    <para>
     Hyperwave は、データベースに似た情報システム
     (<acronym>HIS</acronym>, Hyperwave Information Server)
     です。このシステムは、文書の保存と管理に着目しています。
     文書には、あらゆるデータとすることが可能で、同時にファイルに保存することもできます。
     各文書には、オブジェクトレコードが付属しています。
     オブジェクトレコードは、その文書のメタデータを有しています。
     メタデータは、ユーザーにより拡張可能な属性のリストです。
     ある種の属性は、Hyperwave サーバーにより常に設定されますが、
     その他は、ユーザーにより修正可能です。
     属性は、名前=値 という形式の 名前/値 の組です。
     完全なオブジェクトレコードは、ユーザーの指定した数のこの
     組を有することができます。
     属性の名前は、ユニークである必要はありません。
     例えば、title はオブジェクトレコードの中に複数回現れる
     可能性があります。
     これは、複数の言語で title を指定したい場合に意味があります。
     このような場合、
     各 title の値は、2文字の言語の短縮型の後にコロンが続くものを
     前に置くという慣習があります。
     例えば、'en:Title in English' または 'ge:Titel in deutsch'
     description または keywords のような他の属性は、潜在的な候補です。
     残りの属性の値とコロンで区切ることにより他の文字列で言語の短縮形を
     置換することも可能です。
    </para>
    <para>
     各オブジェクトレコードは、各名前/キーの組で表した文字列であり、
     改行で区切られています。
     Hyperwave拡張には、属性名をキーとした連想配列としての第二の表現も
     有しています。
     多言語属性値は、それ自体で言語の短縮形をキーとする別の
     連想配列を構成します。
     実際、複数の属性は、属性値をキーとし、左にコロンがある文字列で
     連想配列を構成します。
     (これは完全に実装されていません。 
     まだ、適正に処理されるのは、属性 Title, Description, Keyword のみです。)
    </para>
    <para>
     文書と共に文書中の全てのハイパーリンクは
     同じくオブジェクトレコードとして保存されます。
     文書がデータベースに挿入される際には、
     文書中のハイパーリンクは文書から取り除かれ独立したオブジェクトとして
     保存されます。
     リンクに関するオブジェクトレコードは、リンクに関する記述を
     開始した場所と終了した場所に関する情報を有しています。
     オリジナルの文書を得るためには、リンクの無いプレーンな文書と
     リンクのリストを取り出し、リンクを再び挿入する必要があります。
     (関数 <function>hw_pipedocument</function> および 
     <function>hw_gettext</function> がこれを行います。)
     リンクを文書から分離する利点は明白です。
     リンクをされている文書が名前を変更した場合でも、
     そのリンクは簡単に適宜変更可能です。
     そのリンクを有する文書は、全く影響を受けません。
     文書自体を変更せずに文書にリンクを追加することさえ可能です。
    </para>
    <para>
     <function>hw_pipedocument</function> および
     <function>hw_gettext</function> が自動的にリンクの挿入を行う
     というのは、耳で聞く程簡単なことではありません。
     リンクの挿入は、ある種のドキュメント階層の操作を含んでいます。
     Web サーバーではこの機能はファイルシステムにより提供されますが、
     Hyperwave は固有の階層を有しており、名前はその階層のオブジェクト
     の位置を反映しません。
     このため、リンク作成時はまず Hyperwave の階層および名前空間から
     各 Web 名前空間の階層への対応付けを必要とします。
     Hyperwave と Web の間の根本的な違いは、Hyperwave では名前と階層
     の間を明確に区別することです。
     名前は、階層におけるオブジェクトの位置に関する情報を全く有していません。
     Web では、名前もオブジェクトの階層における位置に関する情報を
     有しています。
     このため、対応付けには2種類の手法があります。
     つまり、Hyperwave の階層および Hyperwave オブジェクトの名前が URL に
     反映されたものまたは名前のみのどちらかです。
     簡単のため、第2の方法が使用されます。
     'my_object' という名前の Hyperwave オブジェクトは、
     Hyperwave 階層のどこに位置するかによらず
     'http://host/my_object'  に対応付けます。
     Hyperwave 階層においては、名前 'parent/my_object' を有するオブジェクトは、
     Hyperwave 階層の 'my_object' の子となります。
     しかし、Web の名前空間では正反対となるため、ユーザーに混乱を生じる
     可能性があります。
     これは、適当なオブジェクト名を選択することによってのみ防止すること
     ができます。
    </para>
    <para>
     この選択により第2の問題が生じます。
     PHP をどうやって起動しますか?
     URL http://host/my_object は、例えば、Web サーバーに対して
     この URL を 'http://host/php3_script/my_object' に
     書き換えさせない限り、いかなる PHPスクリプトもコールしません。
     スクリプト 'php3_script' は $PATH_INFO 変数を評価し、
     Hyperwave サーバーから名前 'my_object' を有するオブジェクトを
     取得します。
     一つだけ欠点がありますが、簡単に修正可能です。
     URL の書き換えは、その Web サーバー上の他のドキュメントにアクセスする
     時には許可されません。
     Hyperwave サーバーで検索を行う PHPスクリプトは実現不可能です。
     このため、
     例えば http://host/Hyperwave で始まるような URL 
     を除くような少なくとも第2の書き換え規則を必要とします。
    </para>
    <para>
     上記の機構的なリンクは、他のドキュメントに挿入されます。
    </para>
    <para>
     PHP がサーバーモジュールでもCGI スクリプトでもなく、例えば
     CD-ROM 上に Hyperwave サーバーの内容をダンプするといった
     スタンドアロンのアプリケーションとして実行されている場合は、
     より複雑になります。
     このような場合、Hyperwave 階層を保ち、ファイルシステムに対応付けを
     行う必要があります。
     これは、(例えば、'/' を含む名前を選択することにより)固有の階層に
     対応付けている場合には、オブジェクト名と衝突する可能性があります。
     このため、'/' は他の文字、例えば '_' に置換されるべきです。
    </para>
    <para>
     Hyperwave サーバーと通信するためのネットワークプロトコルは、
     <ulink url="&spec.hyperwave;">HG-CSP</ulink>
     (Hyper-G Client/Serverプロトコル)という名前です。
     このプロトコルは、例えばオブジェクトレコードを得るといったある動
     作を始めるためのメッセージに基づいています。
     Hyperwave サーバーの初期の版では、二つの専用クライアント
     (Harmony,Amadeus) がサーバーとの通信用に提供されていました。
     これらは、Hyperwave が商品化された際になくなりました。
     代わりに、wavemaster が提供されました。
     wavemaster は、<abbrev>HTTP</abbrev> から <abbrev>HG-CSP</abbrev>
     へのプロトコルコンバーターのようなものです。
     これは、データベースの管理とドキュメントの可視化を全て
      Web インターフェースにより行うという考えによるものです。
      wavemaster は、インターフェースをカスタマイズするための
      作業用に一連のプレースホルダーを導入しています。
      この一連のプレースホルダーは、<abbrev>PLACE</abbrev> 言語
      と呼ばれています。      
     <abbrev>PLACE</abbrev> は、通常のプログラミング言語の機能の
     多くを欠いており、言語への拡張としては、プレースホルダーの
     リストを拡大するだけです。
     このことは、JavaScript を使用することにより作業が楽になったわけでは
     ないということと類似しています。
    </para>
    <para>
     Hyperwave サポートを PHP に付加することにより、インターフェース
     のカスタマイズ用のプログラミング言語を有していないという穴を
     埋めることになります。
     この機能は、<abbrev>HG-CSP</abbrev> により定義された
     全てのメッセージをサポートするだけでなく、
     完全なドキュメントの取得といった更に強力なコマンドも提供します。
    </para>
    <para>
     Hyperwave は、情報の特定の部分を名付けるために固有の用語法を
     用います。
     この方法は、広範に用いられ、拡張されています。
     ほとんどすべの関数は、次のデータ型のどれかを操作します。

     <itemizedlist>
      <listitem><simpara>
	object ID: Hyperwave サーバーの各オブジェクトについてユニークな
	整数値。オブジェクトレコード (ObjectID) の属性の一つでもあります。
	object id は、オブジェクトを指定するための入力パラメータとして
	しばしば用いられます。
       </simpara></listitem>
      <listitem><simpara>
	object record: 	attribute=value 形式の属性-値の組となる文字列。
	この組は、復改文字で他と区切られています。
	オブジェクトレコードは、<function>hw_object2array</function> により
	オブジェクトレコードに簡単に変換できます。
	いくつかの関数は、オブジェクトレコードを返します。
	これらの関数の名前は、obj で終わります。
       </simpara></listitem> 
      <listitem><simpara>
	object array: オブジェクトの全ての属性を有する連想配列。
	キーは属性名です。ある属性が、
	オブジェクトレコードに複数回現れる場合、別の添字または連想配列
	が生成されます。(title,keyword,description のような)
	言語に依存する属性は、省略語をキーとした連想配列として
	作成されます。
	他の複数の属性は、添字配列として作成されます。
	PHP 関数は、オブジェクト配列を返しません。
       </simpara></listitem>
      <listitem><simpara>
	hw_document: これは、完全に新規のデータ型であり、
	HTML,PDF 等といった実際のドキュメントを保持します。
	これは、幾分 HTML 用に最適化されていますが、他のフォーマット
	に使用することが可能です。 
       </simpara></listitem>
     </itemizedlist></para>
     
    <para>
    オブジェクトレコードの配列を返すいくつかの関数は、
    そのレコードに関する統計情報を有する連想配列も返します。
    この配列は、オブジェクトレコード配列の最後の要素です。
    統計配列には、次のエントリがあります。
     <variablelist>
      <varlistentry>
       <term>Hidden</term>
       <listitem><simpara>
       属性 PresentationHints が Hidden であるオブジェクトレコードの数
       </simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>CollectionHead</term>
       <listitem><simpara>
       属性 PresentationHints が CollectionHead であるオブジェクト
       レコードの数</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>FullCollectionHead</term>
       <listitem><simpara>
       属性 PresentationHints が FullCollectionHead であるオブジェクト
       レコードの数</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>CollectionHeadNr</term>
       <listitem><simpara>
       属性 PresentationHints が CollectionHead であるオブジェクト
       レコードの配列のインデックス</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>FullCollectionHeadNr</term>
       <listitem><simpara>
       属性 PresentationHints が FullCollectionHead であるオブジェクト
       レコードの配列のインデックス</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>Total</term>
       <listitem><simpara>
	 Total: オブジェクトレコードの数</simpara></listitem>
      </varlistentry>
     </variablelist></para>
   </sect1>

   <sect1 id="hw-apache">
    <title>Apache との組み合わせ</title>
    <para>
     Hyperwave モジュールは、PHP が Apache モジュールとしてコンパイル
     された場合に、最適化されています。
     この場合、Apache が書き換えエンジンを使用する場合、内部の
     Hyperwave サーバーをほぼ完全にユーザーから隠すことが可能です。
     以下の手順によりこのことを説明します。
    </para>
    <para>
     Hyperwave サポートを有効にして Apache に組み込んだ PHP は、
     wavemaster に基づく本来の Hyperwave の手法を置換するものなので、
     Apache サーバーは、Hyperwave Web インターフェースとしてのみ
     処理を行うと仮定します。
     これは必然ではありませんが、設定が容易になります。
     考え方は非常に簡単です。
     まず最初に <envar>PATH_INFO</envar> 変数を評価し、
     Hyperwave オブジェクトの名前としてその値を処理する PHP スクリプトが
     必要です。
     このスクリプトを 'Hyperwave' と呼びましょう。URL <systemitem
     role="url">http://your.hostname/Hyperwave/name_of_object</systemitem>
     'name_of_object' という名前の Hyperwave オブジェクトを返します。
     オブジェクトの型に応じて、スクリプトは対応した処理を行う
     必要があります。
     collection の場合、恐らく子のリストを返すことになります。
     ドキュメントの場合、MIME 型と内容を返すことになります。
     Apache の書換エンジンを使用した場合、若干の改善が見込まれます。
     ユーザーの立場で見ると、URL 
     <systemitem role="url">http://your.hostname/name_of_object</systemitem>
     がオブジェクトを返せば、より簡単となります。書き換えの規則は、か
     なり簡単です。
     <informalexample>
      <programlisting role="apache-conf">
RewriteRule ^/(.*) /usr/local/apache/htdocs/HyperWave/$1 [L]
      </programlisting>
     </informalexample>
     この状態で、全ての URL は Hyperwave サーバーのオブジェクトに
     関係付けられています。これにより問題の解決が容易になります。
     'Hyperwave' スクリプト以外の検索といった他のスクリプト
     を実行することはできません。
     これは次のような別の規則により修正することができます。

     <informalexample>
      <programlisting role="apache-conf">
RewriteRule ^/hw/(.*) /usr/local/apache/htdocs/hw/$1 [L]
      </programlisting>
     </informalexample>

     これにより、ディレクトリ <filename
     class="directory">/usr/local/apache/htdocs/hw</filename> が
     追加のスクリプトや他のファイル用に確保されます。
     この規則は、一つ前の規則よりも前に評価されることに注意して下さい。
     これには若干の欠点があります。
     つまり、'hw/' で始まる名前を有する Hyperwave オブジェクトは
     全て隠されてしまいます。
     このため、このような名前を使用しないようにして下さい。
     例えば画像用により多くのディレクトリが必要な場合、
     更に規則を加えるか一つのディレクトリに全てを置くかして下さい。
     最後にRewriteEngineをオンにすることを忘れないで下さい。

     <informalexample>
      <programlisting role="apache-conf">
RewriteEngine on
      </programlisting>
     </informalexample>

     経験上、次のようなスクリプトが必要になることと思われます。

     <itemizedlist>
       <listitem><simpara>
       オブジェクト自身を返す</simpara></listitem>
       <listitem><simpara>
       検索を許可する</simpara></listitem>
       <listitem><simpara>
       自分を定義する</simpara></listitem>
       <listitem><simpara>
       プロファイルを設定する</simpara></listitem>
       <listitem><simpara>
       オブジェクト属性を表示したり、ユーザーに関する情報を表示したり、
       サーバーのステータスを表示したり等する追加される関数毎に一つ</simpara></listitem>
     </itemizedlist>
    </para>
   </sect1>

   <sect1 id="hw-todo">
    <title>Todo</title>
    <para>
    まだやるべきことがいくつかあります。
     <itemizedlist>
      <listitem><simpara>hw_InsertDocument は、
	<function>hw_InsertObject</function> および
	<function>hw_PutDocument</function> に分割する
	必要があります。</simpara></listitem>
      <listitem><simpara>いくつかの関数の名前はまだ修正されていません。
       </simpara></listitem>
      <listitem><simpara>多くの関数は最初のパラメータとして現在の接続 ID を
      必要とします。これにより入力が多くかつ頻繁になってますが、
      一つだけの接続をオープンしている場合には必要ないはずです。
      デフォルト接続の導入により改善される見込みです。
	</simpara></listitem>
      <listitem><simpara>多重属性を処理するには、
      オブジェクトレコードからオブジェクト配列への変換機能が必要です。
       </simpara></listitem>
     </itemizedlist></para>
   </sect1>
  </partintro>

  <refentry id="function.hw-array2objrec">
   <refnamediv>
    <refname>hw_Array2Objrec</refname>
    <refpurpose>
     オブジェクト配列からオブジェクトレコードに属性を変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>strin <function>hw_array2objrec</function></funcdef>
      <paramdef>array <parameter>object_array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>object_array</parameter> をオブジェクトレコードに変換します。
     'Title' のような異なった言語で多重定義された属性は正しく処理され
     ます。
    </para>
    <para>
     <function>hw_objrec2array</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.hw-children">
   <refnamediv>
    <refname>hw_Children</refname>
    <refpurpose>子のオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_children</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクト ID の配列を返します。各 ID は、ID
    <parameter>objectID</parameter> を有するコレクションの子に属してい
    ます。
    配列は、ドキュメントおよびコレクションの全ての子を有しています。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-childrenobj">
   <refnamediv>
    <refname>hw_ChildrenObj</refname>
    <refpurpose>子のオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_childrenobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクトレコードの配列を返します。
    各オブジェクトレコードは、ID <parameter>objectID</parameter>
    を有するコレクションの子に属しています。
    配列は、ドキュメントおよびコレクションの全ての子を有しています。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-close">
   <refnamediv>
    <refname>hw_Close</refname>
    <refpurpose>Hyperwave 接続を閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_close</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    connection が有効な接続インデックスでない場合に FALSE、それ以外の場合に
    TRUE を返します。
    指定した接続インデックスに関して Hyperwave サーバーとの接続を閉じます。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-connect">
   <refnamediv>
    <refname>hw_Connect</refname>
    <refpurpose>接続をオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_connect</function></funcdef>
      <paramdef>string <parameter>host</parameter></paramdef>
      <paramdef>int <parameter>port</parameter></paramdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    Hyperwave サーバーへの接続をオープンし、成功した場合に接続インデックス、
    接続できなかった場合に FALSE を返します。
    各引数は、ポート番号を除き引用符付の文字列である必要があります。
    <parameter>username</parameter> および <parameter>password</parameter> 
    引数はオプションであり、省略することができます。
    この場合、サーバーによるユーザー識別は行われません。
    これは、匿名ユーザーとして識別されることに似ています。
    この関数は、他の Hyperwave 関数で必要な接続インデックスを返します。
    複数の接続を同時にオープンすることが可能です。パスワードは暗号化されないこと
    を覚えておいて下さい。</para>
    <para>
     <function>hw_pConnect</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-cp">
   <refnamediv>
    <refname>hw_Cp</refname>
    <refpurpose>オブジェクトをコピーする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_cp</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>array <parameter>object_id_array</parameter></paramdef>
      <paramdef>int <parameter>destination id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     2番名のパラメータとして指定されたオブジェクトID を有するオブジェ
     クト ID <parameter>destination id</parameter> を有するコレクション
     にコピーします。
    </para>
    <para>
     返される値は、コピーされたオブジェクトの数です。
    </para>
    <para>
     <function>hw_mv</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-deleteobject">
   <refnamediv>
    <refname>hw_Deleteobject</refname>
    <refpurpose>オブジェクトを削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_deleteobject</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>object_to_delete</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    2番目のパラメータで指定されたオブジェクト ID を有するオブジェクトを
    削除します。この関数は、オブジェクトの全てのインスタンスを削除します。</para>
    <para>
    エラーが発生しない場合に TRUE、それ以外の場合 FALSE を返します。</para>
    <para>
     <function>hw_mv</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-docbyanchor">
   <refnamediv>
    <refname>hw_DocByAnchor</refname>
    <refpurpose>アンカーに属するオブジェクトのオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_docbyanchor</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>anchorID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <parameter>anchorID</parameter> が指す
    ドキュメントのオブジェクト ID を返します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-docbyanchorobj">
   <refnamediv>
    <refname>hw_DocByAnchorObj</refname>
    <refpurpose>アンカーが指すオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_docbyanchorobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>anchorID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <parameter>anchorID</parameter> が指す
    ドキュメントのオブジェクトレコードを返します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-documentattributes">
   <refnamediv>
    <refname>hw_DocumentAttributes</refname>
    <refpurpose>hw_document のオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_documentattributes</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ドキュメントのオブジェクトレコードを返します。</para>
    <para>
     <function>hw_DocumentBodyTag</function>,
              <function>hw_DocumentSize</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-documentbodytag">
   <refnamediv>
    <refname>hw_DocumentBodyTag</refname>
    <refpurpose>hw_document の BODY タグ</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_documentbodytag</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ドキュメントの BODY タグを返します。そのドキュメントが
    HTML ドキュメントの場合、BODY タグがドキュメントの前に
    出力されます。</para>
    <para>
     <function>hw_DocumentAttributes</function>,
              <function>hw_DocumentSize</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-documentcontent">
   <refnamediv>
    <refname>hw_DocumentContent</refname>
    <refpurpose>hw_documentの内容を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_documentcontent</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	ドキュメントの内容を返します。ドキュメントがHTMLドキュメントの場合、
	内容は、全てBODYタグの後になります。HEADおよびBODYタグからの情報は、
	オブジェクトレコードに保存されます。</para>
    <para>
     <function>hw_DocumentAttributes</function>,
              <function>hw_DocumentSize</function>,
              <function>hw_DocumentSetContent</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-documentsetcontent">
    <refnamediv>
    <refname>hw_DocumentSetContent</refname>
    <refpurpose>hw_document の内容を設定/置換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_documentsetcontent</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
      <paramdef>string <parameter>content</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	ドキュメントの内容を設定または置換します。ドキュメントがHTMLドキュメントの
	場合、内容はすべてBODYタグの後となります。
	HEADおよびBODYタグからの情報は、オブジェクトレコードに保存されます。
	ドキュメントの内容の中にもこの情報を与えた場合、
	Hyperwave サーバーはドキュメントが挿入された際にオブジェクトレコードを
	変更します。
	これは恐らくあまり良い考えではありません。
	この関数は、ドキュメントが古い内容を保持する場合に失敗します。</para>
    <para>
     <function>hw_DocumentAttributes</function>,
              <function>hw_DocumentSize</function>,
              <function>hw_DocumentContent</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-documentsize">
   <refnamediv>
    <refname>hw_DocumentSize</refname>
    <refpurpose>hw_document のサイズ</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_documentsize</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ドキュメントのサイズをバイト数で返します。</para>
    <para>
     <function>hw_DocumentBodyTag</function>,
              <function>hw_DocumentAttributes</function> 
	      も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-errormsg">
   <refnamediv>
    <refname>hw_ErrorMsg</refname>
    <refpurpose> エラーメッセージを返す </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_errormsg</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     直近のエラーメッセージまたは 'No Error' を含む文字列を返します。
     FALSE が返された場合、この関数は失敗しています。
     このメッセージは、直近のコマンドに関係するものです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-edittext">
   <refnamediv>
    <refname>hw_EditText</refname>
    <refpurpose>テキストドキュメントを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_edittext</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    テキストドキュメントをサーバーにアップロードします。
    ドキュメントのオブジェクトレコードは、そのドキュメントを編集している間、
    修正することができません。
    この関数は、純粋なテキストドキュメントについてのみ動作します。
    この関数は、特別なデータ接続をオープンしないため、伝送の間、
    制御用の接続をブロックします。</para>
    <para>
     <function>hw_PipeDocument</function>,
              <function>hw_FreeDocument</function>,
              <function>hw_DocumentBodyTag</function>,
              <function>hw_DocumentSize</function>,
              <function>hw_OutputDocument</function>,
              <function>hw_GetText</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-error">
   <refnamediv>
    <refname>hw_Error</refname>
    <refpurpose>エラー番号</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_error</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    直近のエラー番号を返します。返り値が 0 の場合、エラーは発生していません。
    エラーは直近のコマンドに関係しています。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-free-document">
   <refnamediv>
    <refname>hw_Free_Document</refname>
    <refpurpose>hw_document を解放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_free_document</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    Hyperwave ドキュメントにより占有されたメモリーを解放します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getparents">
   <refnamediv>
    <refname>hw_GetParents</refname>
    <refpurpose>親のオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getparentsobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクト ID の添字配列を返します。各オブジェクト ID は、
    ID <parameter>objectID</parameter> を有するオブジェクトの親
    に属しています。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getparentsobj">
   <refnamediv>
    <refname>hw_GetParentsObj</refname>
    <refpurpose>親のオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getparentsobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクトレコードの添字配列に加えてオブジェクトでコードに関する
    統計情報を含む連想配列を返します。各オブジェクトレコードは、
    ID <parameter>objectID</parameter> を有するオブジェクトの親
    に属しています。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getchildcoll">
   <refnamediv>
    <refname>hw_GetChildColl</refname>
    <refpurpose>子のコレクションのオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getchildcoll</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクト ID の配列を返します。各オブジェクト ID は、
    ID <parameter>objectID</parameter> を有するコレクションの
    子コレクションに属しています。
    この関数は、子ドキュメントを返しません。</para>
    <para>
     <function>hw_GetChildren</function>,
              <function>hw_GetChildDocColl</function>も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getchildcollobj">
   <refnamediv>
    <refname>hw_GetChildCollObj</refname>
    <refpurpose>子のコレクションのオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getchildcollobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクトレコードの配列を返します。各オブジェクトレコードは、
    ID <parameter>objectID</parameter> を有するコレクションの
    子コレクションに属しています。
    この関数は、子ドキュメントを返しません。</para>
    <para>
     <function>hw_ChildrenObj</function>,
              <function>hw_GetChildDocCollObj</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getremote">
   <refnamediv>
    <refname>hw_GetRemote</refname>
    <refpurpose>リモートドキュメントを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_getremote</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	リモートドキュメントを返します。Hyperwave 表記のリモートドキュメントは、
	外部ソースから取得されたドキュメントです。
	一般的なリモートドキュメントは、例えば外部Webページまたはデータベース
	のクエリーです。
	外部ソースをアクセス可能とするために、Hyperwave では CGI に似た HGI 
	(Hyperwave Gateway Interface)を導入しています。
	現在、 ftp, http サーバーといくつかのデータベースのみが HGI により
	アクセス可能です。
	<function>hw_GetRemote</function> をコールすることにより外部ソースからの
	ドキュメントが返されます。
	この関数を使用したい場合、HGI を熟知している必要があります。
	外部ソースをアクセスするために Hyperwave のかわりに PHP を使用することも
	考慮する必要があります。Hyperwave ゲートウエイにデータベースのサポートを
	付加するのは、PHPにおいて同じことを行うよりもより困難です。</para>
    <para>
     <function>hw_GetRemoteChildren</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getremotechildren">
   <refnamediv>
    <refname>hw_GetRemoteChildren</refname>
    <refpurpose>リモートドキュメントの子を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_getremotechildren</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>object record</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	リモートドキュメントの子を返します。リモートドキュメントの
	子は、リモートドキュメント自身です。
	これは、データベースクエリーの範囲を限定する必要があることを意味し、
	このことは、Hyperwave Programmers' Guide に説明されています。
	子の数が1の場合、関数は Hyperwave Gateway Interface (HGI) にフォーマット
	されたドキュメント自体を返します。
	子の数が1より大きい場合、
	<function>hw_GetRemoteChildren</function> への他のコールに関する
	入力値を有するオブジェクトレコードの配列を返します。
	これらのオブジェクトレコードは、仮想的なもので、Hyperwaveサーバーに
	は存在しません。
	このため、有効なオブジェクトIDを有していません。
	オブジェクトレコードにどれっQ似ているかはHGI次第です。
	この関数を使用したい場合、HGIに習熟している必要があります。
	外部ソースをアクセスするために Hyperwave のかわりに PHP を使用することも
	考慮する必要があります。Hyperwave ゲートウエイにデータベースのサポートを
	付加するのは、PHPにおいて同じことを行うよりもより困難です。</para>
    <para>
     <function>hw_GetRemote</function>も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getsrcbydestobj">
   <refnamediv>
    <refname>hw_GetSrcByDestObj</refname>
    <refpurpose>オブジェクトを指すアンカーを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getsrcbydestobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ID <parameter>objectID</parameter> を有するオブジェクトを指す
    全てのアンカーのオブジェクトレコードを返します。
    このオブジェクトは、ドキュメントまたはリンク先を指すアンカー
    のどちらかとすることができます。</para>
    <para>
     <function>hw_GetAnchors</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getobject">
   <refnamediv>
    <refname>hw_GetObject</refname>
    <refpurpose>オブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getobject</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>[int|array] <parameter>objectID</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     二番目のパラメータが整数(スカラー)の場合、ID 
	<parameter>objectID</parameter> を有するオブジェクトの
     オブジェクトレコードを返します。
	二番目のパラメータが整数の配列の場合、関数はオブジェクトレコードの
	配列を返します。このような場合、最後のパラメータであるクエリー文字列
	も評価されます。</para>
     <para>
	クエリー文字列は次の構文を有しています。</para>
     <simpara>
      &lt;expr> ::= "(" &lt;expr> ")" |</simpara>  <simpara>
              "!" &lt;expr> |          /* NOT */</simpara><simpara>
              &lt;expr> "||" &lt;expr> |  /* OR */</simpara><simpara>
              &lt;expr> "&amp;&amp;" &lt;expr> |  /* AND */</simpara><simpara>
              &lt;attribute> &lt;operator> &lt;value></simpara><simpara>
 
   &lt;attribute> ::= /* 属性の名前 (Title, Author, DocumentType ...) */</simpara><simpara>
 
   &lt;operator> ::= "=" |    /* 等しい */</simpara><simpara>
                  "&lt;" |    /* より小さい (文字列比較) */</simpara><simpara>
                  ">" |    /* より大きい (文字列比較) */</simpara><simpara>
                  "~"      /* 正規表現によるマッチング */</simpara><simpara></simpara>
     <para>
	クエリーにより指定したオブジェクトのリストアら特定のオブジェクトを
	選択することが可能となります。
	他の関数とは異なり、このクエリーはインデックス付きの属性を使用しません。
	返されるオブジェクトレコードの数は、クエリーおよび
	オブジェクトにアクセス可能であるかどうかに依存します。</para>
      <para>
		<function>hw_GetAndLock</function>,
        <function>hw_GetObjectByQuery</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getandlock">
   <refnamediv>
    <refname>hw_GetAndLock</refname>
    <refpurpose>オブジェクトレコードを返しおよびオブジェクトをロックする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_getandlock</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     ID <parameter>objectID</parameter> を有するオブジェクトの
     オブジェクトレコードを返します。
     また、オブジェクトをロックします。このため、ロックを解放するまで、
     他のユーザーはアクセスできません。</para>
    <para>
     <function>hw_Unlock</function>,
              <function>hw_GetObject</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-gettext">
   <refnamediv>
    <refname>hw_GetText</refname>
    <refpurpose>テキストドキュメントを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_gettext</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
      <paramdef>mixed 
       <parameter>
        <optional>rootID/prefix</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     オブジェクト ID <parameter>objectID</parameter> を有するドキュメントを
     返します。ドキュメントが、挿入可能なアンカーを有している場合、
     既に挿入されています。オプションのパラメーター
     <parameter>rootID/prefix</parameter> は、文字列または整数とするこ
     とができます。整数の場合、ドキュメントに挿入されたリンクの数を定
     義します。デフォルトは 0 であり、リンク先のオブジェクトの名前から
     構成されたリンクが得られます。
     この動作は、Web アプリケーションには、便利です。
     あるリンクが、名前 'internet_movie' を有するオブジェクトを指す
     場合、HTML リンクは、&lt;A HREF="/internet_movie"> となります。
     ドキュメンÈ階層におけるリンク元およびリンク先のオブジェクトの
     実際の位置は無視されます。Web サーバーを設定し、URL を
     例えば、 '/my_script.php3/internet_movie' に書き変える必要があります。
     'my_script.php3' は、$PATH_INFO を評価し、ドキュメントを
     取得する必要があります。
	全てのリンクは接頭辞 '/my_script.php3/'を有しています。
	これが好ましくない場合、使用する接頭辞としてオプションのパラメータ 
	<parameter>rootID/prefix</parameter> を設定することができます。
	このパラメータは、文字列である必要があります。</para>
     <para>
      <parameter>rootID/prefix</parameter> が整数であり、
	0に等しくない場合、リンクは ID
	<parameter>rootID/prefix</parameter> を有するオブジェクトで
	始まる全ての名前から構成されます。
 現在のオブジェクトに関したスラッシュにより分割された
    全ての名前から構成されます。
    例えば、前記のドキュメント 'internet_movie' が 'a-b-c-internet_movie' 
    にあり、'-' がHyperwaveサーバーの階層レベルの間のセパレータであり、
    元のドキュメントが 'a-b-d-source' にある場合、
    結果の HTML リンクは次のようになります。
     &lt;A HREF="../c/internet_movie">
     この動作は、サーバー全体の内容をディスクにダウンロードし《     ドキュメント階層をファイルシステムに割り付けたい場合に便利です。</para>
    <para>
    この関数は、純粋なテキストドキュメントについてのみ動作します。
    特別なデータ接続をオープンしないため、伝達の間、
    制御用の接続はブロックされます。</para>
    <para>
     <function>hw_PipeDocument</function>,
              <function>hw_FreeDocument</function>,
              <function>hw_DocumentBodyTag</function>,
              <function>hw_DocumentSize</function>,
              <function>hw_OutputDocument</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getobjectbyquery">
   <refnamediv>
    <refname>hw_GetObjectByQuery</refname>
    <refpurpose>オブジェクトを検索する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getobjectbyquery</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>int <parameter>max_hits</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    サーバー全体のオブジェクトを検索し、オブジェクト ID の配列を
    返します。最大マッチ数は、<parameter>max_hits</parameter> で制限
    されます。<parameter>max_hits</parameter> が -1 にセットされた場合、
    最大マッチ数は無制限となります。</para>
    <para>
    クエリーはインデックス付き属性でのみ動作します。</para>
    <para>
     <function>hw_GetObjectByQueryObj</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getobjectbyqueryobj">
   <refnamediv>
    <refname>hw_GetObjectByQueryObj</refname>
    <refpurpose>オブジェクトを検索する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getobjectbyqueryobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>int <parameter>max_hits</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    サーバー全体のオブジェクトを検索し、オブジェクトレコードの配列を
    返します。最大マッチ数は、<parameter>max_hits</parameter> で制限
    されます。<parameter>max_hits</parameter> が -1 にセットされた場合、
    最大マッチ数は無制限となります。</para>
	<para>
   クエリーはインデックス付き属性でのみ動作します。</para>
    <para>
     <function>hw_GetObjectByQuery</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getobjectbyquerycoll">
   <refnamediv>
    <refname>hw_GetObjectByQueryColl</refname>
    <refpurpose>コレクションのオブジェクトを検索する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getobjectbyquerycoll</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>int <parameter>max_hits</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ID <parameter>objectID</parameter> を有するコレクションのオブジェクトを
    検索し、オブジェクト ID の配列を返します。
    最大マッチ数は、<parameter>max_hits</parameter> で制限されます。
     <parameter>max_hits</parameter> が -1 にセットされた場合、
     最大マッチ数は、無制限となります。</para>
	<para>
   クエリーはインデックス付き属性でのみ動作します。</para>
    <para>
     <function>hw_GetObjectByQueryCollObj</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getobjectbyquerycollobj">
   <refnamediv>
    <refname>hw_GetObjectByQueryCollObj</refname>
    <refpurpose>コレクションのオブジェクトを検索する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getobjectbyquerycollobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>int <parameter>max_hits</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ID <parameter>objectID</parameter> を有するコレクションのオブジェクトを
    検索し、オブジェクトレコードの配列を返します。
    最大マッチ数は、<parameter>max_hits</parameter> で制限されます。
     <parameter>max_hits</parameter> が -1 にセットされた場合、
     最大マッチ数は、無制限となります。</para>
	<para>
   クエリーはインデックス付き属性でのみ動作します。</para>
    <para>
     <function>hw_GetObjectByQueryColl</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getchilddoccoll">
   <refnamediv>
    <refname>hw_GetChildDocColl</refname>
    <refpurpose>コレクションの子ドキュメントのオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getchilddoccoll</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    コレクションの子ドキュメントに関するオブジェクト ID の配列を返します。</para>
    <para>
     <function>hw_GetChildren</function>,
              <function>hw_GetChildColl</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getchilddoccollobj">
   <refnamediv>
    <refname>hw_GetChildDocCollObj</refname>
    <refpurpose>コレクションの子ドキュメントのオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getchilddoccollobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    コレクションの子ドキュメントに関するオブジェクトレコードの配列を返します。</para>
    <para>
     <function>hw_ChildrenObj</function>,
              <function>hw_GetChildCollObj</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getanchors">
   <refnamediv>
    <refname>hw_GetAnchors</refname>
    <refpurpose>ドキュメントのアンカーのオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getanchors</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクト ID <parameter>objectID</parameter> を有するドキュメント
    のアンカーのオブジェクト ID の配列を返します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getanchorsobj">
   <refnamediv>
    <refname>hw_GetAnchorsObj</refname>
    <refpurpose>ドキュメントのアンカーのオブジェクトレコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_getanchorsobj</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクト ID <parameter>objectID</parameter> を有するドキュメント
    のアンカーのオブジェクトレコードの配列を返します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-mv">
   <refnamediv>
    <refname>hw_Mv</refname>
    <refpurpose>オブジェクトを移動する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_mv</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>array <parameter>object id array</parameter></paramdef>
      <paramdef>int <parameter>source id</parameter></paramdef>
      <paramdef>int <parameter>destination id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    2番目のパラメータで指定されたオブジェクト ID のオブジェクトを
    ID <parameter>source id</parameter> のコレクションから
    ID <parameter>destination id</parameter> のコレクションに
    移動します。
    ディスティネーション ID が 0 の場合、オブジェクトはソースコレクション
	からリンクされていません。
    これがオブジェクトの最後のインスタンスの場合、このオブジェクトは
    削除されます。
	全てのインスタンスを一度に削除したい場合、
     <function>hw_deleteobject</function>を使用して下さい。</para>
    <para>
    移動されたオブジェクトの数が値として返されます。</para>
    <para>
     <function>hw_cp</function>,
              <function>hw_deleteobject</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-identify">
   <refnamediv>
    <refname>hw_Identify</refname>
    <refpurpose>ユーザーとして認証する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_identify</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     ユーザーを <parameter>username</parameter> および
     <parameter>password</parameter> で認証します。
     認証は、カレントのセッションでのみ有効です。
     この関数が頻繁に必要とんされるとは考えられません。
     多くの場合、接続をオープンする際に認証を行う方がより
     簡単でしょう。</para>
    <para>
     <function>hw_Connect</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-incollections">
   <refnamediv>
    <refname>hw_InCollections</refname>
    <refpurpose>コレクションにオブジェクト ID があるかどうかを確認する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_incollections</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>array <parameter>object_id_array</parameter></paramdef>
      <paramdef>array <parameter>collection_id_array</parameter></paramdef>
      <paramdef>int <parameter>return_collections</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <parameter>object_id_array</parameter> により指定された
     オブジェクトの組 (ドキュメントまたはコレクション）が、
     コレクション <parameter>collection_id_array</parameter> により定義された
     コレクションの一部であるかどうかを調べます。
     4番目のパラメータ <parameter>return_collections</parameter> が 0 である
     場合、コレクションの一部(すなわち、それぞれ一つ以上のコレクション ID の
     コレクションまたはサブコレクションの子ドキュメントまたはコレクション)
     であるオブジェクト ID のサブセットが配列として返されます。
     しかし、4番目のパラメータが 1 である場合、
     一つ以上のこのサブセットのオブジェクトを子として
     有するコレクションの組は、配列として返されます。
     このオプションにより、例えば、
     前のクエリーで一致したものを含むコレクション階層の一部を
     クライアントが、グラフィックで概要を強調表示することが可能となります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-info">
   <refnamediv>
    <refname>hw_Info</refname>
    <refpurpose>接続に関する情報</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_info</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    現在の接続に関する情報を返します。返される文字列は次のようなフォーマットとなります。
     &lt;Serverstring&gt;, &lt;Host&gt;,
     &lt;Port&gt;, &lt;Username&gt;, &lt;Port of Client&gt;,
     &lt;Byte swapping&gt;</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-inscoll">
   <refnamediv>
    <refname>hw_InsColl</refname>
    <refpurpose>コレクションを挿入する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_inscoll</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
      <paramdef>array <parameter>object_array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>object_array</parameter> の中の属性を有する新しいコレクションを
    オブジェクト ID <parameter>objectID</parameter> のコレクションに
    挿入します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-insdoc">
   <refnamediv>
    <refname>hw_InsDoc</refname>
    <refpurpose>ドキュメントを挿入する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_insdoc</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>parentID</parameter></paramdef>
      <paramdef>string <parameter>object_record</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>object_record</parameter> の中の属性を有する
     新しいドキュメントを
    オブジェクト ID <parameter>parentID</parameter> のコレクションに
    挿入します。
    この関数は、オブジェクトレコードのみまたは 
    <parameter>text</parameter> が指定された場合に
    <parameter>text</parameter> の中の純粋なアスキーテキストと
    オブジェクトレコードのどちらかを挿入します。
    汎用の一般的なドキュメントを挿入したい場合は、代わりに
     <function>hw_insertdocument</function> を使用して下さい。</para>
    <para>
     <function>hw_InsertDocument</function>,
              <function>hw_InsColl</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-insertdocument">
   <refnamediv>
    <refname>hw_InsertDocument</refname>
    <refpurpose>ドキュメントをアップロードする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_insertdocument</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>parent_id</parameter></paramdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ドキュメントを <parameter>parent_id</parameter> を有するコレクション
    にアップロードします。
    ドキュメントは、事前に <function>hw_NewDocument</function> で
    作成されている必要があります。
    新規ドキュメントのオブジェクトレコードは、少なくとも次の属性を
    有しているよう注意して下さい。:
    Type, DocumentType, Title ,Name
    MimeType を設定したい場合もあるかもしれません。
    関数は、新規ドキュメントのオブジェクト ID または FALSE を返します。</para>
    <para>
     <function>hw_PipeDocument</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-insertobject">
   <refnamediv>
    <refname>hw_InsertObject</refname>
    <refpurpose>オブジェクトレコードを挿入する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_insertobject</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>object rec</parameter></paramdef>
      <paramdef>string <parameter>parameter</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクトをサーバーに挿入します。オブジェクトは、全ての有効な
    Hyperwavve オブジェクトとすることができます。
    オブジェクトは、全ての有効な Hyperwave オブジェクトとすることが
    可能です。
    パラメータに関する詳細な情報を説明するには、
    HG-CSP ドキュメントを参照下さい。</para>
    <para>
      注意: アンカーを挿入したい場合、属性 Position
      は常に start/end の値または 'invisible' のどちらかに常に
      設定されています。
      不可視(invisible)位置は、注釈が対応する注釈文へのリンクを
      有していない場合に必要です。</para>
    <para>
     <function>hw_PipeDocument</function>,
              <function>hw_InsertDocument</function>,
              <function>hw_InsDoc</function>,
              <function>hw_InsColl</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-mapid">
   <refnamediv>
    <refname>hw_mapid</refname>
    <refpurpose>グローバルIDを仮想的なローカルIDに割りつける</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_mapid</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>server id</parameter></paramdef>
      <paramdef>int <parameter>object id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      hyperwave サーバーのグローバルオブジェクトIDを、
      仮想的なオブジェクトIDに割りつけます。
      これは、<function>hw_connect</function> で接続を行っていない場合でも
      行われます。
      この仮想オブジェクトIDは、
      <function>hw_getobject</function> でオブジェクトレコードを得るといった用途に
      他のオブジェクトIDと同様に使用することが可能です。
      サーバーIDは、オブジェクトのグローバルオブジェクトID(GOid)の最初の
      部分であり、実際にはサーバーのIPアドレスを整数で表したものとなります。</para>
    <para>
      注意: この関数を使用するには、F_DISTRIBUTED フラグを設定しておく必要があります。
      このフラグは、現在のところコンパイル時に hg_comm.c の中で設定することのみが可能です。
      このフラグは、デフォルトでは設定されていません。
      hg_comm.c の先頭にあるコメントをお読みください。
      </para> 
   </refsect1>
  </refentry>

   <refentry id="function.hw-modifyobject">
    <refnamediv>
     <refname>hw_Modifyobject</refname>
     <refpurpose>オブジェクトレコードを修正する</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
     <funcprototype>
       <funcdef>int <function>hw_modifyobject</function></funcdef>
       <paramdef>int <parameter>connection</parameter></paramdef>
       <paramdef>int <parameter>object_to_change</parameter></paramdef>
       <paramdef>array <parameter>remove</parameter></paramdef>
       <paramdef>array <parameter>add</parameter></paramdef>
       <paramdef>int <parameter>mode</parameter></paramdef>
  
     </funcprototype>
     </funcsynopsis>
     <para>
	このコマンドによりオブジェクトレコードの個々の属性を削除、追加、修正する
	ことが可能となります。
	オブジェクトはオブジェクトID <parameter>object_to_change</parameter>
	により指定します。
	最初の配列 <parameter>remove</parameter> は、削除する属性のリストです。
	二番目の配列 <parameter>add</parameter> は、加えたい属性のリストです。
	ある属性を修正するためには、古い属性を削除し、新規に追加する必要が
	ります。
     <function>hw_modifyobject</function> は、
	削除する属性の値が文字列または配列でない限り、つねに属性を追加する前に
	属性の削除を行います。</para>
 
     <para>
	最後のパラメータは、修正を再帰的に行うかどうかを指定します。
	1は、再帰的な修正を意味します。
	オブジェクトのいくつかを修正できない場合、通知されることなくスキップ
	されます。
      <function>hw_error</function> は、いくつかのオブジェクトが
	修正されなかったことからエラーを発生しない可能性があります。</para>
 
     <para>
	二つの配列のキーは属性の名前です。各配列要素の値は、配列または文字列または
	その他のものとすることができます。
	配列の場合、各属性の値は、各要素のキーにコロンと各要素の値を加えたものから
	構成されます。文字列の場合、属性の値として指定します。
	空文字列を指定するとその属性は完全に削除されます。
	値が文字列でも配列でもなく、整数のような他のものである場合、
	その属性に関して処理は全く行われません。
	このような動作は、既存の属性に新規の値を追加するのではなく、
	完全に新規の属性を追加したい場合に必要です。
	remove 配列がその属性に関する空の文字列を含む場合、値が存在しないため、
	その属性の削除は失敗します。
	続いてその属性に新規の値を追加する処理も同じく失敗します。
	属性の値を例えば0に設定すると削除することさえできませんが、
	加算は実行可能です。</para>
 
     <para>
	値 'books'を有する属性 'Name' を 'articles' に変更したい場合、
	二つの配列を作成し、<function>hw_modifyobject</function> をコールする
	必要があります。
    
      <example>
       <title>属性を修正する</title>
       <programlisting role="php">
        // $connect は、Hyperwave サーバーへの既存の接続です。
        // $objid は、修正するオブジェクトのIDです。
        $remarr = array("Name" => "books");
        $addarr = array("Name" => "articles");
        $hw_modifyobject($connect, $objid, $remarr, $addarr);
       </programlisting>
      </example>
	  名前=値の組を削除/追加するためには、オブジェクトレコードをremove/add 
	配列にて渡し、最後/3番目のパラメータは空の配列にします。
	新規に属性を追加する場合には、
	remove 配列におけるその属性の値を整数に設定して下さい。
      <example>
       <title>完全に新規の属性を追加する</title>
       <programlisting role="php">
        // $connect は、Hyperwave サーバーへの既存の接続です。
        // $objid は、修正するオブジェクトのIDです。
        $remarr = array("Name" => 0);
        $addarr = array("Name" => "articles");
        $hw_modifyobject($connect, $objid, $remarr, $addarr);
       </programlisting>
      </example></para>
     <para>
      <note>
       <simpara>
       'Title' のような多言語属性は、2つの方法で修正可能です。
       この場合、
        'language':'title' という基本形式で属性の値を与えるか、
	下記のように各言語毎に配列の要素を与えることにより指定します。
	まずは、以下の例を見てみましょう。</simpara>
      </note>
      <example>
       <title>Title 属性を修正する</title>
       <programlisting role="php">
        $remarr = array("Title" => "en:Books");
        $addarr = array("Title" => "en:Articles");
        $hw_modifyobject($connect, $objid, $remarr, $addarr);
       </programlisting>
      </example>
       または
      <example>
       <title>Title 属性を修正する</title>
       <programlisting role="php">
        $remarr = array("Title" => array("en" => "Books"));
        $addarr = array("Title" => array("en" => "Articles", "ge"=>"Artikel"));
        $hw_modifyobject($connect, $objid, $remarr, $addarr);
       </programlisting>
      </example>
      この例では、英語のタイトル 'Books' を削除し、
      英語のタイトル 'Articles' およびドイツ語のタイトル
      'Artikel' を追加しています。
      <example>
       <title>属性を削除する</title>
       <programlisting role="php">
        $remarr = array("Title" => "");
        $addarr = array("Title" => "en:Articles");
        $hw_modifyobject($connect, $objid, $remarr, $addarr);
       </programlisting>
      </example>
      <note><simpara> 
      この例では、 'Title' という名前の属性を全て削除し、
      属性 'Title' を新規に追加しています。
      全ての属性を再帰的に削除したい場合には、これは簡便な方法です。
       </simpara></note>
      <note>
       <simpara>
       ある名前を有する全ての属性を削除する必要がある場合には、
       属性の値として空の文字列を渡してください。</simpara>
      </note>
     <note><simpara>
     
      属性 'Title', 'Description' , 'Keyword' のみが
      言語指定用の接頭辞を正しく処理します。
      これらの属性において言語指定用接頭辞が指定されていない場合、
      接頭辞 'xx' が割りつけられます。
     </simpara></note>
     <note><simpara>
      'Name' 属性もやや特殊です。いくつかの場合には、完全に削除することは
      できません。
      'Change of base attribute' というエラーメッセージが発生する可能性が
      あります。(いつこのエラーが発生するかは明らかではありません) 
      このため、新しい Name をまず追加してから、古いものを削除する
      必要があります。
     </simpara></note>
     <note><simpara>
     この関数のコールの前後に <function>hw_getandlock</function> および 
     <function>hw_unlock</function> をコールする必要はありません。
       <function>hw_modifyobject</function> は内部的にこの処理を
       行います。
     </simpara></note></para>
     <para>
     エラーを生じた場合はTRUE、それ以外の場合にはFALSEを返します。</para>
    </refsect1>
   </refentry>
 
  <refentry id="function.hw-new-document">
   <refnamediv>
    <refname>hw_New_Document</refname>
    <refpurpose>新しいドキュメントを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_new_document</function></funcdef>
      <paramdef>string <parameter>object_record</parameter></paramdef>
      <paramdef>string <parameter>document_data</parameter></paramdef>
      <paramdef>int <parameter>document_size</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    
    ドキュメントデータの組を <parameter>document_data</parameter> に、
    オブジェクトレコードの組を <parameter>object_record</parameter> に
    有する新しい Hyperwave ドキュメントを返します。 
     <parameter>document_data</parameter> の長さを
    <parameter>document_size</parameter> で渡す必要があります。
    この関数は、ドキュメントを Hyperwave サーバーに挿入しません。</para>
    <para>
     <function>hw_FreeDocument</function>,
              <function>hw_DocumentSize</function>,
              <function>hw_DocumentBodyTag</function>,
              <function>hw_OutputDocument</function>,
              <function>hw_InsertDocument</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-objrec2array">
   <refnamediv>
    <refname>hw_Objrec2Array</refname>
    <refpurpose>属性をオブジェクトレコードからオブジェクト配列に変換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>hw_objrec2array</function></funcdef>
      <paramdef>string <parameter>object_record</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>object_record</parameter> をオブジェクト配列に変換します。
	結果の配列のキーは属性の名前です。'Title' のように
	異なった言語で多重定義を行う属性は、それ自体で配列となります。
	この配列のキーは、属性の値のコロンの左の部分にあります。
	現在、'Title', 'Description', 'Keyword' のみが適正に処理されます。
	他の多重属性は、添字配列となります。現在、属性 'Group' のみが
	正しく処理されます。</para>
    <para>
     <function>hw_array2objrec</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-outputdocument">
   <refnamediv>
    <refname>hw_OutputDocument</refname>
    <refpurpose>hw_document を出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_outputdocument</function></funcdef>
      <paramdef>int <parameter>hw_document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    BODY タグを除きドキュメントを出力します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-pconnect">
   <refnamediv>
    <refname>hw_pConnect</refname>
    <refpurpose>持続的データベース接続を作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_pconnect</function></funcdef>
      <paramdef>string <parameter>host</parameter></paramdef>
      <paramdef>int <parameter>port</parameter></paramdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    成功時に接続インデックスを、接続できなかった場合に FALSE を返します。
    Hyperwave サーバーへの持続的接続をオープンします。
    各引数は、ポート番号を除き引用符で括った文字列である必要があります。
    <parameter>username</parameter> と<parameter>password</parameter> 引数は
    オプションであり、省略することができます。この場合、サーバーとの認証は
    行われません。これは、匿名ユーザーとして認証されることに似ています。
    この関数は、他の Hyperwave 関数で必要な接続インデックスを返します。
    同時に複数の持続的接続をオープンすることができます。</para>
    <para>
     <function>hw_Connect</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-pipedocument">
   <refnamediv>
    <refname>hw_PipeDocument</refname>
    <refpurpose>ドキュメントを取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_pipedocument</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    オブジェクト ID <parameter>objectID</parameter> を有する
     Hyperwave ドキュメントを返します。
     ドキュメントが、挿入?能なアンカーを有している場合、
     既に挿入されているかもしれません。
     ドキュメントは、制御用接続をブロックしない特別なデータ接続により
     伝達されます。</para>
    <para>
     リンク挿入に関する詳細は、<function>hw_GetText</function> 
              <function>hw_FreeDocument</function>,
              <function>hw_DocumentSize</function>,
              <function>hw_DocumentBodyTag</function>,
              <function>hw_OutputDocument</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-root">
   <refnamediv>
    <refname>hw_Root</refname>
    <refpurpose>ルートオブジェクト ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_root</function></funcdef>
      <paramdef><parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    hyperroot コレクションのオブジェクト ID を返します。
    現在、これは常に 0 となります。hyperroot の子コレクション
    は、接続するサーバーのルートコレクションです。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-unlock">
   <refnamediv>
    <refname>hw_Unlock</refname>
    <refpurpose>オブジェクトをアンロックする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>hw_unlock</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter>objectID</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    ドキュメントをアンロックし、他のユーザーが再びアクセスできる
    ようにします。</para>
    <para>
     <function>hw_GetAndLock</function> も参照下さい。</para>
    </refsect1>
   </refentry>
 
   <refentry id="function.hw-who">
    <refnamediv>
     <refname>hw_Who</refname>
     <refpurpose>現在ログイン中のユーザーのリスト</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
     <funcprototype>
       <funcdef>int <function>hw_who</function></funcdef>
       <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <para>
	Hyperwave サーバーに現在ログイン中のユーザーの配列を返します。
	この配列の各エントリは、要素ID、名前、システム、onSinceDate, onSinceTime,
	 TotalTime , self を有する配列です。
	このエントリがリクエストを初期化したユーザーに属している場合、
	'self'は1となります。</para>
   </refsect1>
  </refentry>

  <refentry id="function.hw-getusername">
   <refnamediv>
    <refname>hw_Username</refname>
    <refpurpose>現在ログインしているユーザーの名前</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hw_getusername</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    接続のユーザー名を返します。</para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
