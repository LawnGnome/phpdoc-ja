<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.24 $ -->
 <reference id="ref.mysql">
  <title>MySQL関数</title>
  <titleabbrev>MySQL</titleabbrev>
  <partintro>
   <simpara>
    以下の関数は、MySQLデータベースサーバーへのアクセスを可能にします。
    これらの関数を利用可能とするには、
    <option role="configure">--with-mysql</option> オプションを使用す
    ることにより、MySQLサポートを着けてPHPをコンパイルする必要がありま
    す。MySQLのパスを指定せずにこのオプションを使用する場合、PHPは付属
    のMySQLクライアントライブラリを使用します。(例えば、php3 および
    php4 を Apache モジュールとして並列実行したり、auth_mysql を実行す
    る場合)MySQLを使用する他のアプリケーションを実行するユーザは常に
    MySQLへのパスを次のように指定する必要があります。
    <option role="configure">--with-mysql=/path/to/mysql</option>
    これにより、MySQLによりインストールされたクライアントライブラリの
    使用を混乱することなくPHPに強制的に指定可能です。
   </simpara>
   <simpara>
    MySQLに関するより詳細な情報は、
    <ulink url="&url.mysql;">&url.mysql;</ulink>にあります。
   </simpara>
   <simpara>
    MySQL のドキュメントは、<ulink
    url="&url.mysql.docs;">&url.mysql.docs;</ulink>にあります。
   </simpara>
   <para>
    MySQL関数の動作は、グローバルな<link linkend="configuration">設定
    </link>ファイルの設定の影響を受けます。
    <table>
     <title><link linkend="ini.sect.mysql">MySQL設定</link>オプション</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>名前</entry>
        <entry>デフォルト</entry>
        <entry>変更の可否</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mysql.allow_persistent</entry>
        <entry>"On"</entry>
        <entry>PHP_INI_SYSTEM</entry>
       </row>
       <row>
        <entry>mysql.max_persistent</entry>
        <entry>"-1"</entry>
        <entry>PHP_INI_SYSTEM</entry>
       </row>
       <row>
        <entry>mysql.max_links</entry>
        <entry>"-1"</entry>
        <entry>PHP_INI_SYSTEM</entry>
       </row>
       <row>
        <entry>mysql.default_port</entry>
        <entry>NULL</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
       <row>
        <entry>mysql.default_socket</entry>
        <entry>NULL</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
       <row>
        <entry>mysql.default_host</entry>
        <entry>NULL</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
       <row>
        <entry>mysql.default_user</entry>
        <entry>NULL</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    PHP_INI_*定数に関する詳細と定義については、
    <function>ini_set</function>を参照下さい。
   </para>
   <para>
    以下は、MySQLデータベースに接続し、クエリを実行し、結果レコードを
    出力、接続を断する例です。
    <example>
     <title>MySQL拡張に関する概要の例</title>
     <programlisting role="php">
<![CDATA[
<?php
// データベースに接続し、選択する
$link = mysql_connect("mysql_host", "mysql_login", "mysql_password")
    or die("Could not connect");
print "Connected successfully";
mysql_select_db("my_database")
    or die("Could not select database");

// SQLクエリを実行する
$query = "SELECT * FROM my_table";
$result = mysql_query($query)
    or die("Query failed");

// HTMLに結果を出力する
print "<table>\n";
while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {
    print "\t<tr>\n";
    foreach ($line as $col_value) {
        print "\t\t<td>$col_value</td>\n";
    }
    print "\t</tr>\n";
}
print "</table>\n";

// 接続を閉じる
mysql_close($link);
?>
]]>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.mysql-affected-rows">
   <refnamediv>
    <refname>mysql_affected_rows</refname>
    <refpurpose>一番最近のクエリーで変更された行の数を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_affected_rows</methodname>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_affected_rows</function>は、指定した
     <parameter>link_identifier</parameter> が指すサーバーにおいて直近
     のINSERT、UPDATE、DELETEクエリーにより変更された行の数を返します。
     link_identifierが指定されない場合、
     <function>mysql_connect</function> により直近にオープンされたリン
     クが指定されたと仮定されます。
    </para>
    <note>
     <para>
      トランザクションを使用する場合には、 コミット後ではなく、INSERT,
      UPDATE, DELETE クエリの後に
      <function>mysql_affected_rows</function> をコールする必要があり
      ます。
     </para>
    </note>
    <para>
     直近のクエリーがWHERE節のないDELETEクエリーであった場合、全レコー
     ドはテーブルから削除されていますが、この関数はゼロを返します。
    </para>
    <note>
     <para>
      UPDATEを使用する場合、MySQL は新しい値が古い値と同じ場合にはカラ
      ムを更新しません。このため、
      <function>mysql_affected_rows</function> はマッチした行の数には
      一致しない可能性があり、単にクエリにより文字の上で作用された行
      の数となります。
     </para>
    </note>
    <para>
     <function>mysql_affected_rows</function> は、SELECT文には使用でき
     ません。レコードを修正する文でのみ使用できます。SELECTから返され
     る行の数を得る際には、<function>mysql_num_rows</function>を使用し
     て下さい。
    </para>
    <para>
     直近のクエリが失敗した場合、この関数は-1を返します。
    </para>
    <para>
     <function>mysql_num_rows</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-change-user">
   <refnamediv>
    <refname>mysql_change_user</refname>
    <refpurpose>
     アクティブな接続でログイン中のユーザーを変更する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_change_user</methodname>
      <methodparam><type>string</type><parameter>user</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam><type>string</type><parameter>
	<replaceable><optional>database</optional></replaceable>
       </parameter></methodparam>
      <methodparam><type>resource</type><parameter>
	<replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_change_user</function> は、現在アクティブな接続ま
     たはリンクIDが指定された場合には指定したその接続にログイン中のユー
     ザーを変更します。databaseが指定された場合、ユーザーが変更された
     後、このデータベースがデフォルトまたはカレントのデータベースとな
     ります。新規の user/password の組み合わせの認証に失敗した場合、
     現在接続中のユーザーがアクティブなままとなります。
    </para>
    <note>
     <para>
      この関数は PHP 3.0.13 で導入されたものであり、MySQL3.23.3以降が
      必要であることに注意して下さい。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.mysql-close">
   <refnamediv>
    <refname>mysql_close</refname>
    <refpurpose>MySQL接続を閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>mysql_close</methodname>
      <methodparam><type>resource</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     &return.success;
    </para>
    <para> 
     <function>mysql_close</function>は、指定したlink_identifierが指す
     MySQLデータベースへのリンクを閉じます。
     <parameter>link_identifier</parameter>が指定されない場合、最後に
     オープンされたリンクが使用されます。
    </para>
    <para> 
     持続的でないリンクはスクリプトの実行終了時に自動的に閉じられるの
     で、この関数は通常の場合必要ありません。<link
     linkend="language.types.resource.self-destruct">リソースの解放
     </link>を参照下さい。
    </para>
    <para> 
     <function>mysql_close</function>は、<function>mysql_pconnect</function>
     により生成された持続的リンクを閉じません。
    </para>
    <example>
     <title>MySQL 接続をクローズする例</title>
     <programlisting role="php">
<![CDATA[
<?php
    $link = mysql_connect("kraemer", "marliesle", "secret")
        or exit("Could not connect");
    print ("Connected successfully");
    mysql_close($link);
?>
]]>
     </programlisting>
    </example>
    <para> 
     <function>mysql_connect</function>および
      <function>mysql_pconnect</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-connect">
   <refnamediv>
    <refname>mysql_connect</refname>
    <refpurpose>MySQLサーバーへの接続をオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_connect</methodname>
      <methodparam choice="opt"><type>string</type><parameter>
        server
       </parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>
        username
       </parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>
        password
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     接続に成功した場合は正のMySQLリンクIDを返します。エラーの場合には
     エラーメッセージを発生します。
    </para>
    <para> 
     <function>mysql_connect</function>は、MySQL サーバーへの接続を確
     立します。オプションのパラメータが指定されない場合、以下のデフォ
     ルト値が使用されます。: 
     <parameter>server</parameter> = 'localhost:3306', 
     <parameter>username</parameter> = サーバプロセスの所有ユーザ名
     <parameter>password</parameter> = 空のパスワード
    </para>
    <para>
     パラメータ<parameter>server</parameter>には、ポート番号も指定する
     ことが可能です。例えば、&quot;hostname:port&quot;、または、
     localhostの場合には、ソケットへのパス
     &quot;:/path/to/socket&quot;とします。
     <note>
      <para>
       &quot;:port&quot;のサポートは3.0B4で追加されました。
      </para>
      <para>
       &quot;:/path/to/socket&quot;のサポートは 3.0.10で追加されました。
      </para>
      <para>
       関数名の前に'@'を付けることに接続に失敗した場合のエラーメッセージを
       出力しないようにできます。
      </para>
     </note>
    </para>
    <para> 
     同じ引数で2回<function>mysql_connect</function>をコールした場合、
     二回目は新規のリンクが確立されるのではなく、代わりにすでにオープンされた
     リンクのリンクIDが返されます。
    </para>
    <para> 
     サーバーへのリンクは、<function>mysql_close</function>のコールにより
     明示的に閉じられない限り、スクリプトの実行終了と同時に閉じられます。
    </para>
    <example>
     <title>MySQL に接続する例</title>
     <programlisting role="php">
<![CDATA[
<?php
    $link = mysql_connect("localhost", "username", "secret")
        or die("Could not connect");
    print ("Connected successfully");
    mysql_close($link);
?>
]]>
     </programlisting>
    </example>
    <para> 
     <function>mysql_pconnect</function>および
     <function>mysql_close</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-create-db">
   <refnamediv>
    <refname>mysql_create_db</refname>
    <refpurpose>MySQLデータベースを作成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>mysql_create_db</methodname>
      <methodparam><type>string</type><parameter>database_name</parameter></methodparam>
      <methodparam><type>resource</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_create_db</function>は、指定したリンクIDが指す
     サーバー上に新規のデータベースを作成します。
    </para>
    <example>
     <title>MySQLデータベースを作成する例</title>
     <programlisting role="php">
<![CDATA[
<?php
    $link = mysql_pconnect("kron", "jutta", "geheim")
        or exit("Could not connect");
    if (mysql_create_db("my_db")) {
        print ("Database created successfully\n");
    } else {
        printf ("Error creating database: %s\n", mysql_error ());
    }
?>
]]>
     </programlisting>
    </example>
    <para> 
     下位互換性の維持のため、<function>mysql_createdb</function>も
     使用可能です。
    </para>
    <para> 
     <function>mysql_drop_db</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-data-seek">
   <refnamediv>
    <refname>mysql_data_seek</refname>
    <refpurpose>内部的な結果ポインタを移動する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>mysql_data_seek</methodname>
      <methodparam><type>resource</type><parameter>result_identifier</parameter></methodparam>
      <methodparam><type>int</type><parameter>row_number</parameter></methodparam>
     </methodsynopsis>
    <para> 
     &return.success;
    </para>
    <para> 
     <function>mysql_data_seek</function>は、指定した結果ID 
     (result_identifier)が指すMySQL結果の内部ポインタが指定した行番号
     (row_number)を指すように移動します。
     この後、<function>mysql_fetch_row</function>をコールした場合には、
     ここで指定した行の内容が返されます。
    </para>
    <para>
     <parameter>row_number</parameter> は、0から始まります。
    </para>
    <example>
     <title>MySQLデータをシークする例</title>
     <programlisting role="php">
<![CDATA[
<?php
    $link = mysql_pconnect("kron", "jutta", "geheim")
        or die("Could not connect");

    mysql_select_db("samp_db")
        or exit("Could not select database");

    $query = "SELECT last_name, first_name FROM friends";
    $result = mysql_query($query)
        or die("Query failed");

    // fetch rows in reverse order

    for ($i = mysql_num_rows($result) - 1; $i >=0; $i--) {
        if (!mysql_data_seek($result, $i)) {
            echo "Cannot seek to row $i\n";
            continue;
        }

        if(!($row = mysql_fetch_object($result)))
            continue;

        echo "$row->last_name $row->first_name<br />\n";
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-db-name">
   <refnamediv>
    <refname>mysql_db_name</refname>
    <refpurpose>データベース名を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_db_name</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>row</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>
        <replaceable><optional>field</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_db_name</function>は、
     <function>mysql_list_dbs</function>をコールした際に得られた
     <function>mysql_list_dbs</function>結果ポインタを最初の引数として
     とり、パラメータ<parameter>row</parameter>は結果セットでの添字と
     なります。
    </para>
    <para>
     エラーを発生した場合、&false; が返されます。エラーの発生源を定義す
     るには、<function>mysql_errno</function>および
     <function>mysql_error</function>を使用して下さい。
    </para>
    <example>
     <title><function>mysql_db_name</function> の例</title>
     <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);

mysql_connect('dbhost', 'username', 'password');
$db_list = mysql_list_dbs();

$i = 0;
$cnt = mysql_num_rows($db_list);
while ($i < $cnt) {
    echo mysql_db_name($db_list, $i) . "\n";
    $i++;
}
?>
]]>
     </programlisting>
    </example>
    <para>
     推奨されませんが、下位互換性のために
     <function>mysql_dbname</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-db-query">
   <refnamediv>
    <refname>mysql_db_query</refname>
    <refpurpose>MySQLクエリーを送信する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>resource</type><methodname>mysql_db_query</methodname>
      <methodparam><type>string</type><parameter>database</parameter></methodparam>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>resource</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     クエリーの結果へのMySQL結果IDを返します。エラーの場合は、
     &false;を返します。
    </para>
    <para> 
     <function>mysql_db_query</function>は、データベースdatabaseを選択し、
     そのデータベースに対してクエリーを実行します。
     オプションのlink_identifierが指定されない場合、関数は、そのMySQL
     サーバーに対してオープンされているリンクを探すことを試みます。
     そのようなリンクが見つからない場合、
     <function>mysql_connect</function>が引数なしでコールされた時と
     同様にリンクを作成しようとします。
    </para>
    <para> 
     <function>mysql_connect</function>と
     <function>mysql_query</function>も参照下さい。
    </para>
    <para>
     <note>
      <simpara>
       この関数は、PHP 4.0.6以降古い関数となっています。この関数は使用
       しないで下さい。替わりに<function>mysql_select_db</function>お
       よび<function>mysql_query</function>を使用して下さい。
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-drop-db">
   <refnamediv>
    <refname>mysql_drop_db</refname>
    <refpurpose>MySQLデータベースを破棄(削除)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>bool</type><methodname>mysql_drop_db</methodname>
      <methodparam><type>string</type><parameter>database_name</parameter></methodparam>
      <methodparam><type>resource</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     &return.success;
    </para>
    <para> 
     <function>mysql_drop_db</function>は、指定したlink_identifierが指す
     データベース全体を破棄(削除)しようとします。
    </para>
    <para> 
     <function>mysql_create_db</function>も参照下さい。
     下位互換性の維持のため、<function>mysql_dropdb</function>を
     使用することも可能です。
    </para>
    <para>
     <function>mysql_create_db</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-errno">
   <refnamediv>
    <refname>mysql_errno</refname>
    <refpurpose>
     直近のMySQL処理からエラーメッセージのエラー番号を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_errno</methodname>
      <methodparam><type>resource</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     MySQLデータベースバックエンドから返ってくるエラーは、
     警告を発生しません。代わりにエラー番号を得るためにこれらの関数を
     使用して下さい。
     直近のMySQL関数からのエラー番号を返します。エラーが発生していない
     場合は、<literal>0</literal> (ゼロ)を返します。
    </para>
    <para>
     MySQLバックエンドから返されたもうエラー警告を発生しません。代わり
     に、エラーコードを取得するために<function>mysql_errno</function>
     を使用して下さい。この関数は、直近に実行された(
     <function>mysql_error</function>と
     <function>mysql_errno</function>以外の)MySQL関数のエラーコードの
     みを返すことに注意して下さい。このため、この関数を使用したい場合、
     他のMySQL関数をコールする前に値をチェックするようにして下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."<BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."<BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."<BR>";
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para> 
     <function>mysql_error</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-error">
   <refnamediv>
    <refname>mysql_error</refname>
    <refpurpose>
     直近に実行されたMySQLコールのエラーメッセージを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_error</methodname>
      <methodparam><type>resource</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     直近のMySQL関数からのエラー文字列を返します。エラーが発生していな
     い場合には、<literal>''</literal> (空文字列) を返します。
    </para>
    <para>
     MySQLデータベースバックエンドから返されたエラーはもう警告を発生し
     ません。エラー文字列を取得するには、代わりに
     <function>mysql_error</function>を使用して下さい。
     この関数は、直近に実行された(<function>mysql_error</function>と
     <function>mysql_errno</function>以外の)MySQL関数のエラー文字列の
     みを返すことに注意して下さい。このため、この関数を使用したい場合、
     他のMySQL関数をコールする前にあ値をチェックするようにして下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."<BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."<BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."<BR>";
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para> 
     <function>mysql_errno</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-escape-string">
   <refnamediv>
    <refname>mysql_escape_string</refname> 
    <refpurpose>
     mysql_queryで使用するために文字列をエスケープする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_escape_string</methodname>
      <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は、<function>mysql_query</function>で指定可能なように
     <parameter>unescaped_string</parameter>をエスケープします。
    </para>
    <note>
     <simpara>
      <function>mysql_escape_string</function> は、<literal>%</literal>
      および <literal>_</literal>はエスケープしません。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname>
    <refpurpose>
     連想配列、添字配列、またはその両方として結果の行を取得する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_array</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>result_type</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     取得した行に対応する配列を返します。最後の行までいった場合は、
     &false;を返します。
    </para>
    <para>
     <function>mysql_fetch_array</function>は、
     <function>mysql_fetch_row</function>の拡張版です。
     この関数は、result配列の番号インデックスにデータを格納するだけでなく、
     フィールド名をキーとした連想配列にもデータを格納します。
    </para>
    <para>
     結果の中で二つ以上のカラムが同じフィールド名を有している場合、
     最後のカラムが優先されます。
     同名の他のカラムにアクセスするには、そのカラムの数値インデックス
     を使うかまたはカラムの別名を定義する必要があります。
     <informalexample>
      <programlisting role="sql">
<![CDATA[
select tone.field as foo ttwo.field as bar from tone, ttwo
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     注意すべき点としては、<function>mysql_fetch_array</function>は、
     非常に高い附加価値を有しているにもかかわらず、
     <function>mysql_fetch_row</function>よりそれほど遅くはないと
     いうことが言えます。
    </para>
    <para>
     <function>mysql_fetch_array</function>の
     オプションの2番目の引数<parameter>result_type</parameter>は定数であり、
     次の値をとります。: MYSQL_ASSOC, MYSQL_NUM, MYSQL_BOTH
     この機能は PHP 3.0.7で追加された機能です。この引数のデフォルト値は、
     MYSQL_BOTHです。
    </para>
    <para>
     MYSQL_BOTHを使用すると、連想添字と数値添字を共に有する配列を取得
     します。MYSQL_ASSOCを使用すると、(
     <function>mysql_fetch_assoc</function>の動作と同様に)連想添字のみ
     が取得され、MYSQL_NUMを使用すると、
     (<function>mysql_fetch_row</function>の動作と同様に数値添字のみが
     取得されます。
    </para>
    <para>
     より詳細な情報については、
     <function>mysql_fetch_row</function>、
     <function>mysql_fetch_assoc</function>も参照下さい。
    </para>
    <example>
     <title><function>mysql_fetch_array</function>の例</title>
     <programlisting role="php">
<![CDATA[
<?php
mysql_connect($host, $user, $password);
mysql_select_db("database");
$result = mysql_query("select user_id, fullname from table");
while ($row = mysql_fetch_array($result)) {
    echo "user_id: ".$row["user_id"]."<br>\n";
    echo "user_id: ".$row[0]."<br>\n";
    echo "fullname: ".$row["fullname"]."<br>\n";
    echo "fullname: ".$row[1]."<br>\n";
}
mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-assoc">
   <refnamediv>
    <refname>mysql_fetch_assoc</refname> 
    <refpurpose>
     連想配列として結果の行を取得する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_assoc</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para>
     取得した行に対応する連想配列を返します。行がもうない場合には、
     &false;を返します。
    </para>
    <para>
     <function>mysql_fetch_assoc</function> は、
     <function>mysql_fetch_array</function> のオプションの2番目のパラ
     メータにMYSQL_ASSOCを指定してコールした場合と等価です。この関数は、
     連想配列のみを返します。これは、
     <function>mysql_fetch_array</function>の元の動作と同じです。連想
     配列と同時に数値添字が必要な場合は、
     <function>mysql_fetch_array</function>を使用して下さい。
    </para>
    <para>
     結果の複数のカラムが同じフィールド名を有している場合、最後のカラ
     ムが優先されます。同じ名前を有する他のカラムにアクセスするには、
     <function>mysql_fetch_row</function>を使用して数値添字を返すか、
     エイリアス名を追加する必要があります。エイリアスの説明については、
     <function>mysql_fetch_array</function>の例を参照下さい。
    </para>
    <para>
     <function>mysql_fetch_assoc</function>の使用に関して、著しい付加
     価値があるにもかかわらず<function>mysql_fetch_row</function>より
     も著しく遅くはないという点を特筆すべき点として強調しておきます。
    </para>
    <para>
     より詳細な情報については、<function>mysql_fetch_row</function> お
     よび <function>mysql_fetch_array</function>を参照下さい。
    </para>
    <example>
     <title><function>mysql_fetch_assoc</function></title>
     <programlisting role="php">
<![CDATA[
<?php
mysql_connect($host, $user, $password);
mysql_select_db($database);
$query = "select * from table";
$result = mysql_query($query);
while ($row = mysql_fetch_assoc($result)) {
    echo $row["user_id"];
    echo $row["fullname"];
}
mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-field">
   <refnamediv>
    <refname>mysql_fetch_field</refname>
    <refpurpose>
     結果からカラム情報を取得し、オブジェクトとして返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>object</type><methodname>mysql_fetch_field</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>field_offset</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     フィールド情報を含むオブジェクトを返します。
    </para>
    <para>
     <function>mysql_fetch_field</function>は、特定のクエリー結果
     の中のフィールドに関する情報を得るために使用可能です。
     フィールドオフセットを指定しない場合、次のフィールドのうち、
     <function>mysql_fetch_field</function>によりまだ取得されていない
     ものが取得されます。
    </para>
    <para>
     オブジェクトのプロパティは、次の通りです。
     <itemizedlist>
      <listitem>
       <simpara>
	name - カラム名
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	table - カラムが属しているテーブルの名前
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	max_length - カラムの最大長
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	not_null - カラムが「not &null;」であれば 1
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	primary_key - カラムが「primary key」であれば 1
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	unique_key - カラムが「unique key」であれば 1
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	multiple_key - カラムが「non-unique key」であれば 1
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	numeric - カラムが数値(numeric)であれば1
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	blob - カラムがBLOBであれば1
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	type - カラムの型
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	unsigned - カラムが符号無し(unsigned)であれば1
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	zerofill - カラムがゼロで埋められている(zero-filled)場合に1
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <example>
     <title><function>mysql_fetch_field</function></title>
     <programlisting role="php">
<![CDATA[
<?php
mysql_connect('localhost:3306', $user, $password)
    or die ("Could not connect");
mysql_select_db("database");
$result = mysql_query("select * from table")
    or die("Query failed");
# get column metadata
$i = 0;
while ($i < mysql_num_fields($result)) {
    echo "Information for column $i:<BR>\n";
    $meta = mysql_fetch_field($result);
    if (!$meta) {
        echo "No information available<BR>\n";
    }
    echo "<PRE>
blob:         $meta->blob
max_length:   $meta->max_length
multiple_key: $meta->multiple_key
name:         $meta->name
not_null:     $meta->not_null
numeric:      $meta->numeric
primary_key:  $meta->primary_key
table:        $meta->table
type:         $meta->type
unique_key:   $meta->unique_key
unsigned:     $meta->unsigned
zerofill:     $meta->zerofill
</PRE>";
    $i++;
}
mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <para>
     <function>mysql_field_seek</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-lengths">
   <refnamediv>
    <refname>mysql_fetch_lengths</refname>
    <refpurpose>
     結果における各出力の長さを得る
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_lengths</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_fetch_row</function>により一番最近に取得された行
     における各フィールドの長さを格納した配列を返します。エラーの場合
     は、&false;を返します。
    </para>
    <para>
     <function>mysql_fetch_lengths</function>は、
     <function>mysql_fetch_row</function>,
     <function>mysql_fetch_array</function>,
     <function>mysql_fetch_object</function>により一番最近に返された
     各結果カラムの長さを格納した配列を返します。この配列のオフセットは
     0から始まります。
    </para>
    <para> 
     <function>mysql_fetch_row</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-object">
   <refnamediv>
    <refname>mysql_fetch_object</refname>
    <refpurpose>結果の行をオブジェクトとして取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>object</type><methodname>mysql_fetch_object</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>result_typ</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     取得された行を表すプロパティを有するオブジェクトを返します。
     もう行が残っていない場合は、&false;を返します。
    </para>
    <para> 
     <function>mysql_fetch_object</function>は、配列の代わりに
     オブジェクトが返されるという一つの違いを除いて
     <function>mysql_fetch_array</function>と類似しています。
     間接的アクセス、つまり、オフセットによってではなく、フィールド名によって
     のみデータにアクセスすることができます。
     (数字は、プロパティ名として使用できません)
    </para>
    <para>
     オプションの2番目の引数 <parameter>result_typ</parameter> は、
     定数であり、次の値をとります。: MYSQL_ASSOC, MYSQL_NUM, MYSQL_BOTH
    </para>
    <para>
     速度面では、この関数は<function>mysql_fetch_array</function>と同等で、
     <function>mysql_fetch_row</function>とほぼ同等です。(違いはわずかです)
     <example>
      <title><function>mysql_fetch_object</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php
mysql_connect("hostname", "user", "password");
mysql_select_db($db);
$result = mysql_query("select * from table");
while ($row = mysql_fetch_object($result)) {
    echo $row->user_id;
    echo $row->fullname;
}
mysql_free_result($result);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para> 
     <function>mysql_fetch_array</function>および
     <function>mysql_fetch_row</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-row">
   <refnamediv>
    <refname>mysql_fetch_row</refname>
    <refpurpose>結果を添字配列として取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_row</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para> 
     取得された行に対応する配列を返します。もう行がない場合は、
     &false;を返します。
    </para>
    <para>
     <function>mysql_fetch_row</function>は、指定した結果(result)ID
     が指す結果から1行分のデータを取得します。
     各結果カラムは、オフセット0から始まる配列に格納されます。
    </para>
    <para>
     <function>mysql_fetch_row</function>を続けてコールした場合、
     結果セットにおける次の行を返します。行がもうない場合は、&false;を
     返します。
    </para>
    <para>
     <function>mysql_fetch_array</function>、
     <function>mysql_fetch_object</function>、
     <function>mysql_data_seek</function>、
     <function>mysql_fetch_lengths</function>、
     <function>mysql_result</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-flags">
   <refnamediv>
    <refname>mysql_field_flags</refname>
    <refpurpose>
     結果において指定したフィールドのフラグを得る
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_field_flags</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_field_flags</function>は、指定したフィールドの
     フィールドフラグを得ます。フラグは、空白一つで区切られたフラグ毎
     に一つの単語として取得されます。このため、
     <function>explode</function>を用いて返り値を分割することができま
     す。
    </para>
    <para>
     運用システム上のMySQLがサポートしている場合、次のフラグがレポート
     されます。"not_null", "primary_key",
     "unique_key", "multiple_key", "blob", "unsigned", "zerofill",
     "binary", "enum", "auto_increment", "timestamp"
    </para>
    <para> 
     下位互換性の維持のため、
     <function>mysql_fieldflags</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-name">
   <refnamediv>
    <refname>mysql_field_name</refname> 
    <refpurpose>結果において指定したフィールド名を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_field_name</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_index</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_field_name</function>は、指定したフィールドの
     名前を返します。<parameter>result</parameter>は有効な結果ID、
     <parameter>field_index</parameter>はフィールドのオフセット数とす
     る必要があります。
    </para>
    <note>
     <para>
      <parameter>field_index</parameter>は0から始まります。
     </para>
     <para>
      例えば、3番目のフィールドの添字は2、4番目のフィールドの添字は3と
      いったようになります。
     </para>
    </note>
    <para>
     <example>
      <title><function>mysql_field_name</function>の例</title>
      <programlisting role="php">
<![CDATA[
// The users table consists of three fields:
//   user_id
//   username
//   password.
$link = mysql_connect('localhost', $user, "secret");
mysql_select_db($dbname, $link)
    or die("Could not set $dbname");
$res = mysql_query("select * from users", $link);

echo mysql_field_name($res, 0) . "\n";
echo mysql_field_name($res, 2);
]]>
      </programlisting>
      <para>
       上の例は出力のようになります。
       <screen>
<![CDATA[
user_id
password
]]>
       </screen>
      </para>
     </example>
    </para>
    <para>
     下位互換性を維持するため、<function>mysql_fieldname</function>
     も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-len">
   <refnamediv>
    <refname>mysql_field_len</refname>
    <refpurpose>
     指定したフィールドの長さを得る
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_field_len</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_field_len</function>は指定したフィールドの長さを
     得ます。下位互換性の維持のため、
     <function>mysql_fieldlen</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-seek">
   <refnamediv>
    <refname>mysql_field_seek</refname>
    <refpurpose>
     結果ポインタを指定したフィールドオフセットにセットする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_field_seek</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    <para>
     指定したフィールドオフセットに移動します。こざ¦հをコールした後、
     <function>mysql_fetch_field</function>をフィールドオフセットを
     付けずにコールした場合、このフィールドが返されます。
    </para>
    <para>
     <function>mysql_fetch_field</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-table">
   <refnamediv>
    <refname>mysql_field_table</refname>
    <refpurpose>
     指定したフィールドが含まれるテーブルの名前を得る
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_field_table</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    <para> 
     フィールドが含まれるテーブルの名前を得ます。下位互換性のため、
     <function>mysql_fieldtable</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-type">
   <refnamediv>
    <refname>mysql_field_type</refname>
    <refpurpose>
     結果において指定したフィールドの型を得る
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_field_type</methodname>
      <methodparam><type>string</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_field_type</function>は、
     <function>mysql_field_name</function>関数に似ています。
     引数は同じですが、この関数ではフィールドの型が返されます。
     この型は、"int"、"real"、"string"、"blob"、
     MySQLドキュメントで詳細が規定された他の型のどれかになります。
    <example>
     <title>mysqlフィールドの型を得る</title>
     <programlisting role="php">
&lt;?php 
mysql_connect ("localhost:3306");
mysql_select_db ("wisconsin");
$result = mysql_query ("SELECT * FROM onek");
$fields = mysql_num_fields ($result);
$rows   = mysql_num_rows ($result);
$i = 0;
$table = mysql_field_table ($result, $i);
echo "Your '".$table."' table has ".$fields." fields and ".$rows." records &lt;BR>";
echo "The table has the following fields &lt;BR>"; 
while ($i &lt; $fields) {
    $type  = mysql_field_type  ($result, $i);
    $name  = mysql_field_name  ($result, $i);
    $len   = mysql_field_len   ($result, $i);
    $flags = mysql_field_flags ($result, $i);
    echo $type." ".$name." ".$len." ".$flags."&lt;BR>";
    $i++;
}
mysql_close();
?>
      </programlisting>
     </example>
    </para>
    <para> 
     下位互換性を維持するため、
     <function>mysql_fieldtype</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-free-result">
   <refnamediv>
    <refname>mysql_free_result</refname>
    <refpurpose>結果保持用メモリを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_free_result</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_free_result</function>は、
     スクリプト実行のメモリの使用量が多すぎると懸念される場合にのみ、
     必要になります。
     指定した結果IDに関する全ての結果保持用メモリは、自動的に開放されます。
    </para>
    <para>
     下位互換性の維持のため、
     <function>mysql_freeresult</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-insert-id">
   <refnamediv>
    <refname>mysql_insert_id</refname>
    <refpurpose>直近のINSERTで生成されたIDを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_insert_id</methodname>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_insert_id</function>は、指定した
     <parameter>link_identifier</parameter>を使用した前のINSERTクエリ
     によりAUTO_INCREMENTEDカラム用に生成されたIDを返します。
     <parameter>link_identifier</parameter>が指定されない場合、
     最後にオープンされた接続が仮定されます。
    </para>
    <para>
     前のクエリがAUTO_INCREMENTの値を生成しない場合には、
     <function>mysql_insert_id</function>は0を返します。この値を後まで
     保存する必要がある場合、値を生成するクエリの直後で
     mysql_insert_id()をコールするようにして下さい。
    </para>
    <note>
     <para>
      MySQL SQL 関数<literal>LAST_INSERT_ID()</literal>の値には、常に
      直近のAUTO_INCREMENTの値が含まれており、クエリの間ではリセットさ
      れません。
    </para>
    </note>
    <warning>
     <para>
      <function>mysql_insert_id</function> は、元のMySQL C API関数
      <literal>mysql_insert_id()</literal>の返り値の型を
      <literal>long</literal>型に変換します。
      AUTO_INCREMENT カラムがBIGINTのカラム型を有している場合、
      <function>mysql_insert_id</function>で返される型は不正確になりま
      す。代わりに、MySQL SQL内部関数
      <literal>LAST_INSERT_ID()</literal>を使用して下さい。
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-dbs">
   <refnamediv>
    <refname>mysql_list_dbs</refname>
    <refpurpose>
     MySQLサーバー上で利用可能なデータベースのリストを得る
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_list_dbs</methodname>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_list_dbs</function>は、カレントのmysqlデーモンから
     利用可能なデータベーィ?格納した結果ポインタを返します。
     この結果ポインタを使用して内容を調べる際には、
     <function>mysql_tablename</function>関数を使用して下さい。
    </para>
    <para>
     下位互換性の位置のため、<function>mysql_listdbs</function>も
     使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-fields">
   <refnamediv>
    <refname>mysql_list_fields</refname>
    <refpurpose>MySQL結果フィールドのリストを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_list_fields</methodname>
      <methodparam><type>string</type><parameter>database_name</parameter></methodparam>
      <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_list_fields</function>は、指定したテーブル名に
     関する情報を検索します。引数は、データベース名およびテーブル名です。
     <function>mysql_field_flags</function>、
     <function>mysql_field_len</function>、
     <function>mysql_field_name</function>、
     <function>mysql_field_type</function>で使用可能な
     結果ポインタが返されます。
    </para>
    <para>
     結果IDは正の整数です。この関数は、エラーが発生した場合に-1を返します。
     エラーを記述する文字列は、<literal>$phperrmsg</literal>に格納され、
     この関数が <literal>@mysql()</literal>としてコールされていない限り、
     エラー文字列も表示されます。
    </para>
    <para>
     下位互換性の維持のため、<function>mysql_listfields</function>
     も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-tables">
   <refnamediv>
    <refname>mysql_list_tables</refname>
    <refpurpose>MySQL データベース上のテーブルのリストを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_list_tables</methodname>
      <methodparam><type>string</type><parameter>database</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_list_tables</function>は、
     <function>mysql_db_query</function>と全く同様に
     データベース名および結果ポインタを引数とします。
     結果ポインタから実際のテーブル名を展開するためには、
     <function>mysql_tablename</function>関数を使用する必要があります。
    </para>
    <para>
     下位互換性を維持するために、
     <function>mysql_listtables</function>も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-fields">
   <refnamediv>
    <refname>mysql_num_fields</refname>
    <refpurpose>結果におけるフィールドの数を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_num_fields</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_num_fields</function>は、結果セットにおける
     フィールドの数を返します。
    </para>
    <para> 
     <function>mysql_db_query</function>、
     <function>mysql_query</function>、
     <function>mysql_fetch_field</function>、
     <function>mysql_num_rows</function> も参照下さい。
    </para>
    <para>
     下位互換性の維持のため、<function>mysql_numfields</function>
     も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-rows">
   <refnamediv>
    <refname>mysql_num_rows</refname>
    <refpurpose>結果における行の数を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_num_rows</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_num_rows</function>は結果セットにおける行の数を返
     します。このコマンドはSELECT文でのみ有効です。
     INSERT、UPDATE、DELETE クエリから返される行の数を取得する際には、
     <function>mysql_affected_rows</function>を使用して下さい。
     <example>
      <title><function>mysql_num_rows</function>の例</title>
      <programlisting role="php">
&lt;?php

$link = mysql_connect("localhost", "username", "password"); 
mysql_select_db("database", $link);

$result = mysql_query("SELECT * FROM table1", $link); 
$num_rows = mysql_num_rows($result); 

echo "$num_rows 行\n";

?&gt;                          
      </programlisting>
     </example>
    </para>
    <para>
     <function>mysql_affected_rows</function>, 
     <function>mysql_connect</function>, 
     <function>mysql_select_db</function>,
     <function>mysql_query</function> も参照下さい。
    </para>
    <para>
     下位互換性の維持のため、<function>mysql_numrows</function>
     も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-pconnect">
   <refnamediv>
    <refname>mysql_pconnect</refname>
    <refpurpose>
     MySQLサーバーへの持続的な接続をオープンする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_pconnect</methodname>
      <methodparam><type>string</type><parameter>
        <replaceable>
	 <optional>hostname
	  <optional>:port</optional>  
	  <optional>:/path/to/socket</optional>
	 </optional>
	</replaceable>
       </parameter></methodparam>
      <methodparam><type>string</type><parameter>
	<replaceable><optional>username</optional></replaceable>
       </parameter></methodparam>
      <methodparam><type>string</type><parameter>
	<replaceable><optional>password</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     成功した場合に正のMySQL持続的link_identifier、エラー発生時に&false;を
     返します。
    </para>
    <para>
     <function>mysql_pconnect</function>は、MySQLサーバーへの
     接続を確立します。全ての引数はオプションであり、
     省略された場合には、デフォルト値('localhost'、サーバープロセスの
     所有者のユーザ名、空のパスワード)が仮定されます。
    </para>
    <para>
     文字列hostnameには、&quot;hostname:port&quot;のようにポート番号を
     指定することが可能で、localhostでは、&quot;:/path/to/socket&quot;
     のようにソケットへのパスを指定することも可能です。
     <note>
      <para>
       &quot;:port&quot;のサポートは、3.0B4で追加されました。
      </para>
      <para>
       &quot;:/path/to/socket&quot;のサポートは3.0.10で追加されました。
      </para>
     </note>
    </para>     
    <para>
     <function>mysql_pconnect</function>は、二つの点を除いて
     <function>mysql_connect</function>と全く同様に動作します。
    </para>
    <para> 
     1番目の違いとしては、この関数は、接続時にまず
     同じホスト、ユーザ名、パスワードを有する(持続的)リンクが
     すでにオープンされていないかどうかを調べます。
     それがみつかった場合、新規の接続をオープンする代わりに
     そのリンクのIDが返されます。
    </para>
    <para> 
     2番目の違いは、SQLサーバーへの接続がスクリプトの実行終了時にも
     閉じられないということです。
     代わりに、リンクは将来的な使用のためにオープンされたままと
     なります。(<function>mysql_close</function>は、
     <function>mysql_pconnect</function>により確立されたリンクを
     閉じません)
    </para>
    <para> 
     このため、この型のリンクは、'持続的(persistent)'であると言われます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-query">
   <refnamediv>
    <refname>mysql_query</refname>
    <refpurpose>SQLクエリーをMySQLに送信する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_query</methodname>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_query</function>は、
     指定したlink_identifierが指すサーバー上の現在アクティブな
     データベースにクエリーを送信します。
     <parameter>link_identifier</parameter>が指定されない場合、
     最後にオープンされたリンクが指定されたと仮定されます。
     リンクが一度もオープンされていない場合、この関数は、
     <function>mysql_connect</function> が引数無しでコールされた時と
     同様にリンクを確立し、使用しようとします。
    </para>
    <para>
     クエリー文字列は、セミコロンで終わる必要はありません。
    </para>
    <para>
     <function>mysql_query</function>は、クエリーが成功したかどうかを
     表すために&true;(非ゼロ)または&false;を返します。
     返り値&true;は、クエリーが正しく、サーバーにより実行されたことを
     意味します。この返り値は、作用されたり、返される行の数に関する情報を
     何も示しません。成功したが行に何も作用せず、行を何も返さないクエリーは
     確実に有りえます。
    </para>
    <para>
     次のクエリーは、文法的には間違っており、
     <function>mysql_query</function>は失敗し、&false;を返します。
     <example>
      <title><function>mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$result = mysql_query ("SELECT * WHERE 1=1")
    or die ("Invalid query");
?>
      </programlisting>
     </example>
    </para>
    <para>
     <literal>my_col</literal>がテーブル<literal>my_tbl</literal>の
     のカラムでない場合、次のクエリーは意味をなしません。
     この場合、<function>mysql_query</function>は失敗し、&false;を返します。
     <example>
      <title><function>mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$result = mysql_query ("SELECT my_col FROM my_tbl")
    or die ("Invalid query");
?>
      </programlisting>
     </example>
    </para>
    <para>
     クエリーが参照するテーブルにアクセスする権限がない場合も
     <function>mysql_query</function>は失敗し、&false;が返されます。
    </para>
    <para>
     クエリが成功したと仮定すると(DELETE, INSERT, REPLACE, UPDATE文について)
     作用を受けた行の数を得るために<function>mysql_affected_rows</function> 
     をコールすることができます。SELECT文については、
     <function>mysql_query</function>は、新規の結果IDを返します。
     このIDは、<function>mysql_result</function>の引数とすることができます。
     結果の処理を終えた後、結果を保持するリソースを
     <function>mysql_free_result</function>により解放することが
     可能です。
    </para>
    <para>
     <function>mysql_affected_rows</function>、
     <function>mysql_db_query</function>、
     <function>mysql_free_result</function>、
     <function>mysql_result</function>、
     <function>mysql_select_db</function>、
     <function>mysql_connect</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-result">
   <refnamediv>
    <refname>mysql_result</refname>
    <refpurpose>結果データを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>mixed</type><methodname>mysql_result</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>row</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>
	<replaceable><optional>field</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_result</function> は、MySQL 結果セットから一つの
     セルの内容を返します。引数fieldには、フィールドのオフセットまたは
     フィールド名またはテーブル名.フィールド名を指定可能です。カラム名
     のエイリアスが定義されている場合 ('select foo as bar from...')、
     そのカラム名の代わりにエイリアスを使用して下さい。
    </para>
    <para>
     大量の結果セットで作業を行う際、(以下で示す)
     行全体を取り込む関氣n一つを使用することを検討するべきです。
     これらの関数は一回の関数コールで複数のセルの内容を返すので、
     <function>mysql_result</function>よりもかなり高速です。
     また、フィールド引数としてオフセット数値を指定する方が
     フィールド名やテーブル名.フィールド名のように指定するよりも
     かなり高速です。
    </para>
    <para>
      <function>mysql_result</function> は、
      結果セットを処理するほかの関数と混用することはできません。
    </para>
    <para>
     推奨される高性能な代替案は、<function>mysql_fetch_row</function>、
     <function>mysql_fetch_array</function>、
     <function>mysql_fetch_object</function>です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-select-db">
   <refnamediv>
    <refname>mysql_select_db</refname>
    <refpurpose>MySQL データベースを選択する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_select_db</methodname>
      <methodparam><type>string</type><parameter>database_name</parameter></methodparam>
      <methodparam><type>int</type><parameter>
        <replaceable><optional>link_identifier</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     成功した場合に&true;、エラーの場合に&false;を返します。
    </para>
    <para> 
     <function>mysql_select_db</function>は、指定したlink_identifierが指す
     サーバー上のデータベースをアクティブなデータベースに設定します。
     link_identifierが指定されていない場合、最後にオープンされたリンクが
     指定されたと仮定されます。
     リンクが一度もオープンされていない場合、
     <function>mysql_connect</function>がコールされた場合と同様に
     リンクの確立を試み、使用します。
    </para>
    <para>
     <function>mysql_query</function>のコールは、常にアクティブな
     データベースに対して行われます。
    </para>
    <para> 
     <function>mysql_connect</function>、 
     <function>mysql_pconnect</function>、
     <function>mysql_query</function>も参照下さい。
    </para>
    <para>
     下位互換性の維持のため、<function>mysql_selectdb</function>
     も使用可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-tablename">
   <refnamediv>
    <refname>mysql_tablename</refname>
    <refpurpose>フィールドのテーブル名を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_tablename</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>i</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_tablename</function>は、
     <function>mysql_list_tables</function>関数より返された結果ポイン
     タおよび整数インデックスを引数とし、テーブルの名前を返します。
     結果ポインタにおけるテーブルの数を定義するために
     <function>mysql_num_rows</function>関数を使用することができます。
     <example>
      <title><function>mysql_tablename</function>の例</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ("localhost:3306");
$result = mysql_list_tables ("wisconsin");
$i = 0;
while ($i &lt; mysql_num_rows ($result)) {
    $tb_names[$i] = mysql_tablename ($result, $i);
    echo $tb_names[$i] . "&lt;BR>";
    $i++;
}
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-get-client-info">
   <refnamediv>
    <refname>mysql_get_client_info</refname>
    <refpurpose>MySQLクライアント情報を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_get_client_info</methodname>
      <methodparam><type>void</type><parameter/></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_get_client_info</function> は、クライアントライブ
     ラリのバージョンを表す文字列を返します。
    </para>
    <para>
     <function>mysql_get_client_info</function> was added in PHP 4.0.5.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-get-host-info">
   <refnamediv>
    <refname>mysql_get_host_info</refname>
    <refpurpose>MySQLホスト情報を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>mysql_get_host_info</methodname>
      <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_get_host_info</function> は、接続
     <parameter>link_identifier</parameter> に使用されている接続の型を
     表す文字列を返します。この文字列には、サーバのホスト名が含まれま
     す。<parameter>link_identifier</parameter> が省略された場合、直近
     にオープンされた接続が使用されます。
    </para>
    <para>
     <function>mysql_get_host_info</function> は、PHP 4.0.5で追加され
     ました。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-get-proto-info">
   <refnamediv>
    <refname>mysql_get_proto_info</refname>
    <refpurpose>MySQLプロトコル情報を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_get_proto_info</methodname>
      <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_get_proto_info</function> は、接続
     <parameter>link_identifier</parameter>で使用されるプロトコルのバー
     ジョンを返します。<parameter>link_identifier</parameter> が省略さ
     れた場合、直近にオープンされた接続が使用されます。
    </para>
    <para>
     <function>mysql_get_proto_info</function> は、PHP 4.0.5で追加され
     ました。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-get-server-info">
   <refnamediv>
    <refname>mysql_get_server_info</refname>
    <refpurpose>MySQLサーバ情報を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>mysql_get_server_info</methodname>
      <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
     </methodsynopsis>
    <para> 
     <function>mysql_get_server_info</function> は、接続
     <parameter>link_identifier</parameter>使用されるサーバーのバージョ
     ンを返します。<parameter>link_identifier</parameter> が省略された
     場合、直近にオープンされた接続が使用されます。
    </para>
    <para>
     <function>mysql_get_server_info</function> は、PHP 4.0.5で追加さ
     れました。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

