 <reference id="ref.mcrypt">
  <title>Mcrypt暗号化関数</title>
  <titleabbrev>mcrypt</titleabbrev>
  
  <partintro>
   <para>
    ここで示す関数は、<ulink url="&url.mcrypt;">mcrypt</ulink> を
    使用して動作します。
   </para>
   <para>
    この関数は、CBC, OFB, CFB ,ECB 暗号モードの
    DES,TripleDES,Blowfish (デフォルト),3-WAY,
    SAFER-SK64, SAFER-SK128, TWOFISH, TEA, RC2 ,GOST の
    ような広範なブロックアルゴリズムをサポートする
    mcrypt ライブラリへのインターフェースです。
    加えて、"フリーではない" と思われるRC6 および IDEA もサポートします。
   </para>
   <para>
    libmcrypt 2.4.xとリンクした場合、加えてブロックアルゴリズム:
    CAST, LOKI97, RIJNDAEL, SAFERPLUS, SERPENT および次のストリーム暗
    号: ENIGMA (crypt), PANAMA, RC4 ,WAKE がサポートされます。
    libmcrypt 2.4.x を使用した場合、暗号モード nOFB もサポートされます。
   </para>
   <para>
    この拡張機能を使用するには、<ulink url="&url.mcrypt;">ここ</ulink> から
    libmcrypt-x.x.tar.gz をダウンロードし、含まれているインストール用の
    指示に従って下さい。この拡張機能を利用可能にするためには、
    PHP を <option role="configure">--with-mcrypt</option> パラメータを
    付けてコンパイルする必要があります。必ず、
    <option role="configure">--disable-posix-threads</option>を付けて
    libmcrypt をコンパイルして下さい。
   </para>
   <para>
    mcrypt は、上に示した暗号を用いて暗号化および複合化を
    行うことが可能です。libmcrypt-2.2.xとリンクした場合、4つの重要な
    mcrypt コマンド (<function>mcrypt_cfb</function>,
    <function>mcrypt_cbc</function>,<function>mcrypt_ecb</function>, 
    <function>mcrypt_ofb</function>) は、MCRYPT_ENCRYPT および
    MCRYPT_DECRYPT という 2つのモードの両方で実行可能です。
    <example>
     <title>入力値を2.2.xにおいて ECB モードの TripleDES で暗号化する</title>
     <programlisting role="php">
&lt;?php
$key = "this is a very secret key";
$input = "Let us meet at 9 o'clock at the secret place.";

$encrypted_data = mcrypt_ecb (MCRYPT_3DES, $key, $input, MCRYPT_ENCRYPT);
?&gt;
     </programlisting>
    </example>
    この例では、$encrypted_data に文字列として暗号化されたデータが
    返されます。
   </para>
   <para>
    libmcrypt 2.4.x とリンクした場合、上記の関数も利用可能ですが、新し
    い関数を使用されることを推奨します。
    <example>
     <title>2.4.xにおいてECBモードでTripleDESにより入力を暗号化する</title>
     <programlisting role="php">
&lt;?php
$key = "this is a very secret key";
$input = "Let us meet at 9 o'clock at the secret place.";

$td = mcrypt_module_open (MCRYPT_TripleDES, "", MCRYPT_MODE_ECB);
$iv = mcrypt_create_iv (mcrypt_enc_get_iv_size ($td), MCRYPT_RAND);
mcrypt_generic_init ($td, $key, $iv);
$encrypted_data = mcrypt_generic ($td, $input);
mcrypt_generic_end ($td);
?&gt;
     </programlisting>
    </example>
    この例は、<literal>$encrypted_data</literal>に文字列として暗号化さ
    れたデータを取得します。
   </para>
   <para>
    mcryptは4つのブロック暗号モード(CBC, OFB, CFB, ECB)で実行可能です。
    libmcrypt-2.4.xにリンクした場合、ブロック暗号モード nOFG とSTREAM
    モードでも実行可能です。MCRYPT_MODE_mode 形式を関数で使用する際に
    は、いくつかの制約があります。ここで、これらの各モードの通常の使用
    法の概要を示します。詳細なリファレンスおよび議論に関しては、
    &book.applied.cryptography; を参照下さい。
    <itemizedlist>
     <listitem>
      <simpara>
       ECB (electronic codebook) は、他のキーを暗号化するといった
       ランダムデータに適しています。
       出力データは短くランダムであるという ECB の短所は、
       都合の良い逆の効果を持っています。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CBC (cipher block chaining) は、特に、
       ECB よりも著しく高いセキュリティで
       ファイルを暗号化する用途に適しています。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CFB (cipher feedback) は、1バイト毎に暗号化する必要がある
       バイトストリームを暗号化する際に最も適したモードです。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       OFB (output feedback、8ビット形式) は CFB と互換性がありますが、
       エラーの伝播が許容されないアプリケーションに使用することが可能
       です。このモードは(8ビットモードで処理を行うため)安全ではなく、
       使用は推奨されません。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       nOFB (output feedback, n ビット形式) はOFB と互換ですが、
       アルゴリズムのブロックサイズを変更可能なため、より安全です。
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       STREAM は、WAKE や RC4 のようないくつかのストリームアルゴリズム
       を読み込む追加のモードです。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP は、現在ビットストリームの暗号化/複合化をサポートしていません。
    現在のところ、PHP は文字列の処理のみをサポートしています。
   </para>
   <para>
    サポートされる暗号の完全なリストについては、mcrypt.h の define を
    参照下さい。mcrypt-2.2.x API に関する一般的な規則は、MCRYPT_暗号名
    でPHPから暗号をアクセス可能であるということです。mcrypt-2.4.x API
    についてもこれらの規則は成り立ちますが、
    <function>mcrypt_module_open</function> をコールする際に文字列で暗
    号名を指定することも可能です。
   </para>
   <para>
    以下に現在 mcrypt 拡張機能においてサポートされている暗号の簡単なリストを
    示します。mcrypt がサポートする暗号がこのリストにのっていない場合、
    このドキュメントが古いと仮定して下さい。
    <itemizedlist>
     <listitem>
      <simpara>
       MCRYPT_3DES
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_ARCFOUR_IV (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_ARCFOUR (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_BLOWFISH
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_CAST_128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_CAST_256
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_CRYPT
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_DES
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_DES_COMPAT (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_ENIGMA (libmcrypt 2.4.x のみ, MCRYPT_CRYPTへのエイリアス)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_GOST
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_IDEA (non-free)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_LOKI97 (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_MARS (libmcrypt 2.4.x のみ, non-free)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_PANAMA (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RIJNDAEL_128 (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RIJNDAEL_192 (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RIJNDAEL_256 (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC2
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC4 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6 (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6_128 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6_192 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6_256 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SAFER64
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SAFER128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SAFERPLUS (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT_128 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT_192 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT_256 (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SKIPJACK (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TEAN (libmcrypt 2.2.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_THREEWAY
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TRIPLEDES (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH (以前のバージョン mcrypt 2.x または、mcrypt 2.4.x 用)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH128 (TWOFISHxxx は 2.x より新しいバージョンで利用
       可能ですが、2.4.x バージョンでは利用不可)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH192
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH256
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_WAKE (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_XTEA (libmcrypt 2.4.x のみ)
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    CFB および OFBモードでは、それぞれの暗号関数に初期化ベクトル(IV)
    を指定する必要があり、CBCモードではIVを指定することが可能です。
    IV は、ユニークである必要があり、暗号化/複合化の際に同じである
    必要があります。暗号化されて保存されたデータの場合、関数の出力を
    (ファイル名の MD5 キーのように) 保存されたデータの位置を表す
    インデックスとして使用することができます。もしくは、暗号化されたデー
    タと共にIV を渡すことができます。(このトピックに関する議論について
    は、&book.applied.cryptography; の 9.3 章を参照下さい)
   </para>
  </partintro>
  
  <refentry id="function.mcrypt-get-cipher-name">
   <refnamediv>
    <refname>mcrypt_get_cipher_name</refname>
    <refpurpose>指定した暗号の名前を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_get_cipher_name</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_get_cipher_name</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>	
    <para>
     <function>mcrypt_get_cipher_name</function> は、指定した暗号(cipher)
     の名前を得るために使用されます。
    </para>
    <para>
     <function>mcrypt_get_cipher_name</function> は、暗号の番号
     (libmcrypt 2.2.x)または暗号名(libmcrypt 2.4.x)を引数とし、
     暗号名を返します。指定した暗号が存在しない場合は、false を返します。
    </para>
    <para>
     <example>
      <title><function>mcrypt_get_cipher_name</function>の例</title>
      <programlisting role="php">
&lt;?php
$cipher = MCRYPT_TripleDES;

print mcrypt_get_cipher_name($cipher);
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     上の例の出力は次のようになります。
     <programlisting>
TripleDES
     </programlisting>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-get-block-size">
   <refnamediv>
    <refname>mcrypt_get_block_size</refname>
    <refpurpose>指定した暗号のブロックサイズを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_block_size</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_block_size</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>module</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプはlibmcrypt 2.2.xとリンクした場合であり、2番目
     のものはlibmcrypt 2.4.xとリンクした場合です。
    </para>
    <para>
     <function>mcrypt_get_block_size</function>は、指定した
     <parameter>cipher</parameter> のブロック長を返します。
    </para>
    <para>
     <function>mcrypt_get_block_size</function>は、一つまたは二つの引数、
     つまり、<parameter>cipher</parameter>と
     <parameter>module</parameter>を引数とし、長さをバイト数で返します。
    </para>
    <para>
     <function>mcrypt_get_key_size</function>も参照下さい。 
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-get-key-size">
   <refnamediv>
    <refname>mcrypt_get_key_size</refname>
    <refpurpose>指定した暗号のキーの長さを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_key_size</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_key_size</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>module</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプはlibmcrypt 2.2.xとリンクした場合であり、2番目
     のものはlibmcrypt 2.4.xとリンクした場合です。
    </para>
    <para>
     <function>mcrypt_get_key_size</function> は、
     <parameter>cipher</parameter> で指定したキーの長さを得るために使
     用されます。
    </para>
    <para>
     <function>mcrypt_get_key_size</function>は、一つまたは二つの引数、
     つまり、<parameter>cipher</parameter>と
     <parameter>module</parameter>を引数とし、サイズをバイト数で返します。
    </para>
    <para>
     <function>mcrypt_get_block_size</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-create-iv">
   <refnamediv>
    <refname>mcrypt_create_iv</refname>
    <refpurpose>
     乱数ソースから初期化ベクトル(IV)を生成する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string
      <function>mcrypt_create_iv</function></funcdef>
      <paramdef>int <parameter>size</parameter></paramdef>
      <paramdef>int <parameter>source</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_create_iv</function> は、IV を生成するために
     使用されます。
    </para>
    <para>
     <function>mcrypt_create_iv</function> は、2つの引数、
     IV のサイズを定義する <parameter>size</parameter> および
     IV のソースを指定して <parameter>source</parameter>
     をとります。
    </para>
    <para>
     source には、MCRYPT_RAND (システムの乱数生成器),
     MCRYPT_DEV_RANDOM (/dev/random からデータを読む) ,MCRYPT_DEV_URANDOM
     (/dev/urandom からÜÂߣ?読む) を指定できます。
     MCRYPT_RAND を使用した場合、乱数生成器を初期化するために
     必ず前もって srand() をコールして下さい。
    </para>
    <para>
     <example>
      <title><function>mcrypt_create_iv</function>の例</title>
      <programlisting role="php">
&lt;?php
$cipher = MCRYPT_TripleDES;
$block_size = mcrypt_get_block_size ($cipher);
$iv = mcrypt_create_iv ($block_size, MCRYPT_DEV_RANDOM);
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-cbc">
   <refnamediv>
    <refname>mcrypt_cbc</refname>
    <refpurpose>CBC モードでデータを暗号化/複合化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cbc</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cbc</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプは、libmcrypt 2.2.x とリンクした場合、2番目は、
     libmcrypt 2.4.x とリンクした場合です。
    </para>
    <para>
     <function>mcrypt_cbc</function>は、CBC 暗号化モードで
     <parameter>cipher</parameter>および<parameter>key</parameter> 
     を用いて
     (<parameter>mode</parameter> に応じて) <parameter>data</parameter> を
     暗号化または複合化し、結果を文字列として返します。
    </para>
    <para>
     <parameter>cipher</parameter> には、定数 MCRYPT_暗号名 のうちの一つを
     指定します。
    </para>
    <para>
     <parameter>key</parameter> は、アルゴリズムに与えるキーです。
     キーは、秘密にする必要があります。
    </para>
    <para>
     <parameter>data</parameter> は、暗号化/複合化するデータです。
    </para>
    <para>
     <parameter>mode</parameter> は、MCRYPT_ENCRYPT または MCRYPT_DECRYPT
     です。
    </para>
    <para>
     <parameter>iv</parameter> はオプションの初期化ベクトルです。
    </para>
    <para>
     <function>mcrypt_cfb</function>,
     <function>mcrypt_ecb</function>,
     <function>mcrypt_ofb</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-cfb">
   <refnamediv>
    <refname>mcrypt_cfb</refname>
    <refpurpose>CFB モードでデータを暗号化/複合化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cfb</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>iv</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cfb</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプは、libmcrypt 2.2.x とリンクした場合、2番目は、
     libmcrypt 2.4.x とリンクした場合です。
    </para>
    <para>
     <function>mcrypt_cfb</function> は、CFB 暗号化モードで
     <parameter>cipher</parameter> および <parameter>key</parameter> 
     を用いて
     (<parameter>mode</parameter> に応じて) <parameter>data</parameter> を
     暗号化または複合化し、結果を文字列として返します。
    </para>
    <para>
     <parameter>cipher</parameter> には、定数 MCRYPT_暗号名 のうちの一つを
     指定します。
    </para>
    <para>
     <parameter>key</parameter> は、アルゴリズムに与えるキーです。
     キーは、秘密にする必要があります。
    </para>
    <para>
     <parameter>data</parameter> は、暗号化/複合化するデータです。
    </para>
    <para>
     <parameter>mode</parameter> は、MCRYPT_ENCRYPT または MCRYPT_DECRYPT
     です。
    </para>
    <para>
     <parameter>iv</parameter> はオプションの初期化ベクトルです。
    </para>
    <para>
     <function>mcrypt_cbc</function>,
     <function>mcrypt_ecb</function>,
     <function>mcrypt_ofb</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-ecb">
   <refnamediv>
    <refname>mcrypt_ecb</refname>
    <refpurpose>ECB モードでデータを暗号化/複合化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ecb</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ecb</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプは、libmcrypt 2.2.x とリンクした場合、2番目は、
     libmcrypt 2.4.x とリンクした場合です。
    </para>
    <para>
     <function>mcrypt_ecb</function> は、ECB 暗号化モードで
     <parameter>cipher</parameter> および <parameter>key</parameter> 
     を用いて
     (<parameter>mode</parameter> に応じて) <parameter>data</parameter> を
     暗号化または複合化し、結果を文字列として返します。
    </para>
    <para>
     <parameter>cipher</parameter> には、定数 MCRYPT_暗号名 のうちの一つを
     指定します。
    </para>
    <para>
     <parameter>key</parameter> は、アルゴリズムに与えるキーです。
     キーは、秘密にする必要があります。
    </para>
    <para>
     <parameter>data</parameter> は、暗号化/複合化するデータです。
    </para>
    <para>
     <parameter>mode</parameter> は、MCRYPT_ENCRYPT または MCRYPT_DECRYPT
     です。
    </para>
    <para>
     <parameter>iv</parameter> はオプションの初期化ベクトルです。
    </para>
    <para>
     <function>mcrypt_cbc</function>,
     <function>mcrypt_cfb</function>,
     <function>mcrypt_ofb</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-ofb">
   <refnamediv>
    <refname>mcrypt_ofb</refname>
    <refpurpose>OFB モードでデータを暗号化/複合化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ofb</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>iv</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ofb</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプは、libmcrypt 2.2.x とリンクした場合、2番目は、
     libmcrypt 2.4.x とリンクした場合です。
    </para>
    <para>
     <function>mcrypt_ofb</function> は、OFB 暗号化モードで
     <parameter>cipher</parameter> および <parameter>key</parameter> 
     を用いて
     (<parameter>mode</parameter> に応じて) <parameter>data</parameter> を
     暗号化または複合化し、結果を文字列として返します。
    </para>
    <para>
     <parameter>cipher</parameter> には、定数 MCRYPT_暗号名 のうちの一つを
     指定します。
    </para>
    <para>
     <parameter>key</parameter> は、アルゴリズムに与えるキーです。
     キーは、秘密にする必要があります。
    </para>
    <para>
     <parameter>data</parameter> は、暗号化/複合化するデータです。
    </para>
    <para>
     <parameter>mode</parameter> は、MCRYPT_ENCRYPT または MCRYPT_DECRYPT
     です。
    </para>
    <para>
     <parameter>iv</parameter> はオプションの初期化ベクトルです。
    </para>
    <para>
     <function>mcrypt_cbc</function>,
     <function>mcrypt_cfb</function>,
     <function>mcrypt_ecb</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-list-algorithms">
   <refnamediv>
    <refname>mcrypt_list_algorithms</refname>
    <refpurpose>サポートされる全ての暗号を配列として取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_list_algorithms</function></funcdef>
      <paramdef>string
       <parameter>
	<optional>lib_dir</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_list_algorithms</function> は、
     <parameter>lib_dir</parameter>にあるサポートされる暗号を全て取得
     するために使用します。
    </para>
    <para>
     <function>mcrypt_list_algorithms</function> はオプションのパラメー
     タとして <parameter>lib_dir</parameter> をとり、全てのアルゴリズ
     ムがある場所のディレクトリを指定することが可能です。指定されない
     場合には、php.iniディレクティブmcrypt.algorithms_dirの値が使用さ
     れます。
    </para>
    <para>
     <example>
      <title><function>mcrypt_list_algorithms</function> の例</title>
      <programlisting role="php">
&lt;?php
$algorithms = mcrypt_list_algorithms ("/usr/local/lib/libmcrypt");

foreach ($algorithms as $cipher) {
	echo $cipher."/n";
}
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     上記の例は、"/usr/local/lib/libmcrypt" ディレクトリにある全てのサ
     ポートされるアルゴリズムの一覧を表示します。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-list-modes">
   <refnamediv>
    <refname>mcrypt_list_modes</refname>
    <refpurpose>サポートされる全てのモードの配列を取得する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_list_modes</function></funcdef>
      <paramdef>string
       <parameter>
	<optional>lib_dir</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_list_modes</function> は、
     <parameter>lib_dir</parameter>にあるサポートされる全てのモードを
     取得するために使用されます。
    </para>
    <para>
     <function>mcrypt_list_modes</function> はオプションのパラメータと
     して全てのモードがある場所をとります。指定されない場合には、
     php.ini ディレクティブのmcrypt.modes_dirの値が使用されます。
    </para>
    <para>
     <example>
      <title><function>mcrypt_list_modes</function> の例</title>
      <programlisting role="php">
&lt;?php
$modes = mcrypt_list_modes ();

foreach ($modes as $mode) {
	echo "$mode &lt;/br&gt;";
}
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     上の例は、デフォルトのモードディレクトリにあるサポートされる全て
     のアルゴリズムの一覧を出力します。ini ディレクティブの
     mcrypt.modes_dir でこれが設定されていない場合、mcryptのデフォルト
     ディレクトリ(/usr/local/lib/libmcrypt)が使用されます。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-get-iv-size">
   <refnamediv>
    <refname>mcrypt_get_iv_size</refname>
    <refpurpose>
     指定した暗号/モードの組み合わせに属するIVの大きさを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_iv_size</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_iv_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     最初のプロトタイプはlibmcrypt 2.2.xとリンクした場合であり、2番目
     のものはlibmcrypt 2.4.xとリンクした場合です。
    </para>
    <para>
     <function>mcrypt_get_iv_size</function> は初期化ベクトル(IV)の大
     きさをバイト数で返します。エラーの際にはfalseを返します。IVが指定
     した暗号/モードで無視される場合には、ゼロが返されます。
    </para>
    <para>
     <parameter>cipher</parameter> には、アルゴリズム名を表す定数
     MCRYPT_暗号名の一つを文字列で指定します。
    </para>
    <para>
     <parameter>mode</parameter> には、"ecb", "cbc", "cfb", "ofb",
     "nofb" ,"stream" どれかを用いて定数 MCRYPT_MODE_モード名を
     指定します。
    </para>
    <para>
     <parameter>td</parameter> は指定するアルゴリズムです。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mcrypt-encrypt">
   <refnamediv>
    <refname>mcrypt_encrypt</refname>
    <refpurpose>指定したパラメータでプレーンテキストを暗号化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_encrypt</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter>
        <optional>iv</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_encrypt</function> はデータを暗号化し、暗号化さ
     れたデータを返します。
    </para>
    <para>
     <parameter>cipher</parameter> には、アルゴリズム名を表す定数
     MCRYPT_暗号名の一つを文字列で指定します。
    </para>
    <para>
     <parameter>key</parameter> は、データを暗号化する際のキーです。必
     要なキー長よりも小さい場合には、'\0' で埋められます。キーにはASCII
     文字列を使わない方が良いです。文字列からキーを生成するにはmhash関
     数を使用することが推奨されます。
    </para>
    <para>
     <parameter>data</parameter> は、指定した暗号およびモードで暗号化
     されます。データの大きさが n * blocksize でない場合、データは、
     '\0'で埋められます。返される暗号化されたテキストは、
     <parameter>data</parameter>んで指定したデータの大きさよりも大きく
     なる可能性があります。
    </para>
    <para>
     <parameter>mode</parameter> には、"ecb", "cbc", "cfb", "ofb",
     "nofb" ,"stream" のどれかを用いて定数 MCRYPT_MODE_モード名を
     指定します。
    </para>
    <para>
     パラメータ <parameter>IV</parameter> は、CBC, CFB, OFB モードおよ
     びSREAMモードのいくつかのアルゴリズムの初期化の際に使用されます。
     アルゴリズムで必要とするIVを指定しない場合、この関数は警告を発生
     し、全てのバイトを'\0'に設定したIVを使用します。
    </para>
    <para>
     <example>
      <title><function>mcrypt_encrypt</function> の例</title>
      <programlisting role="php">
&lt;?php
$iv = mcrypt_create_iv (mcrypt_get_iv_size (MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND);
$key = "This is a very secret key";
$text = "Meet me at 11 o'clock behind the monument.";
echo strlen ($text)."\n";

$crypttext = mcrypt_encrypt (MCRYPT_RIJNDAEL_256, $key, $text, MCRYPT_MODE_ECB, $iv);
echo strlen ($crypttext)."\n";
?&gt;
      </programlisting>
     </example>
     上記の例の出力は次のようになります。
     <programlisting>
42
64
     </programlisting>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-decrypt">
   <refnamediv>
    <refname>mcrypt_decrypt</refname>
    <refpurpose>
     指定したパラメータで暗号化されたテキストを複合化する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_decrypt</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter>
        <optional>iv</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_decrypt</function> はデータを複合化し、
     複合化されたデータを返します。
    </para>
    <para>
     <parameter>cipher</parameter> には、アルゴリズム名を表す定数
     MCRYPT_暗号名の一つを文字列で指定します。
    </para>
    <para>
     <parameter>key</parameter> は、データを暗号化する際のキーです。必
     要なキー長よりも小さい場合には、'\0' で埋められます。
    </para>
    <para>
     <parameter>data</parameter> は、指定した暗号およびモードで暗号化
     されます。データの大きさが n * blocksize でない場合、データは、
     '\0'で埋められます。返される暗号化されたテキストは、
     <parameter>data</parameter>んで指定したデータの大きさよりも大きく
     なる可能性があります。
    </para>
    <para>
     <parameter>mode</parameter> には、"ecb", "cbc", "cfb", "ofb",
     "nofb" ,"stream" のどれかを用いて定数 MCRYPT_MODE_モード名を
     指定します。
    </para>
    <para>
     パラメータ <parameter>IV</parameter> は、CBC, CFB, OFB モードおよ
     びSREAMモードのいくつかのアルゴリズムの初期化の際に使用されます。
     アルゴリズムで必要とするIVを指定しない場合、この関数は警告を発生
     し、全てのバイトを'\0'に設定したIVを使用します。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-module-open">
   <refnamediv>
    <refname>mcrypt_module_open</refname>
    <refpurpose>
     使用するアルゴリズムおよびモードのモジュールをオープンする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>mcrypt_module_open</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter>algorithm_directory</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>mode_directory</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、使用するアルゴリズムおよびモードのモジュールをオープ
     ンします。アルゴリズム名は、"twofish" または定数 MCRYPT_暗号名に
     より algorithm で指定します。
     ライブラリは<function>mcrypt_module_close</function>をコールする
     ことによりクローズされますが、
     <function>mcrypt_generic_end</function>をコールする場合には、この
     関数をコールする必要はありません。通常、この関数は暗号化ディスク
     クリプタを返し、エラーの際にfalseを返します。
    </para>
    <para>
     暗号化モジュールの位置を指定する際には
     <parameter>algorithm_directory</parameter> および
     <parameter>mode_directory</parameter> が使用されます。
     ディレクトリ名を指定した場合には、これが使用されます。
     これらの一つに空の文字列("")を指定した場合、ini ディエクティブの
     <parameter>mcrypt.algorithms_dir</parameter> または
     <parameter>mcrypt.modes_dir</parameter>に設定された値が使用されま
     す。これらが設定されていない場合、libmcryptをコンパイルした際のデ
     フォルトのディレクトリ (通常は/usr/local/lib/libmcrypt)が使用され
     ます。
    </para>
    <para>
     <example>
      <title><function>mcrypt_module_open</function> の例</title>
      <programlisting role="php">
&lt;?php
$td = mcrypt_module_open (MCRYPT_DES, "", MCRYPT_MODE_ECB, "/usr/lib/mcrypt-modes");
?&gt;
      </programlisting>
     </example>
     上記の例は、デフォルトのディレクトリからDES暗号、ディレクトリ
     /usr/lib/mcrypt-modesからEBCモードをオープンします。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-generic-init">
   <refnamediv>
    <refname>mcrypt_generic_init</refname>
    <refpurpose>暗号化に必要な全てのバッファを初期化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_generic_init</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>iv</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     キーの最大長は、<function>mcrypt_enc_get_key_size</function>をコー
     ルした際に得られるキー長の一つである必要があり、この値より小さな
     値は全て有効です。IVは通常そのアルゴリズムのブロック長と同じ大き
     さですが、<function>mcrypt_enc_get_iv_size</function>をコールする
     ことにより、その大きさを得る必要があります。IVはECBでは無視されま
     す。IVはCFB、CBC、STREAM、nOFBでは必須です。
     IVはランダムで一意である必要があります(しかし、秘密ではある必要
     はありません)。暗号化と複合化で同じIVを使用する必要があります。
     IVを使用したくない場合にはゼロに設定しますが、これは推奨されませ
     ん。この関数はエラーの際に (-1) を返します。
    </para>
    <para>
     <function>mcrypt_generic</function> または
     <function>mdecrypt_generic</function> をコールする前に常にこの関
     数をコールする必要があります。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-generic">
   <refnamediv>
    <refname>mcrypt_generic</refname>
    <refpurpose>データを暗号化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_generic</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、データを暗号化します。データ長をn * blocksizeとするた
     めにデータは"\0"で埋められます。この関数は、暗号化されたデータを
     返します。データのパディングが行われるため、返される文字列の長さ
     は入力よりも長いことがあることに注意して下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mdecrypt-generic">
   <refnamediv>
    <refname>mdecrypt_generic</refname>
    <refpurpose>データを複合化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mdecrypt_generic</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、データを複合化します。データのパディングが行われるた
     め、返される文字列の長さは暗号化前の文字列の長さよりも長くなる可
     能性があることに注意して下さい。
    </para>
    <para>
     <example>
      <title><function>mdecrypt_generic</function> の例</title>
      <programlisting role="php">
&lt;?php
$iv_size = mcrypt_enc_get_iv_size ($td));
$iv = @mcrypt_create_iv ($iv_size, MCRYPT_RAND);

if (@mcrypt_generic_init ($td, $key, $iv) != -1)
{
    $c_t = mcrypt_generic ($td, $plain_text);
    @mcrypt_generic_init ($td, $key, $iv);
    $p_t = mdecrypt_generic ($td, $c_t);
}
if (strncmp ($p_t, $plain_text, strlen($plain_text)) == 0)
    echo "ok";
else
    echo "error";
?&gt;
      </programlisting>
     </example>
     上記の例は、暗号化前のデータ複合化したデータと同じであるかどうか
     を調べる方法を示すものです。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.mcrypt-generic-end">
   <refnamediv>
    <refname>mcrypt_generic_end</refname>
    <refpurpose>暗号処理を終了する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>mcrypt_generic_end</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、暗号化記述子(td) で指定した暗号化処理を終了します。
     この関数は全てのバッファをクリアし、使用した全てのモジュールをク
     ローズします。エラーの場合にfalse、成功時にtrueを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-self-test">
   <refnamediv>
    <refname>mcrypt_enc_self_test</refname>
    <refpurpose>オープンしたモジュールのセルフテストを実行する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_self_test</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、記述子tdで指定したアルゴリズムのセルフテストを実行し
     ます。セルフテストが成功した場合はゼロを返します。エラーの場合は1
     を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-is-block-algorithm-mode">
   <refnamediv>
    <refname>mcrypt_enc_is_block_algorithm_mode</refname>
    <refpurpose>
     オープンされたモードの暗号がブロックモードで動作するかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_is_block_algorithm_mode</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、モードがブロックアルゴリズムを使用している場合に 1、
     その他の場合に 0 を返します。(例えば、streamでは 0、cbc, cfb, ofb
     では 1)
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-is-block-algorithm">
   <refnamediv>
    <refname>mcrypt_enc_is_block_algorithm</refname>
    <refpurpose>
     オープンされたモードの暗号がブロックモードであるかどうかを調べる
     algorithm
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_is_block_algorithm</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、アルゴリズムがブロックアルゴリズムである場合に 1、ス
     トリームアルゴリズムである場合に 0 を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-is-block-mode">
   <refnamediv>
    <refname>mcrypt_enc_is_block_mode</refname>
    <refpurpose>
     オープンされたモードがブロック出力を行うかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_is_block_mode</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、バイトブロックを出力するモードの場合に 1、バイト出力
     を行うモードの場合に 0 を返します。(例: cbc と ecb の場合に1,
     cfb と stream の場合に 0)
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-get-block-size">
   <refnamediv>
    <refname>mcrypt_enc_get_block_size</refname>
    <refpurpose>オープンされたアルゴリズムのブロックサイズを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_get_block_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、暗号化記述子 td で指定したアルゴリズムのブロック長を
     バイト単位で返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-get-key-size">
   <refnamediv>
    <refname>mcrypt_enc_get_key_size</refname>
    <refpurpose>
     オープンされたモードでサポートされる最大キー長を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_get_key_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、暗号化記述子 td で指定したアルゴリズムでサポートされ
     る最大キー長をバイト単位で返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-get-supported-key-sizes">
   <refnamediv>
    <refname>mcrypt_enc_get_supported_key_sizes</refname>
    <refpurpose>
     オープンされたアルゴリズムでサポートされるキー長を配嗣g返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_enc_get_supported_key_sizes</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     暗号化記述子で指定したアルゴリズムでサポートされるキー長を配列と
     して返します。返された配列が空の場合、全てのキー長は、1と
     そのアルゴリズムでサポートされる
     <function>mcrypt_enc_get_key_size</function>の値の間となります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-get-iv-size">
   <refnamediv>
    <refname>mcrypt_enc_get_iv_size</refname>
    <refpurpose>オープンされたアルゴリズムのIVの大きさを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_get_iv_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、暗号化記述子で指定したアルゴリズムの iv の大きさをバ
     イト単位で返します。この関数が、'0' を返す場合、IVはそのアルゴリ
     ズムでは無視されます。IVは、cbc,cfb,ofbモード、およびストリームモー
     ドのいくつかのアルゴリズムで使用されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-get-algorithms-name">
   <refnamediv>
    <refname>mcrypt_enc_get_algorithms_name</refname>
    <refpurpose>オープンされたアルゴリズムの名前を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_enc_get_algorithms_name</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数はアルゴリズム名を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-enc-get-modes-name">
   <refnamediv>
    <refname>mcrypt_enc_get_modes_name</refname>
    <refpurpose>オープンされたモードの名前を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_enc_get_modes_name</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数はモード名を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-self-test">
   <refnamediv>
    <refname>mcrypt_module_self_test</refname>
    <refpurpose> 指定したモジュールのセルフテストを実行する </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>mcrypt_module_self_test</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、指定したアルゴリズムのセルフテストを実行します。
     オプションのパラメータ<parameter>lib_dir</parameter>によりストリー
     ム上でのモジュールalgorithmの位置を指定することが可能です。
    </para>
    <para>
     この関数は、セルフテストが成功した場合 true、失敗した場合に false
     を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-is-block-algorithm-mode">
   <refnamediv>
    <refname>mcrypt_module_is_block_algorithm_mode</refname>
    <refpurpose>
     指定したモジュールがブロックアルゴリズムであるかどうかを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>mcrypt_module_is_block_algorithm_mode</function></funcdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、mode がブロックアルゴリズムを使用する場合にtrue、
     その他の場合に 0 を返します。(例: stream の場合に 0、cbc, cfb,
     ofb の場合に1)
     オプションのパラメータ<parameter>lib_dir</parameter>によりストリー
     ム上でのモジュールmodeの位置を指定することが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-is-block-algorithm">
   <refnamediv>
    <refname>mcrypt_module_is_block_algorithm</refname>
    <refpurpose>
     指定したアルゴリズムがブロックアルゴリズムであるかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>mcrypt_module_is_block_algorithm</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、指定したアルゴリズムがブロックアルゴリズムの場合に
     true、ストリームアルゴリズムの場合に false を返します。
     オプションのパラメータ<parameter>lib_dir</parameter>によりストリー
     ム上でのモジュールalgorithmの位置を指定することが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-is-block-mode">
   <refnamediv>
    <refname>mcrypt_module_is_block_mode</refname>
    <refpurpose>
     指定したモードがブロック出力を行うかどうかを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>mcrypt_module_is_block_mode</function></funcdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、ブロック出力を行うモードの場合に true、バイトのみを出
     力する場合に false を返します。(例: cbcとecb の場合に1、cfbと
     streamの場合に0)オプションのパラメータ
     <parameter>lib_dir</parameter>によりストリーム上でのモジュール
     modeの位置を指定することが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-get-algo-block-size">
   <refnamediv>
    <refname>mcrypt_module_get_algo_block_size</refname>
    <refpurpose>指定したアルゴリズムのブロック長を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_module_get_algo_block_size</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、指定したアルゴリズムでサポートされるブロック長をバイ
     ト単位で返します。オプションのパラメータ
     <parameter>lib_dir</parameter>によりストリーム上でのモードモジュー
     ルの位置を指定することが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-get-algo-key-size">
   <refnamediv>
    <refname>mcrypt_module_get_algo_key_size</refname>
    <refpurpose>
     オープンされたモードでサポートされる最大キー長を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_module_get_algo_key_size</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、指定したアルゴリズムでサポートされる最大キー長をバイ
     ト単位で返します。オプションのパラメータ
     <parameter>lib_dir</parameter>によりストリーム上でのモードモジュー
     ルの位置を指定することが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mcrypt-module-get-algo-supported-key-sizes">
   <refnamediv>
    <refname>mcrypt_module_get_algo_supported_key_sizes</refname>
    <refpurpose>
     オープンされたアルゴリズムでサポートされるキーのサイズを配列として返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_module_enc_get_algo_supported_key_sizes</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>lib_dir</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定したアルゴリズムでサポートされるキーのサイズを配列で返します。
     この関数が空の配列を返した場合、全てのキーのサイズは1から
     そのアルゴリズムでサポートされた
     <function>mcrypt_module_get_algo_key_size</function>
     の返り値の間です。オプションのパラメータ
     <parameter>lib_dir</parameter>によりシステムで mode モジュールが
     ある場所を指定することが可能です。
    </para>
   </refsect1>
  </refentry>

 </reference> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
