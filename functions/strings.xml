<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.49 $ -->
 <reference id="ref.strings">
  <title>Strings(文字列関数)</title>
  <titleabbrev>文字列</titleabbrev>
  <partintro>
   <simpara>
    以下の関数はすべて、文字列をいろいろな方法で操作します。正規表現や
    URL処理の節にも関連する記述があります。
   </simpara>
   <para>
    文字列の動作に関する情報、特にシングルクオート、ダブルクオート、エ
    スケープシーケンスについては、マニュアルの
    <link linkend="language.types">型</link> の節にある
    <link linkend="language.types.string">文字列</link>エントリを参照
    下さい。
   </para>
  </partintro>
  
  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>addcslashes</refname>
    <refpurpose>C言語と同様にスラッシュで文字列をクォートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>addcslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>charlist</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>charlist</parameter>パラメータに羅列された文字の前に
     バックスラッシュを付けた文字列を返します。この関数は、
     <literal>\n</literal>, <literal>\r</literal> 等ををC言語と同様の手
     法によりエスケープします。アスキーコードが32未満または126より大き
     い文字は、8進表現に変換されます。
    </para>
    <para>
     エスケープ文字を0, a, b, f, n, r, t , vとする場合には注意して下さ
     い。これらは、\0, \a, \b, \f, \n, \r, \t に変換されます。
     PHPでは、\0 (&null;), \r (復改文字), \n (改行文字) , \t (タブ)
     が定義済みのエスケープシーケンスですが、C言語では、これら全てが定
     義済みのエスケープシーケンスです。
    </para>
    <para>
     "\0..\37" のように<parameter>charlist</parameter>に範囲を指定可能
     です。この場合、アスキーコードが 0 から 31 の範囲の文字は全てエス
     ケープされます。
     <example>
      <title><function>addcslashes</function> の例</title>
      <programlisting role="php">
<![CDATA[
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
]]>
      </programlisting>
     </example>
    </para>
    <para>
     charlist引数の文字の列びを定義する際には、範囲の最初と最後で指定
     する文字集合に含まれる文字の種類を把握するようにして下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
echo addcslashes('foo[]', 'A..z'); 
// 全ての大文字と小文字はエスケープされます。
// ... しかし、[\]^_` および空白文字もエスケープされてしまいます。
]]>
      </programlisting>
     </informalexample>
     また、指定した範囲の2番目の文字ではなく、最初の文字が小文字ASCII
     値の場合、範囲は定義されません。開始位置から終了位置までの文字の
     みがエスケープされます。ある文字のASCII値を見つけるには
     <function>ord</function> 関数を使用して下さい。
     <informalexample>
      <programlisting role="php">
<![CDATA[
echo addcslashes("zoo['.']", 'z..A');
/* 出力:
\zoo['\.']

*/
]]>
      </programlisting>
     </informalexample>
     <note>
      <simpara>
       PHP 4で追加されました。
      </simpara>
     </note>
    </para>
    <para>
     <function>stripcslashes</function>, 
     <function>stripslashes</function>, 
     <function>htmlspecialchars</function>, 
     <function>quotemeta</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.addslashes">
   <refnamediv>
    <refname>addslashes</refname>
    <refpurpose>文字列をスラッシュでクォートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>addslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     データベースへの問い合わせなどに際してクォートされるべき
     文字の前にバックスラッシュを挿入した文字列を返します。クォート
     されるべき文字とは、シングルクォート(<literal>'</literal>),
     ダブルクォート(<literal>"</literal>),バックスラッシュ
     (<literal>\</literal>) ,NUL (&null; バイト) です。
    </para>
    <note>
     <para>
      <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> は
      デフォルトでOnです。
     </para>
    </note>
    <para>
     <function>stripslashes</function>, 
     <function>htmlspecialchars</function>,
     <function>quotemeta</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.bin2hex">
   <refnamediv>
    <refname>bin2hex</refname>
    <refpurpose>
     バイナリデータを16進表現に変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>bin2hex</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>str</parameter> を16進表現に変換したASCII文字列を返し
     ます。変換は、上位ニブルからバイト毎に行われます。
    </para>
    <para>
     <function>pack</function>および<function>unpack</function>も参照
     下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.chop">
   <refnamediv>
    <refname>chop</refname>
    <refpurpose><function>rtrim</function>へのエイリアス</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <para>
     この関数は、<function>rtrim</function>へのエイリアスです。
    </para>
    <note>
     <para>
      <function>chop</function> は、文字列の末尾の文字を削除するPerlの
      <literal>chop()</literal>関数とは異なっています。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.chr">
   <refnamediv>
    <refname>chr</refname>
    <refpurpose>特定の文字を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>chr</function></funcdef>
      <paramdef>int <parameter>ascii</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>ascii</parameter>で指定された、1文字からなる文字列
     を返します。
     <example>
      <title><function>chr</function>の例</title>
      <programlisting role="php">
<![CDATA[
$str .= chr(27); /* $str の最後にエスケープ文字を付加する */

/* こちらの方がより便利なことが多い */

$str = sprintf("この文字列はエスケープで終了します: %c", 27);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     ASCIIテーブルを<ulink url="&url.asciitable;">&url.asciitable;</ulink>
     で参照することが可能です。
    </para>
    <para>
     この関数は<function>ord</function>の逆の動作をします。
    <function>sprintf</function>のフォーマット文字列
    <literal>%c</literal>指定も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chunk-split">
   <refnamediv>
    <refname>chunk_split</refname>
    <refpurpose>文字列をより小さな部分に分割する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>chunk_split</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
       <paramdef>int 
       <parameter><optional>chunklen</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>end</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列をより小さな部分に分割する際に使用され、
     <link linkend="function.base64-encode">base64_encode</link> の出力を
     RFC 2045の規約に基づいた出力に変換するといった用途に適しています。
     この関数は、<parameter>chunklen</parameter> (デフォルトは 76) 
     文字毎に文字列 <parameter>end</parameter> (デフォルトは "\r\n")
     を挿入します。変換前の元の文字列はそのままとし、
     変換後の新しい文字列を返します。
     <example>
      <title><function>chunk_split</function>の例</title>
      <programlisting role="php">
<![CDATA[
# RFC 2045 に基づき $data をフォーマットします
 
$new_string = chunk_split (base64_encode($data));
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>explode</function>, <function>split</function>,
     <function>wordwrap</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.convert-cyr-string">
   <refnamediv>
    <refname>convert_cyr_string</refname>
    <refpurpose>
     Cyrillic 文字コードを他のコードに変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>convert_cyr_string</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>from</parameter></paramdef>
      <paramdef>string <parameter>to</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、指定した文字列を Cyrillic 文字コードから他のコードに
     変換します。
     <parameter>from</parameter> および <parameter>to</parameter> 引数
     ソースおよびターゲット の Cyrillic 文字コードを表す文字です。
     サポートされている型を以下に示します。
     <itemizedlist>
      <listitem>
       <simpara>
	k - koi8-r
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	w - windows-1251
       </simpara>
      </listitem>
       <listitem>
       <simpara>
	i - iso8859-5
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	a - x-cp866
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	d - x-cp866
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	m - x-mac-cyrillic
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count-chars">
   <refnamediv>
    <refname>count_chars</refname>
    <refpurpose>
     文字列で使用されている文字に関する情報を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>count_chars</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int
       <parameter>
        <replaceable><optional>mode</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter> において各バイト値(0..255)が存在する数
     を数え、様々な手法で返します。
     オプションの引数 <parameter>mode</parameter> のデフォルトは0です。
     <parameter>mode</parameter> により以下の値のどれかを返します。
     <itemizedlist>
      <listitem>
       <simpara>
        0 - 各バイト値をキー、各バイトの出現回数を値とする配列。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	1 - 0と同じですが、各バイト値の出現回数がゼロより大きいものの
	一覧となります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	2 - 0と同じですが、各バイト値の出現回数がゼロであるものの
	一覧となります。
       </simpara>
      </listitem> 
      <listitem>
       <simpara> 
	3 - 使用されている全てのバイト値を有する文字列が返されます。
       </simpara>
      </listitem> 
      <listitem>
       <simpara> 
	4 - 使用されていない全てのバイト値を有する文字列が返されます。
       </simpara>
      </listitem> 
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.crc32">
   <refnamediv>
    <refname>crc32</refname>
    <refpurpose>文字列の crc32 多項式計算を行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>crc32</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>str</parameter>の32ビット長のCRC(cyclic redundancy
     checksum)チェックサムを生成します。これは、受信されたデータの整合
     性を検証するために通常使用されます。
    </para>
    <para>
     <function>md5</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.crypt">
   <refnamediv>
    <refname>crypt</refname>
    <refpurpose>文字列の一方向の暗号化(ハッシュ化)を行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>crypt</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>salt</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>crypt</function>は、Unix 標準の <abbrev>DES</abbrev>
     暗号を使って文字列を暗号化します。引数には暗号化したい文字列を指
     定し、オプションで暗号化のベースとなる 2 文字の'salt' 文字列を指
     定します。暗号化に関する関数の詳細は Unix man ページを参照してく
     ださい。
    </para>
    <simpara>
     salt引数が指定されない場合、PHPによりランダムに生成されます。
    </simpara>
    <simpara>
     いくつかのオペレーティングシステムは、複数の暗号化方式をサポート
     しています。実際、標準のDES暗号の替わりにMD5に基づく暗号化アルゴ
     リズムが使用されることが時々あります。暗号化手法は、salt引数によ
     り選定されます。インストール時に、PHPはcrypt関数の機能を定義し、
     他の暗号化方式用のsaltを受付ます。saltが指定されない場合、システ
     ムのデフォルトの暗号化手法がMD5でない限りPHPはデフォルトで標準の2
     文字DES saltを自動的に生成します。暗号化手法がMD5の場合、MD5互換
     のsaltが生成されます。PHPは、定数CRYPT_SALT_LENGTH を設定します。
     この定数により、標準の2文字のsaltまたはより長い12文字MD5 saltのど
     ちらが適用可能であるかを知ることが可能です。
    </simpara>
    <simpara>
     生成されたsaltを使用する場合、saltが生成されるのは一回限りである
     ことに気付く必要があります。この関数を再帰的にコールする場合、こ
     のことは、出力だけでなく、セキュリティにも影響を与える可能性があ
     ります。
    </simpara>
    <simpara>
     標準DES暗号<function>crypt</function>は、出力の最初の2文字をsalt
     として使用します。
     <parameter>str</parameter>の最初の8文字を使用するだけです。
     このため、(同じsaltを使用した場合、)同じ8文字から始まるより長い文
     字列について同じ結果が生成されます。
    </simpara>
    <simpara>
     crypt() 関数が複数の暗号化手法をサポートするシステムにおいては、
     指定した型を利用可能であるかにより、次の定数を0又は1に設定します。
    </simpara>
    <itemizedlist>
     <listitem>
      <simpara>
       CRYPT_STD_DES - 2文字 SALT の標準 DES 暗号
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_EXT_DES - 9文字の拡張DES暗号
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_MD5 - $1$ で始まる12文字のSALTを有するMD5暗号
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_BLOWFISH - $2$ で始まる16文字の拡張DES暗号
      </simpara>
     </listitem>
    </itemizedlist>
    <note>
     <simpara>
      <function>crypt</function> は単方向アルゴリズムを使用している
      ため、復号化するための関数 (decrypt) はありません。
     </simpara>
    </note>
    <example>
     <title><function>crypt</function>の例</title>
     <programlisting role="php">
<![CDATA[
<?php
$password = crypt("My1sTpassword"); # saltを生成

# 異なったハッシュアルゴリズムが使用された際の問題を避けるために
# crypt()の結果全体をパスワード比較用のsaltとして渡す必要があります。
# (上記のように標準DESに基づくパスワードハッシュは2文字のsaltを使用します
# が、MD5に基づくハッシュは12文字のsaltを使用します)
if (crypt($user_input,$password) == $password) {
   echo "パスワードは検証されました!";
}
?>
]]>
     </programlisting>
    </example>
    <simpara>
     <function>md5</function>および<link linkend="ref.mcrypt">mcrypt拡
     張モジュール</link>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>1つ以上の文字列を出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>echo</function></funcdef>
      <paramdef>string <parameter>arg1</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>argn</optional>...</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、すべてのパラメータを出力します。
    </simpara>
    <para>
     <function>echo</function> は実際には関数ではありません。
     (言語構造です。)このため、使用する際に括弧は必要ありません。実際、
     複数のパラメータを指定して echo をコールしたい場合、括弧の中にパ
     ラメータを記述するべきではありません。
     <example>
      <title><function>echo</function> の例</title>
      <programlisting role="php">
<![CDATA[
<?php
echo "Hello World";

echo "This spans
multiple lines. The newlines will be 
output as well";
 
echo "This spans\nmultiple lines. The newlines will be\noutput as well.";

echo "escaping characters is done \"Like this\"."

// echo 命令の中で変数を使用することが可能です
$foo = "foobar";
$bar = "barbaz";

echo "foo is $foo"; // foo は foobar です。

// 値ではなく変数名を出力するシングルクオートを使用する。
echo 'foo is $foo'; //

// 他の文字を全く使用しない場合、echo 変数を使用可能です。
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

echo <<<END
This uses the "here document" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!
END;

// echo は関数ではないので以下のコードは正しくありません
($some_var) ? echo('true'): echo('false');

// しかし、次の例は動作します。
($some_var) ? print('true'): print('false'); // print は関数
echo $some_var ? 'true': 'false'; // 命令を変更
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>echo</function> には、次のように開始タグのすぐ後に等号
     を付ける省略形があります。
     <informalexample>
      <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
      </programlisting>
     </informalexample>
    </para>	 
    <simpara>
     <function>print</function>,
     <function>printf</function>,
     <function>flush</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.explode">
   <refnamediv>
    <refname>explode</refname>
    <refpurpose>文字列を文字列により分割する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>explode</function></funcdef>
      <paramdef>string <parameter>separator</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int    
       <parameter><optional>limit</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列の配列を返します。この配列の各要素は、
     <parameter>string</parameter> を文字列 
     <parameter>separator</parameter> で区切った部分文字列となります。
     <parameter>limit</parameter> が指定された場合、返される配列には
     最大 <parameter>limit</parameter> の要素が含まれ、その最後の要素には
     <parameter>string</parameter> の残りの部分が全て含まれます。
    </para>
    <para>
     空の文字列("")が<parameter>separator</parameter> として使用された
     場合、<function>explode</function> は &false;を
     返します。<parameter>separator</parameter> に引数
     <parameter>string</parameter>に含まれていない値が含まれている場合、
     <function>explode</function>は、引数<parameter>string</parameter>
     を返します。
    </para>
    <note>
     <para>
      パラメータ <parameter>limit</parameter> は、PHP 4.0.1 で追加され
      ました。
     </para> 
    </note>
    <para>
     <example>
      <title><function>explode</function> の例</title>
      <programlisting role="php">
<![CDATA[
$pizza = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);

$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user,$pass,$uid,$gid,$gecos,$home,$shell) = explode(":",$data);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <function>implode</function>は、歴史的な理由によりパラメータをど
      ちらの順番でも受けつけることができますが、
      <function>explode</function>はできません。
      <parameter>string</parameter>引数の前に必ず
      <parameter>separator</parameter>引数がくるようにする必要がありま
      す。
     </para>
    </note>
    <para>
     <function>preg_split</function>,
     <function>spliti</function>,
     <function>split</function>, 
     <function>implode</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-html-translation-table">
   <refnamediv>
    <refname>get_html_translation_table</refname>
    <refpurpose>
     <function>htmlspecialchars</function> および
     <function>htmlentities</function> で使用される変換テーブルを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string 
       <function>get_html_translation_table</function>
      </funcdef>
      <paramdef>int <parameter>table</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>quote_style</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>get_html_translation_table</function> は、
     <function>htmlspecialchars</function> および
     <function>htmlentities</function> で内部的に使用される変換テーブ
     ルを返します。テーブルを指定できるように新規に定義が2つ
     (<parameter>HTML_ENTITIES</parameter>,
     <parameter>HTML_SPECIALCHARS</parameter>)追加されました。
     <function>htmlspecialchars</function> および
     <function>htmlentities</function> 関数と同様にオプションで
     処理するquote_styleを指定することが可能です。デフォルトは、
     ENT_COMPATモードです。これらのモードに関する説明は、
     <function>htmlspecialchars</function>を参照下さい。
     <example>
      <title>変換テーブルの例</title>
      <programlisting role="php">
<![CDATA[
$trans = get_html_translation_table (HTML_ENTITIES);
$str = "Hallo & <Frau> & Kr&auml;mer";
$encoded = strtr ($str, $trans);
]]>
      </programlisting>
     </example>
     変数 <literal>$encoded</literal> は次のようになります。: "Hallo
     &amp;<sgmltag>amp</sgmltag>;
     &amp;<sgmltag>lt</sgmltag>;Frau&amp;<sgmltag>gt</sgmltag>;
     &amp;<sgmltag>amp</sgmltag>; Kr&amp;<sgmltag>auml</sgmltag>;mer"
    </para>
    <para>
     逆方向の変換を行うには、<function>array_flip</function> を使用すると
     良いでしょう。
     <informalexample>
      <programlisting role="php">
<![CDATA[
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
]]>
      </programlisting>
     </informalexample>
     <literal>$original</literal> の内容は次のようになります。: "Hallo &amp;
     &lt;Frau> &amp; Kr&auml;mer"
    </para>
    <para>
     <function>htmlspecialchars</function>,
     <function>htmlentities</function>, <function>strtr</function>,
     <function>array_flip</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.get-meta-tags">
   <refnamediv>
    <refname>get_meta_tags</refname>
    <refpurpose>
     ファイルから全てのメタタグ属性を展開し、配列を返す
    </refpurpose>
   </refnamediv>
    <refsect1>
    <title>説明</title>
     <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_meta_tags</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int
       <parameter>
	<replaceable><optional>use_include_path</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>filename</parameter> を開き、フォームの
     &lt;meta> タグを 1Lずつ処理します。
     <example>
      <title>メタタグの例</title>
      <programlisting role="html">
<![CDATA[
<meta name="author" content="name">
<meta name="tags" content="php3 documentation">
</head> <!-- parsing stops here -->
]]>
      </programlisting>
     </example>
     (行末に注意して下さい。PHPは入力の処理にシステム関数を使用します。
     このため、Mac のファイルは、Unix上では動作しません。)
    </para>
    <para> 
     nameプロパティの値はキーとなり、contentプロパティの値は返される配列の値と
     なります。
     このため、容易に標準の配列用関数を用いてこれを順次処理したり、
     特定の値にアクセスしたりすることができます。
     name プロパティの値の中で特別な文字は、'_' で置換されます。
     残りは小文字に変換されます。
    </para>
    <para>
     <parameter>use_include_path</parameter>を1に設定すると
     PHPは標準のインクルードパスに基づいてそのファイルをオープンしよう
     とします。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.hebrev">
   <refnamediv>
    <refname>hebrev</refname>
    <refpurpose>
     Hebrew 論理テキストを可視テキストに変換
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hebrev</function></funcdef>
      <paramdef>string <parameter>hebrew_text</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>max_chars_per_line</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     オプションのパラメータ <parameter>max_chars_per_line</parameter>
     は、出力される行毎の最大文字数を示します。この関数は、単語の分断
     を回避します。
    </para>
    <para>
     <function>hebrevc</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hebrevc">
   <refnamediv>
    <refname>hebrevc</refname>
    <refpurpose>
     Hebrew 論理テキストを改行を変換して可視テキストに変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hebrevc</function></funcdef>
      <paramdef>string <parameter>hebrew_text</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>max_chars_per_line</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<function>hebrev</function> に似ていますが、
     改行(\n) を "&lt;br&gt;\n"に変換するところが異なります。
     オプションのパラメータ<parameter>max_chars_per_line</parameter>
     は出力される行毎の最大文字数を示します。この関数は、単語の分割を
     回避します。
    </para>
    <para>
     <function>hebrev</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.htmlentities">
   <refnamediv>
    <refname>htmlentities</refname>
    <refpurpose>
     適用可能な文字を全てHTMLエンティティに変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>htmlentities</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>quote_style</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>charset</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は<function>htmlspecialchars</function>と同じですが、
     HTML エンティティと等価な意味を有する文字をHTMLエンティティに変換
     します。<function>htmlspecialchars</function>と同様に、シングルま
     たはダブルクオートに関する動作を示すオプションの第2の引数をとりま
     す。<constant>ENT_COMPAT</constant>(デフォルト)の場合は、ダブルク
     オートのみを変換し、シングルクオートをそのままにします。ダブルお
     よびシングルクオートを共に変換します。
     <constant>ENT_NOQUOTES</constant>はダブルクオートおよびシングルク
     オートを共に変換しません。
    </para>
    <para>
     現在のところ、ISO-8859-1 文字セットがデフォルトの文字エンコーディ
     ングとして使用されます。オプションの2番目の引数は、PHP 3.0.17およ
     びPHP 4.0.3で追加されました。
    </para>
    <para>
     <function>htmlspecialchars</function>と同様に、この関数はオプショ
     ンの3番目の引数をとり、変換に使用される文字セットを指定可能です。
     この引数はPHP 4.1.0で追加されました。
    </para>
    <para>
     <function>htmlspecialchars</function> および 
     <function>nl2br</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.htmlspecialchars">
   <refnamediv>
    <refname>htmlspecialchars</refname>
    <refpurpose>
     特殊文字をHTMLエンティティに変換する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>htmlspecialchars</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>quote_style</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>charset</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字の中には HTML において特殊な意味を持つものがあり、それら
     本来の値を表示したければ HTML の表現形式に変換してやらなければ
     なりません。この関数は、これらの変換を行った結果の文字列を
     返します。これは、日常的なWebプログラミングにおいて最も有用な
     変換を行います。全てのHTML文字エンティティを変換する必要
     がある場合には、代わりに<function>htmlentities</function>を使用し
     て下さい。
    </para>
    <simpara>
     この関数は、メッセージボードやゲストブックのようにユーザーが書き
     こんだテキストにおいてHTML のマークアップ用文字を区別する必要があ
     る場合に有用です。オプションの2番目の形式、quote_styleは、
     シングルおよびダブルクオートされた文字で関数が何を行うかを指定し
     ます。デフォルトのモード(ENT_COMPAT)は下位互換性を有しており、ダ
     ブルクオートされた文字を変換し、単純な引用のままにします。
     ENT_QUOTESが設定されている場合、シングルクオート、ダブルクオート
     は共に変換され、ENT_NOQUOTESが設定されている場合、シングルクオー
     ト、ダブルクオートは共に変換されません。
    </simpara>
    <para>
     変換対象となる文字は以下の通りです。
     <itemizedlist>
      <listitem>
       <simpara>
        '&amp;' (アンパサンド) は '&amp;amp;' になります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        ENT_NOQUOTESが設定されていない場合、'&quot;' (ダブルクォート)
        は '&amp;quot;'になります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        ENT_QUOTESが設定されている場合のみ、'&#039;' (シングルクオート)
        は '&amp;#039;'になります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&lt;' (小なり) は '&amp;lt;' になります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&gt;' (大なり) は '&amp;gt;' になります。
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title><function>htmlspecialchars</function>の例</title>
      <programlisting role="php">
<![CDATA[
$new = htmlspecialchars("<a href='test'>Test</a>", ENT_QUOTES);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この関数は上記のあげたもの以外に関しては一切の変換を行わないことに
     注意して下さい。すべての変換を行うには
     <function>htmlentities</function>を参照してください。オプションの
     2番目の引数は、PHP 3.0.17およびPHP 4.0.3で追加されました。
    </para>
    <para>
     3番目の引数は、変換に使用される文字セットを指定します。デフォルト
     の文字セットは、ISO-8859-1です。3番目の引数のサポートは、PHP
     4.1.0で追加されました。
    </para>
    <para>
     <function>htmlentities</function> および 
     <function>nl2br</function>を参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.implode">
   <refnamediv>
    <refname>implode</refname>
    <refpurpose>配列要素を文字列により連結する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>implode</function></funcdef>
      <paramdef>string <parameter>glue</parameter></paramdef>
      <paramdef>array <parameter>pieces</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    すべての配列要素の順序を変えずに、各要素間に
    <parameter>glue</parameter>文字列をはさんで 1 つの文字列にして返し
    ます。
     <example>
      <title><function>implode</function>の例</title>
      <programlisting role="php">
<![CDATA[
$colon_separated = implode(":", $array);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <function>implode</function>は、歴史的な理由により、引数をどちら
      の順番でも受けつけることが可能です。しかし、
      <function>explode</function>との統一性の観点からは、
      ドキュメントに記述された引数の順番を使用する方が混乱が少なくなる
      でしょう。
     </para>
    </note>
    <simpara>
     <function>explode</function>, <function>join</function>, 
     <function>split</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.join">
   <refnamediv>
    <refname>join</refname>
    <refpurpose>配列要素を文字列により連結する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>join</function></funcdef>
      <paramdef>string <parameter>glue</parameter></paramdef>
       <paramdef>array <parameter>pieces</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>join</function> は <function>implode</function> の
     別名で、実体はまったく同じものです。
    </simpara>
    <simpara>
     <function>explode</function>, <function>implode</function>,
     <function>split</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.levenshtein">
   <refnamediv>
    <refname>levenshtein</refname> 
    <refpurpose>
     二つの文字列のLevenshtein距離を計算する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>levenshtein</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>levenshtein</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>int <parameter>cost_ins</parameter></paramdef>
      <paramdef>int <parameter>cost_rep</parameter></paramdef>
      <paramdef>int <parameter>cost_del</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>levenshtein</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>function <parameter>cost</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、引数で指定した二つの文字列のLevenshtein距離を返します。
     引数文字列の一つが255文字の制限より長い場合に-1を返します。
     (255は名前や辞書比較に関して十分な長さであり、PHPでの通常の比較に
     関しては問題となる制約ではありません)
    </para>
    <para>
     Levenshtein距離は <parameter>str1</parameter> を
     <parameter>str2</parameter> に変換するために置換、挿入、削除しな
     ければならない最小の文字数として定義されます。アルゴリズムの複雑
     さは、 <literal>O(m*n)</literal> です。
     ただし、<literal>n</literal>および<literal>m</literal>は、
     <parameter>str1</parameter>および<parameter>str2</parameter>の長さです。
     (O(max(n,m)**3)となる<function>similar_text</function>よりは良いですが
     まだかなりの計算量です)
    </para>
    <para>
     上記の最も簡単な形式では、この関数はパラメータとして引数を二つだ
     けとり、<parameter>str1</parameter>から
     <parameter>str2</parameter>に変換する際に必要な挿入、置換、削除演
     算の数のみを計算します。
    </para>
    <para>
     2番目の形式では、挿入、置換、削除演算のコストを定義する3番目のパ
     ラメータが追加されます。この形式は1番目の形式より一般的で汎用性が
     高いですが、効率的ではありません。
    </para>
    <para>
     3番目の形式(これは未実装です)は、最も一般的で汎用的ですが、最も遅
     い形式でもあります。この形式では各演算毎にコストを定義するために
     ユーザ定義関数をコールします。
    </para>
    <para>
     ユーザ定義関数は、次のような引数を指定してコールされます。
     <itemizedlist>
      <listitem>
       <simpara>
	適用する演算: 'I'、'R'、'D'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列1の文字の実体
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列2の文字の実体
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列1での位置
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列2での位置
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列1での残りの文字
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	文字列2での残りの文字
       </simpara>
      </listitem>
     </itemizedlist>
     ユーザ定義関数は、この特定の演算に関するコストを表す正の整数を返
     す必要があります。しかし、指定された引数のいくつかだけを使用して
     コストを計算することも可能です。
    </para>
    <para> 
     ユーザ定義関数を使用する形式では、挿入、置換、削除のコストを定義
     する際に特定の記号(文字)またはこれらの記号を含む句の相関や差異を
     考慮する手法をとることが可能となります。しかし、この代償として他
     の二つの形式では動作するCPUレジスタの使用に関する最適化の実行は行
     われず、キャッシュも動作しなくなります。
    </para>
    <para>
     <function>soundex</function>、<function>similar_text</function>、
     <function>metaphone</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.localeconv">
   <refnamediv>
    <refname>localeconv</refname>
    <refpurpose>数値に関するフォーマット情報を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>localeconv</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     ローカルな数値および通貨フォーマット情報を有する連想配列を返します。
    </para>
    <para>
     <function>localeconv</function> は、
     <function>setlocale</function> で設定されたカレントのロケールに基
     づきデータを返します。返される連想配列は、次のフィールドを有しま
     す。
     <informaltable >
      <tgroup cols="2">
       <thead>
        <row>
         <entry>配列要素</entry>
         <entry>説明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>decimal_point</entry>
         <entry>小数点文字</entry>
        </row>
        <row>
         <entry>thousands_sep</entry>
         <entry>千毎の区切り文字</entry>
        </row>
        <row>
	 <entry>grouping</entry>
	 <entry>数値集合を有する配列</entry>
        </row>
        <row>
	 <entry>int_curr_symbol</entry>
	 <entry>国際通貨記号 (すなわち、USD)</entry>
        </row>
        <row>
	 <entry>currency_symbol</entry>
	 <entry>ローカルな通貨記号 (すなわち、$)</entry>
        </row>
        <row>
	 <entry>mon_decimal_point</entry>
	 <entry>通貨用の小数点文字</entry>
        </row>
        <row>
	 <entry>mon_thousands_sep</entry>
	 <entry>通貨用の千毎の区切り文字</entry>
        </row>
        <row>
	 <entry>mon_grouping</entry>
	 <entry>通貨集合を有する配列</entry>
        </row>
        <row>
	 <entry>positive_sign</entry>
	 <entry>正の値を表す記号</entry>
        </row>
        <row>
	 <entry>negative_sign</entry>
	 <entry>負の値を表す記号</entry>
        </row>
        <row>
	 <entry>int_frac_digits</entry>
	 <entry>国際分割桁</entry>
        </row>
        <row>
	 <entry>frac_digits</entry>
	 <entry>ローカルな分割桁</entry>
        </row>
        <row>
	 <entry>p_cs_precedes</entry>
	 <entry>
	  currency_symbol が正の値を前に置く場合に&true;、後に置く場合に
	  &false;
	 </entry>
        </row>
        <row>
	 <entry>p_sep_by_space</entry>
	 <entry>
	  正の値から currency_symbol を1文字の空白で区切る場合に&true;、
	  そうでない場合に&false;
	 </entry>
        </row>
        <row>
	 <entry>n_cs_precedes</entry>
	 <entry>
	  currency_symbol が負の値を前に置く場合に&true;、後に置く場合に
	  &false;
	 </entry>
        </row>
        <row>
	 <entry>n_sep_by_space</entry>
	 <entry>
	  負の値から currency_symbol を1文字の空白で区切る場合に&true;、
	  そうでない場合に&false;
	 </entry>
        </row>
        <row valign="top">
	 <entry>p_sign_posn</entry>
	 <entry>
          <simplelist columns="2" type="horiz">
           <member>0</member>
           <member>
	    量および通貨記号を括る括弧
	   </member>
           <member>1</member>
           <member>
	    量および通貨記号の前に置く符号文字列
	   </member>
           <member>2</member>
           <member>
	    量および通貨記号の後に置く符号文字列
	   </member>
           <member>3</member>
           <member>
	    通貨記号の直前に置く符号文字列
	   </member>
           <member>4</member>
           <member>
	    通貨記号の直後に置く符号文字列
	   </member>
          </simplelist>
         </entry>
        </row>
        <row valign="top">
	 <entry>n_sign_posn</entry>
	 <entry>
          <simplelist columns="2" type="horiz">
           <member>0</member>
           <member>
	    量および通貨記号を括る括弧
	   </member>
           <member>1</member>
           <member>
	    量および通貨記号の前に置く符号文字列
	   </member>
           <member>2</member>
           <member>
	    量および通貨記号の後に置く符号文字列
	   </member>
           <member>3</member>
           <member>
	    通貨記号の直前に置く符号文字列
	   </member>
           <member>4</member>
           <member>
	    通貨記号の直後に置く符号文字列
	   </member>
          </simplelist>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
    <para>
     groupingフィールドには、グループ化する方法を表す数字を定義する配
     列が含まれます。例えば、en_USロケール用のgroupingフィールドには、
     3、3を値とする要素数2の配列が含まれます。この配列のより高い添字に
     は、より左側のグループに関するものが含まれます。
     ある配列要素が、CHAR_MAXに等しい場合、さらにグループは行われませ
     ん。配列要素が0に等しい場合、前の要素が使用されています。
    </para>
     <example>
      <title><function>localeconv</function>の例</title>
      <programlisting role="php">
<![CDATA[
setlocale(LC_ALL, "en_US");

$locale_info = localeconv();

echo "<PRE>\n";
echo "--------------------------------------------\n";
echo "  カレントロケールの通貨情報:               \n";
echo "--------------------------------------------\n\n";

echo "int_curr_symbol:   {$locale_info["int_curr_symbol"]}\n";
echo "currency_symbol:   {$locale_info["currency_symbol"]}\n";
echo "mon_decimal_point: {$locale_info["mon_decimal_point"]}\n";
echo "mon_thousands_sep: {$locale_info["mon_thousands_sep"]}\n";
echo "positive_sign:     {$locale_info["positive_sign"]}\n";
echo "negative_sign:     {$locale_info["negative_sign"]}\n";
echo "int_frac_digits:   {$locale_info["int_frac_digits"]}\n";
echo "frac_digits:       {$locale_info["frac_digits"]}\n";
echo "p_cs_precedes:     {$locale_info["p_cs_precedes"]}\n";
echo "p_sep_by_space:    {$locale_info["p_sep_by_space"]}\n";
echo "n_cs_precedes:     {$locale_info["n_cs_precedes"]}\n";
echo "n_sep_by_space:    {$locale_info["n_sep_by_space"]}\n";
echo "p_sign_posn:       {$locale_info["p_sign_posn"]}\n";
echo "n_sign_posn:       {$locale_info["n_sign_posn"]}\n";
echo "</PRE>\n";
]]>
      </programlisting>
     </example>
    <para>
     定数 CHAR_MAX は上記の方法を使用する場合にも定義されます。
    </para>
    <para>
     <function>setlocale</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <!-- this section is nearly-identical to trim, ltrim and rtrim -->
  <refentry id="function.ltrim">
   <refnamediv>
    <refname>ltrim</refname> 
    <refpurpose>
     文字列の最初から空白文字を取り除く
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ltrim</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>charlist</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <note>
     <simpara>
      2番目の引数はPHP 4.1.0で追加されました。
     </simpara>
    </note>
    <para>
     この関数は文字列の最初から空白文字を取り除き、
     取り除かれた文字列を返します。2番目のパラメータを指定しない場合、
     <function>ltrim</function>は以下の文字を削除します。
     <!-- sorted by importance. Printed 3 times: trim, ltrim, rtrim -->
     <itemizedlist>
      <listitem>
       <simpara>
        " " (<acronym>ASCII</acronym> <literal>32</literal> 
        (<literal>0x20</literal>)), 通常の空白。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\t" (<acronym>ASCII</acronym> <literal>9</literal> 
        (<literal>0x09</literal>)), タブ。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\n" (<acronym>ASCII</acronym> <literal>13</literal> 
        (<literal>0x0D</literal>)), 改行。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\r" (<acronym>ASCII</acronym> <literal>10</literal> 
        (<literal>0x0A</literal>)), リターン。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\0" (<acronym>ASCII</acronym> <literal>0</literal> 
        (<literal>0x00</literal>)), <literal>NUL</literal>バイト
       </simpara>
      </listitem>
      <listitem>
       <simpara> <!-- not \v, since not supported by PHP -->
        "\x0B" (<acronym>ASCII</acronym> <literal>11</literal> 
        (<literal>0x0B</literal>)), a <!-- TODO: -->.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <parameter>charlist</parameter>パラメータにより、削除する
     文字を指定することも可能です。削除したい全ての文字をリストに
     して下さい。<literal>..</literal>を文字の範囲を指定する際に
     使用可能です。
    </para>
    <example>
     <title><function>ltrim</function>の使用例</title>
     <para>
      <programlisting role="php">
<![CDATA[
<?php

$text = "\t\tThese are a few words :) ...  ";
$trimmed = ltrim($text);
// $trimmed = "These are a few words :) ...  "
$trimmed = ltrim($text," \t.");
// $trimmed = "These are a few words :) ...  "
$clean = ltrim($binary,"\0x00..\0x1F");
// $binaryの始めにあるASCII制御文字(0から31まで)を削除

?>
]]>
      </programlisting>
     </para>
    </example>
    <para>
     <function>trim</function> および <function>rtrim</function>も
     参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.md5">
   <refnamediv>
    <refname>md5</refname>
    <refpurpose>文字列のmd5ハッシュ値を計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>md5</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <ulink url="&url.rfc;rfc1321.html">RSA Data Security, Inc.の
      MD5メッセージダイジェストアルゴリズム</ulink> を用いて
     <parameter>str</parameter>のMD5ハッシュ値を計算し、そのハッシュを
      返します。このハッシュは、32文字の16進数となります。
    </para>
    <para>
     <function>crc32</function>および<function>md5_file</function>も参
     照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.md5-file">
   <refnamediv>
    <refname>md5_file</refname>
    <refpurpose>指定したファイルのMD5ハッシュ値を計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>md5_file</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <ulink url="&url.rfc;rfc1321.html">RSA Data Security, Inc. 
     MD5 メッセージダイジェストアルゴリズム</ulink>を用いて
     指定した<parameter>filename</parameter>のMD5ハッシュを計算し、そ
     のハッシュを返します。
    </para>
    <para>
     この関数は、コマンドラインのユーティリティmd5sumと同一目的で使用
     されます。
    </para>
    <para>
     <function>md5</function>および<function>crc32</function>も参照下
     さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.metaphone">
   <refnamediv>
    <refname>metaphone</refname>
    <refpurpose>文字列の metaphone キーを計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>metaphone</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>str</parameter> の metaphone キーを計算します。
    </para>
    <para>
     <function>soundex</function> と同様に metaphone は、発音が
     似た単語について同じキーを作成します。metaphone は、
     英語の発音の基本的ルールを知っているので、
     <function>soundex</function> よりも正確です。
     metaphone が生成するキーは可変長です。
    </para>
    <para>
     metaphone は、Lawrence Philips &lt;lphilips@verity.com> により
     開発されました。["Practical
     Algorithms for Programmers", Binstock &amp; Rex, Addison Wesley,
     1995] で解説されています。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.nl2br">
   <refnamediv>
    <refname>nl2br</refname>
    <refpurpose>改行文字の前にHTMLの改行指定文字を挿入する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>nl2br</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter>に含まれるすべての改行文字の
     前に '&lt;br /&gt;' を挿入して返します。
    </para>
    <note>
     <para>
      PHP 4.0.5以降、<function>nl2br</function> は XHTML互換となってい
      ます。PHP 4.0.5より前の全てのバージョンでは、
      <function>nl2br</function> は、<parameter>string</parameter>の全
      ての改行記号の前に'&lt;br /&gt;'の代わりに '&lt;br&gt;'を挿入し
      て返します。
     </para>
    </note>
    <para>
     <function>htmlspecialchars</function>、
     <function>htmlentities</function>、<function>wordwrap</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ord">
   <refnamediv>
    <refname>ord</refname>
    <refpurpose>文字のASCII値を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ord</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter>の先頭文字のASCII値を返します。
     この関数は<function>chr</function>と逆の動作をします。
     <example>
      <title><function>ord</function>の例</title>
      <programlisting role="php">
<![CDATA[
if (ord ($str) == 10) {
    echo "\$str の先頭は改行文字です。\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     ASCIIテーブルを<ulink url="&url.asciitable;"
     >&url.asciitable;</ulink>で参照可能です。
    </para>
    <simpara>
     <function>chr</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.parse-str">
   <refnamediv>
    <refname>parse_str</refname>
    <refpurpose>文字列を処理し、変数に代入する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>parse_str</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>array 
       <parameter><optional>arr</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     URL経由で渡されるクエリー文字列と同様に<parameter>str</parameter>
     を処理し、現在のスコープに変数をセットします。2番目の引数
     <parameter>arr</parameter> が指定された場合、
     変数は、代わりに配列の要素としてこの変数に保存されます。
    </para>
    <note>
     <para>
      オプションの2番目のパラメータのサポートはPHP 4.0.3で追加さされま
      した。
     </para>
    </note>
    <para>
     <example>
      <title><function>parse_str</function>の使用法</title>
      <programlisting role="php">
<![CDATA[
$str = "first=value&amp;second[]=this+works&amp;second[]=another";
parse_str($str);
echo $first;     /* "value" を出力 */
echo $second[0]; /* "this works" を出力 */
echo $second[1]; /* "another" を出力 */
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>set_magic_quotes_runtime</function>および
     <function>urldecode</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.print">
   <refnamediv>
    <refname>print</refname>
    <refpurpose>文字列を出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>print</function></funcdef>
      <paramdef>string <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>arg</parameter>を出力します。&return.success;
    </simpara>
    <para>
     <function>print</function>は実際には関数では(言語構造です)ありま
     せん。このため、引数を括弧で括る必要はありません。
    </para>
    <example>
     <title><function>print</function>の例</title>
     <programlisting role="php">
<![CDATA[
<?php
print("Hello World");

print "print() also works without parentheses.";

print "This spans
multiple lines. The newlines will be 
output as well";

print "This spans\nmultiple lines. The newlines will be\noutput as well.";

print "escaping characters is done \"Like this\"."

// print文の中で変数を使用することが可能です。
$foo = "foobar";
$bar = "barbaz";

print "foo is $foo"; // foo is foobar

// シングルクオートを使用すると値ではなく変数名が出力されます。
print 'foo is $foo'; // foo is $foo

// 他の文字を使用しない場合、変数だけを出力することが可能です。
print $foo;          // foobar

print <<<END
This uses the "here document" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!
END;
?>
]]>
     </programlisting>
    </example>
    <simpara>
     <function>echo</function>、<function>printf</function>、
     <function>flush</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.printf">
   <refnamediv>
    <refname>printf</refname>
    <refpurpose>フォーマット済みの文字列を出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>printf</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>args</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>sprintf</function> のドキュメントで説明されている
     <parameter>format</parameter> にしたがって、出力を生成します。
    </simpara>
    <simpara>
     <function>print</function>, <function>sprintf</function>, 
     <function>sscanf</function>, <function>fscanf</function>,
     <function>flush</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

   <refentry id="function.quoted-printable-decode">
    <refnamediv>
     <refname>quoted_printable_decode</refname>
    <refpurpose>
     quoted-printable文字列を8ビット文字列に変換
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string 
       <function>quoted_printable_decode</function>
      </funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、quoted printable 文字列をデコードし、8ビットバイナリ
     文字列を返します。この関数は <function>imap_qprint</function> に
     似ていますが、動作にIMAPモジュールを必要としないという違いがあり
     ます。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.quotemeta">
   <refnamediv>
    <refname>QuoteMeta</refname>
    <refpurpose>メタ文字をクォートする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>quotemeta</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列<parameter>str</parameter>について、
     <screen>. \\ + * ? [ ^ ] ( $ )</screen>の間にあるすべての文字
     の前にバックスラッシュ文字(<literal>\</literal>)でクォートして返します。
    </para>
    <simpara>
     <function>addslashes</function>,
     <function>htmlentities</function>, 
     <function>htmlspecialchars</function>, 
     <function>nl2br</function>,
     <function>stripslashes</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id='function.str-rot13'>
   <refnamediv>
    <refname>str_rot13</refname>
    <refpurpose>文字列にrot13変換を行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>str_rot13</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<parameter>str</parameter>引数にROT13エンコードを行い、
     結果の文字列を返します。ROT13は、各文字をアルファベット順に13文字
     シフトさせ、アルファベット以外の文字はそのままとするエンコードを
     行います。エンコードとデコードは同じ関数で行われます。引数にエン
     コードされた文字列が指定された場合には、元の文字列が返されます。
    </para>
   </refsect1>
  </refentry>

  <!-- this section is nearly-identical to trim, ltrim and rtrim -->
  <refentry id="function.rtrim">
   <refnamediv>
    <refname>rtrim</refname>
    <refpurpose>文字列の最後から空白文字を削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>rtrim</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>charlist</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <note>
     <simpara>
      2番目のパラメータは、PHP 4.1.0で追加されました。
     </simpara>
    </note>
    <para>
     この関数は文字列の最後から空白文字を取り除き、
     取り除かれた文字列を返します。2番目のパラメータを指定しない場合、
     <function>rtrim</function>は以下の文字を削除します。
     <!-- sorted by importance. Printed 3 times: trim, ltrim, rtrim -->
     <itemizedlist>
      <listitem>
       <simpara>
        " " (<acronym>ASCII</acronym> <literal>32</literal> 
        (<literal>0x20</literal>)), 通常の空白。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\t" (<acronym>ASCII</acronym> <literal>9</literal> 
        (<literal>0x09</literal>)), タブ。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\n" (<acronym>ASCII</acronym> <literal>13</literal> 
        (<literal>0x0D</literal>)), 改行。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\r" (<acronym>ASCII</acronym> <literal>10</literal> 
        (<literal>0x0A</literal>)), リターン。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\0" (<acronym>ASCII</acronym> <literal>0</literal> 
        (<literal>0x00</literal>)), <literal>NUL</literal>バイト
       </simpara>
      </listitem>
      <listitem>
       <simpara> <!-- not \v, since not supported by PHP -->
        "\x0B" (<acronym>ASCII</acronym> <literal>11</literal> 
        (<literal>0x0B</literal>)), 垂直タブ <!-- TODO: -->.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <parameter>charlist</parameter>パラメータにより、削除する
     文字を指定することも可能です。削除したい全ての文字をリストに
     して下さい。<literal>..</literal>を文字の範囲を指定する際に
     使用可能です。
    </para>
    <example>
     <title><function>rtrim</function>の使用例</title>
     <para>
      <programlisting role="php">
<![CDATA[
<?php

$text = "\t\tThese are a few words :) ...  ";
$trimmed = rtrim($text);
// $trimmed = "\t\tThese are a few words :) ...  "
$trimmed = rtrim($text," \t.");
// $trimmed = "\t\tThese are a few words :)"
$clean = rtrim($binary,"\0x00..\0x1F");
// $binaryの最後にあるASCII制御文字(0から31まで)を削除

?>
]]>
      </programlisting>
     </para>
    </example>
    <para>
     <function>trim</function> および <function>ltrim</function>も
     参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sscanf">
   <refnamediv>
    <refname>sscanf</refname>
    <refpurpose>フォーマット文字列に基づき入力を処理する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>sscanf</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>var1</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数 <function>sscanf</function> は、<function>printf</function>
     の入力版です。<function>sscanf</function>は、文字列
     <parameter>str</parameter>を読み込み、これを指定したフォーマット
     <parameter>format</parameter>に基づき解釈します。この関数のパラメー
     タが二つだけの場合、処理された値は配列として返されます。
     <example>
      <title><function>sscanf</function> の例</title>
      <programlisting role="php">
<![CDATA[
// シリアル番号を得る
$serial = sscanf("SN/2350001","SN/%d");
// 続いて製造日を得る
$mandate = "January 01 2000";
list($month, $day, $year) = sscanf($mandate,"%s %d %d");
echo "Item $serial was manufactured on: $year-".substr($month,0,3)."-$day\n";
]]>
      </programlisting>
     </example>
     オプションのパラメータが指定された場合、この関数は、代入された値
     の数を返します。オプション引数は参照渡しとする必要があります。
     <example>
      <title><function>sscanf</function> - オプションパラメータの使用法</title>
	 <programlisting role="php">
<![CDATA[
// author 情報を取得し、DocBook エントリを生成
$auth = "24\tLewis Carroll";
$n = sscanf($auth,"%d\t%s %s", &$id, &$first, &$last);
echo "<author id='$id'>
       <firstname>$first</firstname>
       <surname>$last</surname>
&lt;/author&gt;\n";
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>fscanf</function>, <function>printf</function>,
     <function>sprintf</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.setlocale">
   <refnamediv>
    <refname>setlocale</refname>
    <refpurpose>ロケール情報をセットする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>setlocale</function></funcdef>
      <paramdef>mixed <parameter>category</parameter></paramdef>
      <paramdef>string <parameter>locale</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>category</parameter>は、名前付きの定数(または文字列)で
     あり、ロケール設定により影響を受ける関数のカテゴリを指定します。
     カテゴリには、以下のものがあります。
     <itemizedlist>
      <listitem>
       <simpara>
	LC_ALL 以下のものすべて
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_COLLATE 文字列の比較用。<function>strcoll</function>参照
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_CTYPE 文字の分類と変換。たとえば <function>strtoupper</function>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_MONETARY localeconv() 用 - PHP では現在未実装
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        LC_NUMERIC 数字の区切り文字用(<function>localeconv</function>
        も参照下さい)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_TIME 日時。<function>strftime</function>でフォーマットに使用
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <parameter>locale</parameter>が空の文字列<literal>""</literal>
     の場合、ロケール名は上記のカテゴリと同じ名前の環境変数の値、
     または環境変数 "LANG" からセットされます。
    </para>
    <para>
     ロケールが 0 または <literal>"0"</literal> の場合、ロケール
     設定は適用されず、単に現在の設定が返されます。
    </para>
    <para>
     setlocale は現在の新しいロケールを返し、ロケール機能が未実装、
     指定されたロケールが存在しない、カテゴリ名が無効などの場合は
     &false; を返します。また、カテゴリ名が無効の場合は警告メッセージ
     が発生します。
    </para>
    <para>
     <example>
      <title><function>setlocale</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php
    /* ロケールをオランダ語に設定 */
    setlocale (LC_ALL, 'nl_NL');

    /* 出力: vrijdag 22 december 1978 */
    echo strftime ("%A %e %B %Y", mktime (0, 0, 0, 12, 22, 1978));
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.similar-text">
   <refnamediv>
    <refname>similar_text</refname>
    <refpurpose>二つの文字列の間の類似性を見積もる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>similar_text</function></funcdef>
      <paramdef>string <parameter>first</parameter></paramdef>
      <paramdef>string <parameter>second</parameter></paramdef>
      <paramdef>float
       <parameter><optional>percent</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、Oliver [1993] に記述されたように二つの文字列の間の類
     似性を見積もります。この実装は Oliver の擬似コードの様にスタック
     を使用せずプロセス全体の速度が改善されるかどうかにかかわらず再帰
     的コールを行うことに注意して下さい。このアルゴリズムの複雑さは、
     O(N**3) であることにも注意して下さい。ただし、N は最も長い文字列
     の長さです。
    </para>
    <para>
     3番目の引数としてリファレンスを渡すことにより、
     <function>similar_text</function> は類似性をパーセントで計算しま
     す。両方の文字列でマッチした文字の数を返します。
    </para>
   </refsect1>
  </refentry>
    
  <refentry id="function.soundex">
   <refnamediv>
    <refname>soundex</refname>
    <refpurpose>文字列のsoundexキーを計算する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>soundex</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>str</parameter>のsoundexキーを計算します。
    </para>
    <para>
     soundexキーには、似たように発音される単語に関して同じsoundexキーが
     生成されるという特性があります。
     このため、発音は知っているが、スペルがわからない場合に、
     データベースを検索することを容易にすることができます。
     soundex関数は、ある文字から始まる4文字の文字列を返します。
    </para>
    <para>
     このsoundex関数はDonald Knuthにより"The Art Of Computer Programming,
     vol. 3: Sorting And Searching", Addison-Wesley (1973), pp. 391-392
     にて説明されています。
    </para>
    <para>
     <example>
      <title>soundexの例</title>
      <programlisting role="php">
<![CDATA[
soundex ("Euler") == soundex ("Ellery") == 'E460';
soundex ("Gauss") == soundex ("Ghosh") == 'G200';
soundex ("Knuth") == soundex ("Kant") == 'H416';
soundex ("Lloyd") == soundex ("Ladd") == 'L300';
soundex ("Lukasiewicz") == soundex ("Lissajous") == 'L222';
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>levenshtein</function>, <function>metaphone</function>,
     <function>similar_text</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>フォーマットされた文字列を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>sprintf</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>args</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     フォーマット文字列<parameter>format</parameter>に基づき生成された
     文字列を返します。
    </simpara>
    <simpara>
     フォーマット文字列は0個以上のディレクティブ（指示子）により
     構成されます。ディレクティブには、そのまま結果にコピーされる
     (<literal>%</literal>を除く)通常の文字と<emphasis>変換指定子
      (conversion specifications)</emphasis>があり、取り出される際は
     どちらもそれ自身がパラメータとなります。このことは<function>
      sprintf</function>の場合だけでなく<function>printf</function>
     の場合も同様です。
    </simpara>
    <para>
     各変換指定子はパーセント記号(<literal>%</literal>)の後に、これら
     の要素が一つ以上続いたものになります。
     <orderedlist>
      <listitem>
       <simpara>
	オプションの<emphasis>パディング指定子</emphasis>。これは、
	文字列が正しい長さになるまでどんな文字で埋めるかということを
	指定します。これは空白かまたは<literal>0</literal>(文字'0')
	のいずれかです。デフォルトでは空白で埋められます。
	これ以外のパディング文字を指定するには、その文字の前に単一
	引用符(<literal>'</literal>)を置きます。後述の例を参照して
	ください。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	オプションの<emphasis>アラインメント指定子</emphasis>。これは
	結果を左寄せまたは右寄せにしたい場合に指定します。デフォルトは
	右寄せです。ここで<literal>-</literal>文字を指定すると左寄せ
	となります。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	オプションの数字。これは<emphasis>表示幅指定子</emphasis>です。
	結果を（最低）何桁にするかを指定します。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	オプションの<emphasis>精度指定子</emphasis>。これは、浮動小数点
	数に対して何個の数字を表示するか??定します。このオプションは、
	double（倍精度）型以外には何の効果もありません。
	(数字をフォーマットする際に便利な関数として他に
 	<function>number_format</function> があります。)
       </simpara>
      </listitem>
      <listitem>
       <para>
	<emphasis>型指定子</emphasis>。引数を何の型として扱うかを指定
	します。指定できる型を以下に示します。
	<simplelist>
	 <member>
	  <literal>%</literal> - パーセント文字。引数は不要です。
	 </member>
	 <member>
	  <literal>b</literal> - 引数を整数として扱い、バイナリの数値
	  として表現します。
	 </member>
	 <member>
	  <literal>c</literal> - 引数を整数として扱い、その ASCII 値
	  の文字として表現します。
	 </member>
	 <member>
	  <literal>d</literal> - 引数を整数として扱い、10 進数として
	  表現します。
	 </member>
         <member>
          <literal>u</literal> - 引数を整数として扱い、符号無しの10進
          数として表現します。
         </member>
	 <member>
	  <literal>f</literal> - 引数を double として扱い、浮動小数点数
	  として表現します。
	 </member>
	 <member>
	  <literal>o</literal> - 引数を整数として扱い、8 進数として
	  表現します。
	 </member>
	 <member>
	  <literal>s</literal> - 引数を文字列として扱い、表現します。
	 </member>
	 <member>
	  <literal>x</literal> - 引数を整数として扱い、16 進数として
	  (小文字で)表現します。
	 </member>
	 <member>
	  <literal>X</literal> - 引数を整数として扱い、16 進数として
	  (大文字で)表現します。
	 </member>
	</simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <para>
     PHP バージョン 4.0.6 でフォーマット文字列で引数の番号付け/交換が
     サポートされました。以下に例を示します。
     <example>
      <title>引数の交換</title>
      <programlisting role="php">
<![CDATA[
$format = "There are %d monkeys in the %s";
printf($format,$num,$location);
]]>
      </programlisting>
     </example>
     この出力は、"There are 5 monkeys in the tree" のようになります。
     ここで、フォーマット文字列が別のファイルにある場合を考えてみましょ
     う。これは、出力を国際化したりする場合に行われる可能性があります。
     この場合、次の書き変えられます。
     <example>
      <title>引数の交換</title>
      <programlisting role="php">
<![CDATA[
$format = "The %s contains %d monkeys";
printf($format,$num,$location);
]]>
      </programlisting>
     </example>
     ここで、問題が発生します。フォーマット文字列における置換指示子の
     順番は、コードにおける引数の順番と一致していません。コードは変更
     せず、置換指示子が参照するフォーマット文字列で指示を行う方が望ま
     しいと言えます。フォーマット文字列を次のように書き換えてみましょ
     う。
     <example>
      <title>引数の交換</title>
      <programlisting role="php">
<![CDATA[
$format = "The %2\$s contains %1\$d monkeys";
printf($format,$num,$location);
]]>
      </programlisting>
     </example>
     加えて、これによりコードに引数を追加せずに置換指示子を複数回使用
     することも可能になります。例えば、次のようになります。
     <example>
      <title>引数の交換</title>
      <programlisting role="php">
<![CDATA[
$format = "The %2\$s contains %1\$d monkeys.  
           That's a nice %2\$s full of %1\$d monkeys.";
printf($format,$num,$location);
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>printf</function>, <function>sscanf</function>,
     <function>fscanf</function>, <function>number_format</function>
     も参照下さい。
    </simpara>
   </refsect1>
   
   <refsect1>
    <title>例</title>
    <para>
     <example>
      <title>sprintf: 整数を0でパディング</title>
      <programlisting role="php">
<![CDATA[
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
]]>
      </programlisting>
     </example>
     <example>
      <title>sprintf: 通貨をフォーマットする例</title>
      <programlisting role="php">
<![CDATA[
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money は "123.1" を出力します。
$formatted = sprintf ("%01.2f", $money);
// echo $formatted は "123.10"を出力します
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strncasecmp">
   <refnamediv>
    <refname>strncasecmp</refname>
    <refpurpose>
     バイナリ対応の大文字小文字を区別しない文字列比較を最初のn文字につ
     いて行う
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strncasecmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>int <parameter>len</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<function>strcasecmp</function> に似ていますが、各文
     字列から比較する文字数(の上限)(<parameter>len</parameter>)を指定
     できるという違いがあります。どちらかの文字列が
     <parameter>len</parameter>より短い場合、その文字列の長さが比較時
     に使用されます。
    </para>
    <simpara> 
     <parameter>str1</parameter> が <parameter>str2</parameter> より短
     い場合に &lt; 0 を返し、<parameter>str1</parameter> が
     <parameter>str2</parameter> より大きい場合に &gt; 0、等しい場合に
     0を返します。
    </simpara>
    <simpara>
     <function>ereg</function>, <function>strcasecmp</function>,
     <function>strcmp</function>, <function>substr</function>, 
     <function>stristr</function>, <function>strstr</function> も参照
     下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strcasecmp">
   <refnamediv>
    <refname>strcasecmp</refname>
    <refpurpose>
     大文字小文字を区別しないバイナリにも使用可能な文字列比較を行う
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcasecmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>str1</parameter> が <parameter>str2</parameter> より
     小さい場合は負、<parameter>str1</parameter> が
     <parameter>str2</parameter> より大きい場合は正、等しい場合は 0 
     を返します。
     <example>
      <title><function>strcasecmp</function>の例</title>
      <programlisting role="php">
<![CDATA[
$var1 = "Hello";
$var2 = "hello";
if ( !strcasecmp($var1,$var2) ) {
    echo '$var1 is equal to $var2 in a case-insensitive string comparison';
}
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>ereg</function>, <function>strcmp</function>,
     <function>substr</function>, <function>stristr</function>,
     <function>strncasecmp</function>, <function>strstr</function> も
     参照下さい。
    </simpara>
    </refsect1>
  </refentry>

  <refentry id="function.strchr">
   <refnamediv>
    <refname>strchr</refname>
    <refpurpose>
     文字が最初に現れるところを探す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strchr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は<function>strstr</function>の別名で、すべて面で同じです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strcmp">
   <refnamediv>
    <refname>strcmp</refname>
    <refpurpose>バイナリでも使える文字列比較</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>str1</parameter>が<parameter>str2</parameter>
     よりも小さければ &lt; 0 を、<parameter>str1</parameter>が
     <parameter>str2</parameter>よりも大きければ &gt; 0 を、
     等しければ 0 を返します。
    </simpara>
    <simpara>
     この比較は大文字小文字を区別することに注意してください。
    </simpara>
    <simpara>
     <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strncasecmp</function>,
     <function>strncmp</function>, <function>strstr</function>も参照下
     さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strcoll">
   <refnamediv>
    <refname>strcoll</refname>
    <refpurpose>ロケールに基づく文字列比較</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcoll</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>str1</parameter> が <parameter>str2</parameter> より小
     さい場合に0未満の値、<parameter>str1</parameter>が
     <parameter>str2</parameter>より大きい場合に0より大きな値、両者が
     等しい場合に0を返します。<function>strcoll</function> は比較を行
     う際にカレントのロケールを使用します。カレントのロケールがCまたは
     POSIXの場合、この関数は <function>strcmp</function> と等価です。
    </simpara>
    <simpara>
     この比較は大文字小文字を区別すること、そして、
     <function>strcmp</function>とは異なり、バイナリには使用できないこ
     とに注意して下さい。
    </simpara>
    <simpara>
     <function>ereg</function>, <function>strcmp</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strncasecmp</function>,
     <function>strncmp</function>, <function>strstr</function>,
     <function>setlocale</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strcspn">
   <refnamediv>
    <refname>strcspn</refname>
    <refpurpose>
     マスクにマッチしない最初のセグメントの長さを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcspn</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>str1</parameter>において<parameter>str2</parameter>の文字が
     どれも含まれて<emphasis>ない</emphasis>最初のセグメントの長さを返します。
    </simpara>
    <simpara>
     <function>strspn</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strip-tags">
   <refnamediv>
    <refname>strip_tags</refname>
    <refpurpose>文字列からHTMLおよびPHPタグを取り除く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strip_tags</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>allowable_tags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     この関数は、指定した文字列から全てのHTMLおよびPHPタグを取り除きま
     す。不完全あるいは間違ったタグの場合は、エラーとなり警告を発生し
     ます。この関数は、<function>fgetss</function> 関数と同じタグ除去
     アルゴリズムを使用します。
    </simpara>
    <para>
     オプションの2番目の引数により、取り除かないタグを指定gきます。
     <note>
      <para>
       <parameter>allowable_tags</parameter>は、PHP3.0.13,PHP4B3で追加
       されました。
      </para>
     </note>
    </para>
    <para>
     <example>
      <title><function>strip_tags</function>の例</title>
      <programlisting role="php">
<![CDATA[
$string = strip_tags($string, '<a><b><i><u>');
]]>
      </programlisting>
     </example>
    </para>
    <warning>
     <para>
      この関数は、<parameter>allowable_tags</parameter>で許可したタグ
      の属性を全く修整しません。これには、<literal>style</literal> お
      よび <literal>onmouseover</literal>属性が含まれており、悪意のあ
      るユーザが他のユーザに見せるようなテキストを投稿する際に危険な行
      為を行う可能性があります。
     </para>
    </warning>
   </refsect1>
  </refentry>
  
  <refentry id="function.stripcslashes">
   <refnamediv>
    <refname>stripcslashes</refname>
    <refpurpose>
     addcslashesでクォートされた文字列をアンクォートする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>stripcslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     バックスラッシュを取り除いた文字列を返します。C言語と同様に
     <literal>\n</literal>, <literal>\r</literal> ..., 8進表現, 16進表
     現を認識します。
    </para>
    <simpara>
     <function>addcslashes</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.stripslashes">
   <refnamediv>
    <refname>stripslashes</refname>
    <refpurpose>
     addslashesでクォートされた文字列のクォート部分を取り除く
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>stripslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     バックスラッシュが取り除かれた文字列を返します。(<literal>\'
    </literal> が <literal>'</literal> になるなど)
     2つ並んだバックスラッシュは1つのバックスラッシュになります。
    </para>
    <simpara>
     <function>addslashes</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

   <refentry id="function.stristr">
     <refnamediv>
    <refname>stristr</refname>
    <refpurpose>
     大文字小文字を区別しない <function>strstr</function>
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>stristr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>haystack</parameter> において
     <parameter>needle</parameter> が最初に見つかった位置から最後までを
     返します。
     <parameter>needle</parameter> および <parameter>haystack</parameter>
     は大文字小文字を区別せずに評価されます。
    </para>
    <para>
     <parameter>needle</parameter> がない場合、&false; を返します。
    </para>
    <para>
     <parameter>needle</parameter> が文字列でない場合、整数に変換され、
     通常の文字列として適用されます。
    </para>
    <para>
     <function>strchr</function>,
     <function>strrchr</function>, <function>substr</function>, 
     <function>ereg</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strlen">
   <refnamediv>
    <refname>strlen</refname>
    <refpurpose>文字列の長さを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strlen</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter>の長さを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strnatcmp">
   <refnamediv>
    <refname>strnatcmp</refname>
    <refpurpose>
     "自然順"アルゴリズムにより文字列比較を行う
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strnatcmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、人間が行うような手法でアルファベットまたは数字の文字
     列の順序を比較するアルゴリズムを実装します。この手法は、"自然順"
     h言われます。このアルゴリズムと(<function>strcmp</function>を使
     用した)通常のコンピュータ文字列ソートの間の違いの例を次に示します。
     <informalexample>
      <programlisting>
<![CDATA[
$arr1 = $arr2 = array ("img12.png","img10.png","img2.png","img1.png");
echo "Standard string comparison\n";
usort($arr1,"strcmp");
print_r($arr1);
echo "\nNatural order string comparison\n";
usort($arr2,"strnatcmp");
print_r($arr2);
]]>
      </programlisting>
     </informalexample>
     上の例は、以下の出力を生成します。
     <informalexample>
      <screen>
<![CDATA[
Standard string comparison
Array
(
    [0] => img1.png
    [1] => img10.png
    [2] => img12.png
    [3] => img2.png
)

Natural order string comparison
Array
(
    [0] => img1.png
    [1] => img2.png
    [2] => img10.png
    [3] => img12.png
)
]]>
      </screen>
     </informalexample>
     詳細な情報については、Martin Poolの
     <ulink url="&url.strnatcmp;">自然順文字列比較</ulink>のページを参
     照下さい。
    </para>
    <simpara>
     他の文字列比較関数と同様に、この関数は、
     <parameter>str1</parameter>が<parameter>str2</parameter>より小さ
     いに場合に &lt; 0、<parameter>str1</parameter>が
     <parameter>str2</parameter>より大きい場合に &gt; 0 、等しい場合に
     0返します。
    </simpara>
    <simpara>
     この比較は、大文字小文字を区別することに注意して下さい。
    </simpara>
    <simpara>
     <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strcmp</function>,
     <function>strncmp</function>, <function>strncasecmp</function>,
     <function>strnatcasecmp</function>, <function>strstr</function>, 
     <function>natsort</function>, <function>natcasesort</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strnatcasecmp">
   <refnamediv>
    <refname>strnatcasecmp</refname>
    <refpurpose>
     "自然順"アルゴリズムにより大文字小文字を区別しない文字列比較を行う     
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strnatcasecmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、人間が行うような手法でアルファベットまたは数字の文字
     列の順序を比較するアルゴリズムを実装します。この関数の動作は、
     <function>strnatcmp</function>に似ていますが、比較が大文字小文字
     を区別しない違いがあります。詳細な情報については、Martin Poolの
     <ulink url="&url.strnatcmp;">Natural Order String
      Comparison</ulink> のページを参照下さい。
    </para>
    <simpara>
     他の文字列比較関数と同様に、この関数は、
     <parameter>str1</parameter>が<parameter>str2</parameter>より小さ
     いに場合に &lt; 0、<parameter>str1</parameter>が
     <parameter>str2</parameter>より大きい場合に &gt; 0 、等しい場合に
     0 を返します。
    </simpara>
    <simpara>
     <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strcmp</function>,
     <function>strncmp</function>, <function>strncasecmp</function>,
     <function>strnatcmp</function>, <function>strstr</function>
     も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.strncmp">
   <refnamediv>
    <refname>strncmp</refname>
    <refpurpose>
     最初のn文字についてバイナリ対応の文字列比較を行う
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strncmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>int <parameter>len</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<function>strcmp</function>に似てますが、
     各文字列から(最大)文字数(<parameter>len</parameter>)を比較に使用
     するところが異なります。文字列長が<parameter>len</parameter>より
     も短い場合、その文字列の長さが比較に使用されます。
    </para>
    <simpara>
     <parameter>str1</parameter>が<parameter>str2</parameter>より小さ
     いに場合?&lt; 0、<parameter>str1</parameter>が
     <parameter>str2</parameter>より大きい場合に &gt; 0 、等しい場合に
     0 を返します。
    </simpara>
    <simpara>
     比較は大文字小文字を区別することに注意して下さい。
    </simpara>
    <simpara>
     <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strcmp</function>,
     <function>strstr</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.str-pad">
   <refnamediv>
    <refname>str_pad</refname>
    <refpurpose>文字列を固定長の他の文字列で埋める</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>str_pad</function></funcdef>
      <paramdef>string <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>pad_length</parameter></paramdef>
      <paramdef>string
       <parameter><optional>pad_string</optional></parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>pad_type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は文字列 <parameter>input</parameter> の左、右または両側を
     指定した長さで埋めます。オプションの引数 
     <parameter>pad_string</parameter> が指定されていない場合は、
     <parameter>input</parameter>は空白で埋められ、それ以外の場合は、
     <parameter>pad_string</parameter> からの文字で制限まで埋められます。
    </para>
    <para>
     オプションの引数<parameter>pad_type</parameter>には、
     STR_PAD_RIGHT, STR_PAD_LEFT, STR_PAD_BOTHを指定可能です。
     <parameter>pad_type</parameter>が指定されない場合、STR_PAD_RIGHT
     を仮定します。
    </para>
    <para>
     <parameter>pad_length</parameter>の値が負または入力文字列の長さよ
      りも短い場合、埋める操作は行われません。
    </para>
    <para>
     <example>
      <title><function>str_pad</function>の例</title>
      <programlisting role="php">
<![CDATA[
$input = "Alien";
print str_pad($input, 10);                      // "Alien     "を出力
print str_pad($input, 10, "-=", STR_PAD_LEFT);  // "-=-=-Alien"を出力
print str_pad($input, 10, "_", STR_PAD_BOTH);   // "__Alien___"を出力
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strpos">
   <refnamediv>
    <refname>strpos</refname>
    <refpurpose>
     文字列が最初に現れる場所を見つける
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strpos</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>offset</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列 <parameter>haystack</parameter> の中で、<parameter>
      needle</parameter>が最初に現れた位置を数字で返します。
     <function>strrpos</function>とは異なり、この関数は
     <parameter>needle</parameter> パラメータとして文字列全体をとり、
     その文字列全体が検索対象となります。
    </para>
    <para>
     <parameter>needle</parameter>が見つからない場合は&false;を返します。
     <note>
      <para>
       "位置0で文字が見つかった"と"文字がみつからなかった"という返り値
       は混同しやすいです。これらを区別するには、次のようにします。
       <informalexample>
	<programlisting role="php">
<![CDATA[
// PHP 4.0b3以降の場合:
$pos = strpos ($mystring, "b");
if ($pos === false) { // 注意: 等号が3つです。
    // 見つかりませんでした...
}

// 4.0b3より前のバージョンの場合:
$pos = strpos ($mystring, "b");
if (is_string ($pos) &amp;&amp; !$pos) {
    // 見つかりませんでした...
}
]]>
	</programlisting>
       </informalexample>
      </para>
     </note>
    </para>
    <para>
     <parameter>needle</parameter> が文字列でない場合は数値に
     変換されて、その結果が検索対象の文字コードとして適用されます。
    </para>
    <para>
     オプションの <parameter>offset</parameter> パラメータにより
     <parameter>haystack</parameter> のどの文字から検索を開始するかを     
     指定することが可能です。
     この場合でも、返される位置は <parameter>haystack</parameter> の先頭に
     対する相対位置です。
    </para>
    <para>
     <function>strrpos</function>,
     <function>strrchr</function>, <function>substr</function>,
     <function>stristr</function>, <function>strstr</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrchr">
   <refnamediv>
    <refname>strrchr</refname>
    <refpurpose>
     文字列中に文字が最後に現れる場所を苣dける
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strrchr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、文字列 <parameter>haystack</parameter> の中で、
     <parameter>needle</parameter>が最後に現れた位置を返します。
    </para>
    <para>
     <parameter>needle</parameter> が見つからない場合は&false;を返します。
    </para>
    <para>
     <parameter>needle</parameter>が1つ以上の文字を含んでいる
     場合は、最初のものが使われます。
    </para>
    <para>
     <parameter>needle</parameter> が文字列でない場合、それは
     整数に変換され、それが検索対象の文字コードとして適用されます。
     <example>
      <title><function>strrchr</function>の例</title>
      <programlisting role="php">
<![CDATA[
// $PATH 中の最後のディレクトリを取得
$dir = substr( strrchr( $PATH, ":" ), 1 );

// 最後の改行文字以降をすべて取得
$text = "Line 1\nLine 2\nLine 3";
$last = substr (strrchr ($text, 10), 1 );
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>strchr</function>, <function>substr</function>,
     <function>stristr</function>, <function>strstr</function>.
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.str-repeat">
   <refnamediv>
    <refname>str_repeat</refname>
    <refpurpose>文字列を反復する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>str_repeat</function></funcdef>
      <paramdef>string <parameter>input_str</parameter></paramdef>
      <paramdef>int <parameter>multiplier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>input_str</parameter> を
     <parameter>multiplier</parameter> 回を繰り返した文字列を返します。
     <parameter>multiplier</parameter> は、0より大きい必要があります。
    </para>
    <example>
     <title><function>str_repeat</function>の例</title>
     <programlisting role="php">
<![CDATA[
echo str_repeat("-=", 10);
]]>
     </programlisting>
    </example>
    <para>
     出力は、"-=-=-=-=-=-=-=-=-=-=" となります。
    </para>
    <para>
     <function>substr_count</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrev">
   <refnamediv>
    <refname>strrev</refname>
    <refpurpose>文字列を逆順にする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strrev</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter>を逆順にして返します。
     <example>
      <title><function>strrev</function>で文字列を逆順にする</title>
      <programlisting role="php">
<![CDATA[
<php
echo strrev("Hello world!"); // "!dlrow olleH"を出力
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrpos">
   <refnamediv>
    <refname>strrpos</refname>
    <refpurpose>
     文字列中に、ある文字が最後に現れる場所を探す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strrpos</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>char <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列<parameter>haystack</parameter>の中で、
     <parameter>needle</parameter>が最後に現れた位置を数字で返します。
     この場合、<parameter>needle</parameter>は単一文字でなければならな
     いことに注意して下さい。
     <parameter>needle</parameter>に文字列が指定された場合、その文字列
     の最初の文字だけが使われます。
    </para>
    <para>
     <parameter>needle</parameter>が見つからないと&false;を返します。
     <note>
      <para>
       "位置0に文字が見つかった"と"文字が見つからなかった"場合の返り値
       は混同しやすいです。この違いを見分ける方法を以下に示します。
       <informalexample>
        <programlisting role="php">
<![CDATA[
// PHP 4.0b3以降の場合:
$pos = strrpos($mystring, "b");
if ($pos === false) { // 注意: 等号が3つ
    // 見つからない...
}

// 4.0b3より前のバージョンの場合:
$pos = strrpos($mystring, "b");
if (is_string($pos) && !$pos) {
    // 見つからない...
}
]]>
        </programlisting>
       </informalexample>
      </para>
     </note>
    </para>
    <para>
     <parameter>needle</parameter>が文字列でない場合は数値に
     変換されて、その結果が検索対象の文字として適用されます。
    </para>
    <para>
     <function>strpos</function>, <function>strrchr</function>,
     <function>substr</function> ,<function>stristr</function>,
     <function>strstr</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strspn">
   <refnamediv>
    <refname>strspn</refname>
    <refpurpose>
     マスクに一致する最初のセグメントの長さを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strspn</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>str1</parameter>の中で全て
     <parameter>str2</parameter>の中の文字からなる最初のセグメントの
     長さを返します。
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$var = strspn ("42 is the answer, what is the question ...", "1234567890");
]]>
      </programlisting>
     </informalexample>
     このコードは、<varname>$var</varname>に2を代入します。これは、
     "1234567890"からの文字を含む最長の部分が "42" であるためです。
    </para>
    <simpara>
     <function>strcspn</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.strstr">
   <refnamediv>
    <refname>strstr</refname>
    <refpurpose>文字列が最初に現れる位置を見つける</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strstr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>haystack</parameter>の中で<parameter>needle</parameter>が
     最初に現れる場所から文字列の終わりまでを返します。
    </para>
    <para>
     <parameter>needle</parameter> が見つからない場合は&false;を返しま
     す。
    </para>
    <para>
     <parameter>needle</parameter> が文字列でない場合は整数に変換され、
     その値が検索対象の文字コードとして適用されます。
    </para>
    <para>
     <note>
      <para>
       この関数は大文字小文字を区別することに注意して下さい。大文字小文
       字を区別しない検索を行う場合は、<function>stristr</function>を使
       用して下さい。
      </para>
     </note>
    </para>
    <para>    
     <example>
      <title><function>strstr</function>の例</title>
      <programlisting role="php">
<![CDATA[
$email = 'sterling@designmultimedia.com';
$domain = strstr ($email, '@');
print $domain; // designmultimedia.comを出力する
]]>
      </programlisting>
     </example> 
    </para>
    <para>
     <function>ereg</function>, <function>preg_match</function>,
     <function>strchr</function>, <function>stristr</function>,
     <function>strpos</function>, <function>strrchr</function>,
     <function>substr</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose>文字列をトークンに分割する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtok</function></funcdef>
      <paramdef>string <parameter>arg1</parameter></paramdef>
      <paramdef>string <parameter>arg2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>strtok</function> は文字列をトークンに分割するために使
     用されます。"This is an example string" のような文字列がある場合、
     空白文字をトークンとして個々の単語にこの文字列を分割することがで
     きます。
     <example>
      <title><function>strtok</function>の例</title>
      <programlisting role="php">
<![CDATA[
$string = "This is an example string";
$tok = strtok($string," ");
while($tok) {
    echo "Word=$tok<br>";
    $tok = strtok(" ");
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     strtok は最初のコールの時のみ string 引数を使用することに注意して下さい。
     strtok は、文字列のどっkいるのかの情報を保持しているため、
     2回目以降のコールではトークンのみを必要とします。
     最初からやりなおす場合や新しい文字列をトークンに分割する場合、
     初期化するために再度string引数を指定してstrtokをコールします。
     文字列は、引数の文字のどれかが見つかったはトークンに分割されます。
    </para>
    <para>
     空の部分が見つかった場合の動作はPHP 4.1.0で変更されました。古い動
     作は、空の文字列を返しますが、新しい、正しい動作は、文字列のその
     部分を単に飛ばします。
     <example>
      <title>古い<function>strtok</function>の動作</title>
      <programlisting role="php">
<![CDATA[
    $first_token  = strtok('/something', '/');
    $second_token = strtok('/');
    var_dump ($first_token, $second_token);

/* 出力:
    string(0) ""
    string(9) "something"
*/    
]]>
      </programlisting>
     </example>
     <example>
      <title>新しい<function>strtok</function>の動作</title>
      <programlisting role="php">
<![CDATA[
    $first_token  = strtok('/something', '/');
    $second_token = strtok('/');
    var_dump ($first_token, $second_token);

/* 出力:
    string(9) "something"
    bool(false)
*/    
]]>
      </programlisting>
     </example>
    </para>
    <para>
     トークンを"0"にすることもできることにも注意して下さい。
     このトークンを条件式で評価した場合、 &false; となります。
    </para>
    <para>
     <function>split</function> および <function>explode</function> も
     参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.strtolower">
   <refnamediv>
    <refname>strtolower</refname>
    <refpurpose>文字列を小文字にする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtolower</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter> をアルファベット部分を
     すべて小文字にして返します｡
    </para>
    <para>
     「アルファベット部分」は現在のロケールにより決定されます。
     このため、たとえばデフォルトの "C" ロケールである場合は、
     ウムラウトA (&Auml;) のような文字は変換されません。
    </para>
    <example>
     <title><function>strtolower</function>の例</title>
     <programlisting role="php">
<![CDATA[
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = strtolower($str);	
print $str; # 「mary had a little lamb and she loved it so」を出力します。
]]>
     </programlisting>
    </example>
    <para>
     <function>strtoupper</function>, <function>ucfirst</function>,
     <function>ucwords</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.strtoupper">
   <refnamediv>
    <refname>strtoupper</refname>
    <refpurpose>文字列を大文字にする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtoupper</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>string</parameter> を、アルファベット部分を
     すべて大文字にして返します｡
    </para>
    <para>
     「アルファベット部分」は現在のロケールにより決定されます。
     つまり、たとえばデフォルトの "C" ロケールである場合は、
     ウムラウトa (&auml;)のような文字は変換されません。
    </para>
    <example>
     <title><function>strtoupper</function>の例</title>
     <programlisting role="php">
<![CDATA[
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = strtoupper ($str);	
print $str; # 「MARY HAD A LITTLE LAMB AND SHE LOVED IT SO」を出力します。
]]>
     </programlisting>
    </example>
    <para>
     <function>strtolower</function>, <function>ucfirst</function>,
     <function>ucwords</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.str-replace">
   <refnamediv>
    <refname>str_replace</refname>
    <refpurpose>
     文字列 subject 中の文字列 search を全て文字列replaceに置換する
    </refpurpose>
   </refnamediv>
    <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>str_replace</function></funcdef>
      <paramdef>mixed <parameter>search</parameter></paramdef>
      <paramdef>mixed <parameter>replace</parameter></paramdef>
      <paramdef>mixed <parameter>subject</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<parameter>subject</parameter> の中の
     <parameter>search</parameter> を全て
     <parameter>replace</parameter> に置換します。技巧的な置換ルールを
     必要としない場合、<function>ereg_replace</function> または
     <function>preg_replace</function>の替わりにこの関数を常用するべき
     です。
    </para>
    <para>
     PHP 4.0.5 以降では、<function>str_replace</function> への全てのパ
     ラメータは配列とすることが可能です。
    </para>
    <para>
     <parameter>subject</parameter> が配列の場合、
     <parameter>subject</parameter> の各エントリについて検索と置換が行
     われ、返り値は同様に配列となります。
    </para>
    <para>
     <parameter>search</parameter> と <parameter>replace</parameter>
     が配列の場合、<function>str_replace</function> は各配列から値を一
     つとりだし、<parameter>subject</parameter> 上で検索と置換を行うた
     めに使用します。<parameter>replace</parameter> の値が
     <parameter>search</parameter> よりも少ない場合、置換される値の残
     りの部分には空の文字列が使用されます。
     <parameter>search</parameter> が配列で
     <parameter>replace</parameter>が文字列の場合、この置換文字列が
     <parameter>search</parameter> の各値について使用されます。しかし、
     逆は意味がありません。
    </para>
    <para>
     <example>
      <title><function>str_replace</function>の例</title>
      <programlisting role="php">
<![CDATA[
$bodytag = str_replace ("%body%", "black", "<body text=%body%>");
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この関数はバイナリでも使用可能です。
    </para>
    <para>
     <function>str_replace</function> は PHP 3.0.6 で追加されましたが、
     PHP 3.0.8 まではバグがありました。
    </para>
    <para>
     <function>ereg_replace</function>、
     <function>preg_replace</function>、<function>strtr</function> も
     参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.strtr">
   <refnamediv>
    <refname>strtr</refname>
    <refpurpose>特定の文字を変換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtr</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>from</parameter></paramdef>
      <paramdef>string <parameter>to</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は <parameter>str</parameter> を走査し、
     <parameter>from</parameter> に含まれる文字が見つかると、そのすべてを
     <parameter>to</parameter> の中で対応する文字に置き換え、
     その結果を返します。
    </para>
    <para>
     <parameter>from</parameter> と <parameter>to</parameter> の
     長さが異なる場合、長い方の余分な文字は無視されます。
     <example>
      <title><function>strtr</function>の例</title>
      <programlisting role="php">
<![CDATA[
$addr = strtr($addr, "&auml;&aring;&ouml;", "aao");
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>strtr</function> は、引数を2つ指定してコールすることが可能です。
     引数を2つ指定してコールっ_場合、異なった動作となります。
     文字列<parameter>from</parameter> では、ソース文字列で変換を行う
     「文字列 -> 文字列」の組を指定する必要があります。
     <function>strtr</function> は、常にまず最も長くマッチする文字列を探し、
     既に置換されている部分文字列については再度置換を行いません。
    </para>
    <para>
     例:
     <informalexample>
      <programlisting role="php">
<![CDATA[
$trans = array ("hello" => "hi", "hi" => "hello");
echo strtr("hi all, I said hello", $trans) . "\n";
]]>
      </programlisting>
     </informalexample>
     この例では次のように表示されます。: "hello all, I said hi",
    </para>
    <note>
     <simpara>
      このオプションのパラメータ<parameter>to</parameter>および
      <parameter>from</parameter>は、PHP 4.0.0 で追加されました。
     </simpara>
    </note>
    <para>
     <function>ereg_replace</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.substr">
   <refnamediv>
    <refname>substr</refname>
    <refpurpose>文字列の一部分を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>substr</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>length</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>substr</function> は文字列 <parameter>string
     </parameter> の、<parameter>start</parameter> で指定された
     位置から <parameter>length</parameter> バイト分の文字列を
     返します。
    </para>
    <para>
     <parameter>start</parameter> が正の場合、返される文字列は、
     <parameter>string</parameter> の 0 から数えて
     <parameter>start</parameter>番目から始まる文字列となります。
     例えば、文字列'<literal>abcdef</literal>'において位置
     <literal>0</literal>にある文字は、'<literal>a</literal>'であり、
     位置<literal>2</literal>には'<literal>c</literal>'があります。
    </para>
    <para>
     例:
     <informalexample>
      <programlisting role="php">
<![CDATA[
$rest = substr("abcdef", 1);    // "bcdef"を返します
$rest = substr("abcdef", 1, 3); // "bcd"を返します
$rest = substr("abcdef", 0, 4); // "abcd"を返します
$rest = substr("abcdef", 0, 8); // "abcdef"を返します
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <parameter>start</parameter> が負の場合、返される文字列は、
     <parameter>string</parameter>の後ろから数えて
     <parameter>start</parameter>番目から始まる文字列となります。
    </para>
    <example>
     <title>負の<parameter>start</parameter>を使用</title>
     <programlisting role="php">
<![CDATA[
$rest = substr("abcdef", -1); //  "f" を返します
$rest = substr("abcdef", -2); // "ef" を返します
$rest = substr("abcdef", -3, 1); // "d" を返します
]]>
     </programlisting>
    </example>
    <para>
     <parameter>length</parameter> が指定され、かつ正である場合、返さ
     れる文字列は <parameter>start</parameter> から数えて
     <parameter>length</parameter>文字数分となります。負の length が指
     定された場合、(start は文字列の終端を過ぎているので)返される文字
     列は <parameter>start</parameter> の位置にある1文字のみとなります。
    </para>
    <para>
     <parameter>length</parameter> が指定され、かつ負である場合、返さ
     れる文字列は <parameter>start</parameter> の後ろから数えて
     <parameter>length</parameter> 文字までとなります。この指定により
     切り出す文字列の長さが負となる場合、<parameter>start</parameter>
     の位置にある1文字のみが文字列として返されます。
    </para>
    <example>
     <title>負の<parameter>length</parameter>を使用</title>
     <programlisting role="php">
<![CDATA[
$rest = substr("abcdef", 0, -1);  // "abcde"を返す
$rest = substr("abcdef", 2, -1);  // "cde"を返す
$rest = substr("abcdef", 4, -4);  // ""を返す
$rest = substr("abcdef", -3, -1); // "de"を返す
]]>
     </programlisting>
    </example>
    <para>
    <function>strrchr</function> および
    <function>ereg</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.substr-count">
   <refnamediv>
    <refname>substr_count</refname>
    <refpurpose>副文字列の出現関数を数える</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>substr_count</function></funcdef>
      <paramdef>string <parameter>haystrack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>substr_count</function>は、文字列
     <parameter>haystack</parameter>の中での副文字列
     <parameter>needle</parameter>の出現回数を返します。
    </para>
    <para>
     <example>
      <title><function>substr_count</function>の例</title>
      <programlisting>
<![CDATA[
print substr_count("This is a test", "is"); // 2を出力する
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.substr-replace">
   <refnamediv>
    <refname>substr_replace</refname>
    <refpurpose>文字列の一部を置換する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>substr_replace</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>string <parameter>replacement</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int 
       <parameter>
	<replaceable><optional>length</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>substr_replace</function>は、文字列
     <parameter>string</parameter>の <parameter>start</parameter> およ
     び(オプションの) <parameter>length</parameter> パラメータで区切ら
     れた部分を <parameter>replacement</parameter> で指定した文字列に
     置換します。結果が返されます。
    </para>
    <para>
     <parameter>start</parameter>が正の場合、置換は
     <parameter>string</parameter> で<parameter>start</parameter>番目
     に文字から始まります。
    </para>  
    <para>
     <parameter>start</parameter> が負の場合、置換は
     <parameter>string</parameter> の終端から
     <parameter>start</parameter>番目の文字から始まります。
    </para>  
    <para>
     <parameter>length</parameter>が指定されかつ正の場合、
     <parameter>string</parameter>の置換される部分の長さを表します。
     負の場合、置換を停止する位置が <parameter>string</parameter>の終端から
     何文字目であるかを表します。このパラメータが省略された場合、デフォ
     ルト値はstrlen(<parameter>string</parameter>)、すなわち、
     <parameter>string</parameter>の終端まで置換することになります。
    </para>
    <para>
     <example>
      <title><function>substr_replace</function>の例</title>
      <programlisting role="php">
<![CDATA[
<?php
$var = 'ABCDEFGH:/MNRPQR/';
echo "Original: $var<hr>\n";
 
/* 以下の2つの例は、全ての $var で 'bob' で置換します。 */
echo substr_replace ($var, 'bob', 0) . "<br>\n";
echo substr_replace ($var, 'bob', 0, strlen ($var)) . "<br>\n";

/* $var の先頭に 'bob' を挿入します */
echo substr_replace($var, 'bob', 0, 0) . "<br>\n";
 
/* 次の2つの例は、$var の 'MNRPQR' を 'bob'で置換します */
echo substr_replace($var, 'bob', 10, -1) . "<br>\n";
echo substr_replace($var, 'bob', -7, -1) . "<br>\n";
 
/* $var から 'MNRPQR' を削除します */
echo substr_replace($var, '', 10, -1) . "<br>\n";
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>str_replace</function>および<function>substr</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <!-- this section is nearly-identical to trim, ltrim and rtrim -->
  <refentry id="function.trim">
   <refnamediv>
    <refname>trim</refname> 
    <refpurpose>
     文字列の先頭および末尾にあるホワイトスペースを取り除く
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>trim</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>charlist</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <note>
     <simpara>
      オプションの<parameter>charlist</parameter>パラメータは、PHP
      4.1.0で追加されました。
     </simpara>
    </note>
    <para>
     この関数は文字列の最初および最後から空白文字を取り除き、
     取り除かれた文字列を返します。2番目のパラメータを指定しない場合、
     <function>trim</function>は以下の文字を削除します。
     <!-- sorted by importance. Printed 3 times: trim, ltrim, rtrim -->
     <itemizedlist>
      <listitem>
       <simpara>
        " " (<acronym>ASCII</acronym> <literal>32</literal> 
        (<literal>0x20</literal>)), 通常の空白。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\t" (<acronym>ASCII</acronym> <literal>9</literal> 
        (<literal>0x09</literal>)), タブ。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\n" (<acronym>ASCII</acronym> <literal>13</literal> 
        (<literal>0x0D</literal>)), 改行。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\r" (<acronym>ASCII</acronym> <literal>10</literal> 
        (<literal>0x0A</literal>)), リターン。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        "\0" (<acronym>ASCII</acronym> <literal>0</literal> 
        (<literal>0x00</literal>)), <literal>NUL</literal>バイト
       </simpara>
      </listitem>
      <listitem>
       <simpara> <!-- not \v, since not supported by PHP -->
        "\x0B" (<acronym>ASCII</acronym> <literal>11</literal> 
        (<literal>0x0B</literal>)), a <!-- TODO: -->.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <parameter>charlist</parameter>パラメータにより、削除する
     文字を指定することも可能です。削除したい全ての文字をリストに
     して下さい。<literal>..</literal>を文字の範囲を指定する際に
     使用可能です。
    </para>
    <example>
     <title><function>trim</function>の使用例</title>
     <para>
      <programlisting role="php">
<![CDATA[
<?php

$text = "\t\tThese are a few words :) ...  ";
$trimmed = trim($text);
// $trimmed = "These are a few words :) ...  "
$trimmed = trim($text," \t.");
// $trimmed = "These are a few words :)"
$clean = trim($binary,"\0x00..\0x1F");
// $binaryの始めおよび最後にあるASCII制御文字(0から31まで)を削除

?>
]]>
      </programlisting>
     </para>
    </example>
    <para>
     <function>ltrim</function> および <function>rtrim</function>も
     参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ucfirst">
   <refnamediv>
    <refname>ucfirst</refname> 
    <refpurpose>文字列の最初の文字を大文字にする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ucfirst</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>str</parameter>の最初の文字がアルファベットであれば、
     それを大文字にします。
    </para>
    <para>
     「アルファベット」かどうかというのは現在のロケールにより決定
     されます。たとえば、デフォルトの "C" ロケールでは、ウムラウトa 
     (&auml;)は変換されません。
     <example>
      <title><function>ucfirst</function>の例</title>
      <programlisting role="php">
<![CDATA[
$foo = 'hello world!';
$foo = ucfirst($foo);             // Hello world!

$bar = 'HELLO WORLD!';
$bar = ucfirst($bar);             // HELLO WORLD!
$bar = ucfirst(strtolower($bar)); // Hello world!
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>strtoupper</function>, <function>strtolower</function>,
     <function>ucwords</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ucwords">
   <refnamediv>
    <refname>ucwords</refname>
    <refpurpose>
     文字列の各単語の最初の文字を大文字にする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ucwords</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字がアルファベットの場合、<parameter>str</parameter> の各単語の
     最初の文字を大文字にします。
     <example>
      <title><function>ucwords</function>の例</title>
      <programlisting role="php">
<![CDATA[
$foo = 'hello world!';
$foo = ucwords($foo);             // Hello World! 

$bar = 'HELLO WORLD!';
$bar = ucwords($bar);             // HELLO WORLD!
$bar = ucwords(strtolower($bar)); // Hello World!
]]>
      </programlisting>
     </example>
     <note>
      <simpara>
       単語の定義は、空白文字(空白、フォームフィード、改行、復改、水平
       タブ、垂直タブ)の直後にあるあらゆる文字からなる文字列です。
      </simpara>
     </note>
    </para>
    <para>
     <function>strtoupper</function>,
     <function>strtolower</function>,<function>ucfirst</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.vprintf">
   <refnamediv>
    <refname>vprintf</refname>
    <refpurpose>フォーマットされた文字列を出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>vprintf</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>array 
       <parameter>args</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <parameter>format</parameter>に基づき文字列フォーマットされた文字
     列を出力します。(フォーマットは<function>sprintf</function>のドキュ
     メントに既述されています。)
    </simpara>
    <simpara>
     <function>printf</function>と動作は同じですが、可変長の引数ではな
     く、配列を引数として受け取ります。
    </simpara>
    <simpara>
     <function>printf</function>, <function>sprintf</function>, 
     <function>vsprintf</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.vsprintf">
   <refnamediv>
    <refname>vsprintf</refname>
    <refpurpose>フォーマットされた文字列を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>vsprintf</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>array 
       <parameter>args</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     (<function>sprintf</function>のドキュメントに記述された)
     <parameter>format</parameter>に基づきフォーマットされた文字列とし
     て配列値を返します。
    </simpara>
    <simpara>
     <function>sprintf</function>と動作は同じですが、 可変長の引数では
     なく配列を引数とします。
    </simpara>
    <simpara>
     <function>sprintf</function>, <function>vsprintf</function>, 
     <function>vprintf</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.wordwrap">
   <refnamediv>
    <refname>wordwrap</refname>
    <refpurpose>
     文字列分割文字を使用して指定した文字数数に文字列を分割する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>wordwrap</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>int
       <parameter>
	<replaceable><optional>width</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>string
       <parameter>
	<replaceable><optional>break</optional></replaceable>
       </parameter>
      </paramdef>
      <paramdef>int
       <parameter>
	<replaceable><optional>cut</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (オプションの) <parameter>width</parameter>パラメータで指定したカ
     ラム番号で文字列<parameter>str</parameter>を分割します。(オプショ
     ンの)<parameter>break</parameter>パラメータを用いて行は分割されま
     す。
    </para>
    <para>
     <parameter>width</parameter>または<parameter>break</parameter>が
     指定された場合、<function>wordwrap</function>は75カラムで自動的に
     分割し、'\n'(改行)を用いて分割します。
    </para>
    <para>
     <parameter>cut</parameter>が1に設定された場合、文字列は常に指定し
     た幅でラップされます。このため、指定した幅よりも長い単語がある場
     合には、分割されます。(2番目の例を参照下さい)
    </para>
    <para>
     <example>
      <title><function>wordwrap</function>例</title>
      <programlisting role="php">
<![CDATA[
$text = "The quick brown fox jumped over the lazy dog.";
$newtext = wordwrap( $text, 20 );

echo "$newtext\n";
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の出力は、次のようになります。
    </para>
    <para>
     <informalexample>
      <screen>
<![CDATA[
The quick brown fox
jumped over the lazy dog.
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     <example>
      <title><function>wordwrap</function> の例</title>
      <programlisting role="php">
<![CDATA[
$text = "A very long woooooooooooord.";
$newtext = wordwrap( $text, 8, "\n", 1);

echo "$newtext\n";
]]>
      </programlisting>
     </example>
    </para>
    <para>
     この例の出力は次のようになります。
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
A very
long
wooooooo
ooooord.
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>nl2br</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id='function.nl-langinfo'>
   <refnamediv>
    <refname>nl_langinfo</refname>
    <refpurpose>
     言語及びロケール情報を検索する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>nl_langinfo</function></funcdef>
      <paramdef>int <parameter>item</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
