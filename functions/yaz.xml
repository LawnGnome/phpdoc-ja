 <reference id="ref.yaz">
  <title>YAZ 関数</title>
  <titleabbrev>YAZ</titleabbrev>
  
  <partintro>
   <sect1 id="yaz.intro">
    <title>導入</title>
    <para>
     この拡張モジュールは、情報取得用のZ39.50プロトコルを実装する
     <productname>YAZ</productname>ツールキットへのPHPインターフェース
     を提供するものです。この拡張モジュールにより、Z39.50ターゲット(サー
     バー)を並列に検索するZ39.50オリジン(クライアント)を容易に実装する
     ことが可能になります。
    </para>
    <para>
     <productname>YAZ</productname> は、<ulink
     url="&url.yaz;">&url.yaz;</ulink>で取得可能です。この拡張モジュー
     ルに関する新しい情報、スクリプトの例等を
     <ulink url="&url.yaz-phpyaz;">&url.yaz-phpyaz;</ulink>にて
     参照可能です。
    </para>
    <para>
     このモジュールはZ39.50 の複雑さを隠蔽するため、使用法がかなり容
     易になります。PHPで利用可能な様々なSQL APIにより提供されているも
     のに非常によく似たステートレスな持続的接続がサポートされています。
     これにより、セッションはステートレスですが、ユーザ間で共有され、
     これにより多くの場合に接続および初期化手順が保存されます。
    </para>
   </sect1>

   <sect1 id="yaz.install">
   <title>インストール</title>
    <para>
     YAZをコンパイルし、インストールして下さい。PHPをオプション--
     with-yazを付けて他の任意のモジュールとコンパイルして下さい。この
     手順の概要を以下に示します。
    </para>
    <para>
     <informalexample>
      <programlisting>
gunzip -c yaz-1.6.tar.gz|tar xf -
gunzip -c php-4.0.X.tar.gz|tar xf -
cd yaz-1.6
./configure --prefix=/usr
make
make install
cd ../php-4.0.X
./configure --with-yaz=/usr/bin
make
make install
      </programlisting>
     </informalexample>
    </para>
   </sect1>

   <sect1 id="yaz.example">
    <title>Example</title>
    <para>
     PHP/YAZ はターゲット(Z-Associations)との接続を保持し続けます。
     正の整数で特定の接続のIDを表します。
    </para>
    <para>
     以下のスクリプトは、APIのパラレルサーチ機能のデモです。
     このスクリプトは起動された際に(引数が指定されない場合は)クエリフォー
     ムを表示し、引数(termおよび一つ以上のhost)がある場合には、配列host
     にあるターゲットを検索します。
    </para>
    <para>
     <example>
      <title><function>YAZ</function></title>
      <programlisting role="php">
$num_hosts = count ($host);
if (empty($term) || count($host) == 0) {
    echo '&lt;form method="get"&gt;
    &lt;input type="checkbox"
    name="host[]" value="bagel.indexdata.dk/gils"&gt;
        GILS test
    &lt;input type="checkbox"
    name="host[]" value="localhost:9999/Default"&gt;
        local test
    &lt;input type="checkbox" checked="1"
    name="host[]" value="z3950.bell-labs.com/books"&gt;
        BELL Labs Library
    &lt;br>
    RPN Query:
    &lt;input type="text" size="30" name="term"&gt;
    &lt;input type="submit" name="action" value="Search"&gt;
    ';        
} else {
    echo 'You searced for ' . htmlspecialchars($term) . '&lt;br&gt;';
    for ($i = 0; $i &lt; $num_hosts; $i++) {
        $id[] = yaz_connect($host[$i]);
        yaz_syntax($id[$i],"sutrs");
        yaz_search($id[$i],"rpn",$term);
    }
    yaz_wait();
    for ($i = 0; $i &lt; $num_hosts; $i++) {
        echo '&lt;hr&gt;' . $host[$i] . ":";
        $error = yaz_error($id[$i]);
        if (!empty($error)) {
            echo "Error: $error";
        } else {
            $hits = yaz_hits($id[$i]);
            echo "Result Count $hits";
        }
        echo '&lt;dl&gt;';
        for ($p = 1; $p &lt;= 10; $p++) {
            $rec = yaz_record($id[$i],$p,"string");
            if (empty($rec)) continue;
            echo "&lt;dt&gt;&lt;b&gt;$p&lt;/b&gt;&lt;/dt&gt;&lt;dd&gt;";
            echo ereg_replace("\n", "&lt;br&gt;\n",$rec);
            echo "&lt;/dd&gt;";
        }
        echo '&lt;/dl&gt;';
    }
}
      </programlisting>
     </example>
    </para>
   </sect1>
  </partintro>

  <refentry id="function.yaz-addinfo">
   <refnamediv>
    <refname>yaz_addinfo</refname>
    <refpurpose>詳細なエラー情報を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_addinfo</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (直近のリクエストの)ターゲットに関する詳細なエラーメッセージを返
     します。直近の処理が成功したかターゲットにより詳細な情報が提供さ
     れていない場合には、空の文字列が返されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-close">
   <refnamediv>
    <refname>yaz_close</refname>
    <refpurpose>YAZ接続をクローズする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_close</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     ターゲットとの接続をクローズします。この後、アプリケーションは、
     指定したidを有するターゲットを参照することはできません。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-connect">
   <refnamediv>
    <refname>yaz_connect</refname>
    <refpurpose>
     成功時に正の接続ID、失敗した場合にゼロを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_connect</function></funcdef>
      <paramdef>string <parameter>zurl</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_connect</function> は、Z39.50 ターゲットへの接続を
     準備します。引数 zurl はhost[:port][/database]という形式です。
     port が省略された場合、210が使用されます。databaseが省略された場
     合 Default が使用されます。この関数は、非ブロックモードで動作し、
     ソケットを作成しようとしません。単に後で
     <function>yaz_wait</function>がコールされた際に接続を実行する準備
     を行うだけです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-errno">
   <refnamediv>
    <refname>yaz_errno</refname>
    <refpurpose>エラー番号を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_errno</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (直近のリクエストの)ターゲットのエラーを返します。ターゲットが原
     因コードを返した場合には、正の値が返されます。エラーが発生してい
     ない場合(成功時)は値ゼロが返されます。ターゲットが問題のあるエラー
     ではないと判定したその他のエラーの場合は、負の値が返されます。
    </para>
    <para>
     <function>yaz_errno</function> は、各ターゲットへのネットワーク接
     続が確立された後(つまり、<function>yaz_wait</function>の後)に
     コールされる必要があり、直近の操作(例えば検索)が成功したか失敗し
     たかを判定します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-error">
   <refnamediv>
    <refname>yaz_error</refname>
    <refpurpose>エラーの内容を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_error</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (直近のリクエストの)ターゲットに関するエラーメッセージを返します。
     直近の操作が成功した場合には空の文字列が返されます。
    </para>
    <para>
     <function>yaz_error</function> は、<function>yaz_errno</function>
     で返された直近のエラー番号に対応する英語のメッセージを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-hits">
   <refnamediv>
    <refname>yaz_hits</refname>
    <refpurpose>直近の検索に関するヒット数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_hits</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_hits</function> は、直近の検索に関するヒット数を返
     します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-range">
   <refnamediv>
    <refname>yaz_range</refname>
    <refpurpose>
     取得するレコードの最大数を指定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_range</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<function>yaz_search</function>と共に使用され、取得す
     るレコードの最大数と、最初のレコードの位置(start)を指定します。
     この関数を使用しない場合(<function>yaz_search</function>のみの場
     合)、startは1に、numberは10に設定されます。
    </para>
    <para>
     成功時にtrue、エラー時にfalseを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-record">
   <refnamediv>
    <refname>yaz_record</refname>
    <refpurpose>レコードを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_record</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>pos</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定した位置のレコードまたはレコードが指定位置に存在しない場合に
     空の文字列を返します。
    </para>
    <para>
     <function>yaz_record</function> 関数は、カレントの結果セット指定
     した位置にあるレコードを調べます。指定した位置にデータベースレコー
     ドが存在しない場合には、空の文字列が返されます。引数 type は返さ
     れるレコードの形式を指定します。
     type が "string" の場合、(XMLおよびSUTRS用に)出力可能な文字列表現
     でレコードが返されます。typeが"array"の場合、(構造化されたレコー
     ド用に)配列表現でレコードが返されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-search">
   <refnamediv>
    <refname>yaz_search</refname>
    <refpurpose>検索を準備する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_search</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_search</function> は、指定したidを有するターゲット
     で検索を行う準備をします。type は、クエリの型を表します。現在、
     "rpn" のみがサポートされており、この場合、3番目の引数はType-1クエ
     リ(RPN)を指定します。<function>yaz_connect</function> と同じく、
     この関数は、非ブロックモードで動作し、後で
     <function>yaz_wait</function> がコールされた際に実行される検索の
     準備をするだけです。
    </para>
   </refsect1>
   <refsect1>
    <title>RPNクエリ</title>
    <para>
     RPNクエリは、Z39.50規格により定義されたType-1 クエリのテキスト表
     現です。しかし、YAZにより使用されるテキスト表現では、演算子がオペ
     ランドの前にある前置表記が使用されます。クエリ文字列はトークンの
     並びであり、このトークンでは2重引用符で括られない限り空白文字は無
     視されます。トークンは、アットマーク(<literal>@</literal>)で始ま
     り、演算子とみなされるか、そうでない場合は検索項目として処理され
     ます。
    </para>
    <table>
     <title>RPN 演算子</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>構文</entry>
	<entry>説明</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal>@and query1 query2</literal></entry>
	<entry>
	 query1 および query2の積集合
	</entry>
       </row>
       <row>
	<entry><literal>@or query1 query2</literal></entry>
	<entry>
	 query1 および query2の和集合
	</entry>
       </row>
       <row>
	<entry><literal>@not query1 query2</literal></entry>
	<entry>
	 query1 であり、query2でない
	</entry>
       </row>
       <row>
	<entry><literal>@set name</literal></entry>
	<entry>
	 結果セットへのリファレンス
	</entry>
       </row>
       <row>
	<entry><literal>@attrset set query</literal></entry>
	<entry>
	 クエリの属性セットを指定します。この構造が使用できるの
         は全てのクエリの始めに一回だけです。
	</entry>
        </row>
        <row>
	<entry><literal>@attr set type=value query</literal></entry>
	<entry>
	 クエリに属性を適用します。型と値は属性型と属性値をそれぞれ指
	 定する整数です。この組みが指定された場合、属性の組を指定しま
	 す。
	</entry>
        </row>
      </tbody>
     </tgroup>
    </table>     
    <para>
     以下は、有効なクエリ構造を説明するものです。
     <informalexample>
      <screen>computer</screen>
     </informalexample>
      "computer" がある文書にマッチします。属性は指定されてません。
    </para>
    <para>
     <informalexample>
      <screen>"donald knuth"</screen>
     </informalexample>
     "donald knuth" がある文書にマッチします。
    </para>
    <para>
     <informalexample>
      <screen>@attr 1=4 art</screen>
     </informalexample>
     属性型は1 (Bib-1 使用)で、属性値は 4(タイトル)です。これにより、
     "art"がタイトルにある文書にマッチします。
    </para>
    <para>
     <informalexample>
      <screen>@attrset gils @and @attr 1=4 art @attr 1=1003 "donald knuth"</screen>
     </informalexample>
     このクエリは全体にGILS属性セットを使用します。このクエリはtitleに
     "art"があり、authorに"donald knuth"がある文書にマッチします。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-syntax">
   <refnamediv>
    <refname>yaz_syntax</refname>
    <refpurpose>
     取得時のレコード構文に関してオブジェクトID(OID)を指定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_syntax</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>syntax</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     syntaxには、(<literal>1.2.840.10003.5.10</literal>のような)ドット
     表記または既知のレコード構文の一つ(sutrs, usmarc, grs1, xml, 等)
     を指定します。この関数は<function>yaz_search</function> と共に使
     用され、取得時のレコード構文を指定します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-wait">
   <refnamediv>
    <refname>yaz_wait</refname>
    <refpurpose>クエリを実行する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_wait</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>syntax</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、関数<function>yaz_connect</function>、
     <function>yaz_search</function>により準備された発行済のリクエスト
     をネットワーク経由で(ブロックモードで)伝送します。
     <function>yaz_wait</function>は、全てのターゲットが全てのリクエス
     トを完了したか、(エラーの場合には)その他のリクエストが完了した場
     合に戻ります。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
