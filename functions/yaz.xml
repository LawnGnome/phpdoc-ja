 <reference id="ref.yaz">
  <title>YAZ</title>
  <titleabbrev>YAZ</titleabbrev>

  <partintro>
   <simpara>
    <function>yaz</function> 関数は、YAZ APIをサポートします。このプロ
    ジェクトのホームページは、<ulink url="&url.yaz;">&url.yaz;</ulink>
    です。phpyazモジュールに関する情報は、<ulink
    url="&url.yaz-phpyaz;">&url.yaz-phpyaz;</ulink>にあります。
   </simpara>
   <simpara>
    PHP/YAZ は、YAZのC APIに非常に良く似ていますが、柔軟姓では劣ってい
    ます。この目的は、基本的なクライアント機能を容易に構築することにあ
    ります。このAPIは、持続的な状態遷移のない接続をサポートしており、
    これらは、PHPで利用可能な種々のSQL APIで提供されるものに似ています。
    このことは、セッションには状態遷移がないが、ユーザー間で共有される
    こと、つまり、接続と多くの場合INITステップを保存することを意味して
    います。
   </simpara>
   <simpara>
    PHP/YAZモジュールと共にPHPをコンパイルする前にYAZツールキットが必
    要です。YAZを構築し、インストールして下さい。PHPを好きなモジュール
    と共に構築し、その際にオプション --with-yazを追加して下さい。この
    手順は概ね次のようになります。
   </simpara>
   <informalexample>
    <programlisting>
gunzip -c yaz-1.6.tar.gz|tar xf -
gunzip -c php-4.0.X.tar.gz|tar xf -
cd yaz-1.6
./configure --prefix=/usr
make
make install
cd ../php-4.0.X
./configure --with-yaz=/usr/bin
make
make install
    </programlisting>
   </informalexample>
   <simpara>
    PHP/YAZ はターゲット(Z-Associations)との接続を保持し続けます。
    正の整数で特定の接続のIDを表します。
   </simpara>
   <simpara>
    以下のスクリプトは、APIのパラレルサーチ機能のデモです。
    このスクリプトは起動された際に(引数が指定されない場合は)クエリフォー
    ムを表示し、引数(termおよび一つ以上のhost)がある場合には、配列host
    にあるターゲットを検索します。
   </simpara>
   <example>
    <title><function>YAZ</function></title>
    <programlisting role="php">
$num_hosts = count ($host);
if (empty($term) || count($host) == 0) {
    echo '&lt;form method="get"&gt;
    &lt;input type="checkbox"
    name="host[]" value="bagel.indexdata.dk/gils"&gt;
        GILS test
    &lt;input type="checkbox"
    name="host[]" value="localhost:9999/Default"&gt;
        local test
    &lt;input type="checkbox" checked="1"
    name="host[]" value="z3950.bell-labs.com/books"&gt;
        BELL Labs Library
    &lt;br>
    RPN Query:
    &lt;input type="text" size="30" name="term"&gt;
    &lt;input type="submit" name="action" value="Search"&gt;
    ';        
} else {
    echo 'You searced for ' . htmlspecialchars($term) . '&lt;br&gt;';
    for ($i = 0; $i &gt; $num_hosts; $i++) {
        $id[] = yaz_connect($host[$i]);
        yaz_syntax($id[$i],"sutrs");
        yaz_search($id[$i],"rpn",$term);
    }
    yaz_wait();
    for ($i = 0; $i &lt; $num_hosts; $i++) {
        echo '&lt;hr&gt;' . $host[$i] . ":";
        $error = yaz_error($id[$i]);
        if (!empty($error)) {
            echo "Error: $error";
        } else {
            $hits = yaz_hits($id[$i]);
            echo "Result Count $hits";
        }
        echo '&lt;dl&gt;';
        for ($p = 1; $p &lt;= 10; $p++) {
            $rec = yaz_record($id[$i],$p,"string");
            if (empty($rec)) continue;
            echo "&lt;dt&gt;&lt;b&gt;$p&lt;/b&gt;&lt;/dt&gt;&lt;dd&gt;";
            echo ereg_replace("\n", "&lt;br&gt;\n",$rec);
            echo "&lt;/dd&gt;";
        }
        echo '&lt;/dl&gt;';
    }
}
    </programlisting>
   </example>
  </partintro>

  <refentry id="function.yaz-addinfo">
   <refnamediv>
    <refname>yaz_addinfo</refname>
    <refpurpose>詳細なエラー情報を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_addinfo</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (直近のリクエストの)ターゲットに関する詳細なエラーメッセージを返
     します。直近の処理が成功したかターゲットにより詳細な情報が提供さ
     れていない場合には、空の文字列が返されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-close">
   <refnamediv>
    <refname>yaz_close</refname>
    <refpurpose>YAZ接続をクローズする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_close</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     ターゲットとの接続をクローズします。この後、アプリケーションは、
     指定したidを有するターゲットを参照することはできません。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-connect">
   <refnamediv>
    <refname>yaz_connect</refname>
    <refpurpose>
     成功時に正の接続ID、失敗した場合にゼロを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_connect</function></funcdef>
      <paramdef>string <parameter>zurl</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_connect</function> は、Z39.50 ターゲットへの接続を
     準備します。引数 zurl はhost[:port][/database]という形式です。
     port が省略された場合、210が使用されます。databaseが省略された場
     合 Default が使用されます。この関数は、非ブロックモードで動作し、
     ソケットを作成しようとしません。単に後で
     <function>yaz_wait</function>がコールされた際に接続を実行する準備
     を行うだけです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-errno">
   <refnamediv>
    <refname>yaz_errno</refname>
    <refpurpose>エラー番号を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_errno</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (直近のリクエストの)ターゲットのエラーを返します。ターゲットが原
     因コードを返した場合には、正の値が返されます。エラーが発生してい
     ない場合(成功時)は値ゼロが返されます。ターゲットが問題のあるエラー
     ではないと判定したその他のエラーの場合は、負の値が返されます。
    </para>
    <para>
     <function>yaz_errno</function> は、各ターゲットへのネットワーク接
     続が確立された後(つまり、<function>yaz_wait</function>の後)に
     コールされる必要があり、直近の操作(例えば検索)が成功したか失敗し
     たかを判定します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-error">
   <refnamediv>
    <refname>yaz_error</refname>
    <refpurpose>エラーの内容を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_error</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (直近のリクエストの)ターゲットに関するエラーメッセージを返します。
     直近の操作が成功した場合には空の文字列が返されます。
    </para>
    <para>
     <function>yaz_error</function> は、<function>yaz_errno</function>
     で返された直近のエラー番号に対応する英語のメッセージを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-hits">
   <refnamediv>
    <refname>yaz_hits</refname>
    <refpurpose>直近の検索に関するヒット数を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_hits</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_hits</function> は、直近の検索に関するヒット数を返
     します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-range">
   <refnamediv>
    <refname>yaz_range</refname>
    <refpurpose>
     取得するレコードの最大数を指定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_range</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、<function>yaz_search</function>と共に使用され、取得す
     るレコードの最大数と、最初のレコードの位置(start)を指定します。
     この関数を使用しない場合(<function>yaz_search</function>のみの場
     合)、startは1に、numberは10に設定されます。
    </para>
    <para>
     成功時にtrue、エラー時にfalseを返します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-record">
   <refnamediv>
    <refname>yaz_record</refname>
    <refpurpose>レコードを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_record</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>pos</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     指定した位置のレコードまたはレコードが指定位置に存在しない場合に
     空の文字列を返します。
    </para>
    <para>
     <function>yaz_record</function> 関数は、カレントの結果セット指定
     した位置にあるレコードを調べます。指定した位置にデータベースレコー
     ドが存在しない場合には、空の文字列が返されます。引数 type は返さ
     れるレコードの形式を指定します。
     type が "string" の場合、(XMLおよびSUTRS用に)出力可能な文字列表現
     でレコードが返されます。typeが"array"の場合、(構造化されたレコー
     ド用に)配列表現でレコードが返されます。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-search">
   <refnamediv>
    <refname>yaz_search</refname>
    <refpurpose>検索を準備する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_search</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_search</function> は、指定したidを有するターゲット
     で検索を行う準備をします。type は、クエリの型を表します。現在、
     "rpn" のみがサポートされており、この場合、3番目の引数はYAZで使用
     される接頭辞付き表記のクエりとなります。
     <function>yaz_connect</function> と同じく、この関数は、非ブロック
     モードで動作し、後で <function>yaz_wait</function> がコールされた
     際に実行される検索の準備をするだけです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-syntax">
   <refnamediv>
    <refname>yaz_syntax</refname>
    <refpurpose>
     取得時のレコード構文を指定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_syntax</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>syntax</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は<function>yaz_search</function> と共に使用され、取得
     時のレコード構文を指定します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.yaz-wait">
   <refnamediv>
    <refname>yaz_wait</refname>
    <refpurpose>クエリを実行する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_wait</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>syntax</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、関数<function>yaz_connect</function>、
     <function>yaz_search</function>により準備された発行済のリクエスト
     をネットワーク経由で(ブロックモードで)伝送します。
     <function>yaz_wait</function>は、全てのターゲットが全てのリクエス
     トを完了したか、(エラーの場合には)その他のリクエストが完了した場
     合に戻ります。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
