 <reference id="ref.pdf">
  <title>PDF 関数</title>
  <titleabbrev>PDF</titleabbrev>

  <partintro>
   
   <simpara>
    Thomas MerzによるPDFライブラリをインストールしている場合、
    PHP で PDF ファイルを作成するために PDF 関数を使用することができます。
    (<ulink url = "&url.pdf;">&url.pdf;</ulink> で取得可能です。コンパ
    イルには<ulink url="&url.jpeg;">the JPEG library</ulink>および
    <ulink url="&url.tiff;">the TIFF library</ulink>が必要です。
    これら2つのライブラリは、PHP の configure を実行する際にもしばしば
    問題を発生します。問題を修正するには、configureのメッセージに従っ
    て下さい。pdflib 2.01を使用している場合、どのようにライブラリがイ
    ンストールされているかを確認して下さい。pdflib.soとリンクする必要
    がありますが、バージョン 2.01 では libpdf2.01.so という名前でだけ
    ライブラリを作成するため、configureでテストプログラムをリンクする
    際にこれを見つけることができません。libpdf.soからlibpdf2.01.soにシ
    ンボリックリンクを作成しておく必要があります。)
   </simpara>
   <simpara>
    pdflibのバージョン2.20では、APIが更に変更され、中国語及び日本語のフォ
    ントがサポートされました。残念なことにこれにより(php3ではなく)php4
    のpdfモジュールにいくつかの変更が生じています。pdflib 2.20を使用し
    て、メモリ内でPDFドキュメントを生成している場合には注意して下さい。
    pdflib 3.0がリリースされるまでは、動作が不安定になる可能性がありま
    す。<function>pdf_set_font</function>のパラメータencodingは、文字
    列に変更されました。これにより例えば4の代わりに'winansi'を使用する
    ことが必要となります。
   </simpara>
   <simpara>
    pdflib 2.30を使用している場合、<function>pdf_set_text_matrix</function>
    はなくなり、もうサポートされなくなっています。一般に変更点を知るには
    使用しているバージョンのpdflibのリリースノートを見てみるのが良いでしょう。
   </simpara>
   <simpara>
    pdflib バージョン 3.0 以降、オプション
    <literal>--enable-shared-pdflib</literal>を付けて pdflib の
    configure を実行する必要があります。
   </simpara>
   <simpara>
    2000/3/9 以降のバージョンの PHP4 では、3.0 より前のバージョンの
    pdflibはサポートされています。一方、PHP3 は、2.01より新しいバージョ
    ンを使用するべきではありません。(訳注:パッチをあてれば PDFLIB 3.01
    もPHP3で使用可能です。)
   </simpara>
   <simpara>
    pdflibのソース配布ファイルと共に配布されているpdflibに関する素晴ら
    しいドキュメントを参照して下さい。この文書は、pdflib の機能に関す
    る概要を良くまとめています。pdflibのほとんどの関数とPHPモジュール
    内の関数の名前は共通になっています。パラメータも同じです。
    このモジュールを効率的に使用するには、PDFまたはPostscriptの
    おおよその考え方も理解しておく必要があります。全ての長さと座標は
    Postscriptのポイント数で計られます。通常、1インチ当たり
    72 Postscript ポイントですが、これは、出力解像度に依存します。
   </simpara>
   <simpara> 
    <ulink url="&url.fastio;">FastIO</ulink>が作成した
    ClibPDFを使用したpdfドキュメント作成用の別のPHPモジュールがあります。
    このライブラリのAPIは、やや異なっています。詳細は、
    <link linkend="ref.cpdf">ClibPDF 関数</link>の節をご覧下さい。 
   </simpara>
   <simpara>
    現在、全てのバージョンのpdflibがサポートされています。
    機能がより豊富で、古い版でパッチが必要だったいくつかの問題が修正
    されているため、最新版を使用することを推奨します。
    残念なことに、2.x版の0.6版に対するpdflib APIの変更点は重要なものであり、
    いくつかのPHP関数を変更する必要さえありました。
    変更点の一覧を以下に示します。
   </simpara>
   <itemizedlist>
    <listitem>
     <simpara>
      Info構造体はもうありません。このため、関数
      <function>pdf_get_info</function>は用済みであり、
      関数<function>pdf_set_info_creator</function>,
      <function>pdf_set_info_title</function>,
      <function>pdf_set_info_author</function>,
      <function>pdf_set_info_subject</function> ,
      <function>pdf_set_info_keywords</function> は、
      info 構造体を最初の引数とせず、pdf ドキュメントとするようになります。
      このことは、これらの関数をコールする前に、pdf ドキュメントを
      オープンする必要があることも意味します。上記の関数は、
      <function>pdf_set_info</function>で置換することが可能で、また、
      そうするべきです。
     </simpara>
    </listitem>
    <listitem>
     <simpara> 
      新規ドキュメントをオープンする手法が、変更されました。この関数は、
      引数パラメータとして
      <function>fopen</function> でオープンされたファイルのファイルハンドル
      のみをとります。
     </simpara>
    </listitem>
   </itemizedlist>
   <simpara> 
    pdflib の 2.01 版で更にいくつかの変更が行われており、これらは、PHP にも
    影響するものです。(<function>pdf_put_image</function>のような)いくつかの
    関数は、もはや必要ありません。警告が発生しますが、驚かないで下さい。
   </simpara>
   <simpara> 
    pdf モジュールは、2種類の変数型を導入します(pdflib 2.x の場合は
    新しい方を1つだけ使用します)。
    これらは、
    <parameter>pdfdoc</parameter> および <parameter>pdfinfo</parameter>
    です。(pdflib 2.x を使用した場合、<parameter>pdfinfo</parameter> は
    存在しません)
    <parameter>pdfdoc</parameter> は、pdf ドキュメントへのポインタ
    であり、最初のパラメータとしてほぼ全ての関数に必要です。
    <parameter>pdfinfo</parameter> は、PDF ドキュメントに関する
    メタデータを有しています。
      <function>pdf_open</function> をコールする前に設定する
    必要があります。
   </simpara>
   <note>
    <simpara>
     以下は、pdflib 0.6 に関してのみ有効です。
     より新しいバージョン用の pdflib のマニュアル参照下さい。
    </simpara>
   </note>
   <simpara>
    テキストをPDFドキュメントに出力するには、各フォント毎のafmファイル
    を用意する必要があります。
    afm ファイルは、Postscript フォントのフォントメトリックスを含んでいます。
    デフォルトでは、afm ファイルは PHP スクリプトがある場所の 'fonts' という
    名前のディレクトリから検索されます。
    (このとは、pdflib 0.6 に関しては正しいですが、
    より新しい版では afm ファイルを必要としません。)
   </simpara>
   <simpara>
    ほとんどの関数は、かなり容易に使用することができます。
    最も困難なのは完全に新規に pdf ドキュメントを作成する
    ところでしょう。次の例は、導入の手助けとなるはずです。
    この例では、pdflib 0.6 用の PHP 関数を使用し、
    ページを1つ有するファイル test.pdf を作成します。
    このページは、30pt のアウトラインフォントでテキスト "Times-Roman"
    により書かれます。テキストは、下線も引かれます。
   </simpara>
   <example>
    <title>PDF ドキュメントを pdflib 0.6 により作成する</title>
    <programlisting role="php">
&lt;?php
$fp = fopen("test.pdf", "w");
$info = PDF_get_info();
pdf_set_info_author($info, "Uwe Steinmann");
PDF_set_info_title($info, "Test for PHP wrapper of PDFlib 0.6");
PDF_set_info_author($info, "Name of Author");
pdf_set_info_creator($info, "See Author");
pdf_set_info_subject($info, "Testing");
$pdf = PDF_open($fp, $info);
PDF_begin_page($pdf, 595, 842);
PDF_add_outline($pdf, "Page 1");
pdf_set_font($pdf, "Times-Roman", 30, 4);
pdf_set_text_rendering($pdf, 1);
PDF_show_xy($pdf, "Times Roman outlined", 50, 750);
pdf_moveto($pdf, 50, 740);
pdf_lineto($pdf, 330, 740);
pdf_stroke($pdf);
PDF_end_page($pdf);
PDF_close($pdf);
fclose($fp);
echo "&lt;A HREF=getpdf.php3>finished&lt;/A>";
?>
     </programlisting>
    </example>
    <para>

     PHP スクリプト getpdf.php3 は、pdf ドキュメントを出力します。
 
     <informalexample>
      <programlisting role="php">
 &lt;?php
 $fp = fopen("test.pdf", "r");
 header("Content-type: application/pdf");
 fpassthru($fp);
 fclose($fp);
 ?>
      </programlisting>
     </informalexample>
    
     同じ事を pdflib 2.x で行うと、次のようになります。
 
     <example>
      <title>PDF ドキュメントを pdflib 2.x で作成する</title>
      <programlisting role="php">
 &lt;?php
 $fp = fopen("test.pdf", "w");
 $pdf = PDF_open($fp);
 pdf_set_info_author($pdf, "Uwe Steinmann");
 PDF_set_info_title($pdf, "Test for PHP wrapper of PDFlib 2.0");
 PDF_set_info_author($pdf, "Name of Author");
 pdf_set_info_creator($pdf, "See Author");
 pdf_set_info_subject($pdf, "Testing");
 PDF_begin_page($pdf, 595, 842);
 PDF_add_outline($pdf, "Page 1");
 pdf_set_font($pdf, "Times-Roman", 30, 4);
 pdf_set_text_rendering($pdf, 1);
 PDF_show_xy($pdf, "Times Roman outlined", 50, 750);
 pdf_moveto($pdf, 50, 740);
 pdf_lineto($pdf, 330, 740);
 pdf_stroke($pdf);
 PDF_end_page($pdf);
 PDF_close($pdf);
 fclose($fp);
 echo "&lt;A HREF=getpdf.php3>finished&lt;/A>";
 ?>
      </programlisting>
      <para>
       PHP スクリプト getpdf.php3 は、上の例と同じです。</para>
     </example>
 
   pdflib 配布ファイルには、アナログクロックを有する
   本格的なページを作成するより複雑な例があります。
   この例は次のように pdflib 2.x 用に変換することができます。
   (同じ例は、<link linkend="ref.cpdf">clibpdf モジュール)</link>
   用のドキュメントにもあります。)
 
     <example>
      <title>pdflib 2.x 配布ファイルによる pdfclock の例</title>
      <programlisting>
 &lt;?php
 $pdffilename = "clock.pdf";
 $radius = 200;
 $margin = 20;
 $pagecount = 40;
 
 $fp = fopen($pdffilename, "w");
 $pdf = pdf_open($fp);
 pdf_set_info_creator($pdf, "pdf_clock.php3");
 pdf_set_info_author($pdf, "Uwe Steinmann");
 pdf_set_info_title($pdf, "Analog Clock");
 
 while($pagecount-- > 0) {
     pdf_begin_page($pdf, 2 * ($radius + $margin), 2 * ($radius + $margin));
 
     pdf_set_transition($pdf, 4);  /* wipe */ 
     pdf_set_duration($pdf, 0.5);
   
     pdf_translate($pdf, $radius + $margin, $radius + $margin);
     pdf_save($pdf);
     pdf_setrgbcolor($pdf, 0.0, 0.0, 1.0);
 
     /* 分針 */
     pdf_setlinewidth($pdf, 2.0);
     for ($alpha = 0; $alpha < 360; $alpha += 6) {
         pdf_rotate($pdf, 6.0);
         pdf_moveto($pdf, $radius, 0.0);
         pdf_lineto($pdf, $radius-$margin/3, 0.0);
         pdf_stroke($pdf);
     }
 
     pdf_restore($pdf);
     pdf_save($pdf);
 
     /* 5 分ずつ進む */
     pdf_setlinewidth($pdf, 3.0);
     for ($alpha = 0; $alpha < 360; $alpha += 30) { 
         pdf_rotate($pdf, 30.0);
         pdf_moveto($pdf, $radius, 0.0);
         pdf_lineto($pdf, $radius-$margin, 0.0);
         pdf_stroke($pdf);
     }
 
     $ltime = getdate();
 
     /* 時針を描く */
     pdf_save($pdf);
     pdf_rotate($pdf,-(($ltime['minutes']/60.0)+$ltime['hours']-3.0)*30.0);
     pdf_moveto($pdf, -$radius/10, -$radius/20);
     pdf_lineto($pdf, $radius/2, 0.0);
     pdf_lineto($pdf, -$radius/10, $radius/20);
     pdf_closepath($pdf);
     pdf_fill($pdf);
     pdf_restore($pdf);
 
     /* 分針を描く */
     pdf_save($pdf);
     pdf_rotate($pdf,-(($ltime['seconds']/60.0)+$ltime['minutes']-15.0)*6.0);
     pdf_moveto($pdf, -$radius/10, -$radius/20);
     pdf_lineto($pdf, $radius * 0.8, 0.0);
     pdf_lineto($pdf, -$radius/10, $radius/20);
     pdf_closepath($pdf);
     pdf_fill($pdf);
     pdf_restore($pdf);
 
     /* 秒針を描く */
     pdf_setrgbcolor($pdf, 1.0, 0.0, 0.0);
     pdf_setlinewidth($pdf, 2);
     pdf_save($pdf);
     pdf_rotate($pdf, -(($ltime['seconds'] - 15.0) * 6.0));
     pdf_moveto($pdf, -$radius/5, 0.0);
     pdf_lineto($pdf, $radius, 0.0);
     pdf_stroke($pdf);
     pdf_restore($pdf);
 
     /* 小さな円を中心に描く */
     pdf_circle($pdf, 0, 0, $radius/30);
     pdf_fill($pdf);
 
     pdf_restore($pdf);
 
     pdf_end_page($pdf);
 }
 
 $pdf = pdf_close($pdf);
 fclose($fp);
 echo "&lt;A HREF=getpdf.php3?filename=".$pdffilename.">finished&lt;/A>";
 ?>
      </programlisting>
      <para>
       PHP スクリプト getpdf.php3 は、pdf ドキュメントを出力します。
       <programlisting>
 &lt;?php
 $fp = fopen($filename, "r");
 header("Content-type: application/pdf");
 fpassthru($fp);
 fclose($fp);
 ?>
       </programlisting></para>
     </example></para>
    </partintro>

  <refentry id="function.pdf-get-info">
   <refnamediv>
    <refname>PDF_get_info</refname> 
    <refpurpose>PDF ドキュメントの空の info 構造体を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>info <function>pdf_get_info</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_get_info</function> 関数は、PDF ドキュメント用の空の
      info 構造体を返します。
     この構造体は、author や subject 等のような適当な情報で
     占められている必要があります。
     <note>
      <simpara>
       この関数は、pdflib 2.x サポートが有効な場合には利用できません。
      </simpara>
     </note>
    </para>
     <para>
     <function>PDF_set_info_creator</function>,
     <function>PDF_set_info_author</function>,
     <function>PDF_set_info_keywords</function>,
     <function>PDF_set_info_title</function>,
     <function>PDF_set_info_subject</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-info">
   <refnamediv>
    <refname>PDF_set_info</refname>
    <refpurpose>ドキュメント情報のフィールドを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_info</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>fieldname</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_set_info</function>は、pdfドキュメントの情報フィールド
     を設定します。fieldnameとして設定可能な値は、
     'Subject', 'Title', 'Creator','Author', 'Keywords'および1種類のユーザが
     定義した名前です。ページを開始する前にコールすることが可能です。

     <example>
      <title>ドキュメント情報を設定する</title>
      <programlisting role="php">
&lt;?php 
$fd = fopen("test.pdf", "w");
$pdfdoc = pdf_open($fd);
pdf_set_info($pdfdoc, "Author", "Uwe Steinmann");
pdf_set_info($pdfdoc, "Creator", "Uwe Steinmann");
pdf_set_info($pdfdoc, "Title", "Testing Info Fields");
pdf_set_info($pdfdoc, "Subject", "Test");
pdf_set_info($pdfdoc, "Keywords", "Test, Fields");
pdf_set_info($pdfdoc, "CustomField", "What ever makes sense");
pdf_begin_page($pdfdoc, 595, 842);
pdf_end_page($pdfdoc);
pdf_close($pdfdoc);
?>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      この関数は、<function>PDF_set_info_keywords</function>,
      <function>PDF_set_info_title</function>,
      <function>PDF_set_info_subject</function>,
      <function>PDF_set_info_creator</function>,
      <function>PDF_set_info_sybject</function>を置き換えるものです。
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-open">
   <refnamediv>
    <refname>PDF_open</refname>
    <refpurpose>新規の PDF ドキュメントをオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pdf_open</function></funcdef>
      <paramdef>int <parameter>file</parameter></paramdef>
      <paramdef>int <parameter>info</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_open</function>関数は、新規の PDF ドキュメントを
     オープンします。
     対応するファイルは、<function>fopen</function> でオープンされ、
     ファイル記述子は引数 <parameter>file</parameter> として渡される必要があります。
     <parameter>info</parameter> は、<function>pdf_get_info</function> で作成される
     info 構造体です。info 構造体は、この関数で削除されます。
     <note>
      <simpara>
       返り値は、PDF ドキュメントを書く他の全ての関数で最初のパラメータとして必要です。
      </simpara>
     </note>
     <note>
      <simpara>
       pdflib 2.0のサポートが有効な場合、2番目のパラメータを指定することはできません。
     </simpara>
     </note>
    </para>
     <para>
     <function>fopen</function>,<function>PDF_get_info</function>,
     <function>PDF_close</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-close">
   <refnamediv>
    <refname>PDF_close</refname>
    <refpurpose>PDF ドキュメントを閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_close</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_close</function> 関数は、PDF ドキュメントを閉じます。

    <note><simpara>注意: pdflib 0.6 の不完全な実装のせいで、内部的にドキュメントを閉じると
    ファイルも閉じてしまいます。
    pdflib はファイルをオープンしないので、こうした動作を行うべきではありません。
    しかし、<function>PDF_open</function> をコールした場合、
    既にオープンされてファイルを閉じることが予想されます。
    結果的に、ファイルを閉じる必要がありません。
    この問題を修正するために、pdflib ソース配布中のファイル p_basic.c の 190 行目
    を取り除いて下さい。
     </simpara></note>
 
     <note><simpara>
     この関数は、pdflib 2.0 サポートが有効の場合、
     pdflib にパッチをあてなくても正常に動作します。
     </simpara></note></para>

    <para>
     <function>PDF_open</function>,
              <function>fclose</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-begin-page">
   <refnamediv>
    <refname>PDF_begin_page</refname>
    <refpurpose>新規ページを開始する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_begin_page</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>height</parameter></paramdef>
      <paramdef>double <parameter>width</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_begin_page</function> 関数は、
     高さ <parameter>height</parameter> および幅 <parameter>width</parameter> で
     新規ページを開始します。</para>

    <para>
     <function>PDF_end_page</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-end-page">
   <refnamediv>
    <refname>PDF_end_page</refname>
    <refpurpose>ページを終了する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_end_page</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_end_page</function> 関数はページを終了します。
     いったんページを終了するともう修正はできません。</para>

    <para>
     <function>PDF_begin_page</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-show">
   <refnamediv>
    <refname>PDF_show</refname>
    <refpurpose>カレントの位置にテキストを出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_show</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_show</function> 関数は、カレントの位置にカレント
	フォントを用いて文字列
     <parameter>text</parameter> を出力します。</para>

    <para>
     <function>PDF_show_xy</function>,
     <function>PDF_set_text_pos</function>,
     <function>PDF_set_font</function>
     も参照下さい。</para>

   </refsect1>
  </refentry>


  <refentry id="function.pdf-show-boxed">
   <refnamediv>
    <refname>PDF_show_boxed</refname>
    <refpurpose>箱の中にテキストを出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pdf_show_boxed</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
      <paramdef>double <parameter>width</parameter></paramdef>
      <paramdef>double <parameter>height</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_show_boxed</function>関数は文字列<parameter>text</parameter>
     を左下隅の座標を(<parameter>x-coor</parameter>, <parameter>y-coor</parameter>)
     とする箱の内に出力します。箱の大きさは、<parameter>height</parameter>
     ×<parameter>width</parameter>となります。
     パラメータ<parameter>mode</parameter>によりテキストがどのようにタイプセット
     されるかを指定します。
     <parameter>width</parameter>と<parameter>height</parameter>がゼロの場合、
     <parameter>mode</parameter>には"left"、"right"、"center"を指定可能です。
     <parameter>width</parameter>または<parameter>height</parameter>がゼロでない場合、
     "justify"および"fulljustify"を指定可能です。
    </para>
    <para>
     箱の中に収まらずに処理できなかった文字の数を返します。
    </para>
    <para>
     <function>PDF_show</function>,<function>PDF_show_xy</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-show-xy">
   <refnamediv>
    <refname>PDF_show_xy</refname>
    <refpurpose>テキストを指定位置に出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_show_xy</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_show_xy</function> 関数は、文字列<parameter>text</parameter> を
     位置(<parameter>x-coor</parameter>, <parameter>y-coor</parameter>) に
     出力します。</para>

    <para>
     <function>PDF_show</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-font">
   <refnamediv>
    <refname>PDF_set_font</refname>
    <refpurpose>フォントの種類及びサイズを選択する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_font</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>font name</parameter></paramdef>
      <paramdef>double <parameter>size</parameter></paramdef>
      <paramdef>string <parameter>encoding</parameter></paramdef>
      <paramdef>int <parameter>embed</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_font</function> 関数は、カレントのフォントの種類および
     フォントサイズ、エンコード法を設定します。pdflib 0.6 を使用している場合、
     フォントパス (デフォルトは ./fonts ) にあるフォントについて
     Adobe Font Metrics (afm ファイル) を用意する必要があります。
     PHP3またはバージョン2.20より以前のpdflibを使用している場合は、
     4番目のパラメータ<parameter>encoding</parameter> は次のような値を取ります:
     0 = builtin, 1 = pdfdoc, 2 = macroman, 3 = macexpert, 4 = winansi
     4 より大きいか 0 未満のエンコードは、デフォルトが winansi となります。
     winansi は通常の場合良い選択肢です。
     php4とpdflibバージョン2.20以降を使用している場合、パラメータencoding
     は文字列に変更されています。'winansi','builtin', 'host', 'macroman'等を代わりに
     使用して下さい。
     最後のパラメータを1に設定した場合、フォントは、pdf ドキュメントに
     組み込まれますが、1を設定しない場合は組み込まれません。
     フォントが一般に普及しておらず、自分の文書を見る人がその文書内のフォントに
     アクセスできる保証がない場合、そのフォントを埋め込むというのは一般的に
     良い考えです。
     フォントが埋め込まれるのは、<function>PDF_set_font</function>を複数回コール
     した場合でも一回だけです。
    </para>

    <note>
     <simpara>(訳注)埋め込みフォントはCJKフォントではサポートされていません。
     このため、CJKフォントを使用する場合は、
     <parameter>embed</parameter>には0を指定する必要があります。
     </simpara>
    </note>

    <note>
     <simpara>
      有効なPDFドキュメントを作成するために、
      この関数は、<function>PDF_begin_page</function>の後にコールする必要があります。
     </simpara>
    </note>

    <note>
     <simpara>
      .uprファイルの中のフォントを参照する場合、afmファイルの名前とフォント名が
      同じになるようにして下さい。さもないと、このフォントは複数回埋め込まれる
      ことになります。(Paul Haddonがこのことを見付けてくれました)
     </simpara>
    </note>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-leading">
   <refnamediv>
    <refname>PDF_set_leading</refname>
    <refpurpose>テキスト行間の距離を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set leading</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>distance</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_leading</function> 関数はテキスト行間の距離を設定します。
     テキストが <function>PDF_continue_text</function> により出力される場合に
     使用されます。
    </para>
    <para>
     <function>PDF_continue_text</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-parameter">
   <refnamediv>
    <refname>PDF_set_parameter</refname>
    <refpurpose>パラメータを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_parameter</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>name</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_set_parameter</function>はpdflibのパラメータの
     型を指定して多数のパラメータを設定します。
    </para>
    <para>
     <function>PDF_get_value</function>、<function>PDF_set_value</function>、
     <function>PDF_get_parameter</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-get-parameter">
   <refnamediv>
    <refname>PDF_get_parameter</refname>
    <refpurpose>パラメータを得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pdf_get_parameter</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>name</parameter></paramdef>
      <paramdef>double <parameter>modifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_get_parameter</function>は指定した型のpdflibパラメータ
     を得ます。関数のパラメータ<parameter>modifier</parameter>は取得する
     パラメータを修飾するものです。modifierが必要でない場合には、0を指定する
     必要があります。
    </para>
    <para>
     <function>PDF_get_value</function>、<function>PDF_set_value</function>、
     <function>PDF_set_parameter</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-value">
   <refnamediv>
    <refname>PDF_set_value</refname>
    <refpurpose>数値を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_value</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>name</parameter></paramdef>
      <paramdef>double <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_set_value</function>はpdflibのパラメータの数値を
     設定します。
    </para>
    <para>
     <function>PDF_get_value</function>、<function>PDF_get_parameter</function>、
     <function>PDF_set_parameter</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-get-value">
   <refnamediv>
    <refname>PDF_get_value</refname>
    <refpurpose>数値を得る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>pdf_get_value</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>name</parameter></paramdef>
      <paramdef>double <parameter>modifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_get_value</function>はpdflibの数値パラメータを
     得ます。関数パラメータ<parameter>modifier</parameter>は、
     取得するパラメータを修飾します。modifierが必要でない場合には、0を指定する
     必要があります。
    </para>
    <para>
     <function>PDF_set_value</function>、<function>PDF_get_parameter</function>、
     <function>PDF_set_parameter</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-text-rendering">
   <refnamediv>
    <refname>PDF_set_text_rendering</refname>
    <refpurpose>テキストの描画法を定義する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_text_rendering</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_text_rendering</function>関数はテキストの描画法を設定します。
     <parameter>mode</parameter>の値は、
     0=塗りつぶしたテキスト, 1=ストロークテキスト, 2=塗りつぶしおよびストロークテキスト, 
     3=不可視,4=塗りつぶしたテキストおよびクリッピングパスへ追加, 5=ストロークテキスト
     およびクリッピングパスへ追加, 6=塗りつぶしたストロークテキストおよびクリッピング
     パスへ追加, 7=クリッピングパスへ追加のどれかです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-horiz-scaling">
   <refnamediv>
    <refname>PDF_set_horiz_scaling</refname>
    <refpurpose>テキストの水平スケールを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_horiz_scaling</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>scale</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_horiz_scaling</function> 関数は、水平スケールを
     <parameter>scale</parameter> パーセントに設定します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-text-rise">
   <refnamediv>
    <refname>PDF_set_text_rise</refname>
    <refpurpose>テキストを拡大する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_text_rise</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>rise</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_text_rise</function> 関数は、テキストを
     <parameter>rise</parameter> ポイントに拡大します。</para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-text-matrix">
   <refnamediv>
    <refname>PDF_set_text_matrix</refname>
    <refpurpose>テキスト行列を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_text_matrix</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>array <parameter>matrix</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_text_matrix</function> 関数は、カレントのテキストフォントに
     適用される変換を記述する行列(matrix)を設定します。
     matrix は、6個の要素を有する配列として指定する必要があります。</para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-text-pos">
   <refnamediv>
    <refname>PDF_set_text_pos</refname>
    <refpurpose>テキスト位置を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_text_pos</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_text_pos</function> 関数は、次の <function>pdf_show</function> 
     関数コールに用いるテキストの位置を設定します。</para>
    <para>
     <function>PDF_show</function>,
              <function>PDF_show_xy</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-char-spacing">
   <refnamediv>
    <refname>PDF_set_char_spacing</refname>
    <refpurpose>文字間の空白を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_char_spacing</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>space</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_char_spacing</function> 関数は、文字間の空白を設定します。</para>
    <para>
     <function>PDF_set_word_spacing</function>,
              <function>PDF_set_leading</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-word-spacing">
   <refnamediv>
    <refname>PDF_set_word_spacing</refname>
    <refpurpose>単語間の空白を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_word_spacing</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>space</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_word_spacing</function> 関数は、単語間の空白を設定します。</para>

    <para>
     <function>PDF_set_char_spacing</function>,
              <function>PDF_set_leading</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-continue-text">
   <refnamediv>
    <refname>PDF_continue_text</refname>
    <refpurpose>次の行にテキストを出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_continue_text</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_continue_text</function> 関数は、次の行に
     <parameter>text</parameter> の中の文字列を出力します。
      行間は、<function>PDF_set_leading</function> で指定可能です。</para>

    <para>
     <function>PDF_show_xy</function>,
              <function>PDF_set_leading</function>,
              <function>PDF_set_text_pos</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-stringwidth">
   <refnamediv>
    <refname>PDF_stringwidth</refname>
    <refpurpose>カレントフォントのテキストの幅を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>pdf_stringwidth</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_stringwidth</function> 関数は、カレントのフォントを用いた場合の
     <parameter>text</parameter> の文字列の幅を返します。 
     事前に<function>PDF_set_font</function>で
     フォントを設定しておく必要があります。</para>

    <para>
     <function>PDF_set_font</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-save">
   <refnamediv>
    <refname>PDF_save</refname>
    <refpurpose>現在の環境を保存する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_save</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_save</function> 関数は、現在の環境を保存します。
     この関数は、postscript コマンド gsave と同様に動作します。
     他のオブジェクトを変更することなく
     あるオブジェクトを変換または回転させたい場合に大変便利です。
     <function>PDF_save</function>の前に環境を保存するには、
	常に<function>PDF_save</function> の後に
	<function>PDF_restore</function>を実行する必要があります。</para>

    <para>
     <function>PDF_restore</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-restore">
   <refnamediv>
    <refname>PDF_restore</refname>
    <refpurpose>以前保存された環境を回復する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_restore</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_restore</function> 関数は、
     <function>PDF_save</function> で保存された環境を回復します。
     この関数は、postscript コマンド grestore と似た動作をします。

     <example>
      <title>保存と回復</title>
      <programlisting role="php">
&lt;?php PDF_save($pdf);
// 回転、変換を行う ...
PDF_restore($pdf) ?>
</programlisting></example></para>

    <para>
     <function>PDF_save</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-translate">
   <refnamediv>
    <refname>PDF_translate</refname>
    <refpurpose>座標系の原点を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_translate</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_translate</function> 関数は、座標系の原点を現在の原点に関する
     相対座標で点(<parameter>x-coor</parameter>,<parameter>y-coor</parameter>) に設定します。
     次の例では、初期座標系において (0, 0) から (200, 200) まで線を描画します。
      <function>PDF_translate</function> の後でかつオブジェクトの更なる描画を開始する前に
      カレントのポイントを設定する必要があります。
 
      <example>
       <title>変換</title>
       <programlisting role="php">
 &lt;?php PDF_moveto($pdf, 0, 0);
 PDF_lineto($pdf, 100, 100);
 PDF_stroke($pdf);
 PDF_translate($pdf, 100, 100);
 PDF_moveto($pdf, 0, 0);
 PDF_lineto($pdf, 100, 100);
 PDF_stroke($pdf);
 ?>
 </programlisting></example></para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-scale">
   <refnamediv>
    <refname>PDF_scale</refname>
    <refpurpose>スケールを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_scale</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-scale</parameter></paramdef>
      <paramdef>double <parameter>y-scale</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_scale</function> 関数は両方向の倍率(スケールファクター)を設定します。
     以下の例では、x および y 方向のスケールを 72 倍にします。
     続いて描画される線は、両方向に 1 インチの長さとなります。(訳注:72dpiの場合)
 
      <example>
       <title>Scaling</title>
       <programlisting role="php">
 &lt;?php PDF_scale($pdf, 72.0, 72.0);
 PDF_lineto($pdf, 1, 1);
 PDF_stroke($pdf);
 ?>
 </programlisting></example></para>
  
   </refsect1>
  </refentry>

  <refentry id="function.pdf-rotate">
   <refnamediv>
    <refname>PDF_rotate</refname>
    <refpurpose>回転を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_rotate</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>angle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_rotate</function> 関数は、
     <parameter>angle</parameter> 度の回転を設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-setflat">
   <refnamediv>
    <refname>PDF_setflat</refname>
    <refpurpose>平面度を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setflat</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setflat</function> 関数は、平面度を 0 から 100 の値に設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-setlinejoin">
   <refnamediv>
    <refname>PDF_setlinejoin</refname>
    <refpurpose>linejoin パラメータを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setlinejoin</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>long <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setlinejoin</function> 関数は、linejoin パラメータを
     0 から 2 の値に設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-setlinecap">
   <refnamediv>
    <refname>PDF_setlinecap</refname>
    <refpurpose>linecap パラメータを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setlinecap</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>int <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setlinecap</function> 関数は、linecap パラメータを
     0 から 2 の値に設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-setmiterlimit">
   <refnamediv>
    <refname>PDF_setmiterlimit</refname>
    <refpurpose>miter リミットを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setmiterlimit</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setmiterlimit</function> 関数は、miter リミットを 1 以上の値に
     設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-setlinewidth">
   <refnamediv>
    <refname>PDF_setlinewidth</refname>
    <refpurpose>ライン幅を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setlinewidth</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>width</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setlinewidth</function> 関数は、行の幅を
     <parameter>width</parameter> に設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-setdash">
   <refnamediv>
    <refname>PDF_setdash</refname>
    <refpurpose>破線パターンを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setdash</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>white</parameter></paramdef>
      <paramdef>double <parameter>black</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setdash</function> 関数は、
     <parameter>white</parameter> 白のポイントおよび <parameter>black</parameter> 黒のポイントにより、
     破線パターンを設定します。
     両方共 0 の場合、ソリッド行が設定されます。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-moveto">
   <refnamediv>
    <refname>PDF_moveto</refname>
    <refpurpose>現在の位置を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_moveto</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_moveto</function> 関数は、現在位置を
     座標 (<parameter>x-coor</parameter>, <parameter>y-coor</parameter>)
      に設定します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-curveto">
   <refnamediv>
    <refname>PDF_curveto</refname>
    <refpurpose>曲線を描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_curveto</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x1</parameter></paramdef>
      <paramdef>double <parameter>y1</parameter></paramdef>
      <paramdef>double <parameter>x2</parameter></paramdef>
      <paramdef>double <parameter>y2</parameter></paramdef>
      <paramdef>double <parameter>x3</parameter></paramdef>
      <paramdef>double <parameter>y3</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_curveto</function> 関数は、ベジエー曲線を
     現在の点から点
     (<parameter>x3</parameter>, <parameter>y3</parameter>) まで
     (<parameter>x1</parameter>, <parameter>y1</parameter>) および
     (<parameter>x2</parameter>, <parameter>y2</parameter>) を制御点として
     描画します。</para>

    <para>
     <function>PDF_moveto</function>,
              <function>PDF_lineto</function>,
		<function>PDF_stroke</function>
参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-lineto">
   <refnamediv>
    <refname>PDF_lineto</refname>
    <refpurpose>線を描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_lineto</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_lineto</function> 関数は、現在の点から
     座標 (<parameter>x-coor</parameter>, <parameter>y-coor</parameter>)
     の点まで線を描画します。
    </para>
    <para>
     <function>PDF_moveto</function>,
     <function>PDF_curveto</function>,
     <function>PDF_stroke</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-circle">
   <refnamediv>
    <refname>PDF_circle</refname>
    <refpurpose>円を描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_circle</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
      <paramdef>double <parameter>radius</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_circle</function> 関数は、中心を点
     (<parameter>x-coor</parameter>, <parameter>y-coor</parameter>)
     、半径を <parameter>radius</parameter> とした円を描画します。</para>

    <para>
     <function>PDF_arc</function>,
<function>PDF_stroke</function>
 も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-arc">
   <refnamediv>
    <refname>PDF_arc</refname>
    <refpurpose>円弧を描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_arc</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
      <paramdef>double <parameter>radius</parameter></paramdef>
      <paramdef>double <parameter>start</parameter></paramdef>
      <paramdef>double <parameter>end</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_arc</function> 関数は、
     中心を点
     (<parameter>x-coor</parameter>, <parameter>y-coor</parameter>)、
     半径を <parameter>radius</parameter>、開始角を
     <parameter>start</parameter> 、終了角を <parameter>end</parameter>
     とした円弧を描画します。</para>

    <para>
     <function>PDF_circle</function>,
<function>PDF_stroke</function>
 も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-rect">
   <refnamediv>
    <refname>PDF_rect</refname>
    <refpurpose>長方形を描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_rect</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
      <paramdef>double <parameter>width</parameter></paramdef>
      <paramdef>double <parameter>height</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_rect</function> 関数は、
     左下隅を点
     (<parameter>x-coor</parameter>, <parameter>y-coor</parameter>) とした
     長方形を描画します。
     幅を <parameter>widgth</parameter> に設定します。
     高さを <parameter>height</parameter> に設定します。</para>

     <para>
      <function>PDF_stroke</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-closepath">
   <refnamediv>
    <refname>PDF_closepath</refname>
    <refpurpose>パスを閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_closepath</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_closepath</function> 関数は、カレントのパスを閉じます。
     これはカレントのポイントから最初の線が開始されたポイントに線が描かれることを
     意味します。
      <function>PDF_moveto</function>, <function>PDF_circle</function>
      , <function>PDF_rect</function> のような多くの関数では、
      新しいパスを開始します。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-stroke">
   <refnamediv>
    <refname>PDF_stroke</refname>
    <refpurpose>パスに基づいて線を描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_stroke</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_stroke</function> 関数は、カレントのパスに沿って
     線を描画します。
     カレントのパスは、描画する全ての線を集めたものです。
     この関数を使用しない場合、線は描画されません。</para>

    <para>
     <function>PDF_closepath</function>,
              <function>PDF_closepath_stroke</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-closepath-stroke">
   <refnamediv>
    <refname>PDF_closepath_stroke</refname>
    <refpurpose>パスを閉じ、パスに基づいて線を出力する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_closepath_stroke</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_closepath_stroke</function> 関数は、
     <function>PDF_closepath</function> および
     <function>PDF_stroke</function> の組み合わせです。
     また、この関数はパスをクリアします。</para>

    <para>
     <function>PDF_closepath</function>,
              <function>PDF_stroke</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-fill">
   <refnamediv>
    <refname>PDF_fill</refname>
    <refpurpose>カレントのパスに設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_fill</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_fill</function> 関数は、カレントのパスの内部を
     カレントの塗りつぶし色で塗りつぶします。</para>

    <para>
     <function>PDF_closepath</function>,
              <function>PDF_stroke</function>,
              <function>PDF_setgray_fill</function>,
              <function>PDF_setgray</function>,
              <function>PDF_setrgbcolor_fill</function>,
              <function>PDF_setrgbcolor</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-fill-stroke">
   <refnamediv>
    <refname>PDF_fill_stroke</refname>
    <refpurpose>カレントのパスを塗りつぶし、パスを描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_fill_stroke</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_fill_stroke</function> 関数は、
     カレントのパスの内部をカレントの塗りつぶし色で塗りつぶし、
     カレントのパスを描画します。</para>

    <para>
     <function>PDF_closepath</function>,
              <function>PDF_stroke</function>,
              <function>PDF_fill</function>,
              <function>PDF_setgray_fill</function>,
              <function>PDF_setgray</function>,
              <function>PDF_setrgbcolor_fill</function>,
              <function>PDF_setrgbcolor</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-closepath-fill-stroke">
   <refnamediv>
    <refname>PDF_closepath_fill_stroke</refname>
    <refpurpose>カレントのパスを閉じ、塗りつぶし、描く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_closepath_fill_stroke</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_closepath_fill_stroke</function> 関数は、
     カレントのパスの内部を閉じ、カレントの塗りつぶし色で塗りつぶし、
     カレントのパスを描画します。</para>

    <para>
     <function>PDF_closepath</function>,
              <function>PDF_stroke</function>,
              <function>PDF_fill</function>,
              <function>PDF_setgray_fill</function>,
              <function>PDF_setgray</function>,
              <function>PDF_setrgbcolor_fill</function>,
              <function>PDF_setrgbcolor</function> も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-endpath">
   <refnamediv>
    <refname>PDF_endpath</refname>
    <refpurpose>カレントのパスを終了する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_endpath</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_endpath</function> 関数は、カレントのパスを
     終了しますが、そのパスを閉じません。</para>

    <para>
     <function>PDF_closepath</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-clip">
   <refnamediv>
    <refname>PDF_clip</refname>
    <refpurpose>カレントのパスに切り取る</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_clip</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_clip</function> 関数は、絵全体を
     カレントのパスに切り取ります。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-setgray-fill">
   <refnamediv>
    <refname>PDF_setgray_fill</refname>
    <refpurpose>塗りつぶし色をグレー値に設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setgray_fill</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>gray value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setgray_fill</function> 関数は、カレントの
     グレー値をパスを塗りつぶし用に設定します。</para>

    <para>
     <function>PDF_setrgbcolor_fill</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-setgray-stroke">
   <refnamediv>
    <refname>PDF_setgray_stroke</refname>
    <refpurpose>描画色をグレー値に設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setgray_stroke</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>gray value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setgray_stroke</function> 関数は、カレントの描画色を
     指定されたグレー値に設定します。</para>

    <para>
     <function>PDF_setrgbcolor_stroke</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-setgray">
   <refnamediv>
    <refname>PDF_setgray</refname>
    <refpurpose>描画および塗りつぶし色をグレー値に設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setgray</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>gray value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setgray</function> 関数は、
     カレントの描画および塣?つぶし色を指定されたグレー値に設定します。</para>

    <para>
     <function>PDF_setrgbcolor_stroke</function>,
              <function>PDF_setrgbcolor_fill</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-setrgbcolor-fill">
   <refnamediv>
    <refname>PDF_setrgbcolor_fill</refname>
    <refpurpose>塗りつぶし色を RGB カラー値に設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setrgbcolor_fill</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>red value</parameter></paramdef>
      <paramdef>double <parameter>green value</parameter></paramdef>
      <paramdef>double <parameter>blue value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setrgbcolor_fill</function> 関数は、カレントの
     RGB カラー値をパスの塗りつぶし用に設定します。</para>

    <para>
     <function>PDF_setrgbcolor_fill</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-setrgbcolor-stroke">
   <refnamediv>
    <refname>PDF_setrgbcolor_stroke</refname>
    <refpurpose>描画色を RGB カラー値に設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setrgbcolor_stroke</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>red value</parameter></paramdef>
      <paramdef>double <parameter>green value</parameter></paramdef>
      <paramdef>double <parameter>blue value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setrgbcolor_stroke</function> 関数は、カレントの描画色を
     指定された RGB カラー値に設定します。</para>

    <para>
     <function>PDF_setrgbcolor_stroke</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-setrgbcolor">
   <refnamediv>
    <refname>PDF_setrgbcolor</refname>
    <refpurpose>描画および塗りつぶし色を RGB カラー値に設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_setrgbcolor</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>red value</parameter></paramdef>
      <paramdef>double <parameter>green value</parameter></paramdef>
      <paramdef>double <parameter>blue value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_setrgbcolor_stroke</function> 関数は、カレントの
     描画および塗りつぶし色を指定された RGB カラー値に設定します。</para>

    <para>
     <function>PDF_setrgbcolor_stroke</function>,
              <function>PDF_setrgbcolor_fill</function> も参照下さい。</para>

   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-add-outline">
   <refnamediv>
    <refname>PDF_add_outline</refname>
    <refpurpose>カレントのページにブックマークを追加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_add_outline</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>text</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_add_outline</function> 関数は、
     カレントのページを指すテキスト <parameter>text</parameter> により
     ブックマャ¯を追加します。</para>

    <simpara>
     不幸なことに pdflib は文字列のコピーを作成しないため、PHP は
     メモリーを確保しません。現在、このメモリーの部分は、PDF 関数により
     解放されませんが、PHP メモリーマネージャーにより監視されています。</simpara>

   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-transition">
   <refnamediv>
    <refname>PDF_set_transition</refname>
    <refpurpose>ページ間の移動を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_transition</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>int <parameter>transition</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_transition</function> 関数は、
     次のようなページ間の移動を設定します。
     <parameter>transition</parameter> の値は、次のようにすることができます。
 
      <simplelist>
       <member>
         0 は何もしない,
       </member>
       <member>
     1 はページを表示する際に2行ずつスクロールする,
       </member>
       <member>
     2 はページを表示する際に複数行ずつスクロールする,
       </member>
       <member>
     3 ページの周りに箱を描く,
       </member>
       <member>
     4 はページを表示する際に1行ずつスクロールする,
       </member>
       <member>
     5 はページを描画する際に古いページを消去する
       </member>
       <member>
     6 は画面の一つの隅から他の隅に移動するように消すといった効果を用いる
       </member>
       <member>
     7 は古いページを新しいページで単純に置換する (デフォルト)
       </member>
      </simplelist></para>
     <para>
      <function>PDF_set_duration</function> も参照下さい。</para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-duration">
   <refnamediv>
    <refname>PDF_set_duration</refname>
    <refpurpose>ページ間の持続時間を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_duration</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>duration</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_set_duration</function> 関数は、
     続くページの間の持続時間を秒で設定します。</para>
     <para>
      <function>PDF_set_transition</function> も参照下さい。</para>
    </refsect1>
   </refentry>
 
   <refentry id="function.pdf-open-gif">
    <refnamediv>
     <refname>PDF_open_gif</refname>
     <refpurpose>GIF 画像をオープンする</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
     <funcprototype>
       <funcdef>int <function>pdf_open_gif</function></funcdef>
       <paramdef>int <parameter>pdf document</parameter></paramdef>
       <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
     </funcsynopsis>
     <para>
      <function>PDF_open_gif</function> 関数は、<parameter>filename</parameter> という名前の
      ファイルに保存された画像をオープンします。画像のフォーマットは gif である必要があります。
      この関数は、pdf 画像 ID を返します。
 
      <example>
       <title>gif 画像を取り込む</title>
       <programlisting role="php">
 &lt;?php
 $im = PDF_open_gif($pdf, "test.gif");
 pdf_place_image($pdf, $im, 100, 100, 1);
 pdf_close_image($pdf, $im);
 ?>
       </programlisting>
      </example></para>
 
     <para>
      <function>PDF_close_image</function>,
               <function>PDF_open_jpeg</function>,
               <function>PDF_open_memory_image</function>,
               <function>PDF_execute_image</function>,
               <function>PDF_place_image</function>,
               <function>PDF_put_image</function> も参照下さい。</para>
    </refsect1>
   </refentry>
 
  <refentry id="function.pdf-open-png">
    <refnamediv>
      <refname>PDF_open_png</refname>
      <refpurpose>
        PNGイメージをオープンする
      </refpurpose>
    </refnamediv>
    <refsect1>
      <title>説明</title>
      <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>pdf_open_png</function>
      </funcdef>
      <paramdef>int 
       <parameter>pdf</parameter>
      </paramdef>
      <paramdef>string 
       <parameter>png_file</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>    
     関数<function>PDF_open_png</function>は名前が
     <parameter>filename</parameter>のファイルに保存されたイメージをオー
     プンします。イメージのフォーマットはPNGである必要があります。
     この関数は、pdfイメージIDを返します。
     <example>
          <title>PNGイメージを読み込む</title>
      <programlisting role="php">
&lt;?php
$im = PDF_open_png ($pdf, "test.png");
pdf_place_image ($pdf, $im, 100, 100, 1);
pdf_close_image ($pdf, $im);
?>
      </programlisting>
     </example>
    </para>
    <para>
     <function>PDF_close_image</function>,
     <function>PDF_open_jpeg</function>,
     <function>PDF_open_gif</function>,
     <function>PDF_open_memory_image</function>,
     <function>PDF_execute_image</function>,
     <function>PDF_place_image</function>,
     <function>PDF_put_image</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.pdf-open-memory-image">
   <refnamediv>
    <refname>PDF_open_memory_image</refname>
    <refpurpose>PHP の画像関数により作成された画像をオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pdf_open_memory_image</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
       <paramdef>int <parameter>image</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_open_memory_image</function>関数は、PHPの画像関数に
     より作成されたimageを引数としてとり、pdfドキュメントで利用できる
     ようにします。この関数は、pdf画像IDを返します。
     <example>
      <title>メモリー上の画像を取り込む</title>
      <programlisting role="php">
&lt;?php
$im = ImageCreate(100, 100);
$col = ImageColorAllocate($im, 80, 45, 190);
ImageFill($im, 10, 10, $col);
$pim = PDF_open_memory_image($pdf, $im);
ImageDestroy($im);
pdf_place_image($pdf, $pim, 100, 100, 1);
pdf_close_image($pdf, $pim);
?>
      </programlisting>
     </example>
    </para>
    <para>
     <function>PDF_close_image</function>,
     <function>PDF_open_jpeg</function>,
     <function>PDF_open_gif</function>,
     <function>PDF_open_png</function>,
     <function>PDF_execute_image</function>,
     <function>PDF_place_image</function>,
     <function>PDF_put_image</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-open-jpeg">
   <refnamediv>
    <refname>PDF_open_jpeg</refname>
    <refpurpose>JPEG 画像をオープンする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pdf_open_jpeg</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_open_jpeg</function>関数は、
     <parameter>filename</parameter>という名前のファイルに保存された
     イメージをオープンします。画像のフォーマットはJPEGである必要があ
     ります。この関数は、pdfイメージIDを返します。
    </para>
    <para>
     <function>PDF_close_image</function>,
     <function>PDF_open_gif</function>,
     <function>PDF_open_png</function>,
     <function>PDF_open_memory_image</function>,
     <function>PDF_execute_image</function>,
     <function>PDF_place_image</function>,
     <function>PDF_put_image</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-close-image">
   <refnamediv>
    <refname>PDF_close_image</refname>
    <refpurpose>画像を閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_close_image</function></funcdef>
      <paramdef>int <parameter>image</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_close_image</function>関数は、
     <function>PDF_open_xxx</function>関数のどれかでオープンされた
     画像を閉じます。
    </para>
    <para>
     <function>PDF_open_jpeg</function>,
     <function>PDF_open_gif</function>,
     <function>PDF_open_memory_image</function>
     も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-place-image">
   <refnamediv>
    <refname>PDF_place_image</refname>
    <refpurpose>画像をページに置く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_place_image</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>int <parameter>image</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
      <paramdef>double <parameter>scale</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_place_image</function> 関数は、
     イメージをそのページの位置 (<parameter>x-coor</parameter>,
     <parameter>y-coor</parameter>) に置きます。
     イメージのサイズを同時に変えることが可能です。
    </para>
    <para>
     <function>PDF_put_image</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-put-image">
   <refnamediv>
    <refname>PDF_put_image</refname>
    <refpurpose>後で使用するためにPDFにイメージを保存する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_put_image</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>int <parameter>image</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_put_image</function>関数は、画像を表示せずにPDFファ
     イルに組み込みます。保存された画像は、
     <function>PDF_execute_image</function> 関数で表示することが可能です。
     同じ画像を複数回使用する場合に、ファイルサイズを小さく保つため便利です。
     (数kbの)大きな画像を文書の中で複数回表示させる場合には、
     <function>PDF_put_image</function> および
     <function>PDF_execute_image</function> が強く推奨されます。
     <note>
      <simpara>
       この関数は、pdflib のバージョン 2.01 では意味が
       なくなりました。警告を発生するだけとなります。
      </simpara>
     </note>
    </para>
    <para>
     <function>PDF_put_image</function>,
     <function>PDF_place_image</function>,
     <function>PDF_execute_image</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-execute-image">
   <refnamediv>
    <refname>PDF_execute_image</refname>
    <refpurpose>保存した画像をページに置く</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_execute_image</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>int <parameter>image</parameter></paramdef>
      <paramdef>double <parameter>x-coor</parameter></paramdef>
      <paramdef>double <parameter>y-coor</parameter></paramdef>
      <paramdef>double <parameter>scale</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>PDF_execute_image</function>関数は、
     <function>PDF_put_image</function>関数でPDFファイルに保存された画
     像をカレントのページの指定した座標に表示します。
    </para>
    <para>
     画像のサイズを表示する際に変えることが可能です。
     倍率(scale) 1.0 の場合、元のサイズで画像が表示されます。
     <note>
      <simpara>
       この関数は、pdflibのバージョン2.01では意味が
       なくなりました。警告を発生するだけとなります。
      </simpara>
     </note>
     <example>
      <title>1つの画像を複数回表示する</title>
      <programlisting role="php">
&lt;?php
$im = ImageCreate(100, 100);
$col1 = ImageColorAllocate($im, 80, 45, 190);
ImageFill($im, 10, 10, $col1);
$pim = PDF_open_memory_image($pdf, $im);
pdf_put_image($pdf, $pim);
pdf_execute_image($pdf, $pim, 100, 100, 1);
pdf_execute_image($pdf, $pim, 200, 200, 2);
pdf_close_image($pdf, $pim);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.pdf-add-annotation">
   <refnamediv>
    <refname>pdf_add_annotation</refname>
    <refpurpose>注記を追加する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_add_annotation</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>llx</parameter></paramdef>
      <paramdef>double <parameter>lly</parameter></paramdef>
      <paramdef>double <parameter>urx</parameter></paramdef>
      <paramdef>double <parameter>ury</parameter></paramdef>
      <paramdef>string <parameter>title</parameter></paramdef>
      <paramdef>string <parameter>content</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pdf_add_annotation</function> は、左下隅を
     (<parameter>llx</parameter>,
     <parameter>lly</parameter>) 、右上隅を
     (<parameter>urx</parameter>, <parameter>ury</parameter>)
     とする注記を追加します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-border-style">
   <refnamediv>
    <refname>PDF_set_border_style</refname>
    <refpurpose>リンクおよび注記の周囲の境界のスタイルを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_border_style</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>string <parameter>style</parameter></paramdef>
      <paramdef>double <parameter>width</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_set_border_style</function>は、リンクおよび注記を
     囲む箱のスタイルと幅を設定します。パラメータ<parameter>style</parameter>は
     'solid'または'dashed'を指定することができます。
    </para>
    <para>
     <function>PDF_set_border_color</function>、
     <function>PDF_set_border_dash</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-border-color">
   <refnamediv>
    <refname>PDF_set_border_color</refname>
    <refpurpose>リンクおよび注記の周囲の境界の色を設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_border_color</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>red</parameter></paramdef>
      <paramdef>double <parameter>green</parameter></paramdef>
      <paramdef>double <parameter>blue</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_set_border_color</function>はリンクおよび注記の
     周囲の箱の色を設定します。色の3種類の要素には、0.0から1.0の間の
     値を指定します。
    </para>
    <para>
     <function>PDF_set_border_style</function>、
     <function>PDF_set_border_dash</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pdf-set-border-dash">
   <refnamediv>
    <refname>PDF_set_border_dash</refname>
    <refpurpose>
     リンクおよび注記の周囲の境界のダッシュのスタイルを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pdf_set_border_dash</function></funcdef>
      <paramdef>int <parameter>pdf document</parameter></paramdef>
      <paramdef>double <parameter>black</parameter></paramdef>
      <paramdef>double <parameter>white</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>PDF_set_border_dash</function>は、リンクおよび注記の
     周囲の箱の破線において黒と白の部分の長さを設定します。
    </para>
    <para>
     <function>PDF_set_border_style</function>、
     <function>PDF_set_border_color</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
