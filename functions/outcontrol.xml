<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.13 $ -->
 <reference id="ref.outcontrol">
  <title>出力制御関数</title>
  <titleabbrev>出力制御</titleabbrev>

  <partintro>
   <para>
    出力制御関数により、スクリプトから送信される出力を制御することが可
    能になります。この機能は、複数の異なった場面、特にスクリプトがデー
    タ出力を開始した後にヘッダをブラウザに送信する必要がある場合に有用
    です。出力制御関数は、<function>header</function> または
    <function>setcookie</function>を使用して送信されたヘッダには作用せ
    ず、<function>echo</function> のような関数とPHPコードのブロック間
    のデータにのみ作用します。
   </para>
   <para>
    <example>
     <title><function>出力関数</function> の例</title>
     <programlisting role="php">
<![CDATA[
<?php

ob_start();
echo "Hello\n";

setcookie("cookiename", "cookiedata");

ob_end_flush();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    上記の例では、<function>echo</function>からの出力は、
    <function>ob_end_flush</function> がコールされるまで出力バッファに
    保存されます。この際、
    <function>setcookie</function>をコールするとエラーを発生することな
    くクッキーが保存されます。(通常、データの送信後はブラウザにヘッダ
    を送信することはできません。)
   </para>
   <para>
    <function>header</function>および<function>setcookie</function>
    も参照下さい。
   </para>
  </partintro>

  <refentry id="function.flush">
   <refnamediv>
    <refname>flush</refname>
    <refpurpose>出力バッファをフラッシュする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>flush</methodname>
      <void/>
     </methodsynopsis>
    <simpara>
     PHPおよびPHPが使っている(CGI, Web サーバなどの)バックエンド
     の出力バッファをフラッシュします。これにより、それまでの全ての
     出力がユーザのブラウザに対して効率的に出力されます。
    </simpara>
    <note>
     <para>
      <function>flush</function> は、Webサーバまたはクライアント側のブ
      ラウザのバッファリングの手法に影響を与えません。
     </para>
     <para>
      複数のサーバ、特に Win32 上ではスクリプトからの出力をブラウザに
      結果を送信する前にスクリプトが終了するまでバッファに溜めることが
      あります。
     </para>
     <para>
      ブラウザ側で表示前に入力をバッファリングすることもあり得ます。
      Netscape では例えば改行または開始タグを受信するまでテキストはバッ
      ファリングされ、最も外側のテーブルの &lt;/table&gt; タグが現れる
      までテーブルは描画されません。
     </para>
     <para>
      いくつかのバージョンのMicrosoft Internet Explorerは、256バイトの
      出力を受けてからページを表示し始めます。このため、これらのブラウ
      ザにページを表示させるには、フラッシュする前に余分な空白を送信す
      る必要があるかもしれません。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.ob-start">
   <refnamediv>
    <refname>ob_start</refname> 
    <refpurpose>出力のバッファリングを有効にする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>ob_start</methodname>
      <methodparam><type>string</type><parameter>
        <replaceable><optional>output_callback</optional></replaceable>
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     この関数は出力のバッファリングをオンにします。出力のバッファリン
     グがアクティブの場合、(ヘッダ以外の)スクリプトからの出力は実際に
     は行われず、代わりに内部バッファに追加されます。
    </para>
    <para>
     この内部バッファの内容は、<function>ob_get_contents</function> を
     用いて文字列変数にコピーされます。実際の出力は、
     <function>ob_end_flush</function> がコールされた際に行われます。
     <function>ob_end_clean</function> は、バッファの内容を出力せずに
     消去します。
    </para>
    <para>
     オプションの引数<parameter>output_callback</parameter>関数を指定
     することが可能です。この関数は、パラメータとして文字列をとり、文
     字列を返します。このコールバック関数は、
     <function>ob_end_flush</function> がコールされた際、または、リク
     エストの最後にブラウザに出力をフラッシュする際にコールされます。
     <parameter>output_callback</parameter>がコールされた際に、この関
     数は、出力バッファの内容をパラメータとして受取ります。このコール
     バック関数は、新規の出力バッファを実際に出力される結果として返す
     必要があり、この結果はブラウザに送信されます。
    </para>
    <note>
     <para>
      PHP 4.0.4において、Webページの圧縮をサポートする圧縮gzエンコード
      されたデータのWebブラウザへの送信を容易にするために
      <function>ob_gzhandler</function> がサポートされています。
      <function>ob_gzhandler</function>は、ブラウザが受け入れるcontent
      encodingの型を調べ、それに基づいて出力を返します。
     </para>
    </note>
    <para>
     出力バッファはスタッカブルであり、このため、他の
     <function>ob_start</function> がアクティブの間に
     <function>ob_start</function> をコールすることが可能です。この場
     合、<function>ob_end_flush</function> を適当な回数コールするよ
     うにして下さい。複数の出力コールバック関数がアクティブの場合、出
     力はネストした順番で逐次連続的にフィルタ処理されます。
    </para>
    <example>
     <title>ユーザ定義のコールバック関数の例</title>
     <programlisting role="php">
<![CDATA[
<?php

function callback($buffer) {

  // apples を全て oranges に置換する
  return (ereg_replace("apples", "oranges", $buffer));

}

ob_start("callback");

?>

<html>
<body>
<p>It's like comparing apples to oranges.
</body>
</html>

<?php

ob_end_flush();

?>
]]>
     </programlisting>
    </example>
    <para>
     出力は次のようになります。
     <informalexample>
      <programlisting role="php">
<![CDATA[
<html>
<body>
<p>It's like comparing oranges to oranges.
</body>
</html>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>ob_get_contents</function>,
     <function>ob_end_flush</function>,
     <function>ob_end_clean</function>, 
     <function>ob_implicit_flush</function>,
     <function>ob_gzhandler</function> も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ob-get-contents">
   <refnamediv>
    <refname>ob_get_contents</refname> 
    <refpurpose>
     出力用バッファの内容を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>ob_get_contents</methodname>
      <void/>
     </methodsynopsis>
    <para>
     出力用バッファの内容を返します。出力のバッファリングがアクティブ
     でない場合には&false;を返します。
    </para>
    <para>
     <function>ob_start</function>, 
     <function>ob_get_length</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ob-get-length">
   <refnamediv>
    <refname>ob_get_length</refname>
    <refpurpose>
     出力バッファの長さを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>ob_get_length</methodname>
      <void/>
     </methodsynopsis>
    <para>
     この関数は、出力バッファの内容の長さを返します。出力のバッファリ
     ングがアクティブでない場合には、&false; を返します。
    </para>
    <para>
     <function>ob_start</function>、
     <function>ob_get_contents</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ob-get-level">
   <refnamediv>
    <refname>ob_get_level</refname>
    <refpurpose>
     出力バッファリング機構のネストレベルを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>int</type><methodname>ob_get_level</methodname>
      <void/>
     </methodsynopsis>
    <para>
     この関数は、出力バッファリング機構のネストレベルを返します。
    </para>
    <para>
     <function>ob_start</function>および
     <function>ob_get_contents</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ob-gzhandler">
   <refnamediv>
    <refname>ob_gzhandler</refname>
    <refpurpose>
     出力バッファをgzip圧縮するためのob_startコールバック関数
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>string</type><methodname>ob_gzhandler</methodname>
      <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>	
     </methodsynopsis>
    <note>
     <para>
      <parameter>mode</parameter>は、PHP 4.0.5で追加されました。
     </para>
    </note>
    <para>
     <function>ob_gzhandler</function> は、Webページの圧縮をサポートす
     るgzエンコードされたデータをWebブラウザに送信することを容易にする
     ための<function>ob_start</function>用のコールバック関数として使用
     されることを意図しています。<function>ob_gzhandler</function>は実
     際に圧縮されたデータを送信する前にブラウザがサポートするcontent
     encodingの種類("gzip"、"deflate"またはなし)を調べ、それに基づいて
     出力を返します。ブラウザがサポートする圧縮されたWebページを表す正
     しいヘッダを送信することは、ブラウザの責任であるため、全てのブラ
     ウザがサポートされています。
    </para>
    <para>
     <example>
      <title><function>ob_gzhandler</function> の例</title>
      <programlisting role="php">
<![CDATA[
<?php

ob_start("ob_gzhandler");

?>
<html>
<body>
<p>This should be a compressed page.
</html>
<body>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>ob_start</function> および
     <function>ob_end_flush</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ob-flush">
   <refnamediv>
    <refname>ob_flush</refname>
    <refpurpose>
     出力バッファをフラッシュ(送信)する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>ob_flush</methodname>
      <void/>
     </methodsynopsis>
    <para>
     この関数は、(ある場合に)出力バッファの内容を送信します。更にバッ
     ファの内容を処理したい場合には、<function>ob_flush</function>がコー
     ルされた後にバッファの内容が破棄されるので、
     <function>ob_flush</function>の前に
     <function>ob_get_contents</function>をコールする必要があります。
    </para>
    <para>
     この関数は、<function>ob_end_flush</function>のように出力バッファ
     を破棄しません。
    </para>
    <para>
     <function>ob_get_contents</function>,
     <function>ob_clean</function>,
     <function>ob_end_flush</function>,
     <function>ob_end_clean</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ob-clean">
   <refnamediv>
    <refname>ob_clean</refname>
    <refpurpose>
     出力バッファをクリア(消去)する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>ob_clean</methodname>
      <void/>
     </methodsynopsis>
    <para>
     この関数は、出力バッファの内容を破棄します。
    </para>
    <para>
     この関数は、<function>ob_end_clean</function>のように出力バッファ
     を破棄しません。
    </para>
    <para>
     <function>ob_flush</function>,
     <function>ob_end_flush</function>,
     <function>ob_end_clean</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ob-end-flush">
   <refnamediv>
    <refname>ob_end_flush</refname> 
    <refpurpose>
     出力用バッファをフラッシュ(送信)し、出力のバッファリングをオフに
     する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>ob_end_flush</methodname>
      <void/>
     </methodsynopsis>
    <para>
     この関数は、出力用バッファの内容を出力し、出力のバッファリングを
     オフにします。出力用バッファの内容を更に処理したい場合には、
     バッファの内容は <function>ob_end_flush</function> がコールされた
     後に消去されるため、<function>ob_end_flush</function>の前に
     <function>ob_get_contents</function>をコールする必要があります。
    </para>
    <para>
     <function>ob_start</function>,<function>ob_get_contents</function>,
     <function>ob_end_clean</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ob-end-clean">
   <refnamediv>
    <refname>ob_end_clean</refname> 
    <refpurpose>
     出力用バッファをクリア(消去)し、出力のバッファリングをオフにする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>ob_end_clean</methodname>
      <void/>
     </methodsynopsis>
    <para>
     出力用バッファの内容を消去し、出力のバッファリングをオフにします。
    </para>
    <para>
     <function>ob_start</function>および
     <function>ob_end_flush</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ob-implicit-flush">
   <refnamediv>
    <refname>ob_implicit_flush</refname> 
    <refpurpose>
     自動フラッシュをオンまたはオフにする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis>
      <type>void</type><methodname>ob_implicit_flush</methodname>
      <methodparam><type>int</type><parameter>
	<replaceable><optional>flag</optional></replaceable>
       </parameter></methodparam>		  
     </methodsynopsis>
    <para>
     <function>ob_implicit_flush</function>は、自動フラッシュをオンま
     たはオフに切替えます。(<parameter>flag</parameter>が指定されない
     場合、デフォルトでonになります。)
     自動フラッシュにより出力関数のコールが行われる度にフラッシュ操作
     が行われるようになります。このため、<function>flush</function>を
     明示的にコールする必要はなくなります。
    </para>
    <para>
     自動フラッシュをオンに切替えると出力のバッファリングは無効となり、
     <function>ob_end_flush</function>がコールされてからの出力バッファ
     の内容が出力されます。
    </para>
    <para>
     <function>flush</function>,<function>ob_start</function>,
     <function>ob_end_flush</function>も参照下さい。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

