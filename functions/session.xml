<?xml version="1.0" encoding="utf-8"?>
 <reference id="ref.session">
  <title>セッション処理関数</title>
  <titleabbrev>セッション</titleabbrev>

  <partintro>
   <para>
    PHPのセッションサポート機能は、複数回のアクセスを通じて特定のデー
    タを保持する手段を実現するものです。これにより、よりカスタマイズさ
    れたアプリケーションを構築し、自分の Web サイトのアピール度を増加
    させることが可能となります。
   </para>
   <para>
    PHPLIB のセッション管理に精通している場合には、そのコンセプトがPHPの
    セッションサポートに似ていることに気づくことでしょう。
   </para>
   <para>
    Web サイトの訪問者にはセッションIDというユニークなIDが割りつけられ
    ます。このIDは、ユーザー側にクッキーとして保存するか、または、URL
    に埋め込みます。
   </para>
   <para>
    セッションサポート機能により、任意の数の変数をリクエスト間で受けわたせる
    ようになります。来訪者がサイトにアクセスした際、
    PHP は特定のセッションIDがリクエストとともに送信されているかどうかを
    (session.auto_start が 1 の場合は)自動的に、または
    (<function>session_start</function> により明示的な、あるいは
    <function>session_register</function> により暗黙の)
    要求を受けて確認します。
    このIDが送信されている場合には、以前保存された変数が再現されます。
   </para>
   <para>
    全ての登録された変数は、リクエストが終了した後に、シリアル化されます。
    未定義の登録変数は、未定義としてマーク付けされます。
    後でユーザーがこれらの変数を定義しない限り、以降のアクセスにおいて
    セッションモジュールにより定義されません。
   </para>
   <para>
    設定ファイルの設定値
    <link linkend="ini.track-vars"><literal>track_vars</literal></link>
    および <link
     linkend="ini.register-globals"><literal>register_globals</literal></link>
    によりセッション変数の回復方法を指定します。
   </para>
   <note>
    <para>
     PHP 4.0.3以降、<link
     linkend="ini.track-vars"><literal>track_vars</literal></link>は常
     に on となりました。
    </para>
   </note>
   <para>
    <link linkend="ini.track-vars"><literal>track_vars</literal></link>
    が有効で<link linkend="ini.register-globals">
     <literal>register_globals</literal></link>
    が無効の場合、グローバル変数配列$HTTP_SESSION_VARSのメンバーのみを
    セッション変数として登録可能です。回復されたセッション変数は配列
    $HTTP_SESSION_VARSでのみ利用可能です。
    <example>
     <title>
      <link
      linkend="ini.track-vars"><literal>track_vars</literal></link>
      が有効な時に変数を登録する
     </title>
     <programlisting role="php">
&lt;?php
session_register("count");
$HTTP_SESSION_VARS["count"]++;
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    <link
    linkend="ini.register-globals"><literal>register_globals</literal></link>
    が有効な場合、全てのグローバル変数はセッション変数として登録するこ
    とが可能で、セッション変数は対応するグローバル変数として回復されま
    す。
    <example>
     <title>
      <link
      linkend="ini.register-globals"><literal>register_globals</literal></link>
      が有効な場合に、変数を登録する
     </title>
     <programlisting role="php">
&lt;?php
session_register("count");
$count++;
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    <link
    linkend="ini.track-vars"><literal>track_vars</literal></link>と
    <link
    linkend="ini.register-globals"><literal>register_globals</literal></link>
    が共に有効な場合、グローバル変数と$HTTP_SESSION_VARSエントリは同じ
    値へのリファレンスとなります。
   </para>
   <para>
    セッションIDの通知を行うためには次の二つの方法があります。
    <itemizedlist>
     <listitem>
      <simpara>
      クッキー
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       URLパラメータ
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    セッションモジュールは、両方の方法をサポートします。
    クッキーは最適ですが、(クライアントがクッキーを受け入れない可能性が
    あるため)信頼性がなく、頼ることができません。二番目の方法は、
    セッションIDを直接URLに埋め込みます。
   </para>
   <para>
    PHP は、<literal>--enable-trans-sid</literal>を付けてコンパイルされた
    場合にこの処理を透過的に行います。
    このオプションを有効にした場合、相対 URI はセッションIDを有するように
    自動的に変更されます。
    もしくは、クライアントが適当なクッキーを送信しない場合に
    定義される定数 <literal>SID</literal> を使用することができます。
    <literal>SID</literal> は、<literal>session_name=session_id</literal> 
    の形式または空の文字列です。
   </para>
   <para>
    次の例は、変数の登録法および SID を用いて他のページに
    正しくリンクする方法のデモです。
    <example>
     <title>単一のユーザーに関するヒット数を数える</title>
     <programlisting role="php">
&lt;?php
session_register("count");
$count++;
?&gt;

こんにちは、あなたがこのページに来たのは&lt;?php echo $count; ?&gt;回目ですね。 &lt;p&gt;

&lt;php?
# ユーザーがクッキーを使用不可としている場合は、セッションIDを
# 保持するために &lt;?=SID?&gt; が必要です。
?&gt;

続けるには、
&lt;A HREF="nextpage.php?&lt;?=SID?&gt;"&gt;ここをクリック&lt;/A&gt;
して下さい。
     </programlisting>
    </example>
   </para>
   <para>
    PHPのコンパイル時に <literal>--enable-trans-sid</literal>を指定し
    た場合には、<literal>&lt;?=SID?&gt;</literal> は必要ありません。
   </para>
   <note>
    <para>
     相対URLでないものは、外部サイトを指していると仮定されSIDが追加
     されません。これは、SIDを異なったサーバにもらすことはセキュリティ
     上のリスクとなるためです。
    </para>
   </note>
   <para>
    セッション情報をデータベースに保存する機能か他の保存法を実装するに
    は、一連のユーザレベルの保存関数を作成し、
    <function>session_set_save_handler</function>を使用する必要があり
    ます。
   </para>
   <para>
    セッション管理システムは、php.ini ファイルに記述可能な多くの設定オ
    プションをサポートします。以下に概要を示します。
    <itemizedlist>
     <listitem>
      <simpara>
       <literal>session.save_handler</literal> は、セッションに関連す
       るデータの保存および取得に使用されるハンドル名を定義します。デ
       フォルトは、<literal>files</literal>です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.save_path</literal> は、保存ハンドラに渡される
       引数を定義します。デフォルトのファイルハンドラ選択した場合、
       ファイルが作成される場所のパスになります。デフォルトは、
       <literal>/tmp</literal> です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.name</literal> はセッション名を指定し、
       クッキー名として使用されます。
       アルファベット文字のみで指定する必要があります。
       デフォルトは、<literal>PHPSESSID</literal> です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.auto_start</literal> はリクエスト開始時に
       セッションモジュールがセッションを自動的に開始するかどうかを
       指定します。デフォルトは、<literal>0</literal>(無効)です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_lifetime</literal>は、ブラウザに送信す
       るクッキーの有効期間を秒数で指定します。値0は、"ブラウザを閉じ
       るまで"を意味します。デフォルトは、<literal>0</literal>です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.serialize_handler</literal> は、シリアル化また
       はシリアル化データを復元するために使用されるハンドラの名前を定
       義します。現在、( <literal>php</literal>という名前の)PHP 内部
       フォーマットおよび(<literal>wddx</literal>という名前の)WDDX が
       サポートされています。WDDXは、PHP が<link
       linkend="ref.wddx">WDDX サポート</link> を有効にしてコンパイル
       されている場合のみ使用可能です。デフォルトは、
       <literal>php</literal> です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.gc_probability</literal> は、gc (ガーベッジ・
       コレクション)ルーチンが各リクエストにおいて開始される確率をパー
       セントで指定します。デフォルトは、<literal>1</literal> です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.gc_maxlifetime</literal> は、データが'ごみ'と
       みなされてから消去されるまでの秒数を指定します。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.referer_check</literal> には、HTTP Referer に
       おいて確認を行う文字列を指定します。Refererがクライアントにより
       送信されており、かつ、指定した文字列が見付からない場合、埋め込
       まれたセッションIDは無効となります。デフォルトは空の文字列です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.entropy_file</literal> は、
       セッションIDを作成する際の別のエントロピソースとして使用する
       外部リソースへのパスを指定します。
       例としては、多くの UNIX で利用可能な <literal>/dev/random</literal> 
       または <literal>/dev/urandom</literal> があげられます。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.entropy_length</literal> は、前記のファイルから読みこむ
       バイト数を指定します。デフォルトは、<literal>0</literal> (無効)です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.use_cookies</literal>によりクライアント側にセッションID
       を保存する際にクッキーを使用するかどうかを指定します。デフォルトは
       <literal>1</literal> (有効)です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_path</literal>によりsession_cokkieで設定する
       パスを指定します。デフォルトは<literal>/</literal>です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_domain</literal>によりsession_cookieで指定する
       ドメインを指定します。デフォルトでは指定されません。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cache_limiter</literal>により
       セッションページにおけるキャッシュ制御の方法(nocache/private/public)
       を指定します。デフォルトは、<literal>nocache</literal>です。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cache_expire</literal>によりキャッシュされた
       セッションページの生存期間を分単位で指定します。
       このオプションは、nocacheリミッタに関しては効果がありません。
       デフォルトは、<literal>180</literal>です。
      </simpara>
     </listitem>    
    </itemizedlist>
    <note>
     <para>
      セッション処理機能は、PHP 4.0 でサポートされました。
     </para>
    </note>
   </para>
  </partintro>

  <refentry id="function.session-start">
   <refnamediv>
    <refname>session_start</refname>
    <refpurpose>セッションデータを初期化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_start</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>session_start</function> は、セッションを作成します。
     (もしくは、GET変数またはクッキーにより渡されたセッションIDセッショ
     ンに基づき現在のセッションを復帰します)
    </simpara>
    <simpara>
     この関数は常に &true; を返します。
    </simpara>
    <note>
     <para>
      この関数は、PHP 4.0 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-destroy">
   <refnamediv>
    <refname>session_destroy</refname>
    <refpurpose>セッションに登録されたデータを全て破棄する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_destroy</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>session_destroy</function>は、現在のセッションに
     関連づけられた全てのデータを破棄します。
    </simpara>   
    <simpara>
     この関数は成功時に&true;、失敗時にセッションデータを破棄するために
     &false;を返します。
    </simpara> 
    <note>
     <para>
      この関数は、PHP 4.0で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-name">
   <refnamediv>
    <refname>session_name</refname>
    <refpurpose>現在のセッション名を取得または設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_name</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>name</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_name</function> は、現在のセッション名を返します。
     <parameter>name</parameter> を指定した場合、現在のセッション名は、
     その値に変更されます。
    </para>
    <para>
     セッション名は、クッキーおよびURLのセッションIDを参照します。
     セッション名は、英数字のみで構成されている必要があります。
     また、短く記述的である必要があります。
     (これは、クッキー警告を有効にしているユーザー用です。) 
     リクエストが開始した際にセッション名はデフォルト値でリセットされ、
     <literal>session.name</literal> に保存されます。
     よって、各リクエスト毎に(そして<function>session_start</function>
     または<function>session_register</function> をコールした後に)
     <function>session_name</function> をコールする必要があります。
    </para> 
    <example>
     <title><function>session_name</function>の例</title>
     <programlisting role="php">
&lt;?php

# セッション名をWebsiteIDに設定する
  
$previous_name = session_name("WebsiteID");
  
echo "前回のセッション名は、$previous_name です。&lt;p&gt;";
?&gt;
     </programlisting>
    </example>
    <note>
     <para>
      この関数は、PHP 4.0 で追加されました。
     </para>    
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-module-name">
   <refnamediv>
    <refname>session_module_name</refname>
    <refpurpose>現在のセッションモジュールを取得または設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_module_name</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>module</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_module_name</function> は、現在のセッションモジュール
     の名前を返します。
     <parameter>module</parameter> が指定された場合、そのモジュール
     が変わりに使用されます。
     <note>
      <para>
       この関数は、PHP 4.0 で追加されました。
      </para>    
     </note>
    </para>    
   </refsect1>
  </refentry>

  <refentry id="function.session-save-path">
   <refnamediv>
    <refname>session_save_path</refname>
    <refpurpose>現在のセッションデータ保存パスを取得または設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_save_path</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>path</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_save_path</function> は、現在のセッションデータ保存
     パスを返します。
     <parameter>path</parameter> が指定された場合、データを保存する
     パスが変更されます。
    <note>
     <para>
       いくつかのオペレーションシステムでは、多くの小さなファイルを効率的に
       処理するファイルシステム上にパスを指定することが望ましいです。
       例えば、Linux では ext2fs よりも reiserfs の方が性能面でより
       優れています。
      </para>    
     </note>
     <note>
      <para>
       この関数は、PHP 4.0で追加されました。
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-id">
   <refnamediv>
    <refname>session_id</refname>
    <refpurpose>現在のセッションIDを取得または設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_id</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>id</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_id</function>は、現在のセッションのセッションIDを
     返します。<parameter>id</parameter>が指定された場合、
     現在のセッションIDセッションを置換します。
    </para>    
    <para>
     現在の名前とセッションIDを、URLに追加可能な文字列として取得するために
     定数 <systemitem>SID</systemitem> も使用することが可能です。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-register">
   <refnamediv>
    <refname>session_register</refname>
    <refpurpose>現在のセッションに1つ以上の変数を登録する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_register</function></funcdef>
      <paramdef>mixed <parameter>name</parameter></paramdef>
      <paramdef>mixed
       <parameter>
	<replaceable><optional>...</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_register</function> の引数の数は可変であり、
     各引数は変数名を保持する文字列または変数名からなる配列
     とすることが可能です。
     各変数名が処理される毎に、<function>session_register</function>
     は、その変数名のグローバル変数を現在のセッションに登録します。
    </para>
    <para>
     この関数は、変数のセッションの登録が成功した場合に&true;を
     返します。
     <note>
      <para>
       この関数は、PHP 4.0 で追加されました。
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-unregister">
   <refnamediv>
    <refname>session_unregister</refname>
    <refpurpose>現在のセッションから変数の登録を削除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_unregister</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_unregister</function> は現在のセッションから
     <parameter>name</parameter> という名前のグローバル変数の登録を
     削除します。
    </para>
    <para>
     この関数は、セッションからの変数登録の削除が成功した場合に&true;を
     返します。
     <note>
      <para>
       この関数は、PHP 4.0で追加されました。
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-unset">
   <refnamediv>
    <refname>session_unset</refname>
    <refpurpose>
     全てのセッション変数を開放する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void 
       <function>session_unset</function>
      </funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>session_unset</function>は現在登録されている全ての
     セッション変数を開放します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-is-registered">
   <refnamediv>
    <refname>session_is_registered</refname>
    <refpurpose>
     変数がセッションに登録されているかどうかを調べる
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_is_registered</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_is_registered</function> は、
     <parameter>name</parameter> という名前の変数が現在のセッションに
     登録されている場合に &true; を返します。
     <note>
      <para>
      この関数は、PHP 4.0で追加されました。
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-get-cookie-params">
    <refnamediv>
      <refname>session_get_cookie_params</refname>
      <refpurpose>
        セッションクッキーのパラメータを得る
      </refpurpose>
    </refnamediv>
    <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array 
       <function>session_get_cookie_params</function>
      </funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     関数<function>session_get_cookie_params</function>は、カレントの
     セッションクッキーの情報を配列として返します。
     この配列には次のような項目が含まれています。
     <itemizedlist>
      <listitem>
       <simpara>
	"lifetime" -  クッキーの生存期間(lifetime)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	"path" -  情報が保存されている場所のパス
       </simpara>
      </listitem>
          <listitem>
       <simpara>
	"domain" -  クッキーのドメイン
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-set-cookie-params">
   <refnamediv>
    <refname>session_set_cookie_params</refname>
    <refpurpose>
     セッションクッキーパラメータを設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void 
       <function>session_set_cookie_params</function>
      </funcdef>
      <paramdef>int 
       <parameter>lifetime</parameter>
      </paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>path</optional></replaceable>
       </parameter> 
      </paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>domain</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     ファイルphp.iniで定義されたクッキーパラメータを設定します。
     この関数の効果が持続するのは、スクリプトの実行が終了するまでです。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-decode">
   <refnamediv>
    <refname>session_decode</refname>
    <refpurpose>文字列からセッションデータをデコードする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_decode</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_decode</function> は、
     <parameter>data</parameter> のセッションデータをデコードし、
     セッションに保存する変数を設定します。
     <note>
      <para>
      この関数は、PHP 4.0 で追加されました。
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-encode">
   <refnamediv>
    <refname>session_encode</refname>
    <refpurpose>
     現在のセッションデータを文字列としてエンコードする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_encode</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_encode</function> は、現在のセッションの内容を
     エンコードした文字列を返します．
     <note>
      <para>
       この関数は、PHP 4.0 で追加されました。
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-set-save-handler">
   <refnamediv>
    <refname>session_set_save_handler</refname>
    <refpurpose>
     ユーザ定義のセッション保存関数を設定する
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void
       <function>session_set_save_handler</function>
      </funcdef>
      <paramdef>string
      <parameter>open</parameter></paramdef><paramdef>string
      <parameter>close</parameter></paramdef><paramdef>string
      <parameter>read</parameter></paramdef><paramdef>string
      <parameter>write</parameter></paramdef><paramdef>string
      <parameter>destroy</parameter></paramdef><paramdef>string
      <parameter>gc</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_set_save_handler</function> は、セッションに関
     連するデータを保存および取得するために使用されるユーザ定義のセッ
     ション保存関数を設定します。この関数は、セッションデータをローカ
     ルデータベースに保存する場合のようにPHPセッションにより提供される
     もの以外の保存方法を使用したい場合に有用です。
    </para>
    <note>
     <para>
      <function>session_set_save_handler</function>の設定を有効にする
      には、php.ini ファイルの
      <parameter>session.save_handler</parameter>に
      <parameter>user</parameter>を設定する必要があります。
     </para>
    </note>
    <note>
     <para>
      "write" ハンドラは、出力ストリームがクローズされるまでは実行され
      ません。つまり、"write"ハンドラにおけるデバッグ用出力はブラウザ
      側では見ることができません。デバッグ用の出力が必要な場合は、代わ
      りにデバッグ出力をファイルに書き込むことを推奨します。
     </para>
    </note>
    <para>
     以下の例では、デフォルトの保存<parameter>files</parameter>に似た
     ファイルベースのセッション保存を行います。この例は、PHPがサポート
     する任意のデータベースエンジンを用いてデータベースへの保存を行う
     ように容易に拡張可能です。
    </para>
    <para>
     <example>
      <title>
       <function>session_set_save_handler</function>の例
      </title>
      <programlisting role="php">
&lt;?php

function open ($save_path, $session_name) {
  global $sess_save_path, $sess_session_name;
       
  $sess_save_path = $save_path;
  $sess_session_name = $session_name;
  return(true);
}

function close() {
  return(true);
}

function read ($id) {
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "r")) {
    $sess_data = fread($fp, filesize($sess_file));
    return($sess_data);
  } else {
    return("");
  }

}

function write ($id, $sess_data) {
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    return(fwrite($fp, $sess_data));
  } else {
    return(false);
  }

}

function destroy ($id) {
  global $sess_save_path, $sess_session_name;
       
  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

/*********************************************
 * WARNING - You will need to implement some *
 * sort of garbage collection routine here.  *
 *********************************************/
function gc ($maxlifetime) {
  return true;
}

session_set_save_handler ("open", "close", "read", "write", "destroy", "gc");

session_start();

// 通常と同様にセッションを使用します。

?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-cache-limiter">
   <refnamediv>
    <refname>session_cache_limiter</refname>
    <refpurpose>カレントのキャッシュリミッタを取得または設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_cache_limiter</function></funcdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>cache_limiter</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_cache_limiter</function> は、カレントのキャッシュ
     リミッタの名前を返します。<parameter>cache_limiter</parameter>が
     指定された場合、カレントのキャッシュリミッタは新しい値に変更され
     ます。
    </para>
    <para>
     キャッシュリミッタは、クライアントに送信されるキャッシュ制御用の
     HTTPヘッダを制御します。これらのヘッダは、ぺーじの内容をキャッシュ
     する規則を定義します。例えば、キャッシュリミッタを
     <literal>nocache</literal>に設定した場合、クライアント側のキャッ
     シュは無効になります。しかし、<literal>public</literal>の場合は、
     キャッシュを許可します。<literal>private</literal>と設定すること
     も可能で、この場合、<literal>public</literal>よりもやや制限が厳し
     くなります。
    </para>
    <para>
     キャッシュリミッタは、リクエストによる起動時に
     <literal>session.cache_limiter</literal>に保存されたデフォルト値
     にリセットされます。つまり、各リクエスト毎に
     (<function>session_start</function>がコールされた後に)
     <function>session_cache_limiter</function>をコールする必要があり
     ます。
    </para>
    <example>
     <title><function>session_cache_limiter</function>の例</title>
     <programlisting role="php">
&lt;?php

# キャッシュリミッタを'private'に設定する

session_cache_limiter('private');
$cache_limiter = session_cache_limiter();

echo "The cache limiter is now set to $cache_limiter&lt;p&gt;";
?&gt;
     </programlisting>
    </example>
    <note>
     <para>
      この関数は、PHP 4.0.3で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-write-close">
   <refnamediv>
    <refname>session_write_close</refname>
    <refpurpose>セッションデータを書き込んでセッションを終了する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>session_write_close</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     End the current session and store session data.
    </para>
    <para>
     Session data is usually stored after your script terminated
     without the need to call <function>session_write_close</function>, but as
     session data is locked to prevent concurrent writes only one
     script may operate on a session at any time. When using framesets
     together with sessions you will experience the frames loading one
     by one due to this locking. You can reduce the time needed to
     load all the frames by ending the session as soon as all changes
     to session variables are done.
    </para>
<!-- commented out until final decision on implementation
    <para>
     See also: <function>session_readonly</function>.
    </para>
-->
   </refsect1>
  </refentry>

<!-- commented out until final decision on implementation
  <refentry id="function.session-readonly">
   <refnamediv>
    <refname>session_readonly</refname>
    <refpurpose>Begin session - reinitializes freezed variables, but no writeback on request end</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>session_readonly</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Read in session data without locking the session data. Changing
     session data is not possible, but frameset performance will be improved.
    </para>
   </refsect1>
  </refentry>
-->
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
