 <reference id="ref.misc">
  <title>その他の関数</title>
  <titleabbrev>その他</titleabbrev>

  <partintro>
   <para>
   他のカテゴリには当てはまらない関数群を、こちらに収録しています。</para>
  </partintro>

  <refentry id="function.connection-aborted">
   <refnamediv>
    <refname>connection_aborted</refname>
    <refpurpose>クライアントとの接続が断となった場合に TRUE を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>connection_aborted</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
    クライアントとの接続が断となった場合に true を返します。
    詳細な説明に関しては、<link linkend="features">機能 </link>に関する章の
    <link linkend="features.connection-handling">接続処理</link>
    に関する記述を参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-status">
   <refnamediv>
    <refname>connection_status</refname>
    <refpurpose>接続ステータスのビットフィールドを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>connection_status</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
    接続ステータスのビットフィールドを返します。
    詳細な説明に関しては、<link linkend="features">機能 </link>に関する章の
    <link linkend="features.connection-handling">接続処理</link>
    に関する記述を参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-timeout">
   <refnamediv>
    <refname>connection_timeout</refname>
    <refpurpose>スクリプトがタイムアウトした場合に TRUE を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>connection_timeout</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
    スクリプトがタイムアウトした場合に true を返します。
    詳細な説明に関しては、<link linkend="features">機能 </link>に関する章の
    <link linkend="features.connection-handling">接続処理</link>
    に関する記述を参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.define">
   <refnamediv>
	<refname>define</refname>
	<refpurpose>名前を指定して定数を定義する</refpurpose>
   </refnamediv>
   <refsect1>
	<title>説明</title>
	<funcsynopsis>
	 <funcdef>int <function>define</function></funcdef>
	 <paramdef>string <parameter>name</parameter></paramdef>
	 <paramdef>mixed <parameter>value</parameter></paramdef>
	 <paramdef>int <parameter><optional>case_insensitive</optional></parameter></paramdef>
	</funcsynopsis>
	
	<para>
	 名前を指定して定数を定義します。定数は、以下の点以外は変数と同じです。
	 <itemizedlist>
	  <listitem>
	   <simpara>
	        定数には、名前の前にドル記号 '$' がありません。
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
	        定数は、変数スコープの規則によらずアクセスすることが可能です。
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
	        定数は、一度設定されると再定義したり、定義を消去することはできません。
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
	        定数はスカラー値としてのみ評価されます。
	   </simpara>
	  </listitem>
	 </itemizedlist></para>

	<para>
	 定数の名前は <parameter>name</parameter> により指定され、
	 値は <parameter>value</parameter> により指定されます。</para>

	<para>
	 オプションの第3のパラメータ <parameter>case_insensitive</parameter>
	 も使用可能です。値 <emphasis>1</emphasis> が指定された場合、
	 定数は大文字小文字を区別しなくなります。
	 デフォルトの動作は、大文字小文字を区別します。例えば、
	 CONSTANT と Constant は異なった値を表します。</para>

	<para>
	 <example>
	  <title>定数の定義</title>
	  <programlisting>
&lt;?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // outputs "Hello world."
?&gt;
	  </programlisting>
	 </example></para>

	<para>
	 <function>define</function> は成功時に TRUE、エラー発生時に FALSE を
	 返します。</para>

	<para>
	 <function>defined</function> および <link
	  linkend="language.constants">定数</link> の節も参照下さい。</para>

   </refsect1>
  </refentry>

  <refentry id="function.defined">
   <refnamediv>
	<refname>defined</refname>
	<refpurpose>指定した名前の定数が存在するかどうかを調べる</refpurpose>
   </refnamediv>
   <refsect1>
	<title>説明</title>
	<funcsynopsis>
	 <funcdef>int <function>defined</function></funcdef>
	 <paramdef>string <parameter>name</parameter></paramdef>
	</funcsynopsis>

	<para>
	<parameter>name</parameter> で指定した名前の定数が定義されている場合に
	TRUE、その他の場合に false を返します。</para>

	<para>
	<function>define</function> および <link
	  linkend="language.constants">定数</link> の節も参照下さい。</para>

   </refsect1>
  </refentry>


   <refentry id="function.die">
    <refnamediv>
     <refname>die</refname>
     <refpurpose>メッセージを出力し、現在のスクリプトを終了する</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>void <function>die</function></funcdef>
      <paramdef>string <parameter>message</parameter></paramdef>
     </funcsynopsis>
     <simpara>
     この言語構造は、メッセージを出力し、スクリプトの処理を終了します。
     この関数は、リターンを行いません。</simpara>
     <para>
      <example>
       <title>die の例</title>
       <programlisting>
 &lt;?php
 $filename = '/path/to/data-file';
 $file = fopen($filename, 'r')
   or die "ファイルunable to open file ($filename)";
 ?&gt;
       </programlisting>
      </example></para>
    </refsect1>
   </refentry>
 
   <refentry id="function.eval">
    <refnamediv>
     <refname>eval</refname>
     <refpurpose>文字列を PHP コードとして評価する</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>void <function>eval</function></funcdef>
      <paramdef>string <parameter>code_str</parameter></paramdef>
     </funcsynopsis>
     
     <simpara>
      <function>eval</function> は、<parameter>code_str</parameter> 
      で与えられた文字列を PHP コードとして評価します。
      中でも、データベースのテキストフィールドにコードを保存し、
      後で実行するためには便利です。</simpara>
 
     <simpara>
      <function>eval</function> を使用する際、注意するべき点が
      いくつかあります。
      パーサーが <function>eval</function> の処理中に落ちないように、
      渡す文字列はセミコロンで文が終了するといった
      有効な PHP コードである必要があります。
      また、<parameter>code_str</parameter> の
      中の文字を適切にエスケープする必要があります。</simpara>
 
     <simpara>
      <function>eval</function> の中で値を与えた変数は、
      この後、メインスクリプトの中でもこれらの値を維持することも
      覚えておいて下さい。</simpara>
 
     <para>
      <example>
       <title>eval() の例 - 簡単なテキストのマージ</title>
       <programlisting>
 &lt;?php
 $string = 'cup';
 $name = 'coffee';
 $str = 'This is a $string with my $name in it.&lt;br&gt;';
 echo $str;
 eval( "\$str = \"$str\";" );
 echo $str;
 ?&gt;
       </programlisting>
      </example></para>
 
     <para>
     上の例は、以下を表示します。
       <programlisting>
 This is a $string with my $name in it.
 This is a cup with my coffee in it.
       </programlisting></para>
 
    </refsect1>
   </refentry>

   <refentry id="function.exit">
    <refnamediv>
     <refname>exit</refname>
     <refpurpose>現在のスクリプトを終了します</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>void <function>exit</function></funcdef>
      <void/>
     </funcsynopsis>
     <simpara>
     この言語構造は、スクリプトの処理を終了します。
     この関数は、値を返しません。</simpara>
   </refsect1>
  </refentry> 

   <refentry id="function.func-get-arg">
    <refnamediv>
     <refname>func_get_arg</refname>
     <refpurpose>引数のリストから要素を1つ返す</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>int <function>func_get_arg</function></funcdef>
      <paramdef>int <parameter>arg_num</parameter></paramdef>
     </funcsynopsis>
     <simpara>
	 ユーザーが定義した関数の引数リストで
         <parameter>arg_num</parameter>番目の引数を
	 返します。関数の引数はゼロから数えられます。
	 <function>func_get_arg</function> は関数定義以外の場所で
	 コールされた場合に警告を発生します。
     </simpara>
 
 	<simpara>
 	 <parameter>arg_num</parameter> が実際に渡された引数の数よりも大きい場合、
	 警告を発生し、<function>func_get_arg</function>はFALSEを返します。
 	</simpara>
 
 	<para>
 	 <informalexample>
       <programlisting>
 &lt;?php
 function foo() {
    $numargs = func_num_args();
    echo "Number of arguments: $numargs&lt;br&gt;\n";
    if ( $numargs &gt;= 2 ) {
       echo "Second argument is: " . func_get_arg( 1 ) . "&lt;br&gt;\n";
    }
 } 
 
 foo( 1, 2, 3 );
 ?&gt;
 	  </programlisting>
 	 </informalexample>
 	</para>
 
 	<simpara>
 	 <function>func_get_arg</function> may be used in conjunction
 	 with <function>func_num_args</function> and
 	 <function>func_get_args</function> to allow user-defined
 	 functions to accept variable-length argument lists.
 	</simpara>
 
 	<note>
 	 <simpara>
 	  This function was added in PHP 4.
 	 </simpara>
 	</note>
 
    </refsect1>
   </refentry>
 
   <refentry id="function.func-get-args">
    <refnamediv>
     <refname>func_get_args</refname>
     <refpurpose>Returns an array comprising a function's argument list.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>int <function>func_get_args</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcsynopsis>
     <simpara>
 	 Returns an array in which each element is the corresponding
 	 member of the current user-defined function's argument
 	 list. <function>func_get_args</function> will generate a warning
 	 if called from outside of a function definition.
     </simpara>
 
     <para>
      <informalexample>
       <programlisting>
 &lt;?php
 function foo() {
    $numargs = func_num_args();
    echo "Number of arguments: $numargs&lt;br&gt;\n";
    if ( $numargs &gt;= 2 ) {
       echo "Second argument is: " . func_get_arg( 1 ) . "&lt;br&gt;\n";
    }
    $arg_list = func_get_args();
    for ( $i = 0; $i &lt; $numargs; $i++ ) {
       echo "Argument $i is: " . $arg_list[$i] . "&lt;br&gt;\n";
    }
 } 
 
 foo( 1, 2, 3 );
 ?&gt;
 	  </programlisting>
 	 </informalexample>
 	</para>
 
 	<simpara>
 	 <function>func_get_args</function> may be used in conjunction
 	 with <function>func_num_args</function> and
 	 <function>func_get_arg</function> to allow user-defined functions
 	 to accept variable-length argument lists.
 	</simpara>
 
 	<note>
 	 <simpara>
 	  This function was added in PHP 4.
 	 </simpara>
 	</note>
 
    </refsect1>
   </refentry>
 
   <refentry id="function.func-num-args">
    <refnamediv>
     <refname>func_num_args</refname>
     <refpurpose>Returns the number of arguments passed to the function.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>int <function>func_num_args</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcsynopsis>
     <simpara>
 	 Returns the number of arguments passed into the current
 	 user-defined function. <function>func_num_args</function> will
 	 generate a warning if called from outside of a function
 	 definition. 
     </simpara>
 
 	<para>
 	 <informalexample>
 	  <programlisting>
 &lt;?php
 function foo() {
    $numargs = func_num_args();
    echo "Number of arguments: $numargs\n";
 } 
 
 foo( 1, 2, 3 );  // Prints 'Number of arguments: 3'
 ?&gt;
 	  </programlisting>
 	 </informalexample>
 	</para>
 
 	<simpara>
 	 <function>func_num_args</function> may be used in conjunction
 	 with <function>func_get_arg</function> and
 	 <function>func_get_args</function> to allow user-defined
 	 functions to accept variable-length argument lists.
 	</simpara>
 
 	<note>
 	 <simpara>
 	  This function was added in PHP 4.
 	 </simpara>
 	</note>
 
    </refsect1>
   </refentry>
 
  <refentry id="function.function-exists">
   <refnamediv>
    <refname>function_exists</refname>
    <refpurpose>指定した関数が定義されている場合に TRUE を返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>function_exists</function></funcdef>
     <paramdef>string <parameter>function_name</parameter></paramdef>
    </funcsynopsis>
    <simpara>
    
     <parameter>function_name</parameter> について定義された関数のリストを
     確認します。指定した関数名がある場合に TRUE、他の場合に FALSE を返します。
    </simpara>
   </refsect1>
  </refentry>

 
  <refentry id="function.get-browser">
   <refnamediv>
	<refname>get_browser</refname>
	<refpurpose>ユーザのブラウザの機能を取得する</refpurpose>
   </refnamediv>
   <refsect1>
	<title>説明</title>
	<funcsynopsis>
	 <funcdef>object <function>get_browser</function></funcdef>
	 <paramdef>string <parameter><optional>user_agent</optional></parameter></paramdef>
	</funcsynopsis>

	<simpara>
	 <function>get_browser</function> は、ユーザーのブラウザの機能を
	 定義します。これは、<filename>browscap.ini</filename> ファイルの
	 ブラウザ情報を調べることにより行います。
	 デフォルトでは、$HTTP_USER_AGENT の値が使用されます。しかし、
	 オプションの <parameter>user_agent</parameter> パラメータを
	 <function>get_browser</function> に渡すことにより、
	 これを変える(すなわち、他のブラウザの情報を調べる)ことが可能です。
	</simpara>

	<simpara>
	 返される情報はオブジェクトであり、例えば、ブラウザのメジャーおよび
	 マイナーバージョン暗号やID文字列、
	 といった様々なデータ要素を含んでいます。
	 フレーム、JavaScript、クッキー等のような機能に
	 関する true/false の値、
	 マイナーバージョン暗号やID文字列、
	 といった様々なデータ要素を含んでいます。
	</simpara>

	<simpara>
	 <filename>browscap.ini</filename> は多くのブラウザに関する情報を
	 有していますが、データベースを最新に保つのはユーザーによる更新
	 に依存しています。
	 ファイルのフォーマット自体を見ればおおよそのことがわかります。
	</simpara>

	<para>
	 次の例では、ユーザーのブラウザに関する全ての取得可能な情報
	 の一覧を作成する手法に関するものです。

	 <example>
	  <title><function>get_browser</function> の例</title>
	  <programlisting>
&lt;?php
function list_array( $array ) {
   while ( list( $key, $value ) = each( $array ) ) {
	  $str .= "&lt;b&gt;$key:&lt;/b&gt; $value&lt;br&gt;\n";
   }
   return $str;
}
echo "$HTTP_USER_AGENT&lt;hr&gt;\n";
$browser = get_browser();
echo list_array( (array) $browser );
?&gt;
	  </programlisting>
	 </example>
	</para>

	<simpara>
	 上のスクリプトの出力は、次のようになります。
	</simpara>
	
	<programlisting>
Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)&lt;hr&gt;
&lt;b&gt;browser_name_pattern:&lt;/b&gt; Mozilla/4\.5.*&lt;br&gt;
&lt;b&gt;parent:&lt;/b&gt; Netscape 4.0&lt;br&gt;
&lt;b&gt;platform:&lt;/b&gt; Unknown&lt;br&gt;
&lt;b&gt;majorver:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;minorver:&lt;/b&gt; 5&lt;br&gt;
&lt;b&gt;browser:&lt;/b&gt; Netscape&lt;br&gt;
&lt;b&gt;version:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;frames:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;tables:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;cookies:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;backgroundsounds:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;vbscript:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;javascript:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;javaapplets:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;activexcontrols:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;beta:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;crawler:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;authenticodeupdate:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;msn:&lt;/b&gt; &lt;br&gt;
	</programlisting>

	<simpara>
	 これを動作させるためには、設定ファイルの <link
	 linkend="ini.sect.browscap">browscap</link> を正しく
	 <filename>browscap.ini</filename> の場所に設定しておく必要があります。
	</simpara>

	<simpara>
	 (<filename>browscap.ini</filename> ファイルを取得できる場所を含む)
	 より詳細な情報については、<ulink
	  url="&url.php.faq;">http://www.php.net/FAQ.html</ulink> にある
	  PHP FAQ を参照下さい。
	</simpara>

	<note>
	 <simpara>
	  browscap サポートは、PHP バージョン 4.0b2 で追加されました。
	 </simpara>
	</note>

   </refsect1>
  </refentry>


  <refentry id="function.ignore-user-abort">
   <refnamediv>
    <refname>ignore_user_abort</refname>
    <refpurpose>クライアントによる接続断を生じた場合にスクリプトの実行中断を
    行うかどうかを設定する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>ignore_user_abort</function></funcdef>
     <paramdef>int <parameter><optional>setting</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
    この関数は、クライアントとの接続断がスクリプトの実行中断を引き起こすか
    どうかを設定します。この関数は前の設定を返し、
    現在の設定を変えずに現在の設定を返すためだけのために
    引数なしでコールすることが可能です。
    PHP における接続処理の詳細な説明に関しては、
    機能の章の接続処理の節を参照下さい。
    </simpara>
    </refsect1>
   </refentry>
 
   <refentry id="function.iptcparse">
    <refnamediv>
     <refname>iptcparse</refname>
     <refpurpose>バイナリ IPTC <ulink url="http://www.xe.net/iptc/">
 	  http://www.xe.net/iptc/</ulink> ブロックを処理しシングルタグにする</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>array <function>iptcparse</function></funcdef>
      <paramdef>string <parameter>iptcblock</parameter></paramdef>
     </funcsynopsis>
     <simpara>
     この関数は、バイナリ IPTC ブロックを処理し、シングルタグにします。
     tagmaker をインデックス、value を値とした配列を返します。
     エラーの場合または IPTC データが見つからない場合、FALSE を返します。
     例として、<function>GetImageSize</function> を参照下さい。</simpara>
    </refsect1>
   </refentry>
 
   <refentry id="function.leak">
    <refnamediv>
     <refname>leak</refname>
     <refpurpose>メモリーをリークする</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>void <function>leak</function></funcdef>
      <paramdef>int <parameter>bytes</parameter></paramdef>
     </funcsynopsis>
     <simpara>
      <function>Leak</function> は、
     指定した量のメモリーをリークします。</simpara>
     <simpara>
     この関数は、
     各リクエストが完了した時に "リークした" メモリーを自動的に
     取り除くメモリーマネージャをデバッグする際に便利です。</simpara>
    </refsect1>
   </refentry>
 
   <refentry id="function.pack">
    <refnamediv>
     <refname>pack</refname>
     <refpurpose>データをバイナリ文字列にパックします</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>string <function>pack</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>mixed <parameter><optional>args</optional></parameter>...</paramdef>
     </funcsynopsis>
     <para>
     指定された引数を <parameter>format</parameter> に基づいて
     バイナリ文字列にパックします。
     データを含むバイナリ文字列を返します。</para>
 
     <para>
     この関数の発想は、Perl からのものであり、
     フォーマット指定用コードは、Perl と全く同様に動作します。
     フォーマット文字列は、フォーマットコードの後にオプションの
     反復指定用引数が続いている形式となっています。
     反復指定用引数は、整数値または入力データの最後まで反復を指定する
      * のどちらかを指定することができます。 
      
      a, A, h, H の場合、反復数はそのデータ引数が取得する文字の数
      を指定します。
      反復数が @ の場合、次のデータを置く場所の絶対位置を表します。
      その他の場合、反復数はデータ引数が使われる数を指定し、
      結果のバイナリ文字列にパックされます。
      現在、実装されているものを以下に示します。
      <itemizedlist>
       <listitem><simpara>a NUL で埋めた文字列</simpara></listitem>
       <listitem><simpara>A 空白で埋めた文字列</simpara></listitem>
       <listitem><simpara>h 16進文字列, 下位バイトが先</simpara></listitem>
       <listitem><simpara>H 16進文字列, 上位バイトが先</simpara></listitem>
       <listitem><simpara>c signed char</simpara></listitem>
       <listitem><simpara>C unsigned char</simpara></listitem>
       <listitem><simpara>s signed short (常に 16 ビット、マシンバイトオーダー)</simpara></listitem>
       <listitem><simpara>S unsigned short (常に 16 ビット、マシンバイトオーダー)</simpara></listitem>
       <listitem><simpara>n unsigned short (常に 16 ビット、ビッグインディアンバイトオーダー)</simpara></listitem>
       <listitem><simpara>v unsigned short (常に 16 ビット、リトルインディアンオーダー)</simpara></listitem>
       <listitem><simpara>i signed integer (サイズおよびバイトオーダーはマシンに依存)</simpara></listitem>
       <listitem><simpara>I unsigned integer (サイズおよびバイトオーダーはマシンに依存)</simpara></listitem>
       <listitem><simpara>l signed long (常に 32 ビット、マシンバイトオーダー)</simpara></listitem>
       <listitem><simpara>L unsigned long (常に 32 ビット、マシンバイトオーダー)</simpara></listitem>
       <listitem><simpara>N unsigned long (常に 32 ビット、ビッグインディアンバイトオーダー)</simpara></listitem>
       <listitem><simpara>V unsigned long (常に 32 ビット、リトルインディアンバイトオーダー)</simpara></listitem>
       <listitem><simpara>f float (サイズおよび表現はマシン依存)</simpara></listitem>
       <listitem><simpara>d double (サイズおよび表現はマシン依存)</simpara></listitem>
       <listitem><simpara>x NUL バイト</simpara></listitem>
       <listitem><simpara>X 1バイト戻る</simpara></listitem>
       <listitem><simpara>@ 絶対位置まで NUL で埋める</simpara></listitem>
      </itemizedlist>
 
      <example>
       <title>フォーマット文字列のパック</title>
       <programlisting role="php">
 $binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
 </programlisting>
       <para>
       この結果のバイナリ文字列は、 6 バイト長であり、
       バイト列 0x12, 0x34, 0x78, 0x56, 0x41, 0x42 
       となります。</para>
      </example></para>
 
     <para>
     符号付及び符号無しの区別は関数 <function>unpack</function> 
     にのみ影響を与え、
     関数 <function>pack</function> は符号付及び符号無しのフォーマットコード
     に関して同じ結果を与えるということに注意して下さい。</para>
 
     <para>
     PHP は内部的に値をマシン依存の大きさの符号付の値として保持する
     ことにも注意して下さい。
     このように保持するには大きすぎる符号無しの値を与えた場合、
     倍精度実数に変換する際にしばしば期待外れの結果となります。</para>
 
    </refsect1>
   </refentry>
 
   <refentry id="function.register-shutdown-function">
   <refnamediv>
    <refname>register_shutdown_function</refname>
    <refpurpose>シャットダウン時に実行する関数を登録する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>int <function>register_shutdown_function</function></funcdef>
     <paramdef>string <parameter>func</parameter></paramdef>
    </funcsynopsis>
    <simpara>
    スクリプト処理が完了した際に実行される <parameter>func</parameter> 
    という名前の関数を登録します。</simpara>
   <para>
     陥りやすいミス:</para>
   <simpara>
   この関数ではブラウザへの出力は許可されないので、
   print または echo のような文を使用してデバッグを行うことはできません。</simpara>
   </refsect1>
  </refentry>
 
   <refentry id="function.serialize">
    <refnamediv>
     <refname>serialize</refname>
     <refpurpose>値の保存可能な表現を生成する</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>string <function>serialize</function></funcdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcsynopsis>
     <simpara>
      <function>serialize</function> は、<parameter>value</parameter> の
      保存可能なバイトストリーム表現を含む文字列を返します。</simpara>
     <simpara>
     型や構造を失わずに PHP の値を保存または渡す際に有効です。</simpara>
     <simpara>
     シリアル化された文字列を PHP の値に戻すには、
      <function>unserialize</function> を使用して下さい。
      <function>serialize</function> は型 <type>integer</type>, 
      <type>double</type>,<type>string</type>, <type>array</type> 
      (多次元),<type>object</type> 
      (オブジェクトプロパティはシリアル化されますが、メソッドは失われます
      ) に対応します。</simpara>
     <para>
      <example>
       <title>シリアル化の例</title>
       <programlisting role="php">
 // $session_data はカレントユーザーのセッション情報を含む多次元配列を
 // 保持しています。リクエストの最後にこれをデータベースに保存するために
 //  serialize() を使用します。
 
 $conn = odbc_connect("webdb", "php", "chicken");
 $stmt = odbc_prepare($conn,
                      "UPDATE sessions SET data = ? WHERE id = ?");
 $sqldata = array(serialize($session_data), $PHP_AUTH_USER);
 if (!odbc_execute($stmt, &$sqldata)) {
     $stmt = odbc_prepare($conn,
                          "INSERT INTO sessions (id, data) VALUES(?, ?)");
     if (!odbc_execute($stmt, &$sqldata)) {
         /* 何か問題があったようです。Bitch, whine and moan. */
     }
 }
 </programlisting>
      </example></para>
    </refsect1>
   </refentry>
 
  <refentry id="function.sleep">
   <refnamediv>
    <refname>sleep</refname>
    <refpurpose>実行を遅延させる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>void <function>sleep</function></funcdef>
     <paramdef>int <parameter>seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
    sleep 関数は、<parameter>seconds</parameter> で与えられた秒数分
    プログラムの実行を遅延させます。</simpara>
    <simpara>
    <function>usleep</function> も参照のこと。</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>ユニークな ID を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>string <function>uniqid</function></funcdef>
     <paramdef>string <parameter>prefix</parameter></paramdef>
     <paramdef>boolean <parameter><optional>lcg</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
    <function>uniqid</function> は、ミリ秒単位の現在時刻に基づき
    先頭辞（prefix）を付けたユニークな ID を返します。
    いくつかのホスト上で同時に ID を生成させる場合、
    全く同じミリ秒の ID が生成されるのを防ぐのに prefix が有用です。
    <parameter>prefix</parameter>には
    114 文字までの長さを指定することができます。
    </simpara>
    <simpara>
     オプションの <parameter>lcg</parameter> パラメータが true の場合、
     <function>uniqid</function> は、より結果をユニークにするために
     "combined LCG" を返り値の最後に追加します。
    </simpara>
     <simpara>
     <parameter>prefix</parameter> を空とした場合、返される文字列の長さは、
     13文字となります。<parameter>lcg</parameter> が true の場合は、
     23文字となります。
    </simpara>

    <note>
	 <simpara>
	  <parameter>lcg</parameter> パラメータは、
	  PHP 4 または PHP 3.0.13 以降でのみ使用可能です。
	 </simpara>
    </note>

    <para>
     ユニークな ID またはトークンが必要な場合、そして、
     ネットワーク経由でユーザーにそのトークンを渡そうとする場合、
     次の例のようにするのが推奨されます。
      <informalexample><programlisting>
 $token = md5(uniqid("")); // ランダム要素なし
 $better_token = md5(uniqid(rand())); // 推測が困難であり、より優れている。
 </programlisting></informalexample></para>
     <simpara>
     この例は、極めて予測困難な 32 文字の ID (128 ビット 16 進数) を
     作成します。</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unpack">
   <refnamediv>
    <refname>unpack</refname>
    <refpurpose>バイナリ文字列からデータを切出します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
      <funcdef>array <function>unpack</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcsynopsis>
     <para>
      <parameter>format</parameter> に基づきバイナリ文字列から
      配列に切出します。バイナリ文字列の切出された要素を保持する配列を
      返します。</para>
 
     <para>
     Unpack の動作は Perl とわずかに異なり、切出されたデータは連想配列に
     保存されます。
     実行する際には、          
     別のフォーマットコードとし、スラッシュ / で区切る必要があります。
 
      <example>
       <title>フォーマット文字列の切出し</title>
       <programlisting role="php">
 $array = unpack("c2chars/nint", $binarydata);
 </programlisting>
       <para>
       結果の配列は、エントリ "chars1","chars2","int" を保持します。</para>
      </example></para>
 
     <para>
     フォーマットコードに関する説明は、
      <function>pack</function> も参照下さい。</para>
 
     <para>
     PHP は内部的に整数を符号付で保持します。
     大きな値の unsigned long を切出した場合、PHP の内部で保持された値は、
     同じ大きさの符号付き整数となり、符号無しを指定して切出された場合でも
     結果は負の数となります。</para>
 
    </refsect1>
   </refentry>
 
   <refentry id="function.unserialize">
    <refnamediv>
     <refname>unserialize</refname>
     <refpurpose>保存用表現から PHP の値を生成する</refpurpose>
    </refnamediv>
    <refsect1>
     <title>説明</title>
     <funcsynopsis>
      <funcdef>mixed <function>unserialize</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      </funcsynopsis>
      <simpara>
      <function>unserialize</function> は、シリアル化された変数
      (<function>serialize</function> を参照) をとり、PHP 変数値に
      戻す変換を行います。
      変換された値が返されます。その値は、
      <type>integer</type>, <type>double</type>,
      <type>string</type>, <type>array</type> , <type>object</type>
      とすることが可能です。
      オブジェクトがシリアル化された場合、
      返り値にそのメソッドは保存されていません。</simpara>
     <para>
      <example>
       <title>unserialize の例</title>
       <programlisting role="php">
 // ここで、データベースから $session_data にセッションデータをロード 
 // するために unserialize() を使用します。
 // この例は、<function>serialize</function> で記述された例を補足するものです。
 
 $conn = odbc_connect("webdb", "php", "chicken");
 $stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
 $sqldata = array($PHP_AUTH_USER);
 if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
     // 実行または取得が失敗した場合、空の配列で初期化します
     $session_data = array();
 } else {
     // $tmp[0] にシリアル化されたデータを保持している必要があります。
     $session_data = unserialize($tmp[0]);
     if (!is_array($session_data)) {
         // 何か問題があったため、空の配列で初期化します。
         $session_data = array();
     }
 }
 </programlisting>
      </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.usleep">
   <refnamediv>
    <refname>usleep</refname>
    <refpurpose>マイクロ秒単位で実行を遅延する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcdef>void <function>usleep</function></funcdef>
     <paramdef>int <parameter>micro_seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
    
    usleep 関数は、
    指定した <parameter>micro_seconds</parameter> の時間だけ
    プログラムの実行を遅延させます。</simpara>
    <simpara>
    <function>sleep</function> も参照下さい。</simpara>
   </refsect1>
  </refentry>

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
