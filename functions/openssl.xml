 <reference id="ref.openssl">
  <title>OpenSSL 関数</title>
  <titleabbrev>OpenSSL</titleabbrev>
  <partintro>
   &warn.experimental;
   <sect1 id="openssl.intro">
    <title>導入</title>
    <para>
     このモジュールは、署名の生成および認証、そして、データのシール
     (暗号化)およびオープン(復号化)を行うために、
     <ulink url="&url.openssl;">OpenSSL</ulink> の関数を使用します。こ
     のモジュールでは、PHP 4.0.4pl1 は、OpenSSL >= 0.9.6 を必要としま
     すが、PHP-4.0.5以降では、OpenSSL &gt;= 0.9.5 でも動作します。
    </para>
    <note>
     <para>
      この拡張モジュールはまだ実験的なものであることに注意して下さい!
     </para>
    </note>
    <para>
     OpenSSL は多くの機能を提供しますが、これらはまだこのモジュールでは
     サポートされていません。
    </para>
   </sect1>
   <sect1 id="openssl.certparams">
    <title>キー/証明書パラメータ</title>
    <para>
     OpenSSL関数のうちごく小数のみがキーまたは証明書パラメータを必要と
     します。PHP 4.0.5 より以前では、openssl_get_xxx 関数のどれかによ
     り返されたキーまたは証明書リソースを使用する必要がありました。こ
     れより後のバージョンでは、次の方法のどれかを使用することが可能と
     なる予定です。
     <itemizedlist>
      <listitem>
       <para>
	証明書
	<orderedlist>
	 <listitem>
	  <simpara>
	   openssl_x509_read から返された X.509リソース
	  </simpara>
	 </listitem>
	 <listitem>
	  <simpara>
	   <filename>file://path/to/cert.pem</filename> 形式の文字列。
	   このファイルは、PEMエンコードの証明書である必要があります。
	  </simpara>
	 </listitem>
	 <listitem>
	  <simpara>
	   PEMエンコードされた証明書の内容を含む文字列。
	  </simpara>
	 </listitem>
	</orderedlist>
       </para>
      </listitem>
      <listitem>
       <para>
	公開/秘密キー
	<orderedlist>
	 <listitem>
	  <simpara>
	   <function>openssl_get_publickey</function> または
	   <function>openssl_get_privatekey</function> から返されたキー
	   リソース
	  </simpara>
	 </listitem>
	 <listitem>
	  <simpara>
	   公開キーのみ: X.509リソース
	  </simpara>
	 </listitem>
	 <listitem>
	  <simpara>
	   <filename>file://path/to/file.pem</filename> フォーマットを
	   有する文字列。このファイルには、PEMエンコードされた証明書/
	   秘密キーが含まれている必要があります。(両方を含むことも可能
	   です。)
	  </simpara>
	 </listitem>
	 <listitem>
	  <simpara>
	   PEMエンコードされた証明書/キーの内容を含む文字列
	  </simpara>
	 </listitem>
	 <listitem>
	  <simpara>
	   秘密キーについては、<emphasis>array($key,
	   $passphrase)</emphasis> という構文を使用することも可能です。
	   ただし、$key は、file:// または上記のテキスト表現形式を使用
	   して指定したキー、$passphrase はその秘密キーに関するパスワー
	   ドを有する文字列を表します。
	  </simpara>
	 </listitem>
	</orderedlist>
       </para> 
      </listitem>
     </itemizedlist>
    </para>
   </sect1>

   <sect1 id="openssl.cert.verification">
    <title>証明書の認証</title>
    <para>
     サイン/証明書を認証する関数をコールする際、
     <emphasis>cainfo</emphasis> パラメータは、ファイルと認証済みのCA
     ファイルの場所を指定するファイルディレクトリ名を含む配列です。
     ディレクトリが指定された場合、<command>openssl</command>コマンド
     が使用できるような正しい形式にハッシュされたディレクトリである必
     要があります。
    </para>
   </sect1> 
   <sect1 id="openssl.pkcs7.flags">
    <title>PKCS7 フラグ/定数</title>
    <para>
     S/MIME 関数はビットフィールドを使用して指定したフラグを使用します。
     このビットフィールドには、以下の値を一つ以上含むことが可能です。

     <table>
     <title>PKCS7 定数</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>定数</entry>
         <entry>説明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>PKCS7_TEXT</entry>
         <entry>
	  text/plain content type ヘッダを暗号化/サインを行うメッセー
	  ジに追加します。復号化または認証を行う際には、このヘッダは出
	  力から取り除かれます。復号化または認証されたメッセージがMIME
	  型 text/plain でない場合、エラーとなります。
	 </entry>
        </row>
        <row>
         <entry>PKCS7_BINARY</entry>
         <entry>
	  通常、入力されたメッセージは、CRおよびLFを行端として使用した
	  「正規化」された形式に変換されます。この形式は、S/MIME規格に
	  基づくものです。このオプションが指定された場合、変換が行われ
	  ます。この機能は、MIME形式でないバイナリデータを処理する際に
	  便利です。
	 </entry>
        </row>
        <row>
         <entry>PKCS7_NOINTERN</entry>
         <entry>
	  メッセージを認証する際に、通常、メッセージに含まれる証明書が
	  証明書にサインする際に検索されます。
	  このオプションでは、
	  <function>openssl_pkcs7_verify</function> の
	  <parameter>extracerts</parameter> パラメータで指定した証明書
	  のみが使用されます。しかし、指定された証明書を信頼されていな
	  いCAとして使用することも可能です。
         </entry>
        </row>
        <row>
         <entry>PKCS7_NOVERIFY</entry>
         <entry>
	  サイン済みのメッセージにサインした人の証明書を認証しません。
	 </entry>
        </row>
        <row>
         <entry>PKCS7_NOCHAIN</entry>
         <entry>
	  サインを行った側の証明書の認証の連鎖を行いません。
	  この場合、サイン付きのメッセージにある証明書を未認証のCAとし
	  て使用しません。
         </entry>
        </row>
        <row>
         <entry>PKCS7_NOCERTS</entry>
         <entry>
	  メッセージにサインする際、通常サインをする人の証明書が挿入さ
	  れます。このオプションを指定した場合はそうなりません。これに
	  より、サイン付きのメッセージのサイズは小さくなりますが、認証
	  側が、(例えば、<function>openssl_pkcs7_verify</function>の
	  <parameter>extracerts</parameter>により渡すことにより)サイン
	  をした人の証明書のコピーをローカルに用意する必要があります。
         </entry>
        </row>
        <row>
         <entry>PKCS7_NOATTR</entry>
         <entry>
	  通常、メッセージがサインされる時、サインした時間やサポートさ
	  れる対象アルゴリズムを含む一連の属性が付加されます。このオプ
	  ションを指定した場合、それらの属性は付加されません。
         </entry>
        </row>
        <row>
         <entry>PKCS7_DETACHED</entry>
         <entry>
	  メッセージにサインをする際、MIME型 multipart/signed を指定し
	  てクリアテキストでサインを行います。これは、
	  <function>openssl_pkcs7_sign</function> において
	  フラグを指定しなかった場合の <parameter>flags</parameter> パ
	  ラメータのデフォルトです。このオプションをオフにした場合、メッ
	  セージは不透明なサインによりサインされます。これは、メールリ
	  レイによる変換に対してより耐性がありますが、S/MIMEをサポート
	  しないメールエージェントでは読むことはできません。
	 </entry>
        </row>
        <row>
         <entry>PKCS7_NOSIGS</entry>
         <entry>
	  メッセージにサインや認証を試みません。
	 </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <note>
     <para>
      これらの定数は、4.0.6 で追加されました。
     </para>
    </note>
   </sect1>
  </partintro>

  <refentry id="function.openssl-error-string">
   <refnamediv>
    <refname>openssl_error_string</refname>
    <refpurpose>OpenSSL エラーメッセージを返す</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>openssl_error_string</function></funcdef>
      <paramdef>void<parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     エラーメッセージ文字列を返します。返すべきエラーメッセージがもう
     ない場合は、&false; を返します。
    </para>
    <para>
     <function>openssl_error_string</function> は、OpenSSL ライブラリ
     から直近のエラーを返します。エラーメッセージはスタックにつまれて
     おり、全て情報を集めるには、この関数を複数回コールする必要があり
     ます。
    </para>
    <para>
     <emphasis>
      この関数のパラメータ/返り値の型は、PHPのリリース版が公開される前
      に変更される可能性があります。
     </emphasis>
    </para>
    <para>
     <example>
      <title><function>openssl_error_string</function> の例</title>
      <programlisting role="php">
// ここで処理に失敗するOpenSSL関数をコールしたと仮定します
while($msg = openssl_error_string)
    echo $msg . "&lt;br&gt;";
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      これらの定数は、4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-free-key">
   <refnamediv>
    <refname>openssl_free_key</refname>
    <refpurpose>キーリソースを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>openssl_free_key</function></funcdef>
      <paramdef>resource <parameter>key_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_free_key</function> は、指定した
     <parameter>key_identifier</parameter> が指すキーをメモリから開放
     します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-get-privatekey">
   <refnamediv>
    <refname>openssl_get_privatekey</refname>
    <refpurpose>PEMフォーマットされた秘密キーを使用可能とする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>openssl_get_privatekey</function></funcdef>
      <paramdef>mixed <parameter>key</parameter></paramdef>
      <paramdef>string 
       <parameter>
	<replaceable><optional>passphrase</optional></replaceable>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に正のキーリソースID、エラー時に&false;を返します。
    </para>
    <para>
     <function>openssl_get_privatekey</function> は、
     <parameter>key</parameter>で指定したPEMフォーマットの秘密キーをパー
     スし、他の関数で使用可能な状態にします。オプションのパラメータ
     <parameter>passphrase</parameter> は、指定したキーが暗号化されて
     いる場合(passphraseで保護されている)に使用する必要があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-get-publickey">
   <refnamediv>
    <refname>openssl_get_publickey</refname> 
    <refpurpose>
     証明書(certificate)から公開キーを展開し、使用可能とする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>openssl_get_publickey</function></funcdef>
      <paramdef>mixed <parameter>certificate</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に正のキーリソースID、エラー時に&false;を返します。
    </para>
    <para>
     <function>openssl_get_publickey</function> は、
     <parameter>certificate</parameter> で指定した X.509 証明書から公
     開キーを展開し、他の関数で使用可能な状態にします。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-open">
   <refnamediv>
    <refname>openssl_open</refname>
    <refpurpose>シール(暗号化)されたデータをオープン(復号)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_open</function></funcdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>string <parameter>open_data</parameter></paramdef>
      <paramdef>string <parameter>env_key</parameter></paramdef>
      <paramdef>mixed <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true;、エラー時に&false;を返します。成功した場合、オープンさ
     れたデータが <parameter>open_data</parameter> に返されます。
    </para>
    <para>
     <function>openssl_open</function> は、キーID
     <parameter>priv_key_id</parameter> およびエンベロープキー
     <parameter>env_key</parameter> に関連する公開キーを使用して、
     <parameter>sealed_data</parameter> をオープン(復号化)します。エン
     ベロープキーは、データがシール(暗号化)された際に生成され、特定の
     一つの公開キーでのみ使用することが可能です。詳細な情報については、
     <function>openssl_seal</function> を参照下さい。
    </para>
    <para>
     <example>
      <title><function>openssl_open</function> の例</title>
      <programlisting role="php">
// $sealed および $env_key に暗号化されたデータおよびエンベロープキー
// が含まれていると仮定。共にシール元(暗号化側)から与えられる。

// ファイルから公開キーを取得し、使用可能とする
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// データを復号化し、$open に保存
if (openssl_open($sealed, $open, $env_key, $pkeyid))
    echo "here is the opened data: ", $open;
else
    echo "failed to open data";

// 公開キーをメモリから開放
openssl_free_key($pkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_seal</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-seal">
   <refnamediv>
    <refname>openssl_seal</refname>
    <refpurpose>データをシール(暗号化)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_seal</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>array <parameter>env_keys</parameter></paramdef>
      <paramdef>array <parameter>pub_key_ids</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時にシール(暗号化)されたデータの長さ、エラー時に&false;を返しま
     す。成功時には、暗号化されたデータが
     <parameter>sealed_data</parameter>に、エンベロープキーが
     <parameter>env_keys</parameter> に返されます。
    </para>
    <para>
     <function>openssl_seal</function> は、ランダムに生成された秘密キー
     により RC4 を使用して <parameter>data</parameter>をシール(暗号化)
     します。このキーは、<parameter>pub_key_ids</parameter> をIDとする
     各公開キーで暗号化されます。これは、暗号化されたデータを複数の受
     信者に送信できることを意味します。(この際、各受信者は送信側に公開
     キーを提供します。)各受信者は、暗号化されたデータとその受信者の公
     開キーで暗号化されたエンベロープキーを受け取る必要があります。
    </para>
    <para>
     <example>
      <title><function>openssl_seal</function> の例</title>
      <programlisting role="php">
// $data には、暗号化されるデータが含まれていると仮定

// 受信者の公開キーを取得し、使用可能にする
$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk1 = openssl_get_publickey($cert);
// 2番目の受信者についても同様
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);

// メッセージを暗号化。$pk1 および $pk2 の所有者のみが、暗号化された
// データをそれぞれエンベロープキー$ekeys[0]および$ekeys[1]で復号化す
// ることが可能
openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2));

// キーをメモリから開放する
openssl_free_key($pk1);
openssl_free_key($pk2);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_open</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-sign">
   <refnamediv>
    <refname>openssl_sign</refname>
    <refpurpose>署名を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_sign</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に&true;、失敗した場合に&false;を返します。成功した場合、署名が
     <parameter>signature</parameter> に返されます。
    </para>
    <para>
     <function>openssl_sign</function> は、指定した 
     <parameter>data</parameter> に関してハッシュ計算に SHA1 を使用し
     て署名を計算し、その後、<parameter>priv_key_id</parameter> で指定
     した公開キーを使用して暗号化を行います。data 自体は暗号化されない
     ことに注意して下さい。
    </para>
    <para>
     <example>
      <title><function>openssl_sign</function> の例</title>
      <programlisting role="php">
// $data に署名するデータが含まれていると仮定

// ファイルから公開キーを取得し、使用可能とする
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// 署名を計算
openssl_sign($data, $signature, $pkeyid);

// メモリからキーを開放する
openssl_free_key($pkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_verify</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-verify">
   <refnamediv>
    <refname>openssl_verify</refname>
    <refpurpose>署名を認証する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_verify</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>mixed <parameter>pub_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     署名(signature)が正しい場合に 1、正しくない場合に 0、エラーの場合
     に -1 を返します。
    </para>
    <para>
     <function>openssl_verify</function> は、
     <parameter>pub_key_id</parameter> が指す公開キーを使用して指定し
     た <parameter>data</parameter> に関して
     <parameter>signature</parameter> が正しいことを確認します。署名が
     正しいと判定されるためには、その公開キーが署名の際に使用した秘密
     キーに対応していることを必要とします。
    </para>
    <para>
     <example>
      <title><function>openssl_verify</function> の例</title>
      <programlisting role="php">
// $data および $signature はデータおよび署名が含まれていると仮定

// 認証局から公開キーを取得し、使用可能にする
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// 署名が正しいかどうかを確認
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1)
    echo "正しいです";
elseif ($ok == 0)
    echo "正しくありません";
else
    echo "署名を確認する際にエラーが発生しました";

// メモリからキーを開放
openssl_free_key($pubkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_sign</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.openssl-pkcs7-decrypt">
   <refnamediv>
    <refname>openssl_pkcs7_decrypt</refname>
    <refpurpose>S/MIME 暗号化されたメッセージを復号化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_pkcs7_decrypt</function></funcdef>
      <paramdef>string <parameter>infilename</parameter></paramdef>
      <paramdef>string <parameter>outfilename</parameter></paramdef>
      <paramdef>mixed <parameter>recipcert</parameter></paramdef>
      <paramdef>mixed <parameter>recipkey</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>infilename</parameter>で指定したファイル中のS/MIME暗号
     化されたメッセージを、<parameter>recipcert</parameter> および
     <parameter>recipkey</parameter> で指定した証明書と公開キーを用い
     て復号化します。
    </para>
    <para>
     復号化されたメッセージは、<parameter>outfilename</parameter>で指
     定したファイルに出力されます。
    </para>
    <para>
     <emphasis>
      この関数のパラメータ/返り値は、PHPのリリース版が公開されるまでに
      変更される可能性があります。
     </emphasis>
    </para>
    <para>
     <example>
      <title><function>openssl_pkcs7_decrypt</function> の例</title>
      <programlisting role="php">
// $cert および $key にはあなたの個人証明書と公開キーが含まれており、
// あなたはS/MIMEメッセージの受信者であると仮定します。
$infilename = "encrypted.msg";  // 暗号化されたメッセージを含むファイル
$outfilename = "decrypted.msg"; // このファイルへの書き込み権限が必要

if (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key))
    echo "復号化されました!";
else
    echo "復号化に失敗しました!";

      </programlisting>
     </example>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-pkcs7-encrypt">
   <refnamediv>
    <refname>openssl_pkcs7_encrypt</refname>
    <refpurpose>S/MIME メッセージを暗号化する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_pkcs7_encrypt</function></funcdef>
      <paramdef>string <parameter>infilename</parameter></paramdef>
      <paramdef>string <parameter>outfilename</parameter></paramdef>
      <paramdef>mixed <parameter>recipcerts</parameter></paramdef>
      <paramdef>array <parameter>headers</parameter></paramdef>
      <paramdef>long 
       <parameter><optional>flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_pkcs7_encrypt</function> は、
     <parameter>infilename</parameter> という名前のファイルの内容を
     RC2 40ビット暗号により暗号化します。この内容は、
     <parameter>recipcerts</parameter> で指定した意図する受信者によっ
     てのみ読むことが可能です。<parameter>recipcerts</parameter> は、
     X.509 証明書または X.509 証明書の配列です。
     <parameter>headers</parameter> は、暗号化された後にデータの前に付
     加されるヘッダの配列です。<parameter>flags</parameter> はオプショ
     ンとして使用可能であり、エンコード処理を変更するために指定されま
     す。<link linkend="openssl.pkcs7.flags">PKCS7定数</link>を参照下
     さい。<parameter>headers</parameter> は、ヘッダ名をキーとする連想
     配列または添字配列であり、各要素には、各ヘッダ行が一行ずつ含まれ
     ています。
    </para>
    <para>
     <emphasis>
      この関数のパラメータ/返り値は、PHPのリリース版が公開されるまでに
      変更される可能性があります。
     </emphasis>
    </para>
    <para>
     <example>
      <title><function>openssl_pkcs7_encrypt</function> の例</title>
      <programlisting role="php">
// 暗号化するメッセージを nighthawk という名前の外部の秘密のエー
// ジェントに送信します。送信先の証明書をファイル nighthawk.pem に有し
// ています。
$data = &lt;&lt;&lt;EOD
Nighthawk,

Top secret, for your eyes only!

The enemy is closing in! Meet me at the cafe at 8.30am
to collect your forged passport!

HQ
EOD;
// ファイルにメッセージを保存
$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);
// メッセージを暗号化
if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", "nighthawk.pem",
    array("To" =&gt; "nighthawk@agent.com", // 連想配列の構文
          "From: HQ &lt;hq@cia.com&gt;", // 添字配列の構文
          "Subject" =&gt; "Eyes only")))
{
    // メッセージを暗号化し、送信します!
    exec(ini_get("sendmail_path") . " &lt; enc.txt");
}
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.openssl-pkcs7-sign">
   <refnamediv>
    <refname>openssl_pkcs7_sign</refname>
    <refpurpose>S/MIME メッセージにサインする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_pkcs7_sign</function></funcdef>
      <paramdef>string <parameter>infilename</parameter></paramdef>
      <paramdef>string <parameter>outfilename</parameter></paramdef>
      <paramdef>mixed <parameter>signcert</parameter></paramdef>
      <paramdef>mixed <parameter>privkey</parameter></paramdef>
      <paramdef>array <parameter>headers</parameter></paramdef>
      <paramdef>long
       <parameter><optional>flags</optional></parameter></paramdef>
      <paramdef>string
       <parameter><optional>extracertsfilename</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_pkcs7_sign</function>は、
     <parameter>infilename</parameter> という名前のファイルの内容につ
     いて、パラメータ <parameter>signcert</parameter> および
     <parameter>privkey</parameter> で指定した証明書と公開キーを用いて
     サインをします。
     <parameter>signcert</parameter> and <parameter>privkey</parameter>
    </para>
    <para>
     <parameter>headers</parameter> は、ヘッダの配列です。このヘッダは、
     サインされた後、データの前に付加されます。(このパラメータの形式の
     詳細については、<function>openssl_pkcs7_encrypt</function> を参照
     下さい。)
    </para>
    <para>
     <parameter>flags</parameter> を出力を変更するために使用することが
     可能です。<link linkend="openssl.pkcs7.flags">PKCS7 定数</link>
     を参照下さい。これが指定されない場合、デフォルトの PKCS7_DETACHED
     になります。
    </para>
    <para>
     <parameter>extracerts</parameter> には、サインに含めるための他の
     一連の証明書を記述したファイル名を指定します。これは、例えば、送
     信者が使用した証明書を受信者が検証しやすくするために使用すること
     が可能です。
    </para>
    <para>
     <emphasis>
      この関数のパラメータ/返り値の型は、PHPのリリース版が公開される前
      に変更される可能性があります。
     </emphasis>
    </para>
    
    <para>
     <example>
      <title><function>openssl_pkcs7_sign</function> の例</title>
      <programlisting role="php">
// 受信者が送信者を確認できるようにサインしたいメッセージ
$data = &lt;&lt;&lt;EOD

You have my authorization to spend $10,000 on dinner expenses.

The CEO
HQ
EOD;
// ファイルにメッセージを保存
$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);
// 暗号化
if (openssl_pkcs7_sign("msg.txt", "signed.txt", "mycert.pem",
    array("mycert.pem", "mypassphrase"),
    array("To" =&gt; "joes@sales.com", // keyed syntax
          "From: HQ &lt;ceo@sales.com&gt;", // indexed syntax
          "Subject" =&gt; "Eyes only"))
{
    // メッセージはサインされました。送信しましょう!
    exec(ini_get("sendmail_path") . " &lt; signed.txt");
}
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.openssl-pkcs7-verify">
   <refnamediv>
    <refname>openssl_pkcs7_verify</refname>
    <refpurpose>S/MIMEサインされたメッセージのサインを確認する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_pkcs7_verify</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int <parameter>flags</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>outfilename</optional></parameter>
      </paramdef>
      <paramdef>array 
       <parameter><optional>cainfo</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>extracerts</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_pkcs7_verify</function> は、
     <parameter>filename</parameter> で指定したファイルに記述された
     S/MIMEメッセージを読み込み、デジタルサインを評価します。サインが
     検証された場合は &true;、正しくない場合(メッセージが改暫されたか
     サインに用いられた証明書が無効)は &false;、エラーの場合に -1 を返し
     ます。
    </para>
    <para>
     <parameter>flags</parameter> によりサインの認証方法を指定すること
     が可能です。詳細については、<link
     linkend="openssl.pkcs7.flags">PKCS7 定数</link> を参照下さい。
    </para>
    <para>
     <parameter>outfilename</parameter> を指定する場合、メッセージに
     サインした人の証明書がPEM形式で保存されたファイルの名前をこの変数
     に指定する必要があります。
    </para>
    <para>
     <parameter>cainfo</parameter> が指定された場合、検証処理で使用す
     るために認証済みのCA証明書に関する情報を保持する必要があります。
     このパラメータに関するより詳細な情報については、
     <link linkend="openssl.cert.verification">証明書の検証</link> を
     参照下さい。
    </para>
    <para>
     <parameter>extracerts</parameter> が指定された場合、これは、
     未認証のCAとして一連の証明書を使用するためのファイルのファイル名
     となります。
    </para>
    <para>
     <emphasis>
      この関数のパラメータ/返り値の型は、PHPのリリース版が公開される前
      に変更される可能性があります。
     </emphasis>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.openssl-x509-checkpurpose">
   <refnamediv>
    <refname>openssl_x509_checkpurpose</refname>
    <refpurpose>
     証明書が特定の目的に使用可能かどうか確認します。
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_x509_checkpurpose</function></funcdef>
      <paramdef>mixed <parameter>x509cert</parameter></paramdef>
      <paramdef>int <parameter>purpose</parameter></paramdef>
      <paramdef>array <parameter>cainfo</parameter></paramdef>
      <paramdef>string
       <parameter><optional>untrustedfile</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     証明書が意図した目的に使用可能である場合に &true;、使用できない場合
     に &false; 、エラーの場合に -1 を返します。
    </para>
    <para>
     <function>openssl_x509_checkpurpose</function> は、証明書
     <parameter>x509cert</parameter> を調べ、
     <parameter>purpose</parameter> で指定した目的に使用可能であるかど
     うかを確認します。
    </para>
    <para>
     <parameter>cainfo</parameter> は、<link
     linkend="openssl.cert.verification">証明書の認証</link> で説明し
     たような信頼できるCAファイル/ディレクトリの配列です。
    </para>
    <para>
     <parameter>untrustedfile</parameter> が指定された場合、これは、
     証明書を含むPEMエンコードされたファイルの名前になります。この証明
     書は、検証と証明を簡単化するために使用されます。そのファイル内に
     ある証明書は、信頼されない(untrusted)証明書とみなされます。
    </para>
    <para>
     <emphasis>
      この関数のパラメータ/返り値の型は、PHPのリリース版が公開される前
      に変更される可能性があります。
     </emphasis>
    </para>
    <para>
     <table>
      <title><function>openssl_x509_checkpurpose</function> の目的</title>
      <tgroup cols="2">
       <thead>
	<row>
	 <entry>定数</entry>
	 <entry>説明</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>X509_PURPOSE_SSL_CLIENT</entry>
	 <entry>
	  この証明書をSSL接続のクライアント側で使用できるか?
	 </entry>
	</row>
	<row>
	 <entry>X509_PURPOSE_SSL_SERVER</entry>
	 <entry>
	  この証明書をSSL接続のサーバー側で使用できるか?
	 </entry>
	</row>
	<row>
	 <entry>X509_PURPOSE_NS_SSL_SERVER</entry>
	 <entry>
	  この証明書をNetscape SSLサーバーで使用できるか?
	 </entry>
	</row>
	<row>
	 <entry>X509_PURPOSE_SMIME_SIGN</entry>
	 <entry>
	  この証明書をS/MIME emailで使用できるか?
	 </entry>
	</row>
	<row>
	 <entry>X509_PURPOSE_SMIME_ENCRYPT</entry>
	 <entry>
	  この証明書をS/MIME emailの暗号化で使用できるか?
	 </entry>
	</row>
	<row>
	 <entry>X509_PURPOSE_CRL_SIGN</entry>
	 <entry>
	  この証明書を証明書取消リスト(CRL)にサインをする際
	  に使用できるか?
	 </entry>
	</row>
	<row>
	 <entry>X509_PURPOSE_ANY</entry>
	 <entry>
	  この証明書をあらゆる用途に使用できるか?
	 </entry>
	</row>
       </tbody>
      </tgroup>
     </table>
     これらのオプションはビットフィールドではありません。指定できるの
     は、一つだけです!
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
  </refsect1>
 </refentry>
  
  <refentry id="function.openssl-x509-free">
   <refnamediv>
    <refname>openssl_x509_free</refname>
    <refpurpose>証明書リソースを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>openssl_x509_free</function></funcdef>
      <paramdef>resource <parameter>x509cert</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_x509_free</function> は、メモリから指定した
     <parameter>x509cert</parameter> リソースに関連した証明書を開放し
     ます。
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.openssl-x509-parse">
   <refnamediv>
    <refname>openssl_x509_parse</refname>
    <refpurpose>
     Parse an X509 証明書をパースし、配列として情報を返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>openssl_x509_parse</function></funcdef>
      <paramdef>mixed <parameter>x509cert</parameter></paramdef>
      <paramdef>bool
       <parameter><optional>shortnames</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_x509_parse</function>  は、指定した
     <parameter>x509cert</parameter> に関する情報を返します。この情報
     には、題名、発行者名、目的、発効日および有効期限等が含まれます。
     <parameter>shortnames</parameter>は、配列中での日付の添字付けの方
     法を設定します。<parameter>shortnames</parameter> が &true; の場合
     (デフォルト)、フィールドは、短縮型で添字が付けられます。そうでな
     い場合、長い名前が使用されます。例えば、CN は commonName の短縮型
     です。
    </para>
    <para>
     <emphasis>
      返されるデータの構造は、変更される可能性がまだあるため、(故意に)
      まだ文書化されていません。
     </emphasis>
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
  
  <refentry id="function.openssl-x509-read">
   <refnamediv>
    <refname>openssl_x509_read</refname>
    <refpurpose>
     Parse an X.509 証明書をパースし、リソースIDを返す
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>openssl_x509_read</function></funcdef>
      <paramdef>mixed <parameter>x509certdata</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_x509_read</function> は、
     <parameter>x509certdata</parameter> で指定した証明書をパースし、
     その証明書用のリソースIDを返します。
    </para>
    <note>
     <para>
      この関数は、PHP 4.0.6 で追加されました。
     </para>
    </note>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
<!-- Keep this comment for vi/vim/gvim
vi: et:ts=1:sw=1:textwidth=78
-->
