 <reference id="ref.openssl">
  <title>OpenSSL 関数</title>
  <titleabbrev>OpenSSL</titleabbrev>
  <partintro>
  <para>
    このモジュールは、署名の生成および認証、そして、データのシール
    (暗号化)およびオープン(復号化)を行うために、<ulink
    url="&url.openssl;">OpenSSL</ulink> の関数を使用します。このモジュー
    ルでは、OpenSSL >= 0.9.6 を使用する必要があります。
  </para>
  <para>
   OpenSSL は多くの機能を提供しますが、これらはまだこのモジュールでは
   サポートされていません。
  </para>
  </partintro>

  <refentry id="function.openssl-free-key">
   <refnamediv>
    <refname>openssl_free_key</refname>
    <refpurpose>キーリソースを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>openssl_free_key</function></funcdef>
      <paramdef>int <parameter>key_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_free_key</function> は、指定した
     <parameter>key_identifier</parameter> が指すキーをメモリから開放
     します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-get-privatekey">
   <refnamediv>
    <refname>openssl_get_privatekey</refname>
    <refpurpose>PEMフォーマットされた秘密キーを使用可能とする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_get_privatekey</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>passphrase</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に正のキーID、エラー時にfalseを返します。
    </para>
    <para>
     <function>openssl_get_privatekey</function> は、
     <parameter>key</parameter>で指定したPEMフォーマットの秘密キーをパー
     スし、他の関数で使用可能な状態にします。オプションのパラメータ
     <parameter>passphrase</parameter> は、指定したキーが暗号化されて
     いる場合(passphraseで保護されている)に使用する必要があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-get-publickey">
   <refnamediv>
    <refname>openssl_get_publickey</refname> 
    <refpurpose>
     証明書(certificate)から公開キーを展開し、使用可能とする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_get_publickey</function></funcdef>
      <paramdef>string <parameter>certificate</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に公開キー、エラー時にfalseを返します。
    </para>
    <para>
     <function>openssl_get_publickey</function> は、
     <parameter>certificate</parameter> で指定した X.509 証明書から公
     開キーを展開し、他の関数で使用可能な状態にします。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-open">
   <refnamediv>
    <refname>openssl_open</refname>
    <refpurpose>シール(暗号化)されたデータをオープン(復号)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_open</function></funcdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>string <parameter>open_data</parameter></paramdef>
      <paramdef>string <parameter>env_key</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時にtrue、エラー時にfalseを返します。成功した場合、オープンさ
     れたデータが <parameter>open_data</parameter> に返されます。
    </para>
    <para>
     <function>openssl_open</function> は、キーID
     <parameter>priv_key_id</parameter> およびエンベロープキー
     <parameter>env_key</parameter> に関連する公開キーを使用して、
     <parameter>sealed_data</parameter> をオープン(復号化)します。エン
     ベロープキーは、データがシール(暗号化)された際に生成され、特定の
     一つの公開キーでのみ使用することが可能です。詳細な情報については、
     <function>openssl_seal</function> を参照下さい。
    </para>
    <para>
     <example>
      <title><function>openssl_open</function> の例</title>
      <programlisting role="php">
// $sealed および $env_key に暗号化されたデータおよびエンベロープキー
// が含まれていると仮定。共にシール元(暗号化側)から与えられる。

// ファイルから公開キーを取得し、使用可能とする
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// データを復号化し、$open に保存
if (openssl_open($sealed, $open, $env_key, $pkeyid))
    echo "here is the opened data: ", $open;
else
    echo "failed to open data";

// 公開キーをメモリから開放
openssl_free_key($pkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_seal</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-seal">
   <refnamediv>
    <refname>openssl_seal</refname>
    <refpurpose>データをシール(暗号化)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_seal</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>array <parameter>env_keys</parameter></paramdef>
      <paramdef>array <parameter>pub_key_ids</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Returns the length of the sealed data on success, or false on error.
     If successful the sealed data is returned in
     <parameter>sealed_data</parameter>, and the envelope keys in
     <parameter>env_keys</parameter>.

    </para>
    <para>
     <function>openssl_seal</function> seals (encrypts)
     <parameter>data</parameter> by using RC4 with a randomly generated
     secret key. The key is encrypted with each of the public keys
     associated with the identifiers in <parameter>pub_key_ids</parameter>
     and each encrypted key is returned
     in <parameter>env_keys</parameter>. This means that one can send
     sealed data to multiple recipients (provided one has obtained their
     public keys). Each recipient must receive both the sealed data and
     the envelope key that was encrypted with the recipient's public key.
    </para>
    <para>
     <example>
      <title><function>openssl_seal</function> の例</title>
      <programlisting role="php">
// $data is assumed to contain the data to be sealed

// fetch public keys for our recipients, and ready them
$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk1 = openssl_get_publickey($cert);
// Repeat for second recipient
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);

// seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys
// $ekeys[0] and $ekeys[1] respectively.
openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2));

// free the keys from memory
openssl_free_key($pk1);
openssl_free_key($pk2);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_open</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-sign">
   <refnamediv>
    <refname>openssl_sign</refname>
    <refpurpose>データの署名</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_sign</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時にtrue、失敗した場合にfalseを返します。成功した場合、署名が
     <parameter>signature</parameter> に返されます。
    </para>
    <para>
     <function>openssl_sign</function> は、指定した 
     <parameter>data</parameter> に関してハッシュ計算に SHA1 を使用し
     て署名を計算し、その後、<parameter>priv_key_id</parameter> で指定
     した公開キーを使用して暗号化を行います。data 自体は暗号化されない
     ことに注意して下さい。
    </para>
    <para>
     <example>
      <title><function>openssl_sign</function> の例</title>
      <programlisting role="php">
// $data に署名するデータが含まれていると仮定

// ファイルから公開キーを取得し、使用可能とする
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// 署名を計算
openssl_sign($data, $signature, $pkeyid);

// メモリからキーを開放する
openssl_free_key($pkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_verify</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-verify">
   <refnamediv>
    <refname>openssl_verify</refname>
    <refpurpose>署名を認証する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_verify</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>pub_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     署名(signature)が正しい場合に 1、正しくない場合に 0、エラーの場合
     に -1 を返します。
    </para>
    <para>
     <function>openssl_verify</function> verifies that the
     <parameter>signature</parameter> is correct for the specified
     <parameter>data</parameter> using the public key associated with
     <parameter>pub_key_id</parameter>. This must be the public key
     corresponding to the private key used for signing.
    </para>
    <para>
     <example>
      <title><function>openssl_verify</function> の例</title>
      <programlisting role="php">
// $data and $signature are assumed to contain the data and the signature

// fetch public key from certificate and ready it
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1)
    echo "good";
elseif ($ok == 0)
    echo "bad";
else
    echo "ugly, error checking signature";

// free the key from memory
openssl_free_key($pubkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_sign</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
