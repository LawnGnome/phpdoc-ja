 <reference id="ref.openssl">
  <title>OpenSSL 関数</title>
  <titleabbrev>OpenSSL</titleabbrev>
  <partintro>
  <para>
    このモジュールは、署名の生成および認証、そして、データのシール
    (暗号化)およびオープン(復号化)を行うために、<ulink
    url="&url.openssl;">OpenSSL</ulink> の関数を使用します。このモジュー
    ルでは、OpenSSL >= 0.9.6 を使用する必要があります。
  </para>
  <para>
   OpenSSL は多くの機能を提供しますが、これらはまだこのモジュールでは
   サポートされていません。
  </para>
  </partintro>

  <refentry id="function.openssl-free-key">
   <refnamediv>
    <refname>openssl_free_key</refname>
    <refpurpose>キーリソースを開放する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>openssl_free_key</function></funcdef>
      <paramdef>int <parameter>key_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_free_key</function> は、指定した
     <parameter>key_identifier</parameter> が指すキーをメモリから開放
     します。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-get-privatekey">
   <refnamediv>
    <refname>openssl_get_privatekey</refname>
    <refpurpose>PEMフォーマットされた秘密キーを使用可能とする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_get_privatekey</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>passphrase</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に正のキーID、エラー時にfalseを返します。
    </para>
    <para>
     <function>openssl_get_privatekey</function> は、
     <parameter>key</parameter>で指定したPEMフォーマットの秘密キーをパー
     スし、他の関数で使用可能な状態にします。オプションのパラメータ
     <parameter>passphrase</parameter> は、指定したキーが暗号化されて
     いる場合(passphraseで保護されている)に使用する必要があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-get-publickey">
   <refnamediv>
    <refname>openssl_get_publickey</refname> 
    <refpurpose>
     証明書(certificate)から公開キーを展開し、使用可能とする
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_get_publickey</function></funcdef>
      <paramdef>string <parameter>certificate</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時に公開キー、エラー時にfalseを返します。
    </para>
    <para>
     <function>openssl_get_publickey</function> は、
     <parameter>certificate</parameter> で指定した X.509 証明書から公
     開キーを展開し、他の関数で使用可能な状態にします。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-open">
   <refnamediv>
    <refname>openssl_open</refname>
    <refpurpose>シール(暗号化)されたデータをオープン(復号)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_open</function></funcdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>string <parameter>open_data</parameter></paramdef>
      <paramdef>string <parameter>env_key</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時にtrue、エラー時にfalseを返します。成功した場合、オープンさ
     れたデータが <parameter>open_data</parameter> に返されます。
    </para>
    <para>
     <function>openssl_open</function> は、キーID
     <parameter>priv_key_id</parameter> およびエンベロープキー
     <parameter>env_key</parameter> に関連する公開キーを使用して、
     <parameter>sealed_data</parameter> をオープン(復号化)します。エン
     ベロープキーは、データがシール(暗号化)された際に生成され、特定の
     一つの公開キーでのみ使用することが可能です。詳細な情報については、
     <function>openssl_seal</function> を参照下さい。
    </para>
    <para>
     <example>
      <title><function>openssl_open</function> の例</title>
      <programlisting role="php">
// $sealed および $env_key に暗号化されたデータおよびエンベロープキー
// が含まれていると仮定。共にシール元(暗号化側)から与えられる。

// ファイルから公開キーを取得し、使用可能とする
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// データを復号化し、$open に保存
if (openssl_open($sealed, $open, $env_key, $pkeyid))
    echo "here is the opened data: ", $open;
else
    echo "failed to open data";

// 公開キーをメモリから開放
openssl_free_key($pkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_seal</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-seal">
   <refnamediv>
    <refname>openssl_seal</refname>
    <refpurpose>データをシール(暗号化)する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_seal</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>array <parameter>env_keys</parameter></paramdef>
      <paramdef>array <parameter>pub_key_ids</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時にシール(暗号化)されたデータの長さ、エラー時にfalseを返しま
     す。成功時には、暗号化されたデータが
     <parameter>sealed_data</parameter>に、エンベロープキーが
     <parameter>env_keys</parameter> に返されます。
    </para>
    <para>
     <function>openssl_seal</function> は、ランダムに生成された秘密キー
     により RC4 を使用して <parameter>data</parameter>をシール(暗号化)
     します。このキーは、<parameter>pub_key_ids</parameter> をIDとする
     各公開キーで暗号化されます。これは、暗号化されたデータを複数の受
     信者に送信できることを意味します。(この際、各受信者は送信側に公開
     キーを提供します。)各受信者は、暗号化されたデータとその受信者の公
     開キーで暗号化されたエンベロープキーを受け取る必要があります。
    </para>
    <para>
     <example>
      <title><function>openssl_seal</function> の例</title>
      <programlisting role="php">
// $data には、暗号化されるデータが含まれていると仮定

// 受信者の公開キーを取得し、使用可能にする
$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk1 = openssl_get_publickey($cert);
// 2番目の受信者についても同様
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);

// メッセージを暗号化。$pk1 および $pk2 の所有者のみが、暗号化された
// データをそれぞれエンベロープキー$ekeys[0]および$ekeys[1]で復号化す
// ることが可能
openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2));

// キーをメモリから開放する
openssl_free_key($pk1);
openssl_free_key($pk2);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_open</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-sign">
   <refnamediv>
    <refname>openssl_sign</refname>
    <refpurpose>署名を生成する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_sign</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     成功時にtrue、失敗した場合にfalseを返します。成功した場合、署名が
     <parameter>signature</parameter> に返されます。
    </para>
    <para>
     <function>openssl_sign</function> は、指定した 
     <parameter>data</parameter> に関してハッシュ計算に SHA1 を使用し
     て署名を計算し、その後、<parameter>priv_key_id</parameter> で指定
     した公開キーを使用して暗号化を行います。data 自体は暗号化されない
     ことに注意して下さい。
    </para>
    <para>
     <example>
      <title><function>openssl_sign</function> の例</title>
      <programlisting role="php">
// $data に署名するデータが含まれていると仮定

// ファイルから公開キーを取得し、使用可能とする
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// 署名を計算
openssl_sign($data, $signature, $pkeyid);

// メモリからキーを開放する
openssl_free_key($pkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_verify</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.openssl-verify">
   <refnamediv>
    <refname>openssl_verify</refname>
    <refpurpose>署名を認証する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_verify</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>pub_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     署名(signature)が正しい場合に 1、正しくない場合に 0、エラーの場合
     に -1 を返します。
    </para>
    <para>
     <function>openssl_verify</function> は、
     <parameter>pub_key_id</parameter> が指す公開キーを使用して指定し
     た <parameter>data</parameter> に関して
     <parameter>signature</parameter> が正しいことを確認します。署名が
     正しいと判定されるためには、その公開キーが署名の際に使用した秘密
     キーに対応していることを必要とします。
    </para>
    <para>
     <example>
      <title><function>openssl_verify</function> の例</title>
      <programlisting role="php">
// $data および $signature はデータおよび署名が含まれていると仮定

// 認証局から公開キーを取得し、使用可能にする
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// 署名が正しいかどうかを確認
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1)
    echo "正しいです";
elseif ($ok == 0)
    echo "正しくありません";
else
    echo "署名を確認する際にエラーが発生しました";

// メモリからキーを開放
openssl_free_key($pubkeyid);
      </programlisting>
     </example>
    </para>
    <simpara>
     <function>openssl_sign</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
