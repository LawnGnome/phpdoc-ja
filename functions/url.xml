<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
<reference id="ref.url">
  <title>URL 関数</title>
  <titleabbrev>URLs</titleabbrev>

  <refentry id="function.base64-decode">
   <refnamediv>
    <refname>base64_decode</refname>
    <refpurpose>base64方式によりエンコードされたデータのデコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>base64_decode</function></funcdef>
      <paramdef>string <parameter>encoded_data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>base64_decode</function>は
     <parameter>encoded_data</parameter>をデコードし、
     もとのデータを返します。バイナリになることもあります。
    </para>
    <para>
     <function>base64_encode</function>およびRFC-2045 6.8節も
     参考にしてください。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.base64-encode">
   <refnamediv>
    <refname>base64_encode</refname>
    <refpurpose>base64方式によるデータのエンコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>base64_encode</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>base64_encode</function>は、
     <parameter>data</parameter>をbase64方式でエンコードします。
     このエンコードは、メールの本体の様に、8ビットクリーンでは
     ないトランスポート層を通じて、バイナリーデータが生き残れる
     様に設計されています。
    </para>
    <para>
     Base64でエンコードされたデータは、エンコード前のデータにくらべて
     33%余計に容量が必要です。
    </para>
    <para>
    <function>base64_decode</function>,
      <function>chunk_split</function>,
     RFC-2045 6.8節も参照下さい。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-url">
   <refnamediv>
    <refname>parse_url</refname>
    <refpurpose>URL を解釈し、その構成要素を返します</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>parse_url</function></funcdef>
      <paramdef>string <parameter>url</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     この関数は、URL の様々な構成要素のうち特定できるものに関して
     連想配列にして返します。 この要素には、
     "scheme", "host", "port", "user", "pass", "path", "query", 
     "fragment" があります。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rawurldecode">
   <refnamediv>
    <refname>rawurldecode</refname>
    <refpurpose>URL エンコードされた文字列をデコードする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>rawurldecode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     文字列の中にパーセント記号(<literal>%</literal>)に続いて
     2 つの 16 進数があるような表現形式を、文字定数に置き換えて
     返します。たとえば、<screen>foo%20bar%40baz</screen> という
     文字列は <screen>foo bar@baz</screen> としてデコードされます。
    </para>
    <simpara>
     <function>rawurlencode</function>, 
     <function>urldecode</function>,
     <function>urlencode</function> も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.rawurlencode">
   <refnamediv>
    <refname>rawurlencode</refname>
    <refpurpose>RFC1738に基づきURLエンコードを行う</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>rawurlencode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <screen>-_.</screen>を除くすべての非アルファベット文字をパーセン
     ト記号 (<literal>%</literal>)に続いて2つの16進数がある表現形式に
     置き換えた文字列を返します。これは、文字定数が特殊なURLデリミタと
     して解釈されたり、URL デリミタが(いくつかの電子メールシステムのよ
     うな)転送メディアにより文字変換されて失われてしまったりすることが
     ないように、RFC1738で定められたエンコーディング方法です。たとえば、
     FTP のURLに中にパスワードを埋め込みたい場合は以下のようにします。
     <example>
      <title><function>rawurlencode</function> の例1</title>
      <programlisting role="php">
<![CDATA[
echo '<a href="ftp://user:', rawurlencode('foo @+%/'),
     '@ftp.my.com/x.txt">';
]]>
      </programlisting>
     </example>
     また、URLの一部としてパス情報を渡す場合は、
     <example>
      <title><function>rawurlencode</function> の例2</title>
      <programlisting role="php">
<![CDATA[
echo '<a href="http://x.com/department_list_script/',
    rawurlencode('sales and marketing/Miami'), '">';
]]>
      </programlisting>
     </example>
     のようにします。
    </para>
    <simpara>
     <function>rawurldecode</function>, 
     <function>urldecode</function>,
     <function>urlencode</function>も参照下さい。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.urldecode">
   <refnamediv>
    <refname>urldecode</refname>
    <refpurpose>エンコードされたURL文字列のデコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>urldecode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     与えられた文字列中のあらゆるエンコード文字
     <literal>%<replaceable>##</replaceable></literal>をデコードします。
     デコードされた文字列が返ります。
     <example>
      <title><function>urldecode</function>の使用例</title>
      <programlisting role="php">
<![CDATA[
$a = explode('&', $QUERY_STRING);
$i = 0;
while ($i < count($a)) {
    $b = split('=', $a[$i]);
    echo 'Value for parameter ', htmlspecialchars(urldecode($b[0])),
         ' is ', htmlspecialchars(urldecode($b[1])), "<br />\n";
    $i++;
}
]]>
      </programlisting>
     </example>
    </para>
     <para>
     <function>urlencode</function>、<function>rawurlencode</function>、
     <function>rawurldecode</function>も参考にしてください。
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>URL文字列のエンコード</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>urlencode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <literal>-_.</literal>を除くすべての非英数文字が、%記号
     (<literal>%</literal>)に続く二桁の数字で置き換えられ、
     空白は+記号(<literal>+</literal>)にエンコードされます。
     同様の方法で、WWWのフォームからポストされたデータはエンコード
     され、<literal>application/x-www-form-urlencoded</literal>
     メディア型も同様です。RFC1738エンコード(
     <function>rawurlencode</function>を参照してください)との
     違いは、歴史的な理由で、空白が+記号にエンコードされることです。
     本関数は、URLの問い合わせ部分に使用する文字列のエンコードや
     次のページへ変数を渡すのに便利です。
     <example>
      <title><function>urlencode</function>の使用例</title>
      <programlisting role="php">
<![CDATA[
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      HTMLエンティティにマッチする変数については注意が必要です。
      &amp;amp、&amp;copy、&amp;poundのようなものがブラウザから送信さ
      れた場合、エンティティの実体が望ましい変数名の代わりに使用されま
      す。これは明らかな問題点であり、W3Cが何年も指摘し続けてきたこと
      です。リファレンスは、<ulink
      url="&url.argsep;">&url.argsep;</ulink>にあります。PHPでは、
      .ini ディレクティブのarg_separatorにより引数のセパレータをW3Cが
      推奨するセミコロンに変更することが可能です。残念なことに多くのユー
      ザエージントは、このセミコロン区切り形式でデータを送信しません。
      よりポータブルな方法としては、セパレータに&amp; の代わりに
      &amp;amp; を使用するというものがあります。この場合、PHPの
      arg_separatorを変更する必要はありません。セパレータは $amp; の
      ままにしますが、URLは
      <function>htmlentities</function>(urlencode($data))によりエンコー
      ドして下さい。
      <example>
       <title><function>urlencode/htmlentities</function>の例</title>
       <programlisting role="php">
<![CDATA[
echo '<a href="mycgi?foo=', htmlentities(urlencode($userinput)), '">';
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function>,
     <function>rawurlencode</function>も参考にしてください。
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

