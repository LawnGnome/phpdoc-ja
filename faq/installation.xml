<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.40 Maintainer: hirokawa Status: ready -->
 <chapter id="faq.installation">
  <title>インストール</title>
  <titleabbrev>インストール</titleabbrev>

  <para>
   このセクションではPHPのインストール方法に関する一般的な質問扱います。
   PHPは(OSX以前のMacOSを除けば)ほとんど全てのOSと、ウェブサーバで利用
   可能です。
  </para>
  <para>
   PHPをインストールには、ディストリビューションに含まれる<ulink
   url="&url.file.installation;">INSTALL</ulink>ファイルの説明に従っ
   てください。ウィンドウズユーザの場合は加えて<ulink
   url="&url.file.readmewin;">install.txt</ulink>ファイルも読む必要
   があります。またウィンドウズユーザのための役立つヒントが<link
   linkend="install.windows">ここ</link>にあります。
  </para>

  <qandaset>
   <qandaentry id="faq.installation.apache2">
    <question>
     <para>
      Why shouldn't I use Apache 2 in a production environment?
     </para>
    </question>
    <answer>
     <para>
      The following answer is based in this modified excerpt of a mail
      by Rasmus Lerdorf.
     </para>
     <para>
      Apache 2 is a complete rewrite and a complete architecture change from
      Apache 1. It is not like going from PHP 3 to PHP 4 or from PHP 4 to PHP 5.
      There is a lot of code that is common, and certainly the base architecture
      of PHP has not changed for years. So comparing Apache 1 vs. Apache 2 to
      PHP 4 vs. PHP 5 makes no sense. The architecture has been proven over
      the years and the code, while somewhat unwieldy in places, is a known
      entity. PHP from the very early days was designed against this basic
      Apache 1 architecture and works extremely well running under it.
     </para>
     <para>
      The major feature that draws people to Apache 2 is threading.  On Windows
      where most basic libraries are, and must be, threadsafe, Apache 2 does
      actually make sense and it would be good to work out the kinks on that
      platform. However, on UNIX there are a lot of basic libraries where
      thread safety is an unknown. And this is not about PHP extensions, it is
      about 3rd-party libraries underneath PHP's hundreds of extensions.
      Whether any one 3rd-party library is threadsafe is really hard to
      determine. There are a lot of variables involved, including which OS,
      which version of the OS, which libc, which version of that libc and on
      some platforms even the compiler flags used to compile these things. And
      to make it even more fun, tracking down a thread safety problem is damn
      well near impossible. Hundreds of people may well state that
      Apache+PHP+ext/foo works perfectly for them, but maybe they are only
      getting about a million hits a day. Then another user comes along who
      gets 100 million hits a day and uses a fast dual-cpu machine and
      everything blows up because now suddenly the window for some tiny race
      condition has been made much larger due to the faster cpu speeds, the
      second cpu and the higher frequency of requests.  And the bug report we
      get from this user will be something along the lines of:
     </para>
     <blockquote>
      <para>
       It don't work sometimes.  Most of the times it works fine, but then
       every now and then it just don't. The error is different each time
       and I have no idea how to reproduce it, but fix it right away!!!
      </para>
     </blockquote>

     <para>What can we do about these?</para>
     <para>
      There are a number of (fixable) technical reasons Rasmus does not think
      Apache2+PHP is a good idea in a production environment, but setting
      those aside it really boils down to one simple concept:
     </para>
     <para>
      PHP is glue. It is the glue used to build cool web applications by
      sticking dozens of 3rd-party libraries together and making it all appear
      as one coherent entity through an intuitive and easy to learn language
      interface. The flexibility and power of PHP relies on the stability and
      robustness of the underlying platform. It needs a working OS, a working
      web server and working 3rd-party libraries to glue together. When any of
      these stop working PHP needs ways to identify the problems and fix them
      quickly. By making the underlying framework more complex by not having
      completely separate execution threads, completely separate memory
      segments and a strong sandbox for each request to play in, a feet of
      clay is introduced into PHP's system.
     </para>
     <para>
      Using the prefork mpm with Apache 2 to avoid the threading is possible,
      and yes using a standalone fastcgi mechanism to avoid the threading,
      too, but then defining characteristic of the web server of choice are
      avoided.  At this point in its development, Rasmus still maintains that
      one is better off simply sticking with Apache 1 for serving up PHP pages
      with the one caveat that Apache 1 sucks pretty badly on Windows.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.phpini">
    <question>
     <para>
      Unix/Windows: php.iniファイルはどこに置けばよいのですか？
     </para>
    </question>
    <answer>
     <para>
      UNIXの場合、デフォルトでは<filename>/usr/local/lib</filename>
      です。コンパイル時に
      <link linkend="configure.with-config-file-path">--with-config-file-path</link>
      オプションを使用してこの場所を変えたいという人も多いでしょう。
      例えばこのようにすることも出来ます：
      <programlisting role="shell">
--with-config-file-path=/etc
      </programlisting>
      そしてディストリビューションの<filename>php.ini-dist</filename>
      を<filename>/etc/php.ini</filename>にコピーして環境に合うように
      編集してください。
     </para>
     <programlisting role="shell">
--with-config-file-scan-dir=PATH 
     </programlisting>
     <para>
     ウィンドウズの場合、&php.ini;のデフォルトパスはWindowsディレクトリになります。
     Apacheウェブサーバを使っている場合はまずApacheがインストールされているディレクトリ
     (例えば<filename>c:\program files\apache group\apache</filename>にある
     &php.ini;を探そうとします。このため、異なる&php.ini;ファイルを異なるバージョンの
     Apacheごとに置いておくことができます。
     </para>
     <para>
     <link
     linkend="configuration.file">設定ファイル</link>の章も参照してください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.nodata">
    <question>
     <para>
      Unix: PHPをインストールしましたが、ファイルをロードするたびに
      'Document Contains No Data(ページが表示できません)'というメッ
      セージが表示されます。何が起こっているのですか？
     </para>
    </question>
    <answer>
     <para>
      これはおそらくPHPに何らかの問題が起こっていてコアダンプしている
      という状態です。サーバのエラーログを見てこのケースかどうかチェッ
      クしてください。そして小さなテストケースで問題を再現させてみてく
      ださい。もし'gdb'の使い方が分かるならバグレポートに加えてバック
      トレースを提供してもらえると開発者が問題の箇所を突き止めるのに非
      常に役立ちます。もしあなたがPHPをApacheモジュールとして使用して
      いる場合は以下のようにします：
      <itemizedlist>
       <listitem>
        <para>
         httpdを停止します
        </para>
       </listitem>
       <listitem>
        <para>
         gdb httpd
        </para>
       </listitem>
       <listitem>
        <para>
         Stop your httpd processes
        </para>
       </listitem>
       <listitem>
        <para>
         &gt; run -X -f /path/to/httpd.conf
        </para>
       </listitem>
       <listitem>
        <para>
         ブラウザから問題のあるURLにアクセスします
        </para>
       </listitem>      
       <listitem>
        <para>
         &gt; run -X -f /path/to/httpd.conf
        </para>
       </listitem>      
       <listitem>
        <para>
         もしコアダンプが発生するとgdbが知らせてくれます
        </para>
       </listitem>      
       <listitem>
        <para>
         bt とタイプします
        </para>
       </listitem>
       <listitem>
        <para>
         このバックトレースをバグレポートに含めてください。バグレポートは
         <ulink url="&url.php.bugs;">&url.php.bugs;</ulink> 
         から送信してください。
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
     もしそのスクリプトが正規表現関数を使用している場合
     (<function>ereg</function>やその類似関数)、PHPとApacheが同じ正規表現の
     パッケージを使用してコンパイルされているかどうかを確認してください。
     PHPとApache 1.3.xを使用している場合は常に確認が必要です。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.processing">
    <question>
     <para>
      Unix: RPMを使ってPHPをインストールしたのですが、ApacheがPHPのページを
      処理してくれません。何が起こっているのですか？
     </para>
    </question>
    <answer>
     <para>
     あなたがApacheとPHPの両方をRPMでインストールしたとすると、いかに示す
     内容の一部もしくは全てを&httpd.conf;ファイルに追加するか、コメントを
      外す必要があります：
      <programlisting role="apache-conf">
<![CDATA[
# Extra Modules
AddModule mod_php.c
AddModule mod_php3.c
AddModule mod_perl.c

# Extra Modules
LoadModule php_module         modules/mod_php.so
LoadModule php3_module        modules/libphp3.so     # for PHP 3
LoadModule php4_module        modules/libphp4.so     # for PHP 4
LoadModule perl_module        modules/libperl.so
]]>
      </programlisting>
      そして以下の行：
      <programlisting>
AddType application/x-httpd-php3 .php3    /* for PHP 3 */
AddType application/x-httpd-php .php      /* for PHP 4 */
      </programlisting>
      以上の内容を全体設定、もしくはPHPサポートを追加したいバーチャル
      ドメインの設定に加えてください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.compile">
    <question>
     <para>
      Unix: PHP 3をRPMを使ってインストールしたのですが、そのRPMは私が必
      要なデータベースサポートなしでコンパイルされたものでした。どうす
      ればよいですか？
     </para>
    </question>
    <answer>
     <para>
      PHP 3のビルド方法の制約により、どの環境にも対応できる柔軟なPHPの
      RPMを作成するのは困難です。この問題に関してはPHP 4で取り組んでい
      ます。PHP 3ではとりあえずPHPディストリビューションの
      INSTALL.REDHATファイルで説明されている方法を用いることをお勧めし
      ます。もしどうしてもRPMバージョンのPHP 3を使う、という場合は続き
      をお読みください。
     </para>
     <para>
      RPMのパッケージャはインストール処理を単純化するため、<emphasis>
       そして</emphasis>標準の/usr/local/ディレクトリではなく/usr/を使
      用するためにデータベースサポート無しのRPMを作成しています。デー
      タベースサポートを追加するにはRPM specファイルにサポートするデー
      タベースの種類と最上位ディレクトリを指定する必要があります。
     </para>
     <para>
      以下の例は広く使われているMySQLデータベースサポートを追加して
      Apacheモジュールをインストールする場合について説明しています。
     </para>
     <para>
      もちろん以下の全ての情報はPHPがサポートするいずれのデータベース
      の場合でも対象箇所を適宜変更すれば対応可能です。この場合はMySQL
      とApache共にRPMのみを使ってインストールしたものと仮定しています。
      <itemizedlist>
       <listitem>
        <para>
         まずmod_php3を削除します : 
         <programlisting role="shell">
rpm -e mod_php3
         </programlisting>
        </para>
       </listitem>
       <listitem>
        <para>
         ソースRPMを手に入れてインストールします。--rebuildではありません。
         <programlisting role="shell">
rpm -Uvh mod_php3-3.0.5-2.src.rpm
         </programlisting>
        </para>
       </listitem>
       <listitem>
        <para>
         <filename>/usr/src/redhat/SPECS/mod_php3.spec</filename>を編集します
        </para>
        <para>
         %buildセクションに追加するデータベースサポートとそのパスを記述します。
        </para>
        <para>
         MySQLの場合は以下のようになります。
<option role="configure">--with-mysql=/usr</option>
         The %build section will look something like this:
         <programlisting role="shell">
./configure --prefix=/usr \
--with-apxs=/usr/sbin/apxs \
--with-config-file-path=/usr/lib \
--enable-debug=no \
--enable-safe-mode \
--with-exec-dir=/usr/bin \
--with-mysql=/usr \
--with-system-regex
         </programlisting>
        </para>
       </listitem>
       <listitem>
        <para>
         変更が終了したら以下のようにしてバイナリRPMを構築します：
         <programlisting role="shell">
rpm -bb /usr/src/redhat/SPECS/mod_php3.spec
         </programlisting>
        </para>
       </listitem>
       <listitem>
        <para>
         インストールします。
         <programlisting role="shell">
rpm -ivh /usr/src/redhat/RPMS/i386/mod_php3-3.0.5-2.i386.rpm
         </programlisting>
        </para>
       </listitem>
      </itemizedlist>
      Apacheを再起動するのを忘れないでください。そうすればPHP 3には
      MySQLサポートが追加されているはずです。ただ、ディストリビューショ
      ンのtarファイルから構築してそこに含まれる
      <filename>INSTALL.REDHAT</filename>ファイルにしたがった方がおそ
      らくずっと簡単である、ということも忘れないでください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.frontpage">
    <question>
     <para>
      Unix: ApacheにFrontPageエクステンションのパッチを当てたら、突然
      PHPが動作しなくなってしまいました。PHPはApacheのFrontPageエクス
      テンションと共存することはできないのですか？
     </para>
    </question>
    <answer>
     <para>
      いいえ。PHPはFrontPageエクステンションと問題なく共存できます。問
      題はFrontPageエクステンションのパッチがPHPが依存しているApacheの
      構造の一部を変更してしまうことにあります。パッチを当てた後でPHP
      を再コンパイル('make clean; make'としてください)すれば問題は解決さ
      れます。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.blankscreen">
    <question>
     <para>
      Unix/Windows: PHPをインストールしたのですがブラウザからPHPスクリ
      プトにアクセスしても何も表示されません。
     </para>
    </question>
    <answer>
     <para>
      ブラウザの「ソースの表示」を実行してください。おそらくPHPのソー
      スコードが表示されると思います。これはウェブサーバがスクリプトを
      PHPに渡していないためスクリプトが実行されていない、ということを
      意味します。サーバ側の設定のどこかが間違っているはずですので、
      PHPインストールマニュアルに従って再度入念に設定を確認してみてく
      ださい。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.500error">
    <question>
     <para>
      Unix/Windows: PHPをインストールしたのですがブラウザからPHPスクリ
      プトにアクセスするとInternal Server Error 500となってしまいます。
     </para>
    </question>
    <answer>
     <para>
      ウェブサーバがPHPを実行するときに何らかの問題が起きています。ど
      んなエラーが起こっているか確認するために、コマンドラインでPHP実
      行ファイル(Windowsでは<filename>php.exe</filename>)のあるディレ
      クトリに移動して<literal>php -i</literal>を実行してください。もし
      PHPの実行時に問題があった場合は適切なエラーメッセージが表示され
      るのでそれを手がかりに次に何をすべきかを知ることができます。画面
      一杯にHTML(<function>phpinfo</function>関数の出力)が表示された場
      合にはPHPは問題なく動作していますので、問題はウェブサーバの設定
      にあるはずです。再度入念にチェックしてみてください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.undefinedsyms">
    <question>
     <para> 
      PHPをインストールするまではエラーもなく問題なく進んだのですが、
      apacheを起動させようとするとundefined symbolエラーが発生します:
      <programlisting role="shell">
[mybox:user /src/php4] root# apachectl configtest
 apachectl: /usr/local/apache/bin/httpd Undefined symbols:
  _compress
  _uncompress
      </programlisting>
     </para>
    </question>
    <answer>
     <para>
      これは、PHPとは関係なくMySQLクライアントライブラリの問題です。
      このライブラリのうちある種のものは <option
      role="configure">--with-zlib</option> を必要とし、
      他のものは必要としません。こ問題はMySQL FAQでも扱われています。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.cgierror">
    <question>
     <para>
      Windows: PHPをインストールしたのですがブラウザからPHPスクリプト
      にアクセスすると次のようなエラーが出力されます：
      <screen>
cgi error:
 The specified CGI application misbehaved by not
 returning a complete set of HTTP headers.
 The headers it did return are:
      </screen>
     </para>
    </question>
    <answer>
     <para>
      このエラーメッセージはPHPが(何らかの理由で)何も出力できなかった
      ことを意味します。詳細なエラーメッセージを得るためにはコマンドラ
      インから、PHP実行ファイル(Windowsでは
      <filename>php.exe</filename>)のあるディレクトリに移動して
      <command>php -i</command>を実行してください。もしPHPの実行時に問題
      があった場合は適切なエラーメッセージが表示されるのでそれを手がか
      りに次に何をすべきかを知ることができます。画面一杯に
      HTML(<function>phpinfo</function>関数の出力)が表示された場合には
      PHPは問題なく動作しています。
     </para>
     <para>
      PHPがコマンドラインで動作したなら、再度ブラウザからPHPスクリプト
      にアクセスしてみてください。もしまだ失敗するようなら以下のいずれか
      の理由によるものと思われます。
     </para>
     <itemizedlist>
      <listitem>
       <simpara>
        PHPスクリプト, 
        <filename>php.exe</filename>, <filename>php4ts.dll</filename>,
        &php.ini;もしくはロードしようとしているPHPエクステンションの
        ファイルパーミッションが匿名インターネットユーザ
        <literal>IUSER_&lt;machinename&gt;</literal>にアクセスできな
        いものになっている。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        スクリプトが存在しない(もしくはあなたが在ると思っている場所と
        ウェブサーバのルートディレクトリからの相対位置がずれている)。
        IISを使用している場合は、Internet Service Managerでスクリプト
        マッピングを設定するときに「ファイルの存在を確認する」にチェッ
        クをすることでこのエラーをトラップすることができます。もしスク
        リプトファイルが存在しない場合はサーバが代わりに404エラーを返
        すようになります。これにはもう一つ利点があります。それはIISが
        スクリプトファイルのNTLanManパーミッションに応じて認証を要求す
        るようになる、ということです。
       </simpara>
      </listitem>
     </itemizedlist>
    </answer>
   </qandaentry>

   <qandaentry id="faq.install.phpandiis">
    <question>
     <para>
      Windows: 全ての説明に従っているのにPHPがIISで動作しません！
     </para>
    </question>
    <answer>
     <para>
      PHPスクリプトを実行しようとするあらゆるユーザが
      <filename>php.exe</filename>の実行権限を必要としているということを忘
      れないでください。IISはインストール時に追加された匿名ユーザを使用し
      ます。このユーザに対して<filename>php.exe</filename>の実行権限が必要
      です。また、認証された全てのユーザに関しても
      <filename>php.exe</filename>の実行権限が必要です。IIS4の場合はさらに
      PHPがスクリプトエンジンであるということを教えてやる必要があります。
      <link linkend="faq.installation.forceredirect">このFAQ</link>も
      読んでください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.forceredirect">
    <question>
     <para>
       When running PHP as CGI with IIS, PWS, OmniHTTPD or Xitami,
       I get the following error: <literal>Security Alert! PHP CGI 
       cannot be accessed directly.</literal>.
       IIS, PWS, OmniHTTPD, Xitami上でCGIとしてPHPを実行するとき、
       次のようなエラーが出る:<literal>Security Alert! PHP CGI 
       cannot be accessed directly.</literal>
     </para>
    </question>
    <answer>
     <para>
      <link linkend="ini.cgi.force-redirect">cgi.force_redirect</link>
      に<literal>0</literal>をセットしてください。デフォルトでは
      <literal>1</literal>にセットされていますので、そのディレクティブ
      が<literal>;</literal>でコメントアウトされていないことを確認してください。
      他のディレクティブと同様にこれは &php.ini; 上でセットされます。
     </para>
     <para>
      デフォルトは<literal>1</literal>なので、100%正しく&php.ini;ファイルが
      読み込まれているかどうかが重要です。
      詳細は<link linkend="faq.installation.findphpini">このFAQ</link>を
      読んでください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.findphpini">
    <question>
     <para>
      &php.ini; が認識され読み込まれていることをどうやって知ることが
      できますか？ 自分の行った変更が反映されてないらしいのですが。
     </para>
    </question>
    <answer>
     <para>
      &php.ini;とそれがPHPに読み込まれているかを確認するには
      <function>phpinfo</function>をコールして最初のほうに
      表示されている<literal>Configuration File (php.ini)</literal>
      を見てください。これはPHPが認識している&php.ini; と、それが
      読み込まれているか否かを示しています。ディレクトリパスだけが
      表示されている場合は、読み込まれていないということなので、
      そのディレクトリに&php.ini;を置いてください。
      &php.ini;がPATHにある場合それが読み込まれます。
     </para>
     <para>
      &php.ini;が読み込まれていてかつPHPをモジュールとして実行
      している場合、&php.ini;を変更した後で必ずWebサーバを
      再起動してください。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.addtopath">
    <question>
     <para>
      How do I add my PHP directory to the <varname>PATH</varname>
      on Windows?
     </para>
    </question>
    <answer>
     <para>
      On Windows NT, 2000, XP and 2003:
      <itemizedlist>
       <listitem><para>
        Go to Control Panel and open the System icon (Start -&gt; Settings
        -&gt; Control Panel -&gt; System, or just Start -&gt; Control Panel
        -&gt; System for Windows XP/2003)
       </para></listitem>
       <listitem><para>
        Go to the Advanced tab
       </para></listitem>
       <listitem><para>
        Click on the 'Environment Variables' button
       </para></listitem>
       <listitem><para>
        Look into the 'System Variables' pane
       </para></listitem>
       <listitem><para>
        Find the Path entry (you may need to scroll to find it)
       </para></listitem>
       <listitem><para>
        Double click on the Path entry
       </para></listitem>
       <listitem><para>
        Enter your PHP directory ant the end, including ';' before (e.g.
        <literal>;C:\php</literal>)
       </para></listitem>
       <listitem><para>
        Press OK and restart your computer
       </para></listitem>
      </itemizedlist>
     </para>
     <para>
      On Windows 98/Me you need to edit the <filename>autoexec.bat</filename>
      file:
      <itemizedlist>
       <listitem><para>
        Open the Notepad (Start -&gt; Run and enter notepad)
       </para></listitem>
       <listitem><para>
        Open the <filename>C:\autoexec.bat</filename> file
       </para></listitem>
       <listitem><para>
        Locate the line with PATH=C:\WINDOWS;C:\WINDOWS\COMMAND;..... and add:
        <literal>;C:\php</literal> to the end of the line
       </para></listitem>
       <listitem><para>
        Save the file and restart your computer
       </para></listitem>
      </itemizedlist>
     </para> 
     <para> 
      The PHP manual used to promote the copying of files into the Windows 
      system directory, this is because this directory  
      (<filename>C:\Windows</filename>, <filename>C:\WINNT</filename>, etc.)
      is by default in the systems PATH.  Copying files into the Windows 
      system directory has long since been deprecated and may cause problems.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.phprc">
    <question>
     <para>
      How do I make the &php.ini; file available to PHP on windows?
     </para>
    </question>
    <answer>
     <para>
      There are several ways of doing this. If you are using Apache, read
      their installation specific instructions (<link
       linkend="install.windows.apache1">Apache 1</link>, <link
       linkend="install.windows.apache2">Apache 2</link>), otherwise you must
      set the <varname>PHPRC</varname> environment variable:
     </para>
     <para>
      On Windows NT, 2000, XP and 2003:
      <itemizedlist>
       <listitem><para>
        Go to Control Panel and open the System icon (Start -&gt; Settings
        -&gt; Control Panel -&gt; System, or just Start -&gt; Control Panel
        -&gt; System for Windows XP/2003)
       </para></listitem>
       <listitem><para>
        Go to the Advanced tab
       </para></listitem>
       <listitem><para>
        Click on the 'Environment Variables' button
       </para></listitem>
       <listitem><para>
        Look into the 'System variables' pane
       </para></listitem>
       <listitem><para>
         Click on 'New' and enter 'PHPRC' as the variable name and the
         directory where &php.ini; is located as the variable value (e.g.
         <literal>C:\php</literal>)
       </para></listitem>
       <listitem><para>
        Press OK and restart your computer
       </para></listitem>
      </itemizedlist>
     </para>
     <para>
      On Windows 98/Me you need to edit the <filename>autoexec.bat</filename>
      file:
      <itemizedlist>
       <listitem><para>
        Open the Notepad (Start -&gt; Run and enter notepad)
       </para></listitem>
       <listitem><para>
        Open the <filename>C:\autoexec.bat</filename> file
       </para></listitem>
       <listitem><para>
        Add a new line to the end of the file: <literal>set PHPRC
         C:\php</literal> (replace <literal>C:\php</literal> with the
        directory where &php.ini; is located)
       </para></listitem>
       <listitem><para>
        Save the file and restart your computer
       </para></listitem>
      </itemizedlist>
     </para>      
    </answer>
   </qandaentry>

   <qandaentry id="faq.installation.apache.multiviews">
    <question>
     <para>
      Is it possible to use Apache content negotiation (MultiViews option)
      with PHP?
     </para>
    </question>
    <answer>
     <para>
      If links to PHP files include extension, everything works perfect. This
      FAQ is only for the case when links to PHP files don't include extension
      and you want to use content negotiation to choose PHP files from URL
      with no extension.
      In this case, replace the line <literal>AddType application/x-httpd-php
      .php</literal> with:
      <programlisting role="apache-conf">
<![CDATA[
# PHP 4
AddHandler php-script php
AddType text/html php

# PHP 5
AddHandler php5-script php
AddType text/html php
]]>
     </programlisting>
     This solution doesn't work for Apache 1 as PHP module doesn't catch
     <literal>php-script</literal>.
     </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
