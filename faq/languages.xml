<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.15 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
 <chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PHP と他の言語</title>
  <titleabbrev>PHP と他の言語</titleabbrev>

  <para>
   PHP はウェブプログラミングをするには最高の言語です。が、
   他の言語はどうなのでしょうか?
  </para>

  <qandaset>
   <qandaentry xml:id="faq.languages.asp">
    <question>
     <para>PHP vs ASP?</para>
    </question>
    <answer>
     <para>
      ASP それ自体は言語ではなく、Active Server Pages の頭文字です。ASP
      を作成するのに使用される実際の言語は Visual Basic Script か JScript です。
      ASP の最大の欠点は、それが Microsoft Internet Information Server (IIS)
      でのみ動作するメーカー独自のシステムだという点です。これにより、ASP は
      Win32 ベースのサーバ上でしか動作しません。ASP を他のプラットフォーム、
      ウェブサーバで動作させようといういくつかのプロジェクトが進行中です。
      <link xlink:href="&url.halcyon;">Halcyon</link> の <link
      xlink:href="&url.instantasp;">InstantASP</link>(商用)、<link
      xlink:href="&url.chilisoft;">Chili!Soft</link> の
      Chili!Soft ASP(商用)、そして <link
      xlink:href="&url.openasp;">ActiveScripting.org の OpenASP</link> です。
      ASP は PHP に比べて遅く、面倒で安定性も低いといわれています。ASP
      のプロフェッショナルの人たちの中には、ASP では主に VBScript
      が使用されているので Visual Basic でのプログラミングに慣れている人に
      とっては覚えるのが比較的簡単だという人もいます。また、IIS サーバでは
      ASP サポートがデフォルトで有効になっているので設定が簡単という利点もあります。
      ASP に組み込まれているコンポーネントは非常に限られていて、もし
      FTP サーバと協調するといった「進んだ」機能を使おうと思ったら
      別途コンポーネントを購入しなければなりません。
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.aspconverter">
    <question>
     <para>ASP から PHP へのコンバータはありますか?</para>
    </question>
    <answer>
     <para>
      はい。サーバーサイドの <link xlink:href="&url.asp2php;">asp2php</link> は
      <link xlink:href="&url.asptranslator;">そのクライアントサイド</link>
      オプションと同じくらい有名です。
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.coldfusion">
    <question>
     <para>PHP vs Cold Fusion?</para>
    </question>
    <answer>
     <para>
      世間では PHP は Cold Fusion に比べて速く、複雑なプログラミングを
      効率的に行うことができ、新しいアイデアを意欲的に取り込んでいると
      言われています。また、安定していてより少ないリソースで動作するというのが
      一般的な意見です。Cold Fusion はエラー処理、データベースの抽象化、
      日付の扱いにおいて優れていますが、データベースの抽象化については
      PHP 4 で行われています。Cold Fusion の利点として挙げられることの一つに、
      その優れたサーチエンジンがありますが、サーチエンジンはウェブスクリプト言語に
      含まれるべき機能ではないのではないかという意見もあります。PHP は
      ほとんど全てのプラットフォームで動作しますが Cold Fusionが 動作するのは
      Win32, Solaris, Linux, HP/UX だけです。PHP は初期段階から多少の
      プログラミングに関する知識を必要としますが、Cold Fusion にはすばらしい
      IDE があって、一般にとっつきやすいと言われています。Cold Fusion は
      プログラマではない人たちも意識してデザインされていますが、PHP は
      プログラマを主なターゲットとしています。
     </para>
     <para>
      Michael J Sheldon によるこのトピックに関するすばらしいサマリが
      PHP のメーリングリストに投稿されました。<link xlink:href="&url.coldfusion.summary;">
      &url.coldfusion.summary;</link> でその内容を読むことができます。
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.perl">
    <question>
     <para>PHP vs Perl?</para>
    </question>
    <answer>
     <para>
      PHP の Perl に対して最も有利な点は、Perl が何もかもやろうとしてその結果
      複雑になってきているのに対して、PHP はウェブスクリプティングを念頭において
      デザインされていることです。Perl の柔軟さ/複雑さは、他人にとって非常に
      読みにくいコードが簡単に書けてしまうということでもあります。PHPは、柔軟さを
      失うことなくそれほどややこしくもなく厳密でもない構成になっています。
      PHP は Perl に比べ、簡単に既存の HTML に統合することができます。PHP には
      Perl で使用されている非常に多くの「良い」機能があります。構成や文法等です。
      そしてこれらが Perl ほど複雑になることなく提供されます。Perl は 80 年代後半から
      在る十分に枯れた真の言語ですが、PHP は急速に成長しています。 
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
