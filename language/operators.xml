  <chapter id="language.operators">
   <title>演算子</title>
   <simpara>
   </simpara>

   <sect1 id="language.operators.arithmetic">
    <title>代数演算子</title>
    <simpara>
    学校で習った基礎代数を憶えていますか？
    この演算子はそれらと同様に動作します。
    </simpara>

    <table>
     <title>代数演算子</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>例</entry>
        <entry>名前</entry>
        <entry>結果</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>$a + $b</entry>
        <entry>加算</entry>
        <entry>$a および $b の合計</entry>
       </row>
       <row>
        <entry>$a - $b</entry>
        <entry>減算</entry>
        <entry>$a と $b の差</entry>
       </row>
       <row>
        <entry>$a * $b</entry>
        <entry>乗算</entry>
        <entry>$a および $b の積</entry>
       </row>
       <row>
        <entry>$a / $b</entry>
        <entry>割算</entry>
        <entry>$a および $b の商</entry>
       </row>
       <row>
        <entry>$a % $b</entry>
        <entry>剰余</entry>
        <entry>$a を $b で割った余り</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

<!-- This appears to be inaccurate. Division always returns a float.
    <simpara>
     The division operator ("/") returns an integer value (the result
     of an integer division) if the two operands are integers (or
     strings that get converted to integers). If either operand is a
     floating-point value, floating-point division is performed.
    </simpara>
--></sect1>

   <sect1 id="language.operators.assignment">
    <title>代入演算子</title>
    <simpara>
    代入演算子の基本となるものは "=" です。
    この演算子に関して最初に思い付く意味は、"等しい" であるかもしれません。
    違います。
    本当は、左オペランドに右オペランドの式の値を設定する
    ("得て代入する")ことを意味します。
    </simpara>
    <para>
	代入式の値は、代入される値です。
	つまり、"$a=3" の値は、3 です。
	これにより、以下のようなトリッキーなことができるようになります。
	 <informalexample><programlisting>
 $a = ($b = 4) + 5; // $a は 9 に等しく、$b は 4 にセットされます。
</programlisting></informalexample>
    </para>
    <para>
	全てのバイナリ演算子および文字列演算子に関して、
	基本的な代入演算子に加えて "複合演算子" があります。
	この演算子により、式の値を使用し、式の結果にその値をセットすることが
	できます。
例: <informalexample><programlisting>
$a = 3;
$a += 5; // $a を 8 にセットします。$a = $a + 5; と同じです。
$b = "Hello ";
$b .= "There!"; //  $b を "Hello There!" にセットします。 $b = $b . "There!"; と同じです。
</programlisting></informalexample>
    </para>

    <para>
        代入は、元の変数を新しい変数にコピーする(値による代入)ため、
	片方の変数に対する変更はもう片方に影響を与えないということに注意して下さい。
	この動作により、
	密なループの内側で大きな配列のようなものをコピーする必要がある場合には
	問題を生じる可能性があります。
	PHP4 では、<computeroutput>$var = &amp;$othervar;</computeroutput> 構文により
	参照による代入をサポートしていますが、PHP3 ではサポートしません。
	'参照による代入'は、両方の変数が同じデータを指し、コピーを行わないことを
	意味します。
    </para>
 
   </sect1>

   <sect1 id="language.operators.bitwise">
    <title>ビット演算子</title>
    <simpara>
    ビット演算子は、整数における特定のビットをオンまたはオフにすることを
    可能にします。
    </simpara>

    <table>
     <title>ビット演算子</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>例</entry>
        <entry>名前</entry>
        <entry>結果</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>$a & $b</entry>
        <entry>論理積</entry>
        <entry>$a および $b の両方にセットされているビット</entry>
       </row>
       <row>
        <entry>$a | $b</entry>
        <entry>論理和</entry>
        <entry>$a または $b のどちらかにセットされているビット</entry>
       </row>
       <row>
        <entry>$a ^ $b</entry>
        <entry>排他的論理和</entry>
        <entry>$a または $b にセットされており、両方にセットされていないビット</entry>
       </row>
       <row>
        <entry>~ $a</entry>
        <entry>否定</entry>
        <entry>$aにセットされているビットはセットせず、そうでないものは逆にする</entry>
       </row>
       <row>
        <entry>$a &lt;&lt; $b</entry>
        <entry>左シフト</entry>
        <entry>$a のビットを左に $b ビットシフトする(各シフトは "2をかける"ことを意味します)</entry>
       </row>
       <row>
        <entry>$a &gt;&gt; $b</entry>
        <entry>右シフト</entry>
        <entry>$a のビットを右に $b ビットシフトします (各シフトは "2で割る"ことを意味します)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect1>

   <sect1 id="language.operators.comparison">
    <title>比較演算子</title>
    <simpara>
    比較演算子は、その名前が示すように、二つの値を比較します。
    </simpara>

    <table>
     <title>比較演算子</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>例</entry>
        <entry>名前</entry>
        <entry>結果</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>$a == $b</entry>
        <entry>等しい</entry>
        <entry>$a が $b に等しい時に TRUE。</entry>
       </row>
       <row>
        <entry>$a === $b</entry>
        <entry>等しい</entry>
        <entry>True if $a が $b に等しく同じ型でである場合に True。
	(PHP4 のみ)</entry>
       </row>
       <row>
        <entry>$a != $b</entry>
        <entry>等しくない</entry>
        <entry>$a が $b に等しくない場合に TRUE。</entry>
       </row>
       <row>
        <entry>$a &lt; $b</entry>
        <entry>より少ない</entry>
        <entry>$a が $b より少ない時に TRUE。</entry>
       </row>
       <row>
        <entry>$a &gt; $b</entry>
        <entry>より多い</entry>
        <entry>$a が $b より多い時に TRUE。</entry>
       </row>
       <row>
        <entry>$a &lt;= $b</entry>
        <entry>より少ないか等しい</entry>
        <entry>$a が $b より少ないか等しい時に TRUE。</entry>
       </row>
       <row>
        <entry>$a &gt;= $b</entry>
        <entry>より多いか等しい</entry>
        <entry>>$a が $b より多いか等しい時に TRUE。</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <para>
    条件演算子としては、他に "?:" (または trinary) 演算子があります。
    この演算子の動作は、Cまたは他の多く言語と同じです。

    <informalexample>
     <programlisting>
     (式1) ? (式2) : (式3);
     </programlisting>
    </informalexample>

    この式は、<replaceable>式1</replaceable> がtrueの場合に
    <replaceable>式2</replaceable> を、
    <replaceable>式1</replaceable> がfalseの場合に
    <replaceable>式3</replaceable> を値とします。
    </para>
   </sect1>
 
 
   <sect1 id="language.operators.execution">
    <title>実行演算子</title>
    
    <para>
 	PHP は1種類の実行演算子、バッククォート (``) をサポートします。
	シングルクォートではないことに注意してください!
	PHP は、後方引用符の中身をシェルコマンドとして実行しようとします。
	出力が返されます。(すなわち、出力を単にダンプするのではなく、
	変数に代入することができます。)
 
 	<informalexample>
 	 <programlisting role="php">
 $output = `ls -al`;
 echo "&lt;pre&gt;$output&lt;/pre&gt;";
 	 </programlisting>
 	</informalexample>
 
    </para>
 
    <para>
 	<function>system</function>,
 	<function>passthru</function>, <function>exec</function>,
 	<function>popen</function>, 
 	<function>escapeshellcmd</function> も参照下さい。
    </para>
 
   </sect1>
   
   <sect1 id="language.operators.increment">
    <title>加算子/減算子</title>
 
    <para>
 	PHP はC言語形式を前置および後置の加算子および減算子をサポートします。
    </para>
 
     <table>
      <title>加算子/減算子</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>例</entry>
         <entry>名前</entry>
         <entry>効果</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>++$a</entry>
         <entry>前置加算子</entry>
         <entry>$a に1を加え、$a を返します。</entry>
        </row>
        <row>
         <entry>$a++</entry>
         <entry>後置加算子</entry>
         <entry>$a を返し、$a に1を加えます。</entry>
        </row>
        <row>
         <entry>--$a</entry>
         <entry>前置減算子</entry>
         <entry>$a から1を引き、$a を返します。</entry>
        </row>
        <row>
         <entry>$a--</entry>
         <entry>後置減算子</entry>
         <entry>$aを返し、$a から1を引きます。</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
 
    <para>
      以下に簡単なスクリプトの例を示します。
 	<informalexample>
 	 <programlisting>
 &lt;?php
 echo "&lt;h3&gt;Postincrement&lt;/h3&gt;";
 $a = 5;
 echo "Should be 5: " . $a++ . "&lt;br&gt;\n";
 echo "Should be 6: " . $a . "&lt;br&gt;\n";
 
 echo "&lt;h3&gt;Preincrement&lt;/h3&gt;";
 $a = 5;
 echo "Should be 6: " . ++$a . "&lt;br&gt;\n";
 echo "Should be 6: " . $a . "&lt;br&gt;\n";
 
 echo "&lt;h3&gt;Postdecrement&lt;/h3&gt;";
 $a = 5;
 echo "Should be 5: " . $a-- . "&lt;br&gt;\n";
 echo "Should be 4: " . $a . "&lt;br&gt;\n";
 
 echo "&lt;h3&gt;Predecrement&lt;/h3&gt;";
 $a = 5;
 echo "Should be 4: " . --$a . "&lt;br&gt;\n";
 echo "Should be 4: " . $a . "&lt;br&gt;\n";
 ?&gt;	  
 	 </programlisting>
 	</informalexample>
    </para>
 
   </sect1>
 
 
    <sect1 id="language.operators.logical">
     <title>論理演算子</title>
 
     <table>
      <title>論理演算子</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>例</entry>
         <entry>名前</entry>
         <entry>結果</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>$a and $b</entry>
         <entry>論理積</entry>
         <entry>$a および $b が共に true の場合に true</entry>
        </row>
        <row>
         <entry>$a or $b</entry>
         <entry>論理和</entry>
         <entry>$a または $b のどちらかが true の場合に true</entry>
        </row>
        <row>
         <entry>$a xor $b</entry>
         <entry>排他的論理和</entry>
         <entry>$a または $b のどちらかが true でかつ両方とも true でない場合に true</entry>
        </row>
        <row>
         <entry>! $a</entry>
         <entry>否定</entry>
         <entry>$a が true でない場合 true</entry>
        </row>
        <row>
         <entry>$a &amp;&amp; $b</entry>
         <entry>論理積</entry>
         <entry>$a および $b が共に true の場合に true</entry>
        </row>
        <row>
         <entry>$a || $b</entry>
         <entry>論理和</entry>
         <entry>$a または $b のどちらかが true の場合に true</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
 
     <simpara>
      "and" および "or" 演算子が2種類あるのは、
      演算が行われる際の優先順位が異なっているためです。
      (<link linkend="language.operators.precedence">演算子の優先順位</link>
      を参照下さい。)
     </simpara>
   </sect1>

   <sect1 id="language.operators.precedence">
    <title>演算子の優先順位</title>
    <para>
    演算子の優先順位は、二つの式が"緊密に"結合している度合いを指定します。
    例えば、式 <literal>1 + 5 * 3</literal> の答えは 16 になり、18 とはなりません。
    これは乗算演算子("*")は、加算演算子("+")より高い優先順位を有するからです。</para>
    <para>
    次の表に示すリストは優先順位が最低ものから並べた演算子の優先順位です。

    <table>
     <title>演算子の優先順位</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>結合時の評価</entry>
        <entry>演算子</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>左</entry>
        <entry>,</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>or</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>xor</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>and</entry>
       </row>
       <row>
        <entry>右</entry>
        <entry>print</entry>
       </row>
       <row>
        <entry>左</entry>
	<entry>= += -= *= /= .= %= &= |= ^= ~= &lt;&lt;= &gt;&gt;=</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>? :</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>||</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>&amp;&amp;</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>|</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>^</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>&amp;</entry>
       </row>
       <row>
        <entry>結合しない</entry>
        <entry>== != ===</entry>
       </row>
       <row>
        <entry>結合しない</entry>
        <entry>&lt; &lt;= &gt; &gt;=</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>&lt;&lt; &gt;&gt;</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>+ - .</entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>* / %</entry>
       </row>
       <row>
        <entry>右</entry>
        <entry>! ~ ++ -- (int) (double) (string) (array) (object) @</entry>
       </row>
       <row>
        <entry>右</entry>
        <entry>[</entry>
       </row>
       <row>
        <entry>結合しない</entry>
        <entry>new</entry>
       </row>
      </tbody>
     </tgroup>
    </table></para></sect1>

   <sect1 id="language.operators.string">
    <title>文字列演算子</title>
    <simpara>
    文字列の演算子は2種類あります。最初のは結合演算子('.')で、
    右引数と左引数を結合したものを返します。
    2番目は、結合代入演算子('.=')です。詳細は、
    <link linkend="language.operators.assignment">代入演算子</link> 
    を参照下さい。
    </simpara>
    <para>
     <informalexample><programlisting>
$a = "Hello ";
$b = $a . "World!"; // $b は、"Hello World!" となります。

$a = "Hello ";
$a .= "World!"; // $a は、"Hello World!" となります。
     </programlisting>
      </informalexample>
    </para>
   </sect1>

  </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
