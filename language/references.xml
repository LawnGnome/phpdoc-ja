 <chapter id="language.references">
  <title>リファレンスの説明</title>
  
  <sect1 id="language.references.whatare">
   <title>リファレンスとは?</title>
   <simpara>
    PHPにおいてリファレンスは、同じ変数の内容を異なった名前でコールす
    ることを意味します。これはCポインタのようなものではなく、シンボル
    テーブルのエイリアスです。PHPでは、変数名と変数の内容は異なってお
    り、このため、同じ内容は異なった複数の名前を有する事が可能である
    ことに注意して下さい。最も良く似ているのは、UNIXのファイル名とファ
    イルの関係です。この場合、変数名はディレクトリエントリ、変数の内
    容はファイル自体に対応します。リファレンスは、UNIXファイルシステ
    ムのハードリンクのようなものであると考えられます。
   </simpara>
  </sect1>
  
  <sect1 id="language.references.whatdo">
   <title>リファレンスが行うことは何ですか?</title>
   <para>
    PHPのリファレンスにより二つの変数が同じ内容を参照することが可能で
    す。つまり、以下のようなものを実行した場合です。
    <informalexample>
     <programlisting role="php">
$a =&amp; $b
     </programlisting>
    </informalexample>
    この場合、<varname>$a</varname>と<varname>$b</varname>は同じ変数を
    指します。
    <note>
     <para>
      ここで、<varname>$a</varname>と<varname>$b</varname>は完全に同じ
      で、<varname>$a</varname>が<varname>$b</varname>を指しているわけ
      ではなく、その逆でもありません。<varname>$a</varname>と
      <varname>$b</varname>は同じ場所を指しているのです。
     </para>
    </note>
   </para>
   <para>
    リファレンスの第2の使用法は、変数のリファレンス渡しです。この場合、
    関数でローカル変数が作成され、コール側の変数と同じ内容へのリファレ
    ンスとなります。例を示します。
    <informalexample>
     <programlisting role="php">
function foo(&amp;$var) {
  $var++;
}

$a=5;
foo($a);
     </programlisting>
    </informalexample>
    この結果、<varname>$a</varname> は 6となります。
   </para>
  </sect1>

  <sect1 id="language.references.arent">
   <title>リファレンスが行わないことは?</title>
   <para>
    上記のように、リファレンスはポインタではありません。このため、次の
    例は期待通りに動作しません。
    <informalexample>
     <programlisting role="php">
function foo(&amp;$var) {
  $var =&amp; $GLOBALS["baz"];
}
foo($bar);
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    ここでの動作としては、関数fooの<varname>$var</varname>はコール側の
    <varname>$bar</varname>と結合されますが、
    <varname>$GLOBALS["baz"]</varname>に再結合されるといったものになり
    ます。<varname>$bar</varname>は関数fooで利用できないため、リファレ
    ンス以外にはコール側の<varname>$bar</varname>を何かに結合する手段
    はありません。(この変数は、<varname>$var</varname>として表されてい
    ますが、<varname>$var</varname>はその変数の内容のみを有しており、
    名前と変数を結合したものではありません。)
   </simpara>
  </sect1>
  
  <sect1 id="language.references.return">
   <title>リファレンスを返す</title>
   <para>
    リファレンスを返すことは、結合する変数を見付けるために関数を使用し
    たい場合に便利です。リファレンスを返す場合、次の構文を使用して下さ
    い。
    <informalexample>
     <programlisting role="php">
function &amp;find_var($param) {
  ...コード...
  return $found_var;
}

$foo =&amp; find_var($bar);
     </programlisting>
    </informalexample>
  </para>
   <note>
    <simpara>
     パラメータを渡す場合と異なり、ここでは、両方で &amp; を使用します。
    </simpara>
   </note>
  </sect1>
  
  <sect1 id="language.references.unset">
  <title>リファレンスの削除</title>
   <para>
    リファレンスを削除することは、ちょうど変数名と変数の内容の結合を解
    除したことに相当します。これは、変数の内容が破棄されることを意味し
    ません。例えば、
    <informalexample>
     <programlisting role="php">
$a = 1;
$b =&amp; $a;
unset($a);
     </programlisting>
    </informalexample>
    は、<varname>$b</varname>を削除せず、<varname>$a</varname>のみを削
    除します。
   </para>
   <simpara>
    ここでも、UNIXのunlinkコールと類似したものと考えると便利です。
   </simpara>
  </sect1>
  
  <sect1 id="language.references.spot">
   <title>リファレンスの適用範囲</title>
   
   <simpara>
    PHPの多くの構文構造は、リファレンス機構を利用して実装されています。
    このため、前記のリファレンス結合に関する事項はこれらの構造について
    も適用されます。リファレンス渡しおよびリファレンスの返り値のような
    いくつかの構造について前節で記述されています。リファレンスを使用す
    る他の構造には次のものがあります。
   </simpara>
   
   <sect2 id="references.global">
    <title><literal>global</literal></title>

    <para>
     変数を<command>global $var</command>として宣言した場合、実際には
     グローバル変数へのリファレンスを作成したことになります。この意味
     は、次の例と同じです。
     <informalexample>
      <programlisting role="php">
$var =&amp; $GLOBALS["var"];
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     これは、例えば、<varname>$var</varname>を削除してもグローバル変数
     は削除されないことを意味します。
    </simpara>
   </sect2>
   
   <sect2 id="references.this">
    <title><literal>$this</literal></title>
    
    <simpara>
     オブジェクトのメソッドでは、<varname>$this</varname> は常にコール
     側のオブジェクトへのリファレンスです。
    </simpara>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->