<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->
<sect1 xml:id="language.pseudo-types">
 <title>本ドキュメントにおける疑似的な型および変数</title>

 <sect2 xml:id="language.types.mixed">
  <title>mixed</title>

  <para>
   <literal>mixed</literal> は、引数に多様な型 (全てである必要はない)
   を使うことができることを示します。
  </para>

  <para>
   例えば <function>gettype</function> 関数は全ての PHP の型を受け入れるのに対し、
   <function>str_replace</function> は文字列と配列のみを受け入れます。
  </para>

 </sect2>

 <sect2 xml:id="language.types.number">
  <title>number</title>

  <para>
   <literal>number</literal> は引数が <type>integer</type> または <type>float</type>
   のどちらでもよいことを示します。
  </para>

 </sect2>

 <sect2 xml:id="language.types.callback">
  <title>callback</title>

  <para>
   <function>call_user_func</function> や <function>usort</function>
   等の関数は、ユーザが定義するコールバック関数を引数として受け入れます。
   コールバック関数は、単純な関数だけでなく、オブジェクトのメソッド
   あるいはクラスの静的メソッドであってもかまいません。
  </para>

  <para>
   PHP 関数はその名前を単に文字列として渡されます。
   どのようなビルトインまたはユーザ定義の関数も渡すことができます。
   ただし、
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>, 
   <function>exit</function>, <function>isset</function>, 
   <function>list</function>, <function>print</function> あるいは
   <function>unset</function>
   はコールバックとしては使用できないことに注意しましょう。
  </para>

  <para>
   オブジェクトのインスタンスを渡すための方法の 1 つは、
   オブジェクトを 0 番目の要素、
   メソッド名を 1 番目の要素として含む配列を渡すことです。
  </para>

  <para>
   静的なクラスメソッドの場合、
   0 番目の要素としてオブジェクトを渡す代わりにクラス名を渡すことにより、
   オブジェクトのインスタンスを作成せずに渡すことができます。
  </para>

  <para>
   一般的なユーザ定義関数とは異なり、<function>create_function</function>
   では無名コールバック関数を作成することができます。PHP 5.3.0 以降は、
   クロージャを callback パラメータに渡せるようになりました。
  </para>

  <para>
   <example>
    <title>
     コールバック関数の例
    </title>
    <programlisting role="php">
<![CDATA[
<?php 

// コールバック関数の例
function my_callback_function() {
    echo 'hello world!';
}

// コールバックメソッドの例
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// タイプ 1: 単純なコールバック
call_user_func('my_callback_function'); 

// タイプ 2: 静的クラスメソッドのコール
call_user_func(array('MyClass', 'myCallbackMethod')); 

// タイプ 3: オブジェクトメソッドのコール
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// タイプ 4: 静的クラスメソッドのコール (PHP 5.2.3 以降)
call_user_func('MyClass::myCallbackMethod');

// タイプ 5: 相対指定による静的クラスメソッドのコール (PHP 5.3.0 以降)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     クロージャを使用するコールバックの例
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// クロージャ
$double = function($a) {
    return $a * 2;
};

// 数値の範囲
$numbers = range(1, 5);

// ここでクロージャをコールバックとして使用し、
// 指定した範囲の各要素の 2 倍の値を計算します
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  <note>
   <simpara>
    PHP4 では、実際のオブジェクトを指すコールバックを作成するには
    参照を使用する必要があります。そのコピーを使用してはいけません。
    詳細は <link linkend="language.references">参照についての説明</link>
    を参照ください。
   </simpara>
  </note>

 </sect2>
 
 <sect2 xml:id="language.types.void">
  <title>void</title>

  <para>
   返り値の型が <literal>void</literal> である場合は、
   返り値に意味がないことを表します。パラメータ一覧で
   <literal>void</literal> が使用されている場合は、
   その関数がパラメータを受け付けないことを表します。
  </para>

 </sect2>

 <sect2 xml:id="language.types.dotdotdot">
  <title>...</title>

  <para>
   関数のプロトタイプ宣言における <parameter>$...</parameter> は、
   <literal>…など</literal> を表します。
   この変数名を用いるのは、たとえば任意の数の引数を取りうる関数などです。
  </para>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
