<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 296080 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa -->

<refentry xml:id="wrappers.php" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" role="noversion">
 <refnamediv>
  <refname>PHP 入出力</refname>
  <refpurpose>さまざまな入出力ストリームへのアクセス</refpurpose>
 </refnamediv>

 <refsect1 role="description"><!-- {{{ -->
  &reftitle.description;
  <para>
   <filename>php://stdin</filename>、<filename>php://stdout</filename> 
   および <filename>php://stderr</filename> は、PHP プロセスの
   対応する入出力ストリームへの直接アクセスを許可します。
   これらのストリームは複製されたファイル記述子を参照します。そのため、
   <filename>php://stdin</filename> をオープンしたあとでそれを閉じたとしても、
   識別子のコピーが閉じられるだけです。<constant>STDIN</constant>
   で参照される実際のストリームは何も影響を受けません。
   PHP 5.2.1 より前のバージョンでは、これに関連する挙動にバグがあります。
   これらのラッパーを使うのではなく、定数
   <constant>STDIN</constant>, <constant>STDOUT</constant>
   および <constant>STDERR</constant> を使用することを推奨します。
  </para>
  <simpara>
   <filename>php://output</filename> は、
   <function>print</function> および <function>echo</function>
   と同じ方法での出力バッファへの書き込みを許可します。
  </simpara>
  <simpara>
   <filename>php://input</filename> は、リクエストの body 部から生のデータを読み込むことができます。
   POST リクエストの場合は <varname>$HTTP_RAW_POST_DATA</varname>
   よりもこちらを使うのが望ましいでしょう。&php.ini; ディレクティブの設定に依存しないからです。
   さらに、<varname>$HTTP_RAW_POST_DATA</varname> がデフォルトで設定されない場合は、
   <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>
   を有効にするよりも <varname>$HTTP_RAW_POST_DATA</varname>
   を使うほうがメモリの消費量が少なくなるでしょう。
   <filename>php://input</filename> は、
   <literal>enctype="multipart/form-data"</literal> に対しては使用できません。
  </simpara>
  <note>
   <simpara>
    <filename>php://input</filename> でオープンしたストリームは、は一度しか読み込めません。
    また、このストリームは seek 操作をサポートしていません。
    しかし、SAPI の実装によっては、別の <filename>php://input</filename>
    ストリームをオープンして読み込みを再開できる可能性もあります。
    これは、リクエストの body 部のデータが保存されている場合にのみ可能となります。
    通常、POST リクエストの場合はそのようになりますが、
    PUT や PROPFIND といった他のメソッドの場合は保存されません。
   </simpara>
  </note>
  <simpara>
   <filename>php://stdin</filename> および
   <filename>php://input</filename> は読み込み専用で、
   <filename>php://stdout</filename>、
   <filename>php://stderr</filename> および
   <filename>php://output</filename> は書き込み専用です。
  </simpara>

  <simpara>
   <filename>php://filter</filename> は、フィルタアプリケーションが
   ストリームをオープンすることを許可するために設計されたメタラッパーです。
   これは、<function>readfile</function>、<function>file</function>
   および <function>file_get_contents</function> のようなオールインワンの
   ファイル関数とともに使用すると有用です。これらの関数には、コンテンツが
   読み込まれる前にストリームにフィルタを適用する手段がありません。
  </simpara>
  <simpara>
   <filename>php://filter</filename> の対象は、以下のように
   'parameters' を 'path' の一部として保持します。
  </simpara>
 </refsect1><!-- }}} -->

 <refsect1 role="usage"> <!-- {{{ -->
  &reftitle.options;
  <itemizedlist>
   <listitem><simpara><filename>php://stdin</filename></simpara></listitem>
   <listitem><simpara><filename>php://stdout</filename></simpara></listitem>
   <listitem><simpara><filename>php://stderr</filename></simpara></listitem>
   <listitem><simpara><filename>php://output</filename></simpara></listitem>
   <listitem><simpara><filename>php://input</filename></simpara></listitem>
   <listitem><simpara><filename>php://filter</filename> (PHP 5.0.0 以降で使用可能)</simpara></listitem>
   <listitem><simpara><filename>php://memory</filename> (PHP 5.1.0 以降で使用可能)</simpara></listitem>
   <listitem><simpara><filename>php://temp</filename> (PHP 5.1.0 以降で使用可能)</simpara></listitem>
  </itemizedlist>
 </refsect1> <!-- }}} -->

 <refsect1 role="options"><!-- {{{ -->
  &reftitle.options;
  <para>
   <table>
    <title>
     ラッパーの概要（<literal>php://filter</literal> については、
     フィルタされる側のラッパーの概要を参照します）
    </title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>属性</entry>
       <entry>サポートの有無</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><link linkend="ini.allow-url-fopen">allow_url_fopen</link> で制約される</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry><link linkend="ini.allow-url-include">allow_url_include</link> で制約される</entry>
       <entry>
        <literal>php://input</literal>、
        <literal>php://stdin</literal>、
        <literal>php://memory</literal> および
        <literal>php://temp</literal> のみ。
       </entry>
      </row>
      <row>
       <entry>読み込み許可</entry>
       <entry>
        <literal>php://stdin</literal>、
        <literal>php://input</literal>、
        <literal>php://memory</literal> および
        <literal>php://temp</literal> のみ。
       </entry>
      </row>
      <row>
       <entry>書き込み許可</entry>
       <entry>
        <literal>php://stdout</literal>、
        <literal>php://stderr</literal>、
        <literal>php://output</literal>、
        <literal>php://memory</literal> および
        <literal>php://temp</literal> のみ。
       </entry>
      </row>
      <row>
       <entry>追加許可</entry>
       <entry>
        <literal>php://stdout</literal>、
        <literal>php://stderr</literal>、
        <literal>php://output</literal>、
        <literal>php://memory</literal> および
        <literal>php://temp</literal> のみ (書き込みと同じ)。
       </entry>
      </row>
      <row>
       <entry>同時読み書き許可</entry>
       <entry>
        <literal>php://memory</literal> および
        <literal>php://temp</literal> のみ。
       </entry>
      </row>
      <row>
       <entry><function>stat</function> のサポート</entry>
       <entry>
        <literal>php://memory</literal> および
        <literal>php://temp</literal> のみ。
       </entry>
      </row>
      <row>
       <entry><function>unlink</function> のサポート</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry><function>rename</function> のサポート</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry><function>mkdir</function> のサポート</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry><function>rmdir</function> のサポート</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry><function>stream_select</function> のサポート</entry>
       <entry>
        <literal>php://stdin</literal>, <literal>php://stdout</literal>, 
        <literal>php://stderr</literal> および <literal>php://temp</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1> <!-- }}} -->

 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <example><!-- {{{ -->
   <title>/resource=&lt;フィルタの対象となるストリーム&gt; (<emphasis>必須</emphasis>)</title>
   <para>
    このパラメータは、
    <filename>php://filter</filename> 指定の最後に存在し、フィルタリング
    したいストリームを指している必要があります。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
/* これは単純に以下と同じです。
   readfile("http://www.example.com");
   なぜなら、実際のところ何のフィルタ処理も行われないからです。 */

readfile("php://filter/resource=http://www.example.com");
?>
]]>
   </programlisting>
  </example><!-- }}} -->
  <example><!-- {{{ -->
   <title>/read=&lt;読み込みチェーンに適用するフィルタのリスト&gt; (<emphasis>任意</emphasis>)</title>
   <para>
    このパラメータは 1 つ以上のフィルタ名を
    パラメータとしてとり、それらはパイプ文字 <literal>|</literal> で区切られます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
/* これは、www.example.com のすべての内容を
   大文字に変換して出力します。 */
readfile("php://filter/read=string.toupper/resource=http://www.example.com");

/* これは上の例と同じですが、それに加えて
   ROT13 エンコード処理を行います。 */
readfile("php://filter/read=string.toupper|string.rot13/resource=http://www.example.com");
?>
]]>
   </programlisting>
  </example><!-- }}} -->
  <example><!-- {{{ -->
   <title>/write=&lt;書き込みチェーンに適用するフィルタのリスト&gt; (<emphasis>任意</emphasis>)</title>
   <para>
    このパラメータは 1 つ以上のフィルタ名を
    パラメータとしてとり、それらはパイプ文字 <literal>|</literal> で区切られます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
/* これは、文字列 "Hello World"
   に対して rot13 フィルタを適用し、カレントディレクトリの
   example.txt に書き込みます。 */
file_put_contents("php://filter/write=string.rot13/resource=example.txt","Hello World");
?>
]]>
   </programlisting>
  </example><!-- }}} -->
  <!-- {{{ -->
  <simpara>
   <literal>/&lt;両方のチェーンに適用するフィルタのリスト&gt;</literal>
  （<emphasis>任意</emphasis>）<literal>read=</literal> あるいは
   <literal>write=</literal> の指定をされていないすべてのフィルタは、
   読み込みチェーンと書き込みチェーンの両方に（適宜）適用されます。
  </simpara>

  <simpara>
   <filename>php://memory</filename> ラッパーは、データをメモリに保存します。
   <filename>php://temp</filename> も同様ですが、メモリの制限
   (デフォルトは 2 MB です) を超過した際にはテンポラリファイルを使用します。
  </simpara>
  <simpara>
   <filename>php://temp</filename> ラッパーは、次の
   'parameters' を 'path' の一部として受け付けます。
  </simpara>
  <!-- }}} -->
  <example><!-- {{{ -->
   <title>/maxmemory:&lt;バイト数&gt; (<emphasis>任意</emphasis>)</title>
   <para>
    このパラメータは、メモリの制限 (データをテンポラリファイルに移動する閾値)
    のデフォルト値を変更します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$fiveMBs = 5 * 1024 * 1024;
$fp = fopen("php://temp/maxmemory:$fiveMBs", 'r+');

fputs($fp, "hello\n");

// 先ほど書き込んだデータを読み込みます。
rewind($fp);
echo stream_get_contents($fp);
?>
]]>
   </programlisting>
  </example><!-- }}} -->
 </refsect1><!-- }}} -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

