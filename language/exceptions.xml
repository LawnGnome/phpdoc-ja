<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.10 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->

<chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
 <title>例外(exceptions)</title>

 <para>
  PHP 5 は、他のプログラミング言語に似た例外モデルを有しています。
  PHP 内で例外が投げられ ("<literal>throw</literal>" され)、それが
  捕捉され ("<literal>catch</literal>" され) ます。発生した例外を
  捕捉するには、コードを <literal>try</literal> ブロックで囲みます。
  各 <literal>try</literal> ブロックには、対応する <literal>catch</literal>
  ブロックが存在する必要があります。異なる型の例外を捕捉するために
  複数の <literal>catch</literal> フロックを使用することができます。
  通常の実行時 (<literal>try</literal> ブロック内で例外が投げられなかった
  場合、あるいは投げられた例外に対応する <literal>catch</literal>
  ブロックが存在しなかった場合) は、<literal>catch</literal>
  ブロック内は処理されず、それ以降から処理が続けられます。
  <literal>catch</literal> ブロックの中から例外を投げる
  (あるいは投げなおす) こともできます。
 </para>
 <para>
  例外が投げられた場合、その命令に続くコードは実行されず、
  PHP は最初にマッチする <literal>catch</literal> ブロックを探します。
  例外が捕捉されない場合、PHP は "<literal>Uncaught Exception ...</literal>"
  というメッセージとともに
  致命的なエラー(fatal error)を発行します。
  ただし、<function>set_exception_handler</function> でハンドラが
  定義されている場合を除きます。
 </para>
  <note>
   <para>
    PHP の内部関数の多くは
    <link linkend="ini.error-reporting">エラー報告</link>
    を使っており、例外を使っているのは新しい
    <link linkend="language.oop5">オブジェクト指向</link>
    の拡張モジュールのみです。
    しかし、<link linkend="class.errorexception">ErrorException</link>
    を使えば簡単にエラーを例外に変換することができます。
   </para>
  </note>
  <tip>
   <para>
    <link linkend="intro.spl">Standard PHP Library (SPL)</link>
    には組み込みの例外が数多く用意されています。
   </para>
  </tip>
 <example>
  <title>例外を投げるには</title>
  <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('ゼロによる除算。');
    }
    else return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo '捕捉した例外: ',  $e->getMessage(), "\n";
}

// 実行は継続される
echo 'Hello World';
?>
]]>
  </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
捕捉した例外: ゼロによる除算。
Hello World
]]>
    </screen>
 </example>
   <example>
    <title>ネストした例外</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class Test {
    public function testing() {
        try {
            try {
                throw new MyException('foo!');
            } catch (MyException $e) {
                /* 改めてスロー */
                throw $e;
            }
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "foo!"
]]>
    </screen>
   </example>
 
 <sect1 xml:id="language.exceptions.extending">
  <title>例外を拡張する</title>
  <para>
   組み込みの Exception クラスを拡張することで、例外クラスをユーザーが
   定義することが可能です。以下のメンバーおよびプロパティは、
   組み込みの Exception クラスから派生した子クラスの中でアクセス可能です。
  </para>
  <example>
   <title>例外クラスを構築する</title>
   <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Unknown exception';   // exception message
    protected $code = 0;                        // user defined exception code
    protected $file;                            // source filename of exception
    protected $line;                            // source line of exception

    function __construct($message = null, $code = 0);

    final function getMessage();                // message of exception 
    final function getCode();                   // code of exception
    final function getFile();                   // source filename
    final function getLine();                   // source line
    final function getTrace();                  // an array of the backtrace()
    final function getTraceAsString();          // formated string of trace

    /* Overrideable */
    function __toString();                       // formated string for display
}
?>
]]>
   </programlisting>
  </example>
  <para>
   クラスが、組み込みの Exception クラスを拡張し、
   <link linkend="language.oop5.decon">コンストラクタ</link>を再定義した場合、
   全ての利用可能なデータが正しく代入されることを保証するために
   <link linkend="language.oop5.paamayim-nekudotayim">
    parent::__construct()</link> もコールすることが強く推奨されます。
   <link linkend="language.oop5.magic">__toString()</link> メソッドは、
   オブジェクトが文字列として表された際に独自の出力を行うために
   上書きすることができます。
  </para>
  <example>
   <title>例外クラスを拡張する</title>
   <programlisting role="php">
<![CDATA[
<?php
/**
 * カスタム例外クラスを定義する
 */
class MyException extends Exception
{
    // 例外を再定義し、メッセージをオプションではなくする
    public function __construct($message, $code = 0) {
        // なんらかのコード
    
        // 全てを正しく確実に代入する
        parent::__construct($message, $code);
    }

    // オブジェクトの文字列表現を独自に定義する
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "A Custom function for this type of exception\n";
    }
}


/**
 * 例外をテストするためのクラスを作成
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // カスタム例外を投げる
                throw new MyException('1 is an invalid parameter', 5);
                break;

            case self::THROW_DEFAULT:
                // デフォルト例外を投げる
                throw new Exception('2 is not allowed as a parameter', 6);
                break;

            default: 
                // 例外なし。オブジェクトが生成される
                $this->var = $avalue;
                break;
        }
    }
}


// 例1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Will be caught
    echo "Caught my exception\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Skipped
    echo "Caught Default Exception\n", $e;
}

// 実行を継続する
var_dump($o);
echo "\n\n";


// 例2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // この型にはマッチしない
    echo "Caught my exception\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // キャッチされる
    echo "Caught Default Exception\n", $e;
}

// 実行を継続する
var_dump($o);
echo "\n\n";


// 例3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // キャッチされる
    echo "Default Exception caught\n", $e;
}

// 実行を継続する
var_dump($o);
echo "\n\n";


// 例4
try {
    $o = new TestException();
} catch (Exception $e) {        // スキップされる、例外なし
    echo "Default Exception caught\n", $e;
}

// 実行を継続する
var_dump($o);
echo "\n\n";
?>
]]>
   </programlisting>
  </example>
 </sect1>

</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
