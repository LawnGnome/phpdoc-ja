<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283798 Maintainer: hirokawa Status: ready -->

<sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
 <title>クラスの基礎</title>

 <sect2 xml:id="language.oop5.basic.class">
  <title>class</title>
  <para>

   各クラスの定義は、classキーワードで始まり、クラス名が続きます。
   クラス名には、PHPの<link linkend="reserved">予約語</link>以外のあらゆる名前を
   使用することができます。
   波括弧の中に、クラスのメンバーとメソッドの定義が記述されます。
   メソッドがオブジェクトコンテキストからコールされる場合
   (通常は、メソッドが属するオブジェクトですが、
   メソッドが第二のオブジェクトのオブジェクトの
   コンテキストから <link linkend="language.oop5.static">スタティックに</link>
   コールされる場合には、別のオブジェクトとなる場合もあります)、
   疑似変数 <varname>$this</varname> が利用可能です。
   以下にこの例を示します。
    <example>
     <title>オブジェクト指向言語における <varname>$this</varname> 変数</title>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this is defined (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this is not defined.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();
A::foo();
$b = new B();
$b->bar();
B::bar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$this is defined (a)
$this is not defined.
$this is defined (b)
$this is not defined.
]]>
    </screen>
    </example>
  </para>
  <example>
   <title>簡単なクラス定義</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // メンバ宣言
    public $var = 'a default value';

    // メソッド宣言
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
   </programlisting>
  </example>

   <para>
    デフォルト値は定数でなければなりません。(たとえば)
    変数、クラスのメンバあるいは関数コールなどは使用できません。
    <example>
     <title>クラスのメンバのデフォルト値</title>
     <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // 無効な形式のメンバ宣言
    public $var1 = 'hello '.'world';
    public $var2 = <<<EOD
hello world
EOD;
    public $var3 = 1+2;
    public $var4 = self::myStaticMethod();
    public $var5 = $myVar;

    // 有効な宣言
    public $var6 = myConstant;
    public $var7 = self::classConstant;
    public $var8 = array(true, false);
    
    
}
?>
]]>
     </programlisting>   
    </example>
   </para>
   <note>
    <para>
    クラスやオブジェクトを扱うための、便利な関数があります。
    <link linkend="ref.classobj">クラス/オブジェクト関数</link>
    を参照ください。
    </para>
   </note>

   <para>
    ヒアドキュメントとは異なり、nowdoc は静的データコンテキストでも使用することができます。
    <example>
     <title>静的なデータの例</title>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
    // PHP 5.3.0 以降で対応
    public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Nowdoc は PHP 5.3.0 以降で使用可能です。
    </para>
   </note>
 </sect2>

 <sect2 xml:id="language.oop5.basic.new">
  <title>new</title>
  <para>
   あるクラスのインスタンスを生成する際、新たにオブジェクトが作成され、
   変数に代入される必要があります。
   新しいオブジェクトが作成される際には、そのオブジェクトが
   エラー時に <link linkend="language.exceptions">例外</link>を投げる
   よう定義された
   <link linkend="language.oop5.decon">コンストラクタ</link>を有していない限り、
   常にオブジェクトが代入されます。
   クラスは、そのインスタンスを作成する前に定義すべきです
   (これが必須となる場合もあります)。
  </para>
  <example>
   <title>インスタンスを作成する</title>
   <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// 変数を使うこともできます
$className = 'Foo';
$instance = new $className(); // Foo()
?>
]]>
   </programlisting>
  </example>
   <para>
    クラスのコンテキストにおいては、
    <literal>new self</literal> や <literal>new parent</literal>
    のようにして新しいオブジェクトを作成することができます。
   </para>
  <para>
   作成済みのクラスのインスタンスを新たな変数に代入する場合、新しい変数は、
   代入されたオブジェクトと同じインスタンスにアクセスします。
   この動作は、インスタンスを関数に渡す場合も同様です。
   作成済みのオブジェクトのコピーは、その
   <link linkend="language.oop5.cloning">クローンを作成</link>
   することにより作成可能です。
  </para>
  <example>
   <title>オブジェクトの代入</title>
   <programlisting role="php">
<![CDATA[
<?php
$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned will have this value';

$instance = null; // $instance と $reference は null になります

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned will have this value"
}
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.basic.extends">
  <title>extends</title>
  <para>
   クラスは、宣言部にextendsキーワードを含めることで、他のクラスのメソッドとメソッドと
   メンバーを継承することができます。多重継承を行うことはできず、クラスが継承できるベース
   クラスは一つだけです。
  </para>
  <para>
   継承されたメソッドとメンバーは、親クラスで <link linkend="language.oop5.final">final</link>
   としてメソッドが定義されていない限り、親クラスで定義されたのと同じ名前で
   再度宣言を行うことでオーバーライドすることができます。
   <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>で
   参照することにより、このオーバーライドされたメソッドまたはスタティックメンバーに
   アクセスすることができます。
  </para>
  <example>
   <title>簡単なクラスの継承</title>
   <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // 親クラスのメソッドを再定義
    function displayVar()
    {
        echo "Extending class\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Extending class
a default value
]]>
   </screen>
  </example>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
