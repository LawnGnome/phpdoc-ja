<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.7 Maintainer: hirokawa Status: ready -->

<sect1 id="language.oop5.basic">
 <title>クラスの基礎</title>
 
 <sect2 id="language.oop5.basic.class">
  <title>class</title>
  <para>

   各クラスの定義は、classキーワードで始まり、クラス名が続きます。
   クラス名には、PHPの<link linkend="reserved">予約語</link>以外のあらゆる名前を
   使用することができます。
   波括弧の中に、クラスのメンバーとメソッドの定義が記述されます。
   各メソッドの中には、<link linkend="language.oop5.static">スタティック</link>
   メソッドを除き、疑似変数 <varname>$this</varname> が使用可能です。
   <varname>$this</varname> は、そのメソッドをコールしたのと同じインスタンスへの
   リファレンスです。
  </para>
  <example>
   <title>簡単なクラス定義</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // メンバ宣言
    public $var = 'a default value';

    // メソッド宣言
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 id="language.oop5.basic.new">
  <title>new</title>
  <para>
   あるオブジェクトのインスタンスを生成する際、新たにオブジェクトが作成され、
   変数に代入される必要があります。
   新しいオブジェクトが作成される際には、そのオブジェクトが
   エラー時に <link linkend="language.exceptions">例外</link>を投げる
   よう定義された
   <link linkend="language.oop5.decon">コンストラクタ</link>を有していない限り、
   常にオブジェクトが代入されます。
  </para>
  <example>
   <title>インスタンスを作成する</title>
   <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass()
?>
]]>
   </programlisting>
  </example>
  <para>
   作成済みのオブジェクトのインスタンスを新たな変数に代入する場合、新しい変数は、
   代入されたオブジェクトと同じインスタンスにアクセスします。
   この動作は、インスタンスを関数に渡す場合も同様です。
   作成済みのオブジェクトの新規インスタンスは、その
    <link linkend="language.oop5.cloning">クローンを作成</link> することに
   より作成可能です。
  </para>
  <example>
   <title>オブジェクトの代入</title>
   <programlisting role="php">
<![CDATA[
<?php
$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned will have this value';

$instance = null; // $instance と $reference は null になります

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned will have this value"
}
]]>
   </screen>
  </example>
 </sect2>

 <sect2 id="language.oop5.basic.extends">
  <title>extends</title>
  <para>
   クラスは、宣言部にextendsキーワードを含めることで、他のクラスのメソッドとメソッドと
   メンバーを継承することができます。他重継承を行うことはできず、クラスが継承できるベース
   クラスは一つだけです。
  </para>
  <para>
   継承されたメソッドとメンバーは、親クラスで <link linkend="language.oop5.final">final</link>
   としてメソッドが定義されていない限り、親クラスで定義されたのと同じ名前で再度宣言を行うことで
   オーバーロードすることができます。
   <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>で参照することにより、
   このオーバーロードされたメソッドまたはメンバーにアクセスすることができます。
  </para>
  <example>
   <title>簡単なクラスの継承</title>
   <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // 親クラスのメソッドを再定義
    function displayVar()
    {
        echo "Extending class\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Extending class
a default value
]]>
   </screen>
  </example>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
