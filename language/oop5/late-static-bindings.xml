<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: takagi Status: ready -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>遅延静的束縛 (Late Static Bindings)</title>
  <para>
   PHP 5.3.0 以降、PHP に遅延静的束縛と呼ばれる機能が搭載されます。
   これを使用すると、静的継承のコンテキストで呼び出し元のクラスを参照できるようになります。
  </para>

  <para>
   この "遅延静的束縛" という機能名は、内部動作を考慮してつけられたものです。
   "遅延束縛 (Late binding)" の由来は、メソッドを定義しているクラス名を使用しても
   <literal>static::</literal> の解決ができなくなったことによります。
   その代わりに、実行時情報をもとに解決するようになります。

   "静的束縛 (static binding)" の由来は、
   静的メソッドのコールに使用できることによります
   (ただし、静的メソッド以外でも使用可能です)。
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title><literal>self::</literal> の制限</title>
   <para>
    <literal>self::</literal> あるいは <literal>__CLASS__</literal>
    による現在のクラスへの静的参照は、
    そのメソッドが属するクラス (つまり、
    そのメソッドが定義されているクラス) に解決されます。
   </para>
   <example>
    <title><literal>self::</literal> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();      
    }  
}  

class B extends A {      
    public static function who() {
         echo __CLASS__;
    }  
}   

B::test();
?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>
 
  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>遅延静的束縛の使用法</title>

   <para>
    遅延静的束縛は、この制限を解決するためのキーワードを導入し、
    実行時に最初にコールされたクラスを参照するようにしています。
    このキーワードを使用すると、先ほどの例における
    <literal>test()</literal> から <literal>B</literal>
    を参照できるようになります。
    このキーワードは新たに追加したものではなく、すでに予約済みである
    <literal>static</literal> を使用しています。
   </para>

   <example>
    <title><literal>static::</literal> のシンプルな使用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // これで、遅延静的束縛が行われます
    }  
}  

class B extends A {      
    public static function who() {
         echo __CLASS__;
    }  
}   

B::test();
?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     <literal>static::</literal> の動作は、静的メソッドにおいては
     <literal>$this</literal> と異なります!
     <literal>$this-></literal> は継承規則に従いますが、
     <literal>static::</literal> は従いません。
     この違いについては、後ほど詳しく説明します。
    </para>
   </note>
   <example>
    <title>非静的コンテキストにおける <literal>static::</literal> の使用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class TestChild extends TestParent {
    public function __construct() {
        static::who();
    }

    public function test() {
        $o = new TestParent();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class TestParent {
    public function __construct() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
$o = new TestChild;
$o->test();

?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
TestChild
TestParent
]]>
    </screen>
   </example>
   <note>
    <para>
     遅延静的束縛の解決は、静的コールが代替なしに完全に解決された時点で終了します。
    </para>
    <example>
     <title>完全に解決された静的コール</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }
        
    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

B::test();
?>  
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
]]>
     </screen>
    </example>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.late-static-bindings.edge-cases">
   <title>Edge cases</title>
   <para>
    PHP でメソッドをコールするには、さまざまな方法があります。
    たとえばコールバックやマジックメソッドなどもそのひとつです。
    遅延静的束縛は実行時の情報にもとづいて解決を行うので、
    このように特殊な場合には予期せぬ結果となる可能性があります。
   </para>
   <example>
    <title>マジックメソッド内における遅延静的束縛</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {

   protected static function who() {
        echo __CLASS__."\n";
   }

   public function __get($var) {
       return static::who();
   }
}

class B extends A {

   protected static function who() {
        echo __CLASS__."\n";
   }
}

$b = new B;
$b->foo;
?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
