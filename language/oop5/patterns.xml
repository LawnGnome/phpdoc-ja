<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.7 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<sect1 id="language.oop5.patterns">
 <title>パターン</title>
 <para>
  パターンは、最善の手順と良い設計を記述するための手段です。
  パターンは、一般的なプログラム上の課題に柔軟な解決策を提供します。
 </para>

 <sect2 id="language.oop5.patterns.factory">
  <title>Factory</title>
  <para>
   Factoryパターンにより、実行時にオブジェクトを初期化できるようになります。
   これは、オブジェクトを"製造する"ことに似ているため、
   Factoryパターンと呼ばれています。
  </para>
  <example>
   <title>Factoryメソッド</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // ファクトリーメソッド
    public static function factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Driver not found');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    このメソドをクラス内で定義することで、実行時に
    ロードされるドライバを作成できるようになります。
    <literal>Example</literal>クラスが、データベース抽象化クラスで、
    <literal>MySQL</literal> および　<literal>SQLite</literal>
    ドライバをロードするとすると以下のように行うことができます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// MySQLドライバをロード
$mysql = Example::factory('MySQL');

// SQLiteドライバをロード
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 id="language.oop5.patterns.singleton">
  <title>Singleton</title>
  <para>
   Singletonパターンは、クラスのインスタンスが一つだけであることが
   必要である場合に適用されます。
   この最も一般的な例は、データベースへの接続です。
   このパターンを実装することで、プログラマは
   この単一のインスタンスが他の多くのオブジェクトから容易に
   アクセスできるようにすることができます。
  </para>
  <example>
   <title>Singleton関数</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // クラスのインスタンスをゴールド
    private static $instance;

    // private なコンストラクタ。直接オブジェクトが生成されるのを防ぐ
    private function __construct()
    {
        echo 'I am constructed';
    }

    // singleton メソッド
    public static function singleton()
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }

    // とあるメソッド
    public function bark()
    {
        echo 'Woof!';
    }

    // ユーザーがインターフェースを複製するのを防ぐ
    public function __clone()
    {
        trigger_error('Clone is not allowed.', E_USER_ERROR);
    }

}

?>
]]>
   </programlisting>
   <para>
    このコードにより、<literal>Example</literal>クラスのインスタンスが一つ
    作られ、取得されます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// コンストラクタがprivateであるため、これは失敗します
$test = new Example;

// これにより、クラスの単一のインスタンスを取得します。
$test = Example::singleton();
$test->bark();

// これにより、E_USER_ERROR が発生する
$test_clone = clone($test);

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
