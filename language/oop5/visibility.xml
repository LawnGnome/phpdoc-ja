<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.12 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->

<sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
 <title>アクセス権</title>
 <para>
  プロパティまたはメソッドのアクセス権 (visibility) は、
  キーワード: public, protected または private を指定することにより、
  定義できます。
  public として定義されたアイテムには、どこからでもアクセス可能です。
  protected は、派生クラスや親クラス (とそれを定義するクラス自体)
  にアクセスを制限します。private は、
  それを定義するクラスのみにアクセス権を制限します。
 </para>
 <sect2 xml:id="language.oop5.visiblity-members">
  <title>メンバのアクセス権</title>
  <para>
   クラスのメンバは、public, private, または protected
   として定義されなくてはなりません。
  </para>
  <para>
   <example>
    <title>メンバの宣言</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * MyClass の定義
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // 動作します
echo $obj->protected; // Fatal エラー
echo $obj->private; // Fatal エラー
$obj->printHello(); // Public、Protected そして Private を表示します


/**
 * MyClass2 の定義
 */
class MyClass2 extends MyClass
{
    // public および protected メソッドは再定義できますが、
    // private はできません。
    protected $protected = 'Protected2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj->public; // 動作します
echo $obj2->private; // 未定義です
echo $obj2->protected; // Fatal エラー
$obj2->printHello(); // Public、Protected2 を表示しますが Private は表示しません

?> 
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    キーワード <emphasis>var</emphasis> で変数を宣言する
    PHP 4 の方法は、互換性を保つために今でもサポートされています
    (これは public と同じ扱いになります)。PHP 5.1.3 より前では、
    これを使用すると <constant>E_STRICT</constant>
    警告が発生します。
   </simpara>
  </note>
 </sect2>
 <sect2 xml:id="language.oop5.visiblity-methods">
  <title>メソッドのアクセス権</title>
  <para>
   クラスメソッドは、public, private, または protected
   として定義される必要があります。どの宣言も有さないメソッドは、
   public として定義されます。
  </para>
  <para>
   <example>
    <title>メソッドの宣言</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * MyClass の定義
 */
class MyClass
{
    // コンストラクタは public でなければなりません
    public function __construct() { }

    // public メソッドの宣言
    public function MyPublic() { }

    // protected メソッドの宣言
    protected function MyProtected() { }

    // private メソッドの宣言
    private function MyPrivate() { }

    // これは public となります
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // 動作します
$myclass->MyProtected(); // Fatal エラー
$myclass->MyPrivate(); // Fatal エラー
$myclass->Foo(); // Public、Protected および Private が動作します


/**
 * MyClass2 の定義
 */
class MyClass2 extends MyClass
{
    // これは public となります
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Fatal エラー
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // 動作します
$myclass2->Foo2(); // Public および Protected は動作しますが、Private は動作しません

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
