<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331202 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>タイプヒンティング</title>
  <para>
   PHP 5では、タイプヒンティング(Type Hinting)が導入されました。
   これにより、関数は、
   (クラスの名前を関数プロトタイプの中に指定することにより)
   パラメータをオブジェクトもしくはインターフェイス、配列
   (PHP 5.1 以降)、<type>callable</type> (PHP 5.4 以降)
   を必ず指定させることができるようになりました。
   しかし、デフォルトのパラメータの値として <type>NULL</type>
   を使用した場合は、後から任意の値を引数に指定できるようになります。
  </para>
  
  <para>
   タイプヒントでクラスやインターフェイスを指定した場合、
   その子クラスや実装クラスも利用できます。
  </para>
  
  <para>
   タイプヒントは <type>int</type> や
   <type>string</type> といったスカラー型には使えません。
   また、<link linkend="language.types.resource">リソース</link> や <link linkend="language.oop5.traits">トレイト</link> も使えません。
  </para>
  
  <example>
   <title>タイプヒンティングの例</title>
    <programlisting role="php">
<![CDATA[
<?php
// とあるクラス
class MyClass
{
    /**
     * テスト関数
     *
     * 第 1 引数は OtherClass 型のオブジェクトでなければならない
     */
    public function test(OtherClass $otherclass) {
        echo $otherclass->var;
    }


    /**
     * もう一つのテスト関数
     *
     * 第 1 引数は配列でなければならない
     */
    public function test_array(array $input_array) {
        print_r($input_array);
    }
    
    /**
     * 第 1 引数はイテレータでなければならない
     */
    public function test_interface(Traversable $iterator) {
        echo get_class($iterator);
    }
    
    /**
     * 第 1 引数は callable でなければならない
     */
    public function test_callable(callable $callback, $data) {
        call_user_func($callback, $data);
    }
}

// もう一つのサンプルクラス
class OtherClass {
    public $var = 'Hello World';
}
?>
]]>
  </programlisting>
  <para>
   タイプヒントの指定を満たさないとキャッチ可能な致命的エラーとなります。
  </para>
  <programlisting role="php">
<![CDATA[
<?php
// それぞれのクラスのインスタンス
$myclass = new MyClass;
$otherclass = new OtherClass;

// Fatal Error: Argument 1 must be an object of class OtherClass
$myclass->test('hello');

// Fatal Error: Argument 1 must be an instance of OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Fatal Error: Argument 1 must not be null
$myclass->test(null);

// Works: Prints Hello World
$myclass->test($otherclass);

// Fatal Error: Argument 1 must be an array
$myclass->test_array('a string');

// 動作する: 配列の内容を表示する
$myclass->test_array(array('a', 'b', 'c'));

// 動作する: ArrayObject を表示する
$myclass->test_interface(new ArrayObject(array()));

// 動作する: int(1) を表示する
$myclass->test_callable('var_dump', 1);
?>
]]>
  </programlisting>
  <para>
   タイプヒンティングは、関数でも使用できます。
  </para>
  <programlisting role="php">
<![CDATA[
<?php
// とあるクラス
class MyClass {
    public $var = 'Hello World';
}

/**
 * テスト関数
 *
 * 第 1 引数は MyClass 型のオブジェクトでなければならない
 */
function myFunction(MyClass $foo) {
    echo $foo->var;
}

// 動作する
$myclass = new MyClass;
myFunction($myclass);
?>
]]>
   </programlisting>
   <para>
    タイプヒントには NULL 値を使用することもできます。
   </para>
    <programlisting role="php">
<![CDATA[
<?php

/* NULL 値も使えます */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
  </programlisting>
 </example>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
