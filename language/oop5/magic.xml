<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.6 Maintainer: hirokawa Status: ready -->

<sect1 id="language.oop5.magic">
 <title>マジックメソッド</title>
 <para>
  <literal>__construct</literal>,
  <literal>__destruct</literal>
  (<link linkend="language.oop5.decon">コンストラクタとデストラクタ</link>参照),
  <literal>__call</literal>,
  <literal>__get</literal>,
  <literal>__set</literal>
  (<link linkend="language.oop5.overloading">オーバーローディング</link>参照),
  <literal>__sleep</literal>,
  <literal>__wakeup</literal>, および
  <literal>__toString</literal> 
  は、PHPクラスにおける特殊関数の名前です。
  これらの関数に関連する特別な機能を使用する場合を除き、
  クラス内にこれらの名前を有する関数を作成してはいけません。
 </para>
 
 <caution>
  <simpara>
   PHP は、__ で始まる関数名を特殊関数として予約しています。
   文書化された特殊な機能を必要とする場合を除き、
   __ で始まる関数名を使用しないことが推奨されます。
  </simpara>
 </caution>
 
 <sect2 id="language.oop5.magic.sleep">
  <title><literal>__sleep</literal> と <literal>__wakeup</literal></title>
  <para>
   <function>serialize</function> は、クラスに
   特殊な名前<literal>__sleep</literal>を有数関数があるかどうかを
   調べます。もしある場合には、この関数がシリアル化の前に実行されます。
   この関数によりオブジェクトのクリンナップを行うことができ、
   シリアル化するオブジェクトの全ての変数の名前を有する配列を返す
   と仮定されます。
  </para>
  <para>
   意図される <literal>__sleep</literal> の使用法は、
   オブジェクトが有する可能性があるデータベース接続に関係しており、
   ペンディングされたデータベースのコミットをオコナッ足り、
   同様のクリンナップタスクを行ったりするものです。
   また、この関数は、オブジェクトのサイズが非常に大きく、全体を
   保存することができない場合にも便利です。
  </para>
  <para>
   逆に、<function>unserialize</function> は、
   特殊な名前<literal>__wakeup</literal>を有する
   関数の存在を調べます。
   もし、存在する場合、この関数は、オブジェクトが有する可能性が
   あるあらゆるリソースを再構築することができます。
  </para>
  <para>
   意図される<literal>__wakeup</literal>の使用法は、
   シリアル化の際に失われたデータベース接続を再度確立したり、
   その他の再初期化を行うことです。
  </para>
 </sect2>
 
 <sect2 id="language.oop5.magic.tostring">
  <title><literal>__toString</literal></title>
  <para>
   <literal>__toString</literal>メソッドにより、
   クラスが文字列に変換される際の動作を決めることができます。
  </para>
  <example>
   <title>簡単な例</title>
   <programlisting role="php">
<![CDATA[
<?php
// 簡単なクラスを宣言
class TestClass
{
    public $foo;

    public function __construct($foo) {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello
]]>
   </screen>
  </example>
  <para>
   注意が必要なのは、<literal>__toString</literal> メソッドは、
   <function>echo</function> または <function>print</function>.
   と直接結合された場合のみコールされるということです。
  </para>
  <example>
   <title><literal>__toString</literal>がコールされる場合</title>
   <programlisting role="php">
<![CDATA[
<?php
// __toStringがコールされる
echo $class;

// __toStringがコールされる (まだechoの通常のパラメータである)
echo 'text', $class;

// __toStringはコールされない (結合演算がまず行われている)
echo 'text' . $class;

// __toStringはコールされない (文字列にまずキャストされている)
echo (string) $class;

// __toStringはコールされない (文字列にまずキャストされている)
echo "text $class";
?>
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
