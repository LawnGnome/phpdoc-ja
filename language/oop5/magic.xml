<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.14 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->

<sect1 id="language.oop5.magic">
 <title>マジックメソッド</title>
 <para>
    以下の関数名
 <literal>__construct</literal>,
  <literal>__destruct</literal>
  (<link linkend="language.oop5.decon">コンストラクタとデストラクタ</link>参照),
  <literal>__call</literal>,
  <literal>__get</literal>,
   <literal>__set</literal>,
   <literal>__isset</literal>,
   <literal>__unset</literal>
  (<link linkend="language.oop5.overloading">オーバーローディング</link>参照),
  <literal>__sleep</literal>,
  <literal>__wakeup</literal>,
  <literal>__toString</literal>,
   <literal>__set_state</literal>,
   <link linkend="language.oop5.cloning">__clone</link> および
   <link linkend="language.oop5.autoload">__autoload</link>
  は、PHP クラスにおける特殊関数の名前です。
  これらの関数に関連する特別な機能を使用する場合を除き、
  クラス内にこれらの名前を有する関数を作成してはいけません。
 </para>

 <caution>
  <simpara>
   PHP は、__ で始まる関数名を特殊関数として予約しています。
   文書化された特殊な機能を必要とする場合を除き、
   __ で始まる関数名を使用しないことが推奨されます。
  </simpara>
 </caution>

 <sect2 id="language.oop5.magic.sleep">
  <title><literal>__sleep</literal> と <literal>__wakeup</literal></title>
  <para>
   <function>serialize</function> は、クラスに特殊な名前
   <literal>__sleep</literal> の関数があるかどうかを調べます。
   もしあれば、シリアル化の前にその関数を実行します。
   この関数で、オブジェクトをクリアすることができます。
   またこの関数は、シリアル化するオブジェクトについて、
   すべての変数の名前を配列で返すことが前提となっています。
   このメソッドが何も返さなかった場合は、&null;
   がシリアル化され、E_NOTICE が発生します。
  </para>
  <para>
   典型的な <literal>__sleep</literal> の使用法は、
   途中のデータをコミットしたり、
   似たようなタスクのクリアを行うといったものです。
   また、オブジェクトが非常に大きく、かつ、完全に保存する必要がない場合、
   この関数が有用です。
  </para>
  <para>
   <literal>__sleep</literal> メソッドは、シリアル化する値
   (通常は <literal>$this</literal>) を返さなければなりません。
   そうしないと、&null; がシリアル化されます。
  </para>
  <para>
   逆に、<function>unserialize</function> は、
   特殊な名前 <literal>__wakeup</literal> を有する
   関数の存在を調べます。
   もし存在する場合、この関数は、オブジェクトが有する可能性が
   あるあらゆるリソースを再構築することができます。
  </para>
  <para>
   意図される <literal>__wakeup</literal> の使用法は、
   シリアル化の際に失われたデータベース接続を再度確立したり、
   その他の再初期化を行うことです。
  </para>
   <example>
    <title>Sleep および wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection {
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        return array('server', 'username', 'password', 'db');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
 </sect2>

 <sect2 id="language.oop5.magic.tostring">
  <title><literal>__toString</literal></title>
  <para>
   <literal>__toString</literal> メソッドにより、
   クラスが文字列に変換される際の動作を決めることができます。
  </para>
  <example>
   <title>簡単な例</title>
   <programlisting role="php">
<![CDATA[
<?php
// 簡単なクラスを宣言
class TestClass
{
    public $foo;

    public function __construct($foo) {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello
]]>
   </screen>
  </example>
  <para>
   注意が必要なのは、PHP 5.2.0 より前では、
   <literal>__toString</literal> メソッドは
   <function>echo</function> または <function>print</function>.
   と直接結合された場合のみコールされていたということです。
  </para>
  </sect2>

  <sect2 id="language.oop5.magic.set-state">
   <title><literal>__set_state</literal></title>
   <para>
    この <link linkend="language.oop5.static">static</link> メソッドは、
    PHP 5.1.0 以降で <function>var_export</function> によって
    エクスポートされたクラスのためにコールされます。
   </para>
   <para>
    このメソッドの唯一のパラメータは、エクスポートされたプロパティを
    <literal>array('property' => value, ...)</literal> の形式で保持する
    配列です。
   </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
