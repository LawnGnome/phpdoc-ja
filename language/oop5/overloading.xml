<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.21 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->

 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>オーバーロード</title>

  <para>
   メソッド呼び出しとメンバーへのアクセスのいずれについても、
   __call, __get そして __set メソッドを通してオーバーロードすることができます。
   オブジェクトや継承されたオブジェクトが
   アクセスしようとしている <modifier>public</modifier>
   メンバーもしくはメソッドを含んでいない場合でも、
   これらのメソッドは実行されます。
   オーバーロードしている全てのメソッドは、
   <link linkend="language.oop5.static">static</link>
   として定義されていてはいけません。
   オーバーロードしている全てのメソッドは
   <link linkend="language.oop5.visibility">public</link>
   として定義されていなければなりません。
  </para>
  <para>
   PHP 5.1.0 以降、__isset や __unset メソッドを通じて
   <function>isset</function> 関数や <function>unset</function>
   関数を個々にオーバーロードする事も可能です。
   メソッド __isset は、<function>empty</function> でもコールされます。
  </para>

  <sect2 xml:id="language.oop5.overloading.members">
   <title>メンバーのオーバーロード</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>mixed</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    独自のクラスで定義されているカスタムコードを実行するために、
    特別な名前を持つメソッドによってクラスメンバーをオーバーロード
    することができます。
    使用される <varname>$name</varname> パラメータは、
    設定あるいは取得される変数名です。
    __set() メソッドの <varname>$value</varname> パラメータにより
    オブジェクトが <varname>$name</varname> に設定する値を指定します。
   </para>

   <note>
    <para>
     <literal>__set()</literal> メソッドでは、引数を参照渡しで受け取ることはできません。
    </para>
   </note>

   <example>
    <title>__get, __set, __isset, __unset を使ったオーバーロードの例</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter
{
    public $n;
    private $x = array("a" => 1, "b" => 2, "c" => 3);

    public function __get($nm)
    {
        echo "Getting [$nm]\n";

        if (isset($this->x[$nm])) {
            $r = $this->x[$nm];
            print "Returning: $r\n";
            return $r;
        } else {
            echo "Nothing!\n";
        }
    }

    public function __set($nm, $val)
    {
        echo "Setting [$nm] to $val\n";

        if (isset($this->x[$nm])) {
            $this->x[$nm] = $val;
            echo "OK!\n";
        } else {
            echo "Not OK!\n";
        }
    }

    public function __isset($nm)
    {
        echo "Checking if $nm is set\n";

        return isset($this->x[$nm]);
    }

    public function __unset($nm)
    {
        echo "Unsetting $nm\n";

        unset($this->x[$nm]);
    }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;

var_dump(isset($foo->a)); //true
unset($foo->a);
var_dump(isset($foo->a)); //false

// this doesn't pass through the __isset() method
// because 'n' is a public property
var_dump(isset($foo->n));

var_dump($foo);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setting [a] to 100
OK!
Getting [a]
Returning: 100
Setting [a] to 101
OK!
Getting [z]
Nothing!
Setting [z] to 1
Not OK!

Checking if a is set
bool(true)
Unsetting a
Checking if a is set
bool(false)
bool(true)

object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x":"Setter":private]=>
  array(2) {
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>メソッドのオーバーロード</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    特別なメソッド __call() を使用すると、存在しないメソッドの呼び出しを捕捉することができます。
	つまり、__call() を使用すると、実際にコールされたメソッドの名前に応じた
	ユーザ定義の処理を実装することができるということです。
    これは、たとえばプロキシを実装する場合などに便利です。
	関数に渡された引数はパラメータ
    <varname>$arguments</varname> で受け取ることができ、
    __call() メソッドの返り値が呼び出し元のメソッドの返り値となります。
   </para>

   <example>
    <title>__call を使ったオーバーロードの例</title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller
{
    private $x = array(1, 2, 3);

    public function __call($m, $a)
    {
        print "Method $m called:\n";
        var_dump($a);
        return $this->x;
    }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[

Method test called:
array(4) {
    [0]=>
    int(1)
    [1]=>
    string(1) "2"
    [2]=>
    float(3.4)
    [3]=>
    bool(true)
}
array(3) {
    [0]=>
    int(1)
    [1]=>
    int(2)
    [2]=>
    int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
