<?xml version="1.0" encoding="utf-8"?>
 <reference id="ref.pear">
  <title>PEAR リファレンスマニュアル</title>
  <titleabbrev>PEAR</titleabbrev>
  <partintro>
   <simpara>
    本章は、PHPに付属する PEARコンポーネントに関するリファレンスです。
    ここでは、<link linkend="language.oop">オブジェクトとクラス</link>
    に既に慣れていることを前提とします。
   </simpara>
  </partintro>

  <refentry id="class.pear">
   <refnamediv>
    <refname>PEAR</refname>
    <refpurpose>PEAR基底クラス</refpurpose>
   </refnamediv>
   <refsynopsisdiv>
    <synopsis>require_once "PEAR.php";</synopsis>
    <synopsis>class <replaceable>classname</replaceable> extends <classname>PEAR</classname> { ... }</synopsis>
   </refsynopsisdiv>
   <refsect1>
    <title>説明</title>
    <simpara>
     PEAR基底クラスは、多くのPEARクラスで使用される標準的な機能を提
     供します。通常、PEARクラスのインスタンスを直接作成することはあり
     ません。このクラスのサブクラス化して使用して下さい。
    </simpara>
    <para>
     主な機能を以下に示します。
     <itemizedlist>
      <listitem>
       <simpara>オブジェクト終了処理 "デストラクタ"</simpara>
      </listitem>
      <listitem>
       <simpara>エラー処理</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <refsect2>
     <title>PEAR "デストラクタ"</title>
     <simpara>
      <replaceable>ClassName</replaceable>という名前のクラスで
      <classname>PEAR</classname> を継承する場合、
      _<replaceable>ClassName</replaceable> (クラス名の前にアンダース
      コアを付けたもの)というメソッドを定義できます。これは、リクエス
      トの終了時にコールされます。これは、オブジェクトを"削除"できると
      いう意味でのデストラクタではなく、実行が終了した際にオブジェクト
      内でPHPからのコールバックを指定するという意味で、デストラクタと
      呼ばれます。以下の <link linkend="example.pear.destructors">例
      </link> を参照下さい。
     </simpara>
    </refsect2>

    <refsect2>
     <title>PEARのエラー処理</title>
     <simpara>
      PEARの基底クラスは、&true;/false値や数値コードよりも複雑なエラーを
      渡す手段を提供します。PEARのエラーは、クラス
      <classname>PEAR_Error</classname>または
      <classname>PEAR_Error</classname>を継承したクラスのインスタンス
      です。
     </simpara>
     <simpara>
      PEARのエラーの設計指針の一つは、ユーザに特定の型の出力を強制する
      べきではなく、必要ならば出力を全く行うことなくエラーを処理するこ
      とを可能にするべきであるというものです。これにより、エラー処理を
      柔軟に行うことが可能になり、また、出力形式をHTML以外となる場合
      (例えば、WMLまたは他のXML形式)でも処理を行うことが可能となります。
     </simpara>
     <simpara>
      エラーオブジェクトは、作成時にエラーメッセージを出力したり、メッ
      セージを出力し終了したり、PHPの
      <function>trigger_error</function>関数でエラーを発生しコールバッ
      ク関数を呼び出したり、こうしたことを何もしないといったように何ら
      かの動作を行うように設定可能です。この動作は、通常、
      <classname>PEAR_Error</classname>のコンストラクタで指定されます
      が、全てのパラメータはオプションであり、
      <classname>PEAR</classname>クラスに基づく各オブジェクトから生成
      されるエラー用にデフォルト値を設定可能です。使用法については
      <link linkend="example.pear.error1">PEARエラーの例</link>、詳細
      については、<classname>PEAR_Error</classname>のリファレンスを参
      照下さい。
     </simpara>
    </refsect2>
   </refsect1>

   <refsect1>
    <title>例</title>
    <para>
     以下の例は、PEARの「貧乏人のデストラクタもどき」の使用法を示すも
     ので、定数をファイルに保存する簡単なクラスを実装しており、オブジェ
     クトにデータを追加し、リクエストの終了時にファイルにデータを書き
     戻します。
     <example id="example.pear.destructors">
      <title>PEAR: デストラクタのエミュレーション</title>
      <programlisting role="php">
require_once "PEAR.php";

class FileContainer extends PEAR
{
    var $file = '';
    var $contents = '';
    var $modified = 0;
    
    function FileContainer($file)
    {
        $this->PEAR(); // これにより親クラスのコンストラクタをコールします
        $fp = fopen($file, "r");
        if (!is_resource($fp)) {
            return;
        }
        while (!empty($data = fread($fp, 2048))) {
            $this->contents .= $data;
    	}
        fclose($fp);
    }

    function append($str)
    {
        $this->contents .= $str;
        $this->modified++;
    }

    // "destructor" は、コンストラクタと同様な名前が付けられていますが、
    // 先頭にアンダースコアが付きます。
    function _FileContainer()
    {
        if ($this->modified) {
            $fp = fopen($this->file, "w");
            if (!is_resource($fp)) {
                return;
            }
            fwrite($fp, $this->contents);
            fclose($fp);
        }
    }
}

$fileobj = new FileContainer("testfile");
$fileobj->append("this ends up at the end of the file\n");

// リクエストが終了し、PHPがシャットダウンした場合、$fileobjの
// "デストラクタ" がコールされ、ディスク上のファイルが更新されます。

      </programlisting>
     </example>
     <note>
      <simpara>
       PEARの"デストラクタ"は、PHPのシャットダウンコールバック
       (<function>register_shutdown_function</function>)を使用します。
       PHPをWebサーバ上で実行している場合には、これらから出力を行うこ
       とはできません。このため、"デストラクタ"から出力されたものは、
       コマンドラインモードでPHPを使用している場合以外は失われます。
      </simpara>
     </note>
    </para>
    <simpara>
     次の例は、PEARのエラー処理機構を使用する別の手法について説明する
     ものです。
    </simpara>
    <para>
     <example id="example.pear.error1">
      <title>PEAR エラーの例 (1)</title>
      <programlisting role="php">
function mysockopen($host = "localhost", $port = 8090)
{
    $fp = fsockopen($host, $port, $errno, $errstr);
    if (!is_resource($fp)) {
        return new PEAR_Error($errstr, $errno);
    }
    return $fp;
}

$sock = mysockopen();
if (PEAR::isError($sock)) {
    print "mysockopen error: ".$sock->getMessage()."&lt;BR>\n"
}
      </programlisting>
     </example>
    </para>
    <simpara>
     この例は、エラーコードとメッセージを返す
     <function>fsockopen</function>へのラッパーの例で、(必要な場合に)
     fsockopen により返されたメッセージをPEARエラーオブジェクトに渡し
     ています。値がPEARエラーかどうかを調べるために
     <function>PEAR::isError</function> が使用されていることに注意して
     下さい。
    </simpara>
    <simpara>
     この例でのPEAR_Errorの処理モードは、単にエラーオブジェクトを返し、
     他の処理はユーザ(プログラマ)にまかせています。これがデフォルトの
     エラーモードです。
    </simpara>
    <simpara>
     次の例では、デフォルトのエラーモードの使用法を示します。
    </simpara>
    <para>
     <example id="example.pear.error2">
      <title>PEAR エラーの例 (2)</title>
      <programlisting role="php">
class TCP_Socket extends PEAR
{
    var $sock;

    function TCP_Socket()
    {
        $this->PEAR();
    }

    function connect($host, $port)
    {
        $sock = fsockopen($host, $port, $errno, $errstr);
        if (!is_resource($sock)) {
            return $this->raiseError($errstr, $errno);
        }
    }
}

$sock = new TCP_Socket;
$sock->setErrorHandling(PEAR_ERROR_DIE);
$sock->connect("localhost", 8090);
print "still alive&lt;BR>\n";
      </programlisting>
     </example>
    </para>
    <simpara>
     ここでは、デフォルトのエラーモードを
     <constant>PEAR_ERROR_DIE</constant>に設定しており、
     raiseErrorコールで(3番目のパラメータにより)エラーモードを指定して
     いないため、raiseErrorはデフォルトのエラーモードを使用し、
     fsockopenが失敗した場合に終了します。
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="class.pear-error">
   <refnamediv>
    <refname>PEAR_Error</refname>
    <refpurpose>PEARエラー処理機能の基底クラス</refpurpose>
   </refnamediv>
   <refsynopsisdiv>
    <synopsis>$err = new <classname>PEAR_Error</classname>($msg);</synopsis>
   </refsynopsisdiv>
   <refsect1>
    <title>エラーモード</title>
    <para>
     エラーオブジェクトは処理モードを有しており、次のどれかを設定可能
     です。
     <variablelist id="pear.error-modes">
      <varlistentry id="constant.pear-error-return">
       <term>PEAR_ERROR_RETURN</term>
       <listitem>
	<simpara>
	 オブジェクトを返すだけであり、PEAR_Errorのコンストラクタで特
	  別なことは何もしません。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry id="constant.pear-error-print">
       <term>PEAR_ERROR_PRINT</term>
       <listitem>
	<simpara>
	 エラーメッセージをコンストラクタで出力します。実行は中断しま
	 せん。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry id="constant.pear-error-trigger">
       <term>PEAR_ERROR_TRIGGER</term>
       <listitem>
	<simpara>
	 PHPで内部エラーを発生するためにPHPの
	 <function>trigger_error</function>関数を使用します。ユーザが
	 PHPエラーハンドラを定義しているかエラーのseverityを
	 E_USER_ERRORに設定している場合に実行は終了します。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry id="constant.pear-error-die">
       <term>PEAR_ERROR_DIE</term>
       <listitem>
	<simpara>
	 エラーメッセージを出力し、終了します。実行はもちろん終了しま
	 す。
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry id="constant.pear-error-callback">
       <term>PEAR_ERROR_CALLBACK</term>
       <listitem>
	<simpara>
	 エラー処理にコールバック関数またはメソッドを使用します。実行
	 は終了されます。
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1>
    <title>プロパティ</title>
    <simpara></simpara>
   </refsect1>

   <refsect1>
    <title>メソッド</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>PEAR_Error::PEAR_Error</function></funcdef>
      <paramdef>
       <parameter><optional>message</optional></parameter>
       <parameter><optional>code</optional></parameter>
       <parameter><optional>mode</optional></parameter>
       <parameter><optional>options</optional></parameter>
       <parameter><optional>userinfo</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <refsect2>
     <title>説明</title>
     <para>
      PEAR_Error のコンストラクタ。パラメータ:
      <variablelist>
       <varlistentry>
	<term>message</term>
	<listitem>
	 <simpara>
	  エラーメッセージ。デフォルトは、"unknown error"
	 </simpara>
	</listitem>
       </varlistentry>
       <varlistentry>
	<term>code</term>
	<listitem>
	 <simpara>
	  エラーコード (オプション)
	 </simpara>
	</listitem>
       </varlistentry>
       <varlistentry>
	<term>mode</term>
	<listitem>
	 <simpara>
	  処理モード。詳細は、<link linkend="pear.error-modes">エラー
	  モード</link> の節を参照下さい。
	 </simpara>
	</listitem>
       </varlistentry>
       <varlistentry>
	<term>options</term>
	<listitem>
	 <simpara>
	  オプションが指定可能なモードの場合、このパラメータを使用して
	  下さい。現在、"trigger" と "callback" モードのみがオプション
	  パラメータを使用しています。triggerモードの場合、このパラメー
	  タは、<constant>E_USER_NOTICE</constant>、
	  <constant>E_USER_WARNING</constant>、
	  <constant>E_USER_ERROR</constant>のどれかです。callbackモー
	  ドの場合、このパラメータは、コールバック関数名(文字列)または
	  オブジェクトとメソッド名を表す二つの要素(オブジェクト、文字
	  列)からなる配列のどちらかを指定する必要があります。
	 </simpara>
	</listitem>
       </varlistentry>
      </variablelist>
     </para>
    </refsect2>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
