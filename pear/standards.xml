 <chapter id="pear.standards">
  <title>PEAR コーディング標準</title>

  <sect1 id="pear.standards.indenting">
   <title>インデント</title>
   <para>
    インデントとして空白4つを使用し、タブは使用しないで下さい。PEARコー
    ドを編集するためにEmacsを使用している場合、 indent-tabs-mode を
    nil に設定して下さい。以下にこれらの指針に沿ってEmacsを設定するた
    めのモードフックの例を示します。(PHPファイルを編集する際にこのフッ
    クがコールされるようにする必要があります。)
    <programlisting role="elisp">
(defun php-mode-hook ()
  (setq tab-width 4
        c-basic-offset 4
        c-hanging-comment-ender-p nil
        indent-tabs-mode nil))
    </programlisting>
   </para>
   <para>
    同じことを行う vim 用の設定を示します。
    <programlisting role="vim">
  set expandtab 
  set shiftwidth=4 
  set tabstop=4 
    </programlisting>
   </para>
  </sect1>

  <sect1 id="pear.standards.control">
   <title>制御構造</title>
   <para>
    制御構造には、if, for, while, switch, 等が含まれます。制御構造の中
    で最も複雑なif文の例を以下に示します。
    <programlisting role="php">
if ((condition1) || (condition2)) {
    action1;
} elseif ((condition3) && (condition4)) {
    action2;
} else {
    defaultaction;
}
</programlisting>
   </para>
   <simpara>
    制御文は、関数のコールと区別するために制御用のキーワードと開き括弧
    の間に空白を一つおく必要があります。
   </simpara>
   <simpara>
    文法的には他の選択肢もありますが、常に波括弧を使用することが強く推
    奨されます。このようにすることにより、可読性が向上し、改行が追加さ
    れた際に発生するかもしれない論理構造上のエラーが減少します。
   </simpara>
   <para>
    switch 文の場合は次のようにします。
    <programlisting role="php">
switch (condition) {
case 1:
    action1;
    break;

case 2:
    action2;
    break;

default:
    defaultaction;
    break;

}
    </programlisting>
   </para>
  </sect1>

  <sect1 id="pear.standards.funcalls">
   <title>関数のコール</title>
   <para>
    関数は、関数名、開き括弧、最初のパラメータの間に空白を付けてコール
    するべきではありません。また、カンマと各パラメータの間には、空白を
    置き、最後のパラメータと閉じ括弧およびセミコロンの間には空白を置か
    ないようにします。以下に例を示します。
    <programlisting role="php">
$var = foo($bar, $baz, $quux);
</programlisting>
   </para>
   <para>
    上記のように、関数の値を変数に代入するために使用される等号の両側に
    は、空白を一つ置きます。関連する代入のブロックの場合には、可読性を
    向上させるために複数の空白を挿入することも可能です。
    <programlisting role="php">
$short         = foo($bar);
$long_variable = foo($baz);
    </programlisting>
   </para>
  </sect1>

  <sect1 id="pear.standards.funcdef">
   <title>関数の定義</title>
   <para>
    関数選言の後には、次のように波括弧を一つ置く流儀とします。
    <programlisting role="php">
function fooFunction($arg1, $arg2 = '')
{
    if (condition) {
        statement;
    }
    return $val;
}
    </programlisting>
   </para>
   <para>
    デフォルト値を有する引数は、引数リストの最後につけます。関数の動作
    が正常である場合には、常にその関数から意味のある値を返すようにして
    下さい。以下にやや長い例を示します。
    <programlisting role="php">
function connect(&$dsn, $persistent = false)
{
    if (is_array($dsn)) {
        $dsninfo = &$dsn;
    } else {
        $dsninfo = DB::parseDSN($dsn);
    }
    
    if (!$dsninfo || !$dsninfo['phptype']) {
        return $this->raiseError();
    }
    
    return true;
}
    </programlisting>
   </para>
  </sect1>

  <sect1 id="pear.standards.comments">
   <title>コメント</title>
   <para>
    クラス用のインラインドキュメントは、Javadocに似たPHPDocの流儀に沿っ
    ている必要があります。PHPDocに関するより詳細な情報は、
    <ulink url="&url.phpdoc;">&url.phpdoc;</ulink> にあります。
   </para>
   <para>
    ドキュメント以外のコメントも強く推奨されます。一般的な指針としてあ
    るコードのブロックを見て、「これを説明したいとは思わない」と思った
    場合には、動作内容を忘れる前にコメントを書く必要があります。
   </para>
   <para>
    C 形式のコメント (/* */) と標準的な C++ のコメント (// ) は共に使
    用可能です。Per/シェル形式のコメント (# ) の使用は推奨されません。
   </para>
  </sect1>

  <sect1 id="pear.standards.including">
   <title>コードの読み込み</title>
   <para>
    クラスファイルを無条件にどこかに読む込む場合には、
    <function>require_once</function> を使用して下さい。条件付きでクラ
    スファイルをどこかに読み込む場合(例えば、factoryメソッド)には、
    <function>include_once</function>を使用して下さい。どちらの場合も
    クラスファイルが一度だけ読み込まれるようにして下さい。これらの手法
    は、同じファイルリストを共有しているため、これらを混用することを心
    配する必要はありません。つまり、あるファイルを
    <function>require_once</function> で読み込むと、
    <function>include_once</function>で再度読み込まれることはありませ
    ん。
    <note>
     <simpara>
      <function>include_once</function> と
      <function>require_once</function> は命令であり、関数ではありませ
      ん。読み込むファイル名の前後に括弧は必要ありません。
     </simpara>
    </note>
   </para>    
  </sect1>

  <sect1 id="pear.standards.tags">
   <title>PHPコードのタグ</title>
   <para>
    PHPコードを記述する際に、短縮形の <literal>&lt;? ?></literal> では
    なく <emphasis>常に</emphasis> <literal>&lt;?php ?></literal> を使
    用して下さい。これは、PEAR互換とするために必要であり、PHPコードを
    異なったシステムや設定で読み込む際に最も移植性のある手法でもありま
    す。
   </para>
  </sect1>

  <sect1 id="pear.standards.header">
   <title>ヘッダのコメント部</title>
   <para>
    PEARのコアな配布ファイルにある全てのソースコードファイルには、以下
    のようなコメントブロックがヘッダとして記述されています。
    <programlisting role="php">
/* vim: set expandtab tabstop=4 shiftwidth=4: */
// +----------------------------------------------------------------------+
// | PHP version 4.0                                                      |
// +----------------------------------------------------------------------+
// | Copyright (c) 1997, 1998, 1999, 2000, 2001 The PHP Group             |
// +----------------------------------------------------------------------+
// | This source file is subject to version 2.0 of the PHP license,       |
// | that is bundled with this package in the file LICENSE, and is        |
// | available at through the world-wide-web at                           |
// | http://www.php.net/license/2_02.txt.                                 |
// | If you did not receive a copy of the PHP license and are unable to   |
// | obtain it through the world-wide-web, please send a note to          |
// | license@php.net so we can mail you a copy immediately.               |
// +----------------------------------------------------------------------+
// | Authors: Original Author &lt;author@example.com>                        |
// |          Your Name &lt;you@example.com>                                 |
// +----------------------------------------------------------------------+
//
// &dollar;Id&dollar;
</programlisting>
   </para>
   <para>   
    新たなコードに貢献した人が、ソースファイル中の作者リストに追加され
    るかどうかを定義する明確なルールはありません。一般に、行った変更が
    「本質的な」区分に属する場合(よよそ10%から20%のコード変更を意味し
    ます)に行われます。関数を書き直したり、新たなロジックを作成した場
    合にはこの例外となる場合があります。
   </para>
   <para>
    簡単なコードの再構成やバグ修正は、作者のリストへ新たに人を追加する
    にはあたらないと思われます。
   </para>
   <para>
    PEARのコアなレポジトリにないファイルも同様に著作権、ライセンス、作
    者に関する記述を行う必要があります。全てのファイルには、互換性を保
    つために、モード指定用のコメントを挿入しておくべきです。
   </para>
  </sect1>

  <sect1 id="pear.standards.cvstags">
   <title>CVS タグ</title>
   <para>
    各ファイルには、CVSベンダータグ &dollar;Id&dollar; を挿入して下さ
    い。各ファイルを編集した際に、まだない場合にはこのタグを追加して下
    さい。(もしくは、 "Last Modified:"のような既存の形式を置換して下さ
    い。)
    <note>
     <simpara>
      Horde cvs には、べージョンを別個に管理するために特別な $Horde タ
      グがあります。同様に$PEARタグを作成することもできます。この場合、
      PEARファイルが他のソースコード管理システム等に処理された場合でも、
      タグは保持されます。
     </simpara>
    </note>
   </para>
  </sect1>

  <sect1 id="pear.standards.exampleurls">
   <title>URLの例</title>
   <para>
    RFC 2606に基づき、例えば"example.com" のようにして下さい。
   </para>
  </sect1>

  <sect1 id="pear.standards.constants">
   <title>定数の名前</title>
   <para>
    定数は常に大文字とし、単語を区切るさいには、アンダースコアを使用し
    て下さい。含まれているクラス/パッケージの名前を定数の接頭辞として
    付けて下さい。例えば、<literal>DB::</literal>パッケージで使用され
    る定数は全て"<literal>DB_</literal>"で始まります。
   </para>
  </sect1>
  
 </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
