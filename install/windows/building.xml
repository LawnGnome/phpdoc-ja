<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: haruki Status: ready -->
<!-- CREDITS: fujimoto, hirokawa, yuw, haruki -->
   <sect1 id="install.windows.building">
    <title>ソースからのビルド</title>
    <para>
     ビルド手順を説明する前に、次の質問に答えておきましょう。
     「なぜ、Windows 上でのビルド作業はこんなに面倒なのか？」
     考えられる理由としては、二つあります。
    </para>
    <orderedlist>
     <listitem>
      <simpara>
       Windows では、まだ、ソースを自由に共有する大規模な開発者の
       コミュニティがそれほど多くありません。結果として、
       そのような共同開発のサポートに必要なインフラを構築する作業が
       行われていないからです。利用可能なユーティリティの大部分は、UNIX から
       移植されたものです。そのような背景が影響しているとしても、驚くべきことではありません。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       手順がほとんど「実行したら、忘れてしまう」形式で記述されているからです。
       ですので、端末の前に座ったら、以下の手順をできるだけそのまま試して見てください。
      </simpara>
     </listitem>
    </orderedlist>

    <sect2 id="install.windows.building.requirement">
     &reftitle.required;
     <para>
      コンパイルとビルドにはマイクロソフトの開発環境が必要です。
      Microsoft Visual C++ 6.0 が推奨です。ダウンロードしたファイルの解凍には
      解凍ユーティリティ (例えば WinZip) が必要です。zip を解凍するユーティリティが
      手元に無いのなら <ulink url="&url.infozip;">InfoZip</ulink> から無料の
      バージョンを取得できます。
     </para>
     <para>
      始める前に、ダウンロードしなければならないものがいくつかあります。
     </para>
      <itemizedlist>
       <listitem>
        <simpara>
        <ulink url="&url.win32.buildtools;">&url.win32.buildtools;</ulink> から
        win32 ビルドツール
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <ulink url="&url.win32.dnsresolver;">&url.win32.dnsresolver;</ulink> から
        <literal>PHP</literal> が使用する DNS ネームリゾルバのソース。
        これは <filename>win32build.zip</filename>
        に含まれる <filename>resolv.lib</filename> の代用です。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>PHP</literal> を Apache モジュールとしてコンパイルする場合には
        <ulink url="&url.apache.source;">Apache のソース</ulink>も
        必要です。
       </simpara>
      </listitem>
     </itemizedlist>
     <simpara>
      最後に、PHP 自体のソースが必要となります。最新の開発版を
      <ulink url="&url.php.anoncvs;">anonymous CVS</ulink> から、または
      <ulink url="&url.php.snapshots;">スナップショット</ulink>、あるいは
      最新のリリース版の <ulink url="&url.php.downloads;">ソース</ulink> アーカイブを
      ダウンロードします。
     </simpara>
    </sect2>

    <sect2 id="install.windows.building.install">
     <title>ファイルの配置</title>
     <para>
      必要なパッケージをすべてダウンロードしたら、
      ファイルを適切な位置に展開しなければなりません。
      <itemizedlist>
       <listitem>
        <simpara>
         すべてのファイルを展開するための作業ディレクトリを作成します。
         例えば<filename>c:\work</filename>
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         作業ディレクトリ (<filename>c:\work</filename>) 配下に
         <filename>win32build</filename> ディレクトリを作成し、そこで
         <filename>win32build.zip</filename> を解凍します。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         作業ディレクトリ (<filename>c:\work</filename>) 配下に
         <filename>bindlib_w32</filename> ディレクトリを作成し、そこで
         <filename>bindlib_w32.zip</filename> を解凍します。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         作業ディレクトリ (<filename>c:\work</filename>) 配下に
         PHP のソースコードを解凍します。
        </simpara>
       </listitem>
      </itemizedlist>
      上記の手順を行えば、ディレクトリ構造は以下のようになっているはずです。
      <informalexample>
       <programlisting>
<![CDATA[

+--c:\work
|  |
|  +--bindlib_w32
|  |  |
|  |  +--arpa
|  |  |
|  |  +--conf
|  |  |
|  |  +--...
|  |
|  +--php-4.x.x
|  |  |
|  |  +--build
|  |  |
|  |  +--...
|  |  |
|  |  +--win32
|  |  |
|  |  +--...
|  |
|  +--win32build
|  |  |
|  |  +--bin
|  |  |
|  |  +--include
|  |  |
|  |  +--lib

]]>
       </programlisting>
      </informalexample>
      <filename>c:\usr\local\lib</filename> ディレクトリを作成します。
      <filename>bison.simple</filename> を <filename>c:\work\win32build\bin</filename> から
      <filename>c:\usr\local\lib</filename> にコピーします。
     </para>
     <note>
      <simpara>
       <ulink url="&url.cygwin;">Cygwin</ulink> ユーザーは最後の手順は省略しても
       かまいません。適切にインストールされているCygwin環境は
       <filename>bison.simple</filename> と <filename>bison.exe</filename>
       を持っています。
      </simpara>
     </note>
    </sect2>

    <sect2 id="install.windows.building.configure">
     <title>MVC ++ の設定</title>
      <para>
       次のステップは MVC++ でコンパイルする準備です。
       Microsoft Visual C++ を起動し、ディレクトリタブを選択します。
       実行形式、include、ライブラリのファイルが順次変更されます。
       以下のようになります。
       <itemizedlist>
        <listitem>
         <simpara>
          Executable files: <filename class="directory">c:\work\win32build\bin</filename>,
          Cygwin users: <filename>cygwin\bin</filename>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          Include files: <filename class="directory">c:\work\win32build\include</filename>
         </simpara>
        </listitem>
         <listitem>
          <simpara>
          Library files: <filename class="directory">c:\work\win32build\lib</filename>
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
    </sect2>

    <sect2 id="install.windows.building.resolvlib">
     <title>resolv.lib のビルド</title>
      <para>
       <filename>resolv.lib</filename> ライブラリをビルドしなければなりません。
       デバッグシンボルを有効にするか (bindlib - Win32 Debug) 
       否か (bindlib - Win32 Release) を決定してください。
       適切な設定をしたらビルドします。
       <itemizedlist>
        <listitem>
         <simpara>
          GUI ユーザーの場合、VC++ を起動し、File =&gt; Open Workspace
          で <filename>c:\work\bindlib_w32</filename> の <filename>bindlib.dsw</filename>
          を選択します。そしてBuild=&gt;Set Active Configuration を選択し
          お望みの設定を施してください。最後に Build=&gt;Rebuild All します。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          コマンドラインユーザーの場合、C++ 環境変数が設定されているか、あるいは
          <command>vcvars.bat</command> を既に実行したか、確認してください。
          そして、以下のコマンドを実行します。
         </simpara>
         <itemizedlist>
          <listitem>
           <simpara>
            <userinput>msdev bindlib.dsp /MAKE "bindlib - Win32 Debug"</userinput>
           </simpara>
          </listitem>
          <listitem>
           <simpara>
            <userinput>msdev bindlib.dsp /MAKE "bindlib - Win32 Release"</userinput>
           </simpara>
          </listitem>
         </itemizedlist>
        </listitem>
       </itemizedlist>
       この時点で、使用可能な <filename>resolv.lib</filename> が
       <filename>c:\work\bindlib_w32\Debug</filename> または
       <filename>Release</filename> サブディレクトリのどちらかに存在します。
       このファイルを <filename>c:\work\win32build\lib</filename> ディレクトリの
       同名のファイルに上書きコピーしてください。
      </para>
    </sect2>

    <sect2 id="install.windows.building.compile">
     <title>コンパイル</title>
     <simpara>
      まず始めは、標準的な CGI バージョンをビルドしてみると良いでしょう。
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        GUI ユーザの場合、VC++ を起動し、ファイル =&gt; ワークスペースを
        開くを選び、<filename>c:\work\php-4.x.x\win32\php4ts.dsw</filename>
        を選択してください。続いて、構築=&gt;アクティブな
        構成を設定 を選び、<literal>php4ts - Win32 Debug_TS</literal>
        <literal>php4ts - Win32 Release_TS</literal> から好きなほうを
        選択します。最後に、構築=&gt;すべて構築 を選択します。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        コマンドライン版ユーザの場合、C++ 用の環境変数が定義されている
        かどうか、もしくは、<command>vcvars.bat</command> を実行済みか
        どうか確認してから、<filename>c:\work\php-4.x.x\win32</filename>
        ディレクトリから次の内のいずれかを実行してください。
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara>
          <userinput>msdev php4ts.dsp /MAKE "php4ts - Win32 Debug_TS"</userinput>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <userinput>msdev php4ts.dsp /MAKE "php4ts - Win32 Release_TS"</userinput>
         </simpara>
        </listitem>
       </itemizedlist>
      </listitem>
     </itemizedlist>
     <simpara>
      ここまでの手順で、サブディレクトリ
      <filename>c:\work\php-4.x.x.\Debug_TS</filename> または
      <filename>Release_TS</filename> に利用可能な
      <filename>php.exe</filename> が作成されているはずです。
     </simpara>
     <simpara>
      <filename>main/config.win32.h</filename> ファイルを編集すると
      ビルドプロセスでの細かい設定を行えます。
      例えば、&php.ini; のデフォルトの位置を変えたり、ビルトインの拡張モジュールや
      拡張モジュールのデフォルトの位置を変えることができます。
     </simpara>
     <simpara>
      次に、<link linkend="features.commandline">PHP をコマンドラインから使用する</link>
      ための CLI バージョンを構築しましょう。
      <literal>php4ts_cli - Win32 Debug_TS</literal> または
      <literal>php4ts_cli - Win32 Release_TS</literal> を選択すること以外は
      CGI バージョンのビルド手順と同様です。コンパイルが成功すると
      <filename>Release_TS\cli\</filename> または
      <filename>Debug_TS\cli\</filename> ディレクトリのどちらかに
      <filename>php.exe</filename> が作成されます。
     </simpara>
     <note>
      <simpara>
       PEAR とその便利なコマンドラインインストーラを使用するには、
       CLI-SAPI が必要です。PEAR とそのインストーラに関する詳細については
       <ulink url="&url.php.pear;manual/">PEAR</ulink> のサイトをご覧ください。
      </simpara>
     </note>
     <simpara>
      Microsoft IIS 上で PHP アプリを実行するための SAPI モジュール
      (<filename>php4isapi.dll</filename>) をビルドするには、
      アクティブコンフィグレーションを <filename>php4isapi-whatever-config</filename>
      にセットし、お望みの DLL をビルドしてください。
     </simpara>
    </sect2>
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
