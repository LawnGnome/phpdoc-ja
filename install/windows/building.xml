<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.18 Maintainer: haruki Status: ready -->
<!-- CREDITS: fujimoto,hirokawa,yuw,haruki,takagi -->
<sect1 xml:id="install.windows.building" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>ソースからのビルド</title>
 <para>
  この章では、Windows 上でマイクロソフトのツールを用いて PHP をソースから
  コンパイルする方法を説明します。PHP を cygwin でコンパイルする場合は
  <xref linkend="install.unix"/> を参照ください。
 </para>
 
 <sect2 xml:id="install.windows.building.quick-guide">
  <title>Windows 上でビルドするための簡易ガイド</title>
  
  <para>
   このステップバイステップの簡易ガイドは 2008 年 3 月に書かれたものです。
   Windows XP サービスパック 2 に最新のアップデートを適用した環境で
   PHP 5.2.5 と PHP 5.3 をビルドします。
   別のツールを使うこともあるかもしれません。
  </para>
  
  <orderedlist>
   <listitem>
    <para>
     以下をダウンロードしてインストールする
    </para>
    <itemizedlist>
     <listitem>
      <simpara>
       <link xlink:href="&url.vc2k8ee;">Microsoft
       Visual C++ 2008 Express Edition</link>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <link xlink:href="&url.win32.sdk;">
       Windows SDK for Windows Server 2008 and .NET Framework 3.5</link>
      </simpara>
     </listitem>
    </itemizedlist>
   </listitem>
    
   <listitem>
    <simpara>
     <filename>C:\Program Files\Microsoft SDKs\Windows\v6.1\Include\WinResrc.h</filename>
     を <filename>C:\Program Files\Microsoft SDKs\Windows\v6.1\Include\winres.h</filename>
     にコピーする
    </simpara>
   </listitem>
    
   <listitem>
    <simpara>
     ディレクトリ <filename>C:\work</filename> を作成する
    </simpara>
   </listitem>
    
   <listitem>
    <simpara>
     <link xlink:href="&url.win32.buildtools;">the Windows build
     tools</link> をダウンロードし、それを <filename>C:\work</filename>
     に展開する
    </simpara>
   </listitem>
    
   <listitem>
    <simpara>
     ディレクトリ <filename>C:\usr\local\lib</filename> を作成し、
     <filename>C:\work\win32build\bin\bison.simple</filename>
     をそのディレクトリにコピーする
    </simpara>
   </listitem>
    
   <listitem>
    <simpara>
     <link xlink:href="&url.win32.dnsresolver;">the Windows DNS
     resolver library</link> をダウンロードし、それを
     <filename>C:\work</filename> に展開する
    </simpara>
   </listitem>
    
   <listitem>
    <simpara>
     <filename>C:\work\bindlib_w32\bindlib.dsw</filename> 開く。
     プロジェクトを更新するかどうかを聞かれたら「はい」を選択します。
     Debug あるいは Release のいずれかの設定をトップツールバーで選択し、
     Build =&gt; Build Solution を選択します。
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     PHP のソースを取得して <filename>C:\work</filename>
     ディレクトリに展開する。この時点で、ディレクトリ階層は次のようになっています。
    </simpara>
    <screen>
<![CDATA[
+-C:\work
| +-bindlib_w32
| | +-Debug
| | | +-resolv.lib
| | | +-...
| | +-...
| +-win32build
| | +-bin
| | +-include
| | +-lib
| +-php-5.2.5
| | +-build
| | +-win32
| | +-...]]></screen>
   </listitem>
    
   <listitem>
    <simpara>
     スタートメニューから Visual Studio 2008
     コマンドプロンプトを開く
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     次のコマンドを実行する
    </simpara>
    <screen>
<![CDATA[
C:\Program Files\Microsoft Visual Studio 9.0\VC> set "PATH=C:\work\win32build\bin;%PATH%"
C:\Program Files\Microsoft Visual Studio 9.0\VC>]]></screen>
   </listitem>
   
   <listitem>
    <simpara>
     <filename>C:\work\php-5.2.5</filename> ディレクトリに移動する
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     <command>cscript /nologo win32\build\buildconf.js</command> を実行する
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     <command>cscript /nologo configure.js --disable-all --enable-cli
     --enable-cgi --enable-object-out-dir=.. --disable-ipv6</command>
     を実行する。デバッグを有効にする場合は最後に
     <command>--enable-debug</command> を追加します。
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     <command>nmake</command> を実行する
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     すべてうまくいけば、PHP CLI の実行ファイルが
     <filename>C:\work\Debug_TS\php.exe</filename> あるいは
     <filename>C:\work\Release_TS\php.exe</filename>
     にできあがります。
    </simpara>
   </listitem>

  </orderedlist>
 </sect2>

 <sect2 xml:id="install.windows.building.environment">
  <title>Build Environment</title>
  <para>
   PHP のコンパイルとビルドにはマイクロソフトの開発環境が必要です。
   以下の環境をサポートしています。
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     Microsoft Visual C++ 6.0 (公式)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Microsoft Visual C++ .NET
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Microsoft Visual C++ 2005, Windows Platform SDK および .NET Framework SDK (現在)
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   公式の Windows 版は VC6 (Microsoft Visual C++ 6.0)
   で作成していますが、これは現在 Microsoft のウェブサイトからはダウンロードできません。
   フリーで Windows 版の PHP をビルドしたい方は、Microsoft Visual C++ 2005 Express
   Edition と補助コンポーネントを使用してください。
  </para>
  
  <sect3 xml:id="install.windows.building.environment.express2005">
   <title>Microsoft Visual C++ 2005 Express の設定</title>
   <note>
    <simpara>
     これらのコンポーネントは非常に大きなものであり、
     すべてあわせると 1 ギガバイト以上のディスク容量が必要となります。
    </simpara>
   </note>
   <para>
    Microsoft Visual C++ 2005 Express の設定は少し複雑で、
    3 つの別々のパッケージをインストールする必要があり、
    互換性にかかわる変更もあります。
    これらの 3 つのプログラムがインストールされた場所を覚えておくようにしましょう。
    以下のプログラムをダウンロードしてインストールします。
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.msvc2005express;">Microsoft Visual C++ 2005 Express</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.platform-sdk;">Microsoft Windows Server 2005 Platform SDK</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.net2.0-sdk;">.NET Framework 2.0 Software Development Kit</link>
     </simpara>
    </listitem>
   </itemizedlist>
   <para>
    インストールしたら、その後にいくつかの作業があります。
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.express-and-sdk;">MSVC 2005 Express は、
      Windows Platform SDK を使用するように設定する必要があります</link>。
      PHP でグラフィカルなユーザインターフェイスを使用しないのなら、
      次のステップを実行する必要はありません。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Windows Platform SDK には <filename>WinResrc.h</filename>
      というファイルが含まれています。通常、このファイルは
      SDK をインストールしたディレクトリの下の
      <filename>Include</filename> フォルダにあります。
      これをコピーして <filename>winres.h</filename>
      という名前に変更します。PHP はこの名前のファイルを使用します。
     </simpara>
    </listitem>
   </itemizedlist>
   <para>
    最後に、MSVC 2005 Express をコマンドラインから使用する場合は、
    いくつか環境変数を設定する必要があります。
    <filename>vsvars32.bat</filename> というファイルが、通常は
    <filename>C:\Program Files\Microsoft Visual Studio 8\Common7\Tools</filename>
    にあります (見つからなければ検索してください)。
    このファイルには、<varname>PATH</varname> や <varname>INCLUDE</varname>
    そして <varname>LIB</varname> などの環境変数の宣言が書かれており、
    それぞれ SDK のインストールディレクトリ配下の
    <filename>bin</filename>、<filename>include</filename>
    そして <filename>lib</filename> ディレクトリを含めるようになっています。
   </para>
   <note>
    <simpara>
     .NET SDK のパスは既に <filename>vsvars32.bat</filename> に含まれているでしょう。
     というのも、この SDK は自身のインストール先を
     Microsoft Visual C++ 2005 Express と同じディレクトリにするからです。
    </simpara>
   </note>
  </sect3>
 </sect2>
 
 <sect2 xml:id="install.windows.building.libraries">
  <title>ライブラリ</title>
  <para>
   ダウンロードしたファイルを展開するには、ZIP 展開ユーティリティが
   必要です。Windows XP 以降のバージョンでは、ZIP 展開機能が
   すでに組み込まれています。
  </para>
  <para>
   始める前に、ダウンロードしなければならないものがいくつかあります。
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     <link xlink:href="&url.win32.buildtools;">&url.win32.buildtools;</link> から
     win32 ビルドツール
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link xlink:href="&url.win32.dnsresolver;">&url.win32.dnsresolver;</link> から
     PHP が使用する DNS ネームリゾルバのソース。
     これは <filename>win32build.zip</filename>
     に含まれる <filename>resolv.lib</filename> の代用です。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     PHP を Apache モジュールとしてコンパイルする場合には
     <link xlink:href="&url.apache.source;">Apache のソース</link>も
     必要です。
    </simpara>
   </listitem>
  </itemizedlist>
  <simpara>
   最後に、PHP 自体のソースが必要となります。最新の開発版を
   <link xlink:href="&url.php.anoncvs;">anonymous CVS</link> から、または
   <link xlink:href="&url.php.snapshots;">スナップショット</link>、あるいは
   最新のリリース版の <link xlink:href="&url.php.downloads;">ソース</link>
   tar ボールをダウンロードします。
  </simpara>
 </sect2>

 <sect2 xml:id="install.windows.building.install">
  <title>ファイルの配置</title>
  <para>
   必要なパッケージをすべてダウンロードしたら、
   ファイルを適切な位置に展開しなければなりません。
   <itemizedlist>
    <listitem>
     <simpara>
      すべてのファイルを展開するための作業ディレクトリを作成します。
      例えば <filename class="directory">C:\work</filename>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      作業ディレクトリ (<filename class="directory">C:\work</filename>) 配下に
      <filename>win32build</filename> ディレクトリを作成し、そこに
      <filename>win32build.zip</filename> を展開します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      作業ディレクトリ (<filename class="directory">C:\work</filename>) 配下に
      <filename>bindlib_w32</filename> ディレクトリを作成し、そこに
      <filename>bindlib_w32.zip</filename> を展開します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      作業ディレクトリ (<filename class="directory">C:\work</filename>) 配下に
      PHP のソースコードを展開します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      必要となるライブラリをビルド (あるいはもしバイナリが入手可能なら
      それをダウンロード) し、ヘッダおよびライブラリをそれぞれ
      <filename class="directory">C:\work\win32build\include</filename>
      および<filename class="directory">C:\work\win32build\lib</filename>
      ディレクトリに配置します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      cygwin 版の bison および flex をインストールしていない場合は、
      configure スクリプトがこれらのツールを見つけられるようにするために
      <filename class="directory">C:\work\win32build\bin</filename>
      ディレクトリを PATH に追加する必要があります。
     </simpara>
    </listitem>
   </itemizedlist>
   上記の手順を行えば、ディレクトリ構造は以下のようになっているはずです。
   <screen>
<![CDATA[
+--C:\work
|  |
|  +--bindlib_w32
|  |  |
|  |  +--arpa
|  |  |
|  |  +--conf
|  |  |
|  |  +--...
|  |
|  +--php-5.x.x
|  |  |
|  |  +--build
|  |  |
|  |  +--...
|  |  |
|  |  +--win32
|  |  |
|  |  +--...
|  |
|  +--win32build
|  |  |
|  |  +--bin
|  |  |
|  |  +--include
|  |  |
|  |  +--lib
]]>
   </screen>
  </para>
  <para>
   <link xlink:href="&url.cygwin;">Cygwin</link> を使用していない場合は、
   <filename class="directory">C:\usr\local\lib</filename>
   ディレクトリを作成した上で
   <filename class="directory">C:\work\win32build\bin </filename>
   にある <filename>bison.simple</filename> を
   <filename class="directory">C:\usr\local\lib</filename>
   にコピーする必要があります。
  </para>
  <note>
   <simpara>
    PEAR およびそのコマンドラインインストーラを使用したい場合は、
    CLI-SAPI が必須となります。PEAR およびそのインストーラについての
    詳細な情報は、<link xlink:href="&url.php.pear.manual;">PEAR</link>
    web サイトのドキュメントを参照ください。
   </simpara>
  </note>
 </sect2>

 <sect2 xml:id="install.windows.building.resolvlib">
  <title>resolv.lib のビルド</title>
  <para>
   <filename>resolv.lib</filename> ライブラリをビルドしなければなりません。
   デバッグシンボルを有効にするか (bindlib - Win32 Debug) 
   否か (bindlib - Win32 Release) を決定してください。このとき、
   どちらを選択したかを覚えておいてください。というのは、デバッグモードを
   有効にした場合は、PHP もデバッグモードでビルドしないとリンクできなくなる
   からです。
   適切な設定を用いてビルドします。
   <itemizedlist>
    <listitem>
     <simpara>
      GUI ユーザの場合、<filename>C:\work\bindlib_w32\bindlib.dsw</filename>
      をダブルクリックして VC++ を起動します。
      そして Build=&gt;Rebuild All を選択します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      コマンドラインユーザの場合、C++ 環境変数が設定されているか、あるいは
      <command>vcvars.bat</command> を既に実行したかを確認してください。
      そして、以下のコマンドを実行します。
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <command>msdev bindlib.dsp /MAKE "bindlib - Win32 Debug"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>msdev bindlib.dsp /MAKE "bindlib - Win32 Release"</command>
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   この時点で、使用可能な <filename>resolv.lib</filename> が
   <filename class="directory">C:\work\bindlib_w32\Debug</filename> または
   <filename>Release</filename> サブディレクトリのどちらかに存在します。
   このファイルを <filename class="directory">C:\work\win32build\lib</filename>
   ディレクトリの同名のファイルに上書きコピーしてください。
  </para>
 </sect2>

 <sect2 xml:id="install.windows.building.new">
  <title>新しいビルドシステムを使用して PHP をビルドする [PHP &gt;=5 のみ]</title>
  <para>
   この章では、新しいビルドシステムを使用して PHP &gt;=5 をコンパイルする
   方法を説明します。これは CLI ベースのものであり、Unix での PHP
   のビルドシステムに非常に似ています。
  </para>
  <note>
   <para>
    PHP 4 ではこの方式を使用することはできません。代わりに
    <xref linkend="install.windows.building.dsw"/> を参照ください。
   </para>
  </note>
  <para>
   はじめる前に、<xref linkend="install.windows.building.install"/>
   をよく読んだ上で <link xlink:href="&url.libxml;">Libxml</link> や <link
    xlink:href="&url.icu;">ICU</link> (これは PHP &gt;= 6 で必要です)
   のような必要なライブラリをすべてビルドしておいてください。
  </para>
  <para>
   まず最初に、スタートメニューから Visual Studio コマンドプロンプトを
   開きます。通常のコマンドプロンプトではうまく動作しません。
   おそらく、必要な環境変数が設定されていないからでしょう。
   次に、たとえば <command>cd C:\work\php-5.x.x</command> などのように
   入力して PHP のソースディレクトリに移動します。
   いよいよ PHP の設定が始まります。
  </para>
  <para>
   次に、バッチファイル <command>buildconf</command> を実行します。
   これは、<filename>config.w32</filename> ファイルの内容をもとにして
   設定スクリプトを作成します。デフォルトでは、このコマンドは
   以下のディレクトリから <filename>config.w32</filename> を探します。
   <filename class="directory">pecl;
   ..\pecl; pecl\rpc; ..\pecl\rpc</filename>。
   PHP 5.1.0 以降では、引数 <literal>--add-modules-dir</literal>
   を指定することで、この振る舞いを変更可能です
   (例えば <command>cscript /nologo win32/build/buildconf.js
    --add-modules-dir=../php-gtk2 --add-modules-dir=../pecl</command>)。
  </para>
  <para>
   次のステップは、出来上がった設定スクリプトの実行です。
   使用可能な設定オプションの一覧を見るには、
   <command>cscript /nologo configure.js --help</command>
   と入力します。それらのオプションを有効/無効にすることを決めたら、
   たとえば <command>cscript /nologo configure.js --disable-foo
   --enable-fun-ext</command> のように指定します。
   <literal>--enable-foo=shared</literal> のようにすると、'foo'
   を共有モジュールとしてビルドし、動的に読み込まれるようにします。
  </para>
  <para>
   最後に、コンパイルです。これは、ただ単に <command>nmake</command>
   というコマンドを実行するだけです。できあがったファイル
   (たとえば .exe や .dll) は、<filename class="directory">Release_TS</filename>
   あるいは <filename class="directory">Debug_TS</filename> ディレクトリに
   配置されます (スレッドセーフ環境でビルドされた場合)。
   それ以外の場合は <filename class="directory">Release</filename> あるいは
   <filename class="directory">Debug</filename> ディレクトリに配置されます。
  </para>
  <para>
   オプションとして、PHP のテストスイートを実行することもできます。
   この場合は <command>nmake test</command> と入力します。
   特定のテストだけを実行させたいのなら、変数 'TESTS' を指定します
   (例 <command>nmake /D TESTS=ext/sqlite/tests test</command>
   - これは sqlite のテストのみを行います)。
   コンパイル時に作成されたファイルを削除するには、
   <command>nmake clean</command> コマンドを使用します。
  </para>
  <para>
   スナップショットをビルドする際に非常に有用な設定オプションが、
   <literal>--enable-snapshot-build</literal> です。
   これは、新たなコンパイルモード (<command>nmake build-snap</command>)
   を作成します。このモードは、使用可能なすべての拡張モジュールを
   (デフォルトでは共有モジュールとして) ビルドしようとしますが、
   個々の拡張モジュールや SAPI の構築の際のエラーは無視されます。
  </para>
 </sect2>

 <sect2 xml:id="install.windows.building.dsw">
  <title>DSW ファイルを使用して PHP をビルドする [PHP 4]</title>
  <para>
   DSW ファイルを使用して PHP をコンパイルする方法は、PHP 5 では
   サポートされていません。
   <link linkend="install.windows.building.new">より柔軟なシステムを
   使用することができます</link>。
   今でもここで説明されている方法を使用することは可能です。しかし
   今後はメンテナンスの頻度が下がるため、コンパイル時に問題が
   発生する可能性があることを覚えておきましょう。
   Windows で PHP 4 をコンパイルする場合は、ここで説明されている方法が
   唯一のものです。
  </para>
 
  <sect3 xml:id="install.windows.building.dsw.configure">
   <title>MVC ++ の設定</title>
   <para>
    最初のステップは、MVC++ でコンパイルするための準備です。
    Microsoft Visual C++ を起動し、メニューから
    ツール =&gt; オプション を選択します。
    ダイアログで、ディレクトリタブを選択します。
    実行ファイル、インクルードファイル、ライブラリファイル
    の設定を順に変更し、以下のようにします。
    <itemizedlist>
     <listitem>
      <simpara>
       実行ファイル: <filename
       class="directory">C:\work\win32build\bin</filename>, Cygwin ユーザの場合:
       <filename>C:\cygwin\bin</filename>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       インクルードファイル: <filename
       class="directory">C:\work\win32build\include</filename>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ライブラリファイル: <filename
       class="directory">C:\work\win32build\lib</filename>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </sect3>

  <sect3 xml:id="install.windows.building.dsw.compile">
   <title>コンパイル</title>
   <simpara>
    まず始めは、標準的な CGI バージョンをビルドしてみると良いでしょう。
   </simpara>
   <itemizedlist>
    <listitem>
     <simpara>
      GUI ユーザの場合、VC++ を起動し、ファイル =&gt; ワークスペースを
      開くを選び、<filename>C:\work\php-4.x.x\win32\php4ts.dsw</filename>
      を選択してください。続いて、構築=&gt;アクティブな
      構成を設定 を選び、<literal>php4ts - Win32 Debug_TS</literal> あるいは
      <literal>php4ts - Win32 Release_TS</literal> から好きなほうを
      選択します。最後に、構築=&gt;すべて構築 を選択します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      コマンドライン版ユーザの場合、C++ 用の環境変数が定義されている
      かどうか、もしくは、<command>vcvars.bat</command> を実行済みか
      どうか確認してから、
      <filename class="directory">C:\work\php-4.x.x\win32</filename>
      ディレクトリから次の内のいずれかを実行してください。
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <command>msdev php4ts.dsp /MAKE "php4ts - Win32 Debug_TS"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>msdev php4ts.dsp /MAKE "php4ts - Win32 Release_TS"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        ここまでの手順で、サブディレクトリ
        <filename class="directory">C:\work\php-4.x.x\Debug_TS</filename> または
        <filename>Release_TS</filename> に利用可能な
        <filename>php.exe</filename> が作成されているはずです。
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   <simpara>
    <filename>main/config.win32.h</filename> ファイルを編集すると
    ビルドプロセスでの細かい設定を行えます。
    例えば &php.ini; のデフォルトの位置を変えたり、組み込む拡張モジュールや
    拡張モジュールのデフォルトの位置を変えることができます。
   </simpara>
   <simpara>
    次に、<link linkend="features.commandline">PHP をコマンドラインから使用する</link>
    ための CLI バージョンを構築しましょう。
    <literal>php4ts_cli - Win32 Debug_TS</literal> または
    <literal>php4ts_cli - Win32 Release_TS</literal> を選択すること以外は
    CGI バージョンのビルド手順と同様です。コンパイルが成功すると
    <filename class="directory">Release_TS\cli\</filename> または
    <filename class="directory">Debug_TS\cli\</filename> ディレクトリの
    どちらかに <filename>php.exe</filename> が作成されます。
   </simpara>
   <simpara>
    Microsoft IIS 上で PHP アプリを実行するための SAPI モジュール
    (<filename>php4isapi.dll</filename>) をビルドするには、
    アクティブな設定を <filename>php4isapi-whatever-config</filename>
    にし、お望みの dll をビルドしてください。
   </simpara>
  </sect3>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
