<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.2 Maintainer: hirokawa Status: ready -->

<sect1 id="install.unix.apache">
 <title>Unix システム用 Apache 1.3.x</title>
 <para>
  本節では、PHPをUnixプラットフォームのApacheにインストールする際の注意事項と
  コツについて説明します。<link
   linkend="install.unix.apache2">Apache 2に関する手引きと注意</link>も
  別のページにあります。
 </para>   
 <para>
  以下の手順の10行目で<command>configure</command> に追加する引数を
  <link linkend="install.configure">configureのオプションの全て
  </link>から選択可能です。ここではバージョン番号が意図的に省略
  されています。'xxx'の部分を貴方が使用するファイルに対応するものに
  置き換えてください。
 </para>
 
 <example id="install.unix.apache.example">
  <title>
   PHPインストール手順 (Apache共有モジュール版)
  </title>
  <screen>
<![CDATA[
1.  gunzip apache_xxx.tar.gz
2.  tar -xvf apache_xxx.tar
3.  gunzip php-xxx.tar.gz
4.  tar -xvf php-xxx.tar
5.  cd apache_xxx
6.  ./configure --prefix=/www --enable-module=so
7.  make
8.  make install
9.  cd ../php-xxx

10. ここでPHPのconfigureを実行します。ここでは、特定の拡張モジュールを有効に
    するといった様々なオプションを指定してカスタマイズを行います。指定可能な
    オプションの一覧については、./configure --help を実行してください。以下に
    Apache 1 および MySQL のサポートを有効にする簡単な設定例を示します。

      ./configure --with-mysql --with-apxs=/www/bin/apxs

11. make
12. make install

    インストール後にconfigureオプションを変更したくなった場合は
   最後の3つの手順を繰り返してください。新しいモジュールを有効
    にするにはapacheを再起動するだけです。apacheの再コンパイルは
    必要ありません。
    
    特に断りがない限り、'make install' は、PEAR、
    phpizeのような様々なPHP関連ツール、CLI版PHPなどもインストールする
    ことに注意してください。

13. php.iniファイルを設定します。

      cp php.ini-dist /usr/local/lib/php.ini

    PHPオプションを設定するために.iniファイルを編集することになります。このファ
    イルを他の場所に置きたい場合は、手順10でオプション
    --with-config-file-path=/path を使用してください。

    php.ini-recommended を選んだ場合には、中に記載されている変更点の一覧を
    読み、PHPの動作に与える影響についてよく理解するようにしてください。

14. httpd.conf を編集し、PHPモジュールをロードするようにしてください。
    LoadModule命令の右側に記述するパスは、システムのPHPモジュールを
    指している必要があります。
    上記の make install により既にこの設定は追加されていますが、確認が必要です。

    PHP 4の場合:
            
      LoadModule php4_module libexec/libphp4.so

    PHP 5の場合:
                      
      LoadModule php5_module libexec/libphp5.so
      
15. そして、httpd.confのAddModuleセクションにおいて、
    ClearModuleListの下あたりに以下を追加してください。
    
    PHP 4の場合:
    
      AddModule mod_php4.c
 
    PHP 5の場合:     
    
      AddModule mod_php5.c

16. Apacheに特定の拡張子をPHPとしてパースするよう指示します。
    例えば、Apacheが拡張子.phpをPHPとしてパースするようにしてみましょう。
    他のあらゆる拡張子も単に空白で区切って追加するだけで、PHPとしてパース
    させることができます。ここでは、例として .phtmlを追加してみます。

      AddType application/x-httpd-php .php .phtml

    PHPのソースをハイライト表示するために、拡張子.phpsを設定することも
    よく行われます。
    
      AddType application/x-httpd-php-source .phps

17. 通常の手順により Apache サーバを起動してください。(HUPまたはUSR1シグ
    ナルを使用してリロードするのではなく)サーバを停止してから再起動す
    る必要があります。
]]>
  </screen>
 </example>

 <para>
  この他、PHPを静的オブジェクトとしてインストールすることもできます。
 </para>
 
 <example id="install.unix.apache.example-static">
  <title>
   PHPのインストール手順(Apache用静的モジュールインストール)
  </title>
  <screen>
<![CDATA[
1.  gunzip -c apache_1.3.x.tar.gz | tar xf -
2.  cd apache_1.3.x
3.  ./configure
4.  cd ..

5.  gunzip -c php-4.x.y.tar.gz | tar xf -
6.  cd php-4.x.y
7.  ./configure --with-mysql --with-apache=../apache_1.3.x
8.  make
9.  make install

10. cd ../apache_1.3.x

11. ./configure --prefix=/www --activate-module=src/modules/php4/libphp4.a
    (上の行は正しいです! そう、この段階でlibphp4.aが存在していないのは知っています。
   これはこの時点で必須ではなく、後に作成されます。)

12. make
    (ここではhttpdバイナリが必要で、最初のインストールの場合は、
   Apacheバイナリディレクトリにコピーすることができ、この後、"make install"
   を同様に行う必要があります)

13. cd ../php-4.x.y
14. cp php.ini-dist /usr/local/lib/php.ini

15. PHPオプションを設定するために /usr/local/lib/php.ini ファイルを編集可能です。
   httpd.conf または srm.conf ファイルを編集し、以下を追記してください:
    AddType application/x-httpd-php .php
]]>
  </screen>
 </example>

 <para>
  Apache のインストールやUNIXの種類によりサーバを停止し、再起動する
  方法はいくつもあります。複数のApache/UNIXの組合せについてサーバを
  再起動する際に使用される典型的な方法を以下に示します。
  <literal>/path/to/</literal> を使用するシステムのアプリケーション
  へのパスに置き換えて読んでください。
 </para>
 <para>
  <example>
   <title>Apacheを再起動するためのコマンドの例</title>
   <programlisting role="shell">
<![CDATA[
1. 複数の Linux および SysV から派生したもの:
/etc/rc.d/init.d/httpd restart

2. apachectl スクリプトを使用する方法:
/path/to/apachectl stop
/path/to/apachectl start

3. (OpenSSL を使用している場合、) apachectl と同様に httpdctl および
    httpsdctl を使用する方法:
/path/to/httpsdctl stop
/path/to/httpsdctl start

4. mod_sslまたは他のSSLサーバを使用している場合、マニュアルでstopと
   startを行うかもしれません:
/path/to/apachectl stop
/path/to/apachectl startssl
]]>
   </programlisting>
  </example>
 </para>
 <para>
  apachectl および http(s)dctl の実行ファイルの位置はシステムにより
  異なります。システムが <literal>locate</literal> または
  <literal>whereis</literal> または <literal>which</literal> を
  サポートしている場合、サーバ制御用プログラムを見つけるために使用するこ
  とが可能です。
 </para>
 
 <para>
  PHPをApache用にコンパイルする別の例を以下に示します。
  <informalexample>
   <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  これにより、共有ライブラリ <filename>libphp4.so</filename> が作成
  されます。Apacheの&httpd.conf;ファイルにおいて
  LoadModuleを使用してApacheにこのライブラリをロードすることが可能
  です。上の例では、PostgreSQLサポートがこの
  <filename>libphp4.so</filename>ライブラリに埋め込まれます。
 </para>
 <para>
  <informalexample>
   <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql=shared
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  この例でも Apache用<filename>libphp4.so</filename> 共有ライブラリ
  が作成されます。しかし、共有ライブラリ
  <filename>pgsql.so</filename> も作成されます。この共有ライブラリ
  は、&php.ini; ファイルのextensionディレクティ
  ブまたはスクリプト内で<function>dl</function>関数を使用して明示的
  にロードすることが可能です。
 </para>
 <para>
  <informalexample>
   <programlisting role="shell">
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  これにより、<filename>libmodphp4.a</filename> ライブラリと
  <filename>mod_php4.c</filename> およびいくつかの付属ファ
  イルが作成され、Apacheにソースツリーのディレクトリ
  <literal>src/modules/php4</literal> にコピーされます。続いて、
  <literal>--activate-module=src/modules/php4/libphp4.a</literal>
  を指定してApacheをコンパイルしてください。これにより、Apache構築シ
  ステムは、<filename>libphp4.a</filename> を作成し、
  <filename>httpd</filename> バイナリに静的にリンクされます。
  PostgreSQL サポートはこの<filename>httpd</filename>バイナリに直接
  インクルードされるため、最終的な結果は、Apache全体とPHP全体を含む
  単一の<filename>httpd</filename>バイナリになります。
 </para>
 <para>
  <informalexample>
   <programlisting role="shell">
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql=shared
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  上と同じですが、最終的な<filename>httpd</filename>に
  PostgreSQLサポートを直接インクルードする代わりに、共有ライブラリ
  <filename>pgsql.so</filename>をファイル
  &php.ini;または<function>dl</function>により直
  接的にPHPにロードすることが可能です。
 </para>
 <para>
  異なったPHPの構築法を選択する際、各方法の利点と欠点を考慮する必要
  があります。共有オブジェクトとして構築する場合、Apacheと分割して
  コンパイルすることが可能で、PHPを追加または変更する際に全体を再コ
  ンパイルする必要がありません。PHPをApacheに(静的に)組み込む場合に
  は、PHPはより高速にロード/実行することが可能です。詳細な情報につ
  いては、Apacheの<ulink url="&url.apachedso;">DSOサポートのWebページ
  </ulink>を参照ください。
 </para>
 <note>
  <para>
   Apacheのデフォルトの&httpd.conf;は次のようなセクションがあります。
   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
User nobody
Group "#-1"
]]>
    </programlisting>
   </informalexample>
   これを"Group nogroup"やそれに類する値("Group daemon"も一般的です)に変更しない
   限り、PHPはファイルをオープンすることができません。
  </para>
 </note>  
 <note>
  <para>
   <option role="configure">--with-apxs=/path/to/apxs</option>オプションを
   指定する場合にはインストールされているバージョンのapxsを指定してください。
   Apacheのソースディレクトリ内にあるapxsバージョンではなく
   実際にシステムにインストールされているものでなければなりません。
  </para>
 </note>   
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
